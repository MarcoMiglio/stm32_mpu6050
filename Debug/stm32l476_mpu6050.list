
stm32l476_mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004e3c  08004e3c  00005e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ed4  08004ed4  00006074  2**0
                  CONTENTS
  4 .ARM          00000008  08004ed4  08004ed4  00005ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004edc  08004edc  00006074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004edc  08004edc  00005edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ee0  08004ee0  00005ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08004ee4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000074  08004f58  00006074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08004f58  000062c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd7a  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002128  00000000  00000000  00015e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00017f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be0  00000000  00000000  00018ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002766f  00000000  00000000  00019a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c81  00000000  00000000  000410ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edebc  00000000  00000000  00051d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013fc2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000463c  00000000  00000000  0013fc70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001442ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e24 	.word	0x08004e24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08004e24 	.word	0x08004e24

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fdcd 	bl	800105c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f82f 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f8ef 	bl	80006a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ca:	f000 f8bd 	bl	8000648 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004ce:	f000 f87b 	bl	80005c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  printf("Starting...\r\n");
 80004d2:	480f      	ldr	r0, [pc, #60]	@ (8000510 <main+0x58>)
 80004d4:	f004 f912 	bl	80046fc <puts>

  MPU6050_reset(&hi2c1);
 80004d8:	480e      	ldr	r0, [pc, #56]	@ (8000514 <main+0x5c>)
 80004da:	f000 fb1d 	bl	8000b18 <MPU6050_reset>
  HAL_Delay(50);
 80004de:	2032      	movs	r0, #50	@ 0x32
 80004e0:	f000 fe38 	bl	8001154 <HAL_Delay>

  uint8_t check = MPU6050_Initialize(&hi2c1, A2G, G250DPS, MPU6050_offsets);
 80004e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000518 <main+0x60>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	480a      	ldr	r0, [pc, #40]	@ (8000514 <main+0x5c>)
 80004ec:	f000 fa3a 	bl	8000964 <MPU6050_Initialize>
 80004f0:	4603      	mov	r3, r0
 80004f2:	71fb      	strb	r3, [r7, #7]

  if (check == 0){ // If no errors during initialization
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d103      	bne.n	8000502 <main+0x4a>
    printf("IMU Initialized! \r\n");
 80004fa:	4808      	ldr	r0, [pc, #32]	@ (800051c <main+0x64>)
 80004fc:	f004 f8fe 	bl	80046fc <puts>
 8000500:	e004      	b.n	800050c <main+0x54>
  } else {
    printf("An error occured during initializiation! \r\n");
 8000502:	4807      	ldr	r0, [pc, #28]	@ (8000520 <main+0x68>)
 8000504:	f004 f8fa 	bl	80046fc <puts>

    while(1){/* block code execution */}
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <main+0x50>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050c:	e7fe      	b.n	800050c <main+0x54>
 800050e:	bf00      	nop
 8000510:	08004e3c 	.word	0x08004e3c
 8000514:	20000090 	.word	0x20000090
 8000518:	20000000 	.word	0x20000000
 800051c:	08004e4c 	.word	0x08004e4c
 8000520:	08004e60 	.word	0x08004e60

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b096      	sub	sp, #88	@ 0x58
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	2244      	movs	r2, #68	@ 0x44
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f004 f8ea 	bl	800470c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	463b      	mov	r3, r7
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000546:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800054a:	f001 ff01 	bl	8002350 <HAL_PWREx_ControlVoltageScaling>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000554:	f000 f924 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000558:	2302      	movs	r3, #2
 800055a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000560:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000562:	2310      	movs	r3, #16
 8000564:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056a:	2302      	movs	r3, #2
 800056c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800056e:	2301      	movs	r3, #1
 8000570:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000572:	230a      	movs	r3, #10
 8000574:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000576:	2307      	movs	r3, #7
 8000578:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4618      	mov	r0, r3
 8000588:	f001 ff38 	bl	80023fc <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000592:	f000 f905 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2303      	movs	r3, #3
 800059c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005aa:	463b      	mov	r3, r7
 80005ac:	2104      	movs	r1, #4
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fb00 	bl	8002bb4 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ba:	f000 f8f1 	bl	80007a0 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3758      	adds	r7, #88	@ 0x58
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005cc:	4b1b      	ldr	r3, [pc, #108]	@ (800063c <MX_I2C1_Init+0x74>)
 80005ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000640 <MX_I2C1_Init+0x78>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <MX_I2C1_Init+0x74>)
 80005d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000644 <MX_I2C1_Init+0x7c>)
 80005d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005d8:	4b18      	ldr	r3, [pc, #96]	@ (800063c <MX_I2C1_Init+0x74>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005de:	4b17      	ldr	r3, [pc, #92]	@ (800063c <MX_I2C1_Init+0x74>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e4:	4b15      	ldr	r3, [pc, #84]	@ (800063c <MX_I2C1_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ea:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_I2C1_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <MX_I2C1_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_I2C1_Init+0x74>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_I2C1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000602:	480e      	ldr	r0, [pc, #56]	@ (800063c <MX_I2C1_Init+0x74>)
 8000604:	f001 f872 	bl	80016ec <HAL_I2C_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800060e:	f000 f8c7 	bl	80007a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000612:	2100      	movs	r1, #0
 8000614:	4809      	ldr	r0, [pc, #36]	@ (800063c <MX_I2C1_Init+0x74>)
 8000616:	f001 fdf5 	bl	8002204 <HAL_I2CEx_ConfigAnalogFilter>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000620:	f000 f8be 	bl	80007a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000624:	2100      	movs	r1, #0
 8000626:	4805      	ldr	r0, [pc, #20]	@ (800063c <MX_I2C1_Init+0x74>)
 8000628:	f001 fe37 	bl	800229a <HAL_I2CEx_ConfigDigitalFilter>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000632:	f000 f8b5 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000090 	.word	0x20000090
 8000640:	40005400 	.word	0x40005400
 8000644:	00702991 	.word	0x00702991

08000648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800064c:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800064e:	4a15      	ldr	r2, [pc, #84]	@ (80006a4 <MX_USART2_UART_Init+0x5c>)
 8000650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000652:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000654:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800068c:	f003 f972 	bl	8003974 <HAL_UART_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000696:	f000 f883 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200000e4 	.word	0x200000e4
 80006a4:	40004400 	.word	0x40004400

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	@ 0x28
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b2b      	ldr	r3, [pc, #172]	@ (800076c <MX_GPIO_Init+0xc4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	4a2a      	ldr	r2, [pc, #168]	@ (800076c <MX_GPIO_Init+0xc4>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ca:	4b28      	ldr	r3, [pc, #160]	@ (800076c <MX_GPIO_Init+0xc4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	4b25      	ldr	r3, [pc, #148]	@ (800076c <MX_GPIO_Init+0xc4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	4a24      	ldr	r2, [pc, #144]	@ (800076c <MX_GPIO_Init+0xc4>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e2:	4b22      	ldr	r3, [pc, #136]	@ (800076c <MX_GPIO_Init+0xc4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <MX_GPIO_Init+0xc4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	4a1e      	ldr	r2, [pc, #120]	@ (800076c <MX_GPIO_Init+0xc4>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fa:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <MX_GPIO_Init+0xc4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b19      	ldr	r3, [pc, #100]	@ (800076c <MX_GPIO_Init+0xc4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	4a18      	ldr	r2, [pc, #96]	@ (800076c <MX_GPIO_Init+0xc4>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000712:	4b16      	ldr	r3, [pc, #88]	@ (800076c <MX_GPIO_Init+0xc4>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2120      	movs	r1, #32
 8000722:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000726:	f000 ffc9 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800072a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000730:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	480b      	ldr	r0, [pc, #44]	@ (8000770 <MX_GPIO_Init+0xc8>)
 8000742:	f000 fe11 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000746:	2320      	movs	r3, #32
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000760:	f000 fe02 	bl	8001368 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	@ 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40021000 	.word	0x40021000
 8000770:	48000800 	.word	0x48000800

08000774 <_write>:

/* USER CODE BEGIN 4 */

// Function to redirect printf output to UART
int _write(int file, char *ptr, int len)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	b29a      	uxth	r2, r3
 8000784:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	4804      	ldr	r0, [pc, #16]	@ (800079c <_write+0x28>)
 800078c:	f003 f940 	bl	8003a10 <HAL_UART_Transmit>
  return len;
 8000790:	687b      	ldr	r3, [r7, #4]
}
 8000792:	4618      	mov	r0, r3
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000e4 	.word	0x200000e4

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <Error_Handler+0x8>

080007ac <I2Cdev_writeBit>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
HAL_StatusTypeDef I2Cdev_writeBit(I2C_HandleTypeDef *I2Cx, uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af04      	add	r7, sp, #16
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	4608      	mov	r0, r1
 80007b6:	4611      	mov	r1, r2
 80007b8:	461a      	mov	r2, r3
 80007ba:	4603      	mov	r3, r0
 80007bc:	70fb      	strb	r3, [r7, #3]
 80007be:	460b      	mov	r3, r1
 80007c0:	70bb      	strb	r3, [r7, #2]
 80007c2:	4613      	mov	r3, r2
 80007c4:	707b      	strb	r3, [r7, #1]
  uint8_t b;
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(I2Cx, devAddr, regAddr, 1, &b, 1, HAL_MAX_DELAY);
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	b299      	uxth	r1, r3
 80007ca:	78bb      	ldrb	r3, [r7, #2]
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007d2:	9302      	str	r3, [sp, #8]
 80007d4:	2301      	movs	r3, #1
 80007d6:	9301      	str	r3, [sp, #4]
 80007d8:	f107 030e 	add.w	r3, r7, #14
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2301      	movs	r3, #1
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f001 f933 	bl	8001a4c <HAL_I2C_Mem_Read>
 80007e6:	4603      	mov	r3, r0
 80007e8:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK) {
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d12c      	bne.n	800084a <I2Cdev_writeBit+0x9e>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 80007f0:	7e3b      	ldrb	r3, [r7, #24]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d00a      	beq.n	800080c <I2Cdev_writeBit+0x60>
 80007f6:	787b      	ldrb	r3, [r7, #1]
 80007f8:	2201      	movs	r2, #1
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	b25a      	sxtb	r2, r3
 8000800:	7bbb      	ldrb	r3, [r7, #14]
 8000802:	b25b      	sxtb	r3, r3
 8000804:	4313      	orrs	r3, r2
 8000806:	b25b      	sxtb	r3, r3
 8000808:	b2db      	uxtb	r3, r3
 800080a:	e00b      	b.n	8000824 <I2Cdev_writeBit+0x78>
 800080c:	787b      	ldrb	r3, [r7, #1]
 800080e:	2201      	movs	r2, #1
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	b25b      	sxtb	r3, r3
 8000816:	43db      	mvns	r3, r3
 8000818:	b25a      	sxtb	r2, r3
 800081a:	7bbb      	ldrb	r3, [r7, #14]
 800081c:	b25b      	sxtb	r3, r3
 800081e:	4013      	ands	r3, r2
 8000820:	b25b      	sxtb	r3, r3
 8000822:	b2db      	uxtb	r3, r3
 8000824:	73bb      	strb	r3, [r7, #14]
    status = HAL_I2C_Mem_Write(I2Cx, devAddr, regAddr, 1, &b, 1, HAL_MAX_DELAY);
 8000826:	78fb      	ldrb	r3, [r7, #3]
 8000828:	b299      	uxth	r1, r3
 800082a:	78bb      	ldrb	r3, [r7, #2]
 800082c:	b29a      	uxth	r2, r3
 800082e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000832:	9302      	str	r3, [sp, #8]
 8000834:	2301      	movs	r3, #1
 8000836:	9301      	str	r3, [sp, #4]
 8000838:	f107 030e 	add.w	r3, r7, #14
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2301      	movs	r3, #1
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f000 ffef 	bl	8001824 <HAL_I2C_Mem_Write>
 8000846:	4603      	mov	r3, r0
 8000848:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800084a:	7bfb      	ldrb	r3, [r7, #15]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <I2Cdev_writeBits>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
HAL_StatusTypeDef I2Cdev_writeBits(I2C_HandleTypeDef *I2Cx, uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af04      	add	r7, sp, #16
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	4608      	mov	r0, r1
 800085e:	4611      	mov	r1, r2
 8000860:	461a      	mov	r2, r3
 8000862:	4603      	mov	r3, r0
 8000864:	70fb      	strb	r3, [r7, #3]
 8000866:	460b      	mov	r3, r1
 8000868:	70bb      	strb	r3, [r7, #2]
 800086a:	4613      	mov	r3, r2
 800086c:	707b      	strb	r3, [r7, #1]
  // 10101111 original value (sample)
  // 10100011 original & ~mask
  // 10101011 masked | value
  uint8_t b;

  if (HAL_I2C_Mem_Read(I2Cx, devAddr, regAddr, 1, &b, 1, HAL_MAX_DELAY) == HAL_OK) {
 800086e:	78fb      	ldrb	r3, [r7, #3]
 8000870:	b299      	uxth	r1, r3
 8000872:	78bb      	ldrb	r3, [r7, #2]
 8000874:	b29a      	uxth	r2, r3
 8000876:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800087a:	9302      	str	r3, [sp, #8]
 800087c:	2301      	movs	r3, #1
 800087e:	9301      	str	r3, [sp, #4]
 8000880:	f107 030e 	add.w	r3, r7, #14
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f001 f8df 	bl	8001a4c <HAL_I2C_Mem_Read>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d138      	bne.n	8000906 <I2Cdev_writeBits+0xb2>
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1); // (1 << length)-1: creates length-subsequent ones
 8000894:	7e3b      	ldrb	r3, [r7, #24]
 8000896:	2201      	movs	r2, #1
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	1e5a      	subs	r2, r3, #1
 800089e:	7879      	ldrb	r1, [r7, #1]
 80008a0:	7e3b      	ldrb	r3, [r7, #24]
 80008a2:	1acb      	subs	r3, r1, r3
 80008a4:	3301      	adds	r3, #1
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	73fb      	strb	r3, [r7, #15]
                                   // Then the mask is shifted into correct position
    data <<= (bitStart - length + 1); // shift data into correct position
 80008ac:	7f3a      	ldrb	r2, [r7, #28]
 80008ae:	7879      	ldrb	r1, [r7, #1]
 80008b0:	7e3b      	ldrb	r3, [r7, #24]
 80008b2:	1acb      	subs	r3, r1, r3
 80008b4:	3301      	adds	r3, #1
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	773b      	strb	r3, [r7, #28]
    data &= mask; // zero all non-important bits in data
 80008bc:	7f3a      	ldrb	r2, [r7, #28]
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	4013      	ands	r3, r2
 80008c2:	773b      	strb	r3, [r7, #28]
    b &= ~(mask); // zero all important bits in existing byte
 80008c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c8:	43db      	mvns	r3, r3
 80008ca:	b25a      	sxtb	r2, r3
 80008cc:	7bbb      	ldrb	r3, [r7, #14]
 80008ce:	b25b      	sxtb	r3, r3
 80008d0:	4013      	ands	r3, r2
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	73bb      	strb	r3, [r7, #14]
    b |= data; // combine data with existing byte
 80008d8:	7bba      	ldrb	r2, [r7, #14]
 80008da:	7f3b      	ldrb	r3, [r7, #28]
 80008dc:	4313      	orrs	r3, r2
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	73bb      	strb	r3, [r7, #14]
    return HAL_I2C_Mem_Write(I2Cx, devAddr, regAddr, 1, &b, 1, HAL_MAX_DELAY);
 80008e2:	78fb      	ldrb	r3, [r7, #3]
 80008e4:	b299      	uxth	r1, r3
 80008e6:	78bb      	ldrb	r3, [r7, #2]
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008ee:	9302      	str	r3, [sp, #8]
 80008f0:	2301      	movs	r3, #1
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	f107 030e 	add.w	r3, r7, #14
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2301      	movs	r3, #1
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f000 ff91 	bl	8001824 <HAL_I2C_Mem_Write>
 8000902:	4603      	mov	r3, r0
 8000904:	e000      	b.n	8000908 <I2Cdev_writeBits+0xb4>
  } else {
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
  }
}
 8000908:	4618      	mov	r0, r3
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <I2Cdev_writeWord>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New word value to write
 * @return Status of operation (true = success)
 */
HAL_StatusTypeDef I2Cdev_writeWord(I2C_HandleTypeDef *I2Cx, uint8_t devAddr, uint8_t regAddr, uint16_t value) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af04      	add	r7, sp, #16
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	4608      	mov	r0, r1
 800091a:	4611      	mov	r1, r2
 800091c:	461a      	mov	r2, r3
 800091e:	4603      	mov	r3, r0
 8000920:	70fb      	strb	r3, [r7, #3]
 8000922:	460b      	mov	r3, r1
 8000924:	70bb      	strb	r3, [r7, #2]
 8000926:	4613      	mov	r3, r2
 8000928:	803b      	strh	r3, [r7, #0]
  uint8_t data[2];
  data[0] = (uint8_t)(value >> 8);    // Most significant byte;
 800092a:	883b      	ldrh	r3, [r7, #0]
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	b29b      	uxth	r3, r3
 8000930:	b2db      	uxtb	r3, r3
 8000932:	733b      	strb	r3, [r7, #12]
  data[1] = (uint8_t)(value & 0xFF);  // Least significant byte;
 8000934:	883b      	ldrh	r3, [r7, #0]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	737b      	strb	r3, [r7, #13]
  return HAL_I2C_Mem_Write(I2Cx, devAddr, regAddr, 1, data, 2, HAL_MAX_DELAY);
 800093a:	78fb      	ldrb	r3, [r7, #3]
 800093c:	b299      	uxth	r1, r3
 800093e:	78bb      	ldrb	r3, [r7, #2]
 8000940:	b29a      	uxth	r2, r3
 8000942:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000946:	9302      	str	r3, [sp, #8]
 8000948:	2302      	movs	r3, #2
 800094a:	9301      	str	r3, [sp, #4]
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	2301      	movs	r3, #1
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f000 ff65 	bl	8001824 <HAL_I2C_Mem_Write>
 800095a:	4603      	mov	r3, r0
}
 800095c:	4618      	mov	r0, r3
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <MPU6050_Initialize>:
 * @param gyroRange gyroscope FS range, see GYRO_FS in mpu6050.h
 * @param offsets pointer to buffer containing offsets for both accelerometer and gyroscope
 * @return initialization status (true if correctly done)
 */
uint8_t MPU6050_Initialize(I2C_HandleTypeDef *I2Cx, ACCEL_FS accelRange, GYRO_FS gyroRange, int16_t* offsets)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	@ 0x28
 8000968:	af04      	add	r7, sp, #16
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	460b      	mov	r3, r1
 8000970:	72fb      	strb	r3, [r7, #11]
 8000972:	4613      	mov	r3, r2
 8000974:	72bb      	strb	r3, [r7, #10]
  uint8_t check;
  uint8_t Data;

  // check device ID WHO_AM_I

  HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 100);
 8000976:	2364      	movs	r3, #100	@ 0x64
 8000978:	9302      	str	r3, [sp, #8]
 800097a:	2301      	movs	r3, #1
 800097c:	9301      	str	r3, [sp, #4]
 800097e:	f107 0317 	add.w	r3, r7, #23
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	2301      	movs	r3, #1
 8000986:	2275      	movs	r2, #117	@ 0x75
 8000988:	21d0      	movs	r1, #208	@ 0xd0
 800098a:	68f8      	ldr	r0, [r7, #12]
 800098c:	f001 f85e 	bl	8001a4c <HAL_I2C_Mem_Read>

  if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8000990:	7dfb      	ldrb	r3, [r7, #23]
 8000992:	2b68      	cmp	r3, #104	@ 0x68
 8000994:	f040 80af 	bne.w	8000af6 <MPU6050_Initialize+0x192>
  {
    // Power management register 0X6B we should write all 0's to wake the sensor up
    // Also reset all the registers status
    Data = 0x00;
 8000998:	2300      	movs	r3, #0
 800099a:	75bb      	strb	r3, [r7, #22]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 100);
 800099c:	2364      	movs	r3, #100	@ 0x64
 800099e:	9302      	str	r3, [sp, #8]
 80009a0:	2301      	movs	r3, #1
 80009a2:	9301      	str	r3, [sp, #4]
 80009a4:	f107 0316 	add.w	r3, r7, #22
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2301      	movs	r3, #1
 80009ac:	226b      	movs	r2, #107	@ 0x6b
 80009ae:	21d0      	movs	r1, #208	@ 0xd0
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	f000 ff37 	bl	8001824 <HAL_I2C_Mem_Write>

    // Set accelerometer configuration in ACCEL_CONFIG Register
    switch (accelRange)
 80009b6:	7afb      	ldrb	r3, [r7, #11]
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	d82f      	bhi.n	8000a1c <MPU6050_Initialize+0xb8>
 80009bc:	a201      	add	r2, pc, #4	@ (adr r2, 80009c4 <MPU6050_Initialize+0x60>)
 80009be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c2:	bf00      	nop
 80009c4:	080009d5 	.word	0x080009d5
 80009c8:	080009e7 	.word	0x080009e7
 80009cc:	080009f9 	.word	0x080009f9
 80009d0:	08000a0b 	.word	0x08000a0b
    {
      case A2G:
      MPU6050_setFullScaleAccelRange(I2Cx, MPU6050_ACCEL_FS_2);
 80009d4:	2100      	movs	r1, #0
 80009d6:	68f8      	ldr	r0, [r7, #12]
 80009d8:	f000 f8d5 	bl	8000b86 <MPU6050_setFullScaleAccelRange>
      accelerationResolution = 2.0 / 32768.0;
 80009dc:	4b48      	ldr	r3, [pc, #288]	@ (8000b00 <MPU6050_Initialize+0x19c>)
 80009de:	f04f 5262 	mov.w	r2, #947912704	@ 0x38800000
 80009e2:	601a      	str	r2, [r3, #0]
      break;
 80009e4:	e01c      	b.n	8000a20 <MPU6050_Initialize+0xbc>

      case A4G:
      MPU6050_setFullScaleAccelRange(I2Cx, MPU6050_ACCEL_FS_4);
 80009e6:	2101      	movs	r1, #1
 80009e8:	68f8      	ldr	r0, [r7, #12]
 80009ea:	f000 f8cc 	bl	8000b86 <MPU6050_setFullScaleAccelRange>
      accelerationResolution = 4.0 / 32768.0;
 80009ee:	4b44      	ldr	r3, [pc, #272]	@ (8000b00 <MPU6050_Initialize+0x19c>)
 80009f0:	f04f 5264 	mov.w	r2, #956301312	@ 0x39000000
 80009f4:	601a      	str	r2, [r3, #0]
      break;
 80009f6:	e013      	b.n	8000a20 <MPU6050_Initialize+0xbc>

      case A8G:
      MPU6050_setFullScaleAccelRange(I2Cx, MPU6050_ACCEL_FS_8);
 80009f8:	2102      	movs	r1, #2
 80009fa:	68f8      	ldr	r0, [r7, #12]
 80009fc:	f000 f8c3 	bl	8000b86 <MPU6050_setFullScaleAccelRange>
      accelerationResolution = 8.0 / 32768.0;
 8000a00:	4b3f      	ldr	r3, [pc, #252]	@ (8000b00 <MPU6050_Initialize+0x19c>)
 8000a02:	f04f 5266 	mov.w	r2, #964689920	@ 0x39800000
 8000a06:	601a      	str	r2, [r3, #0]
      break;
 8000a08:	e00a      	b.n	8000a20 <MPU6050_Initialize+0xbc>

      case A16G:
      MPU6050_setFullScaleAccelRange(I2Cx, MPU6050_ACCEL_FS_16);
 8000a0a:	2103      	movs	r1, #3
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f000 f8ba 	bl	8000b86 <MPU6050_setFullScaleAccelRange>
      accelerationResolution = 16.0 / 32768.0;
 8000a12:	4b3b      	ldr	r3, [pc, #236]	@ (8000b00 <MPU6050_Initialize+0x19c>)
 8000a14:	f04f 5268 	mov.w	r2, #973078528	@ 0x3a000000
 8000a18:	601a      	str	r2, [r3, #0]
      break;
 8000a1a:	e001      	b.n	8000a20 <MPU6050_Initialize+0xbc>

      default:
      return 1;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e06b      	b.n	8000af8 <MPU6050_Initialize+0x194>
    }

    // Set Gyroscope configuration in GYRO_CONFIG Register
    switch (gyroRange)
 8000a20:	7abb      	ldrb	r3, [r7, #10]
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d82a      	bhi.n	8000a7c <MPU6050_Initialize+0x118>
 8000a26:	a201      	add	r2, pc, #4	@ (adr r2, 8000a2c <MPU6050_Initialize+0xc8>)
 8000a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2c:	08000a3d 	.word	0x08000a3d
 8000a30:	08000a4d 	.word	0x08000a4d
 8000a34:	08000a5d 	.word	0x08000a5d
 8000a38:	08000a6d 	.word	0x08000a6d
    {
      case G250DPS:
      MPU6050_setFullScaleGyroRange(I2Cx, MPU6050_GYRO_FS_250);
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f000 f8b5 	bl	8000bae <MPU6050_setFullScaleGyroRange>
      gyroscopeResolution = 250.0 / 32768.0;
 8000a44:	4b2f      	ldr	r3, [pc, #188]	@ (8000b04 <MPU6050_Initialize+0x1a0>)
 8000a46:	4a30      	ldr	r2, [pc, #192]	@ (8000b08 <MPU6050_Initialize+0x1a4>)
 8000a48:	601a      	str	r2, [r3, #0]
      break;
 8000a4a:	e019      	b.n	8000a80 <MPU6050_Initialize+0x11c>

      case G500DPS:
      MPU6050_setFullScaleGyroRange(I2Cx, MPU6050_GYRO_FS_500);
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f000 f8ad 	bl	8000bae <MPU6050_setFullScaleGyroRange>
      gyroscopeResolution = 500.0 / 32768.0;
 8000a54:	4b2b      	ldr	r3, [pc, #172]	@ (8000b04 <MPU6050_Initialize+0x1a0>)
 8000a56:	4a2d      	ldr	r2, [pc, #180]	@ (8000b0c <MPU6050_Initialize+0x1a8>)
 8000a58:	601a      	str	r2, [r3, #0]
      break;
 8000a5a:	e011      	b.n	8000a80 <MPU6050_Initialize+0x11c>

      case G1000DPS:
      MPU6050_setFullScaleGyroRange(I2Cx, MPU6050_GYRO_FS_1000);
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	68f8      	ldr	r0, [r7, #12]
 8000a60:	f000 f8a5 	bl	8000bae <MPU6050_setFullScaleGyroRange>
      gyroscopeResolution = 1000.0 / 32768.0;
 8000a64:	4b27      	ldr	r3, [pc, #156]	@ (8000b04 <MPU6050_Initialize+0x1a0>)
 8000a66:	4a2a      	ldr	r2, [pc, #168]	@ (8000b10 <MPU6050_Initialize+0x1ac>)
 8000a68:	601a      	str	r2, [r3, #0]
      break;
 8000a6a:	e009      	b.n	8000a80 <MPU6050_Initialize+0x11c>

      case G2000DPS:
      MPU6050_setFullScaleGyroRange(I2Cx, MPU6050_GYRO_FS_2000);
 8000a6c:	2103      	movs	r1, #3
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	f000 f89d 	bl	8000bae <MPU6050_setFullScaleGyroRange>
      gyroscopeResolution = 2000.0 / 32768.0;
 8000a74:	4b23      	ldr	r3, [pc, #140]	@ (8000b04 <MPU6050_Initialize+0x1a0>)
 8000a76:	4a27      	ldr	r2, [pc, #156]	@ (8000b14 <MPU6050_Initialize+0x1b0>)
 8000a78:	601a      	str	r2, [r3, #0]
      break;
 8000a7a:	e001      	b.n	8000a80 <MPU6050_Initialize+0x11c>

      default:
      return 1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e03b      	b.n	8000af8 <MPU6050_Initialize+0x194>
    }

    // make sure everything is running:
    MPU6050_setSleepEnabled(I2Cx, false);
 8000a80:	2100      	movs	r1, #0
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f000 f858 	bl	8000b38 <MPU6050_setSleepEnabled>

    // set correct offset values:
    MPU6050_setXAccelOffset(I2Cx, offsets[0]);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f000 f8b2 	bl	8000bfa <MPU6050_setXAccelOffset>
    MPU6050_setYAccelOffset(I2Cx, offsets[1]);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	3302      	adds	r3, #2
 8000a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f000 f8ba 	bl	8000c1a <MPU6050_setYAccelOffset>
    MPU6050_setZAccelOffset(I2Cx, offsets[2]);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	68f8      	ldr	r0, [r7, #12]
 8000ab2:	f000 f8c2 	bl	8000c3a <MPU6050_setZAccelOffset>

    MPU6050_setXGyroOffset(I2Cx, offsets[3]);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3306      	adds	r3, #6
 8000aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	68f8      	ldr	r0, [r7, #12]
 8000ac2:	f000 f8ca 	bl	8000c5a <MPU6050_setXGyroOffset>
    MPU6050_setYGyroOffset(I2Cx, offsets[4]);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	3308      	adds	r3, #8
 8000aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	68f8      	ldr	r0, [r7, #12]
 8000ad2:	f000 f8d2 	bl	8000c7a <MPU6050_setYGyroOffset>
    MPU6050_setZGyroOffset(I2Cx, offsets[5]);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	330a      	adds	r3, #10
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	4619      	mov	r1, r3
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f000 f8da 	bl	8000c9a <MPU6050_setZGyroOffset>

    // turn off temperature sensor, saves ~ 60 uA in active mode
    MPU6050_setTempSensorEnabled(I2Cx, 0);
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	68f8      	ldr	r0, [r7, #12]
 8000aea:	f000 f837 	bl	8000b5c <MPU6050_setTempSensorEnabled>

    // turn off internal DMP, saves ~ 100 uA in active mode
    MPU6050_setDMPEnabled(I2Cx, 0);
 8000aee:	2100      	movs	r1, #0
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f000 f870 	bl	8000bd6 <MPU6050_setDMPEnabled>
  }
  return 0;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	2000016c 	.word	0x2000016c
 8000b04:	20000170 	.word	0x20000170
 8000b08:	3bfa0000 	.word	0x3bfa0000
 8000b0c:	3c7a0000 	.word	0x3c7a0000
 8000b10:	3cfa0000 	.word	0x3cfa0000
 8000b14:	3d7a0000 	.word	0x3d7a0000

08000b18 <MPU6050_reset>:
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050_reset(I2C_HandleTypeDef *I2Cx) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	6078      	str	r0, [r7, #4]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 8000b20:	2301      	movs	r3, #1
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2307      	movs	r3, #7
 8000b26:	226b      	movs	r2, #107	@ 0x6b
 8000b28:	21d0      	movs	r1, #208	@ 0xd0
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff fe3e 	bl	80007ac <I2Cdev_writeBit>
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <MPU6050_setSleepEnabled>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see PWR_MGMT_1_REG
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050_setSleepEnabled(I2C_HandleTypeDef *I2Cx, bool enabled){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af02      	add	r7, sp, #8
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, MPU6050_PWR1_SLEEP_BIT, enabled);
 8000b44:	78fb      	ldrb	r3, [r7, #3]
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2306      	movs	r3, #6
 8000b4a:	226b      	movs	r2, #107	@ 0x6b
 8000b4c:	21d0      	movs	r1, #208	@ 0xd0
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff fe2c 	bl	80007ac <I2Cdev_writeBit>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <MPU6050_setTempSensorEnabled>:
 * @param enabled New temperature sensor enabled status
 * @see getTempSensorEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_TEMP_DIS_BIT
 */
void MPU6050_setTempSensorEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af02      	add	r7, sp, #8
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	70fb      	strb	r3, [r7, #3]
  // 1 is actually disabled here
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, MPU6050_PWR1_TEMP_DIS_BIT, !enabled);
 8000b68:	78fb      	ldrb	r3, [r7, #3]
 8000b6a:	f083 0301 	eor.w	r3, r3, #1
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2303      	movs	r3, #3
 8000b74:	226b      	movs	r2, #107	@ 0x6b
 8000b76:	21d0      	movs	r1, #208	@ 0xd0
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff fe17 	bl	80007ac <I2Cdev_writeBit>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <MPU6050_setFullScaleAccelRange>:
/** Set full-scale accelerometer range.
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050_setFullScaleAccelRange(I2C_HandleTypeDef *I2Cx, uint8_t range) {
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af02      	add	r7, sp, #8
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBits(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 8000b92:	78fb      	ldrb	r3, [r7, #3]
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	2302      	movs	r3, #2
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	221c      	movs	r2, #28
 8000b9e:	21d0      	movs	r1, #208	@ 0xd0
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff fe57 	bl	8000854 <I2Cdev_writeBits>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <MPU6050_setFullScaleGyroRange>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050_setFullScaleGyroRange(I2C_HandleTypeDef *I2Cx, uint8_t range) {
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b084      	sub	sp, #16
 8000bb2:	af02      	add	r7, sp, #8
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBits(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8000bba:	78fb      	ldrb	r3, [r7, #3]
 8000bbc:	9301      	str	r3, [sp, #4]
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	221b      	movs	r2, #27
 8000bc6:	21d0      	movs	r1, #208	@ 0xd0
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff fe43 	bl	8000854 <I2Cdev_writeBits>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <MPU6050_setDMPEnabled>:
 *
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param enabled updated DMP status
 * @see gitHub page, no documentation provided about this register
 */
void MPU6050_setDMPEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b084      	sub	sp, #16
 8000bda:	af02      	add	r7, sp, #8
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	460b      	mov	r3, r1
 8000be0:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, USER_CTRL_REG, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 8000be2:	78fb      	ldrb	r3, [r7, #3]
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2307      	movs	r3, #7
 8000be8:	226a      	movs	r2, #106	@ 0x6a
 8000bea:	21d0      	movs	r1, #208	@ 0xd0
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff fddd 	bl	80007ac <I2Cdev_writeBit>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <MPU6050_setXAccelOffset>:

/** Update accelerometer x-axis offset
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param offset 16-bit signed integer container for new offset value
 */
void MPU6050_setXAccelOffset(I2C_HandleTypeDef *I2Cx, int16_t offset) {
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	460b      	mov	r3, r1
 8000c04:	807b      	strh	r3, [r7, #2]
  I2Cdev_writeWord(I2Cx, MPU6050_ADDR, XA_OFFS_H, offset);
 8000c06:	887b      	ldrh	r3, [r7, #2]
 8000c08:	2206      	movs	r2, #6
 8000c0a:	21d0      	movs	r1, #208	@ 0xd0
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fe7f 	bl	8000910 <I2Cdev_writeWord>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <MPU6050_setYAccelOffset>:

/** Update accelerometer y-axis offset
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param offset 16-bit signed integer container for new offset value
 */
void MPU6050_setYAccelOffset(I2C_HandleTypeDef *I2Cx, int16_t offset) {
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	460b      	mov	r3, r1
 8000c24:	807b      	strh	r3, [r7, #2]
  I2Cdev_writeWord(I2Cx, MPU6050_ADDR, YA_OFFS_H, offset);
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	2208      	movs	r2, #8
 8000c2a:	21d0      	movs	r1, #208	@ 0xd0
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fe6f 	bl	8000910 <I2Cdev_writeWord>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <MPU6050_setZAccelOffset>:

/** Update accelerometer z-axis offset
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param offset 16-bit signed integer container for new offset value
 */
void MPU6050_setZAccelOffset(I2C_HandleTypeDef *I2Cx, int16_t offset) {
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
 8000c42:	460b      	mov	r3, r1
 8000c44:	807b      	strh	r3, [r7, #2]
  I2Cdev_writeWord(I2Cx, MPU6050_ADDR, ZA_OFFS_H, offset);
 8000c46:	887b      	ldrh	r3, [r7, #2]
 8000c48:	220a      	movs	r2, #10
 8000c4a:	21d0      	movs	r1, #208	@ 0xd0
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff fe5f 	bl	8000910 <I2Cdev_writeWord>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <MPU6050_setXGyroOffset>:

/** Update gyroscope x-axis offset
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param offset 16-bit signed integer container for new offset value
 */
void MPU6050_setXGyroOffset(I2C_HandleTypeDef *I2Cx, int16_t offset) {
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	807b      	strh	r3, [r7, #2]
  I2Cdev_writeWord(I2Cx, MPU6050_ADDR, XG_OFFS_USRH, offset);
 8000c66:	887b      	ldrh	r3, [r7, #2]
 8000c68:	2213      	movs	r2, #19
 8000c6a:	21d0      	movs	r1, #208	@ 0xd0
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff fe4f 	bl	8000910 <I2Cdev_writeWord>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <MPU6050_setYGyroOffset>:

/** Update gyroscope y-axis offset
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param offset 16-bit signed integer container for new offset value
 */
void MPU6050_setYGyroOffset(I2C_HandleTypeDef *I2Cx, int16_t offset) {
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	460b      	mov	r3, r1
 8000c84:	807b      	strh	r3, [r7, #2]
  I2Cdev_writeWord(I2Cx, MPU6050_ADDR, YG_OFFS_USRH, offset);
 8000c86:	887b      	ldrh	r3, [r7, #2]
 8000c88:	2215      	movs	r2, #21
 8000c8a:	21d0      	movs	r1, #208	@ 0xd0
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff fe3f 	bl	8000910 <I2Cdev_writeWord>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <MPU6050_setZGyroOffset>:

/** Update gyroscope z-axis offset
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param offset 16-bit signed integer container for new offset value
 */
void MPU6050_setZGyroOffset(I2C_HandleTypeDef *I2Cx, int16_t offset) {
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	807b      	strh	r3, [r7, #2]
  I2Cdev_writeWord(I2Cx, MPU6050_ADDR, ZG_OFFS_USRH, offset);
 8000ca6:	887b      	ldrh	r3, [r7, #2]
 8000ca8:	2217      	movs	r2, #23
 8000caa:	21d0      	movs	r1, #208	@ 0xd0
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff fe2f 	bl	8000910 <I2Cdev_writeWord>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <HAL_MspInit+0x44>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d00 <HAL_MspInit+0x44>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <HAL_MspInit+0x44>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <HAL_MspInit+0x44>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cde:	4a08      	ldr	r2, [pc, #32]	@ (8000d00 <HAL_MspInit+0x44>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_MspInit+0x44>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0ac      	sub	sp, #176	@ 0xb0
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2288      	movs	r2, #136	@ 0x88
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f003 fcf1 	bl	800470c <memset>
  if(hi2c->Instance==I2C1)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a21      	ldr	r2, [pc, #132]	@ (8000db4 <HAL_I2C_MspInit+0xb0>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d13a      	bne.n	8000daa <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d34:	2340      	movs	r3, #64	@ 0x40
 8000d36:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4618      	mov	r0, r3
 8000d42:	f002 f95b 	bl	8002ffc <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d4c:	f7ff fd28 	bl	80007a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d50:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <HAL_I2C_MspInit+0xb4>)
 8000d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d54:	4a18      	ldr	r2, [pc, #96]	@ (8000db8 <HAL_I2C_MspInit+0xb4>)
 8000d56:	f043 0302 	orr.w	r3, r3, #2
 8000d5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d5c:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <HAL_I2C_MspInit+0xb4>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d68:	23c0      	movs	r3, #192	@ 0xc0
 8000d6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6e:	2312      	movs	r3, #18
 8000d70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d80:	2304      	movs	r3, #4
 8000d82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480b      	ldr	r0, [pc, #44]	@ (8000dbc <HAL_I2C_MspInit+0xb8>)
 8000d8e:	f000 faeb 	bl	8001368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d92:	4b09      	ldr	r3, [pc, #36]	@ (8000db8 <HAL_I2C_MspInit+0xb4>)
 8000d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d96:	4a08      	ldr	r2, [pc, #32]	@ (8000db8 <HAL_I2C_MspInit+0xb4>)
 8000d98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d9e:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <HAL_I2C_MspInit+0xb4>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	37b0      	adds	r7, #176	@ 0xb0
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40005400 	.word	0x40005400
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	48000400 	.word	0x48000400

08000dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b0ac      	sub	sp, #176	@ 0xb0
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2288      	movs	r2, #136	@ 0x88
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f003 fc93 	bl	800470c <memset>
  if(huart->Instance==USART2)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a21      	ldr	r2, [pc, #132]	@ (8000e70 <HAL_UART_MspInit+0xb0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d13b      	bne.n	8000e68 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f002 f8fd 	bl	8002ffc <HAL_RCCEx_PeriphCLKConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e08:	f7ff fcca 	bl	80007a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e0c:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <HAL_UART_MspInit+0xb4>)
 8000e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e10:	4a18      	ldr	r2, [pc, #96]	@ (8000e74 <HAL_UART_MspInit+0xb4>)
 8000e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e16:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e18:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <HAL_UART_MspInit+0xb4>)
 8000e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <HAL_UART_MspInit+0xb4>)
 8000e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e28:	4a12      	ldr	r2, [pc, #72]	@ (8000e74 <HAL_UART_MspInit+0xb4>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e30:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <HAL_UART_MspInit+0xb4>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e3c:	230c      	movs	r3, #12
 8000e3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e54:	2307      	movs	r3, #7
 8000e56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e64:	f000 fa80 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e68:	bf00      	nop
 8000e6a:	37b0      	adds	r7, #176	@ 0xb0
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40004400 	.word	0x40004400
 8000e74:	40021000 	.word	0x40021000

08000e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <NMI_Handler+0x4>

08000e80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <MemManage_Handler+0x4>

08000e90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <UsageFault_Handler+0x4>

08000ea0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ece:	f000 f921 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	60f8      	str	r0, [r7, #12]
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	e00a      	b.n	8000efe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ee8:	f3af 8000 	nop.w
 8000eec:	4601      	mov	r1, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	60ba      	str	r2, [r7, #8]
 8000ef4:	b2ca      	uxtb	r2, r1
 8000ef6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	3301      	adds	r3, #1
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	dbf0      	blt.n	8000ee8 <_read+0x12>
  }

  return len;
 8000f06:	687b      	ldr	r3, [r7, #4]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f38:	605a      	str	r2, [r3, #4]
  return 0;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <_isatty>:

int _isatty(int file)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f50:	2301      	movs	r3, #1
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b085      	sub	sp, #20
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f80:	4a14      	ldr	r2, [pc, #80]	@ (8000fd4 <_sbrk+0x5c>)
 8000f82:	4b15      	ldr	r3, [pc, #84]	@ (8000fd8 <_sbrk+0x60>)
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f8c:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <_sbrk+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f94:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <_sbrk+0x64>)
 8000f96:	4a12      	ldr	r2, [pc, #72]	@ (8000fe0 <_sbrk+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9a:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d207      	bcs.n	8000fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa8:	f003 fbb8 	bl	800471c <__errno>
 8000fac:	4603      	mov	r3, r0
 8000fae:	220c      	movs	r2, #12
 8000fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fb6:	e009      	b.n	8000fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fbe:	4b07      	ldr	r3, [pc, #28]	@ (8000fdc <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a05      	ldr	r2, [pc, #20]	@ (8000fdc <_sbrk+0x64>)
 8000fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fca:	68fb      	ldr	r3, [r7, #12]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20018000 	.word	0x20018000
 8000fd8:	00000400 	.word	0x00000400
 8000fdc:	20000174 	.word	0x20000174
 8000fe0:	200002c8 	.word	0x200002c8

08000fe4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <SystemInit+0x20>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fee:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <SystemInit+0x20>)
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001040 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800100c:	f7ff ffea 	bl	8000fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001010:	480c      	ldr	r0, [pc, #48]	@ (8001044 <LoopForever+0x6>)
  ldr r1, =_edata
 8001012:	490d      	ldr	r1, [pc, #52]	@ (8001048 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001014:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <LoopForever+0xe>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800101c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001028:	4c0a      	ldr	r4, [pc, #40]	@ (8001054 <LoopForever+0x16>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001036:	f003 fb77 	bl	8004728 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800103a:	f7ff fa3d 	bl	80004b8 <main>

0800103e <LoopForever>:

LoopForever:
    b LoopForever
 800103e:	e7fe      	b.n	800103e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001040:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001048:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800104c:	08004ee4 	.word	0x08004ee4
  ldr r2, =_sbss
 8001050:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001054:	200002c8 	.word	0x200002c8

08001058 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC1_2_IRQHandler>
	...

0800105c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001066:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <HAL_Init+0x3c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a0b      	ldr	r2, [pc, #44]	@ (8001098 <HAL_Init+0x3c>)
 800106c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001070:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001072:	2003      	movs	r0, #3
 8001074:	f000 f944 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001078:	2000      	movs	r0, #0
 800107a:	f000 f80f 	bl	800109c <HAL_InitTick>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	71fb      	strb	r3, [r7, #7]
 8001088:	e001      	b.n	800108e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800108a:	f7ff fe17 	bl	8000cbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800108e:	79fb      	ldrb	r3, [r7, #7]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40022000 	.word	0x40022000

0800109c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010a8:	4b17      	ldr	r3, [pc, #92]	@ (8001108 <HAL_InitTick+0x6c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d023      	beq.n	80010f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010b0:	4b16      	ldr	r3, [pc, #88]	@ (800110c <HAL_InitTick+0x70>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <HAL_InitTick+0x6c>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f941 	bl	800134e <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10f      	bne.n	80010f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b0f      	cmp	r3, #15
 80010d6:	d809      	bhi.n	80010ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d8:	2200      	movs	r2, #0
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e0:	f000 f919 	bl	8001316 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <HAL_InitTick+0x74>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e007      	b.n	80010fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e004      	b.n	80010fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	73fb      	strb	r3, [r7, #15]
 80010f6:	e001      	b.n	80010fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000014 	.word	0x20000014
 800110c:	2000000c 	.word	0x2000000c
 8001110:	20000010 	.word	0x20000010

08001114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	@ (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000014 	.word	0x20000014
 8001138:	20000178 	.word	0x20000178

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000178 	.word	0x20000178

08001154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff ffee 	bl	800113c <HAL_GetTick>
 8001160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800116c:	d005      	beq.n	800117a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800116e:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <HAL_Delay+0x44>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800117a:	bf00      	nop
 800117c:	f7ff ffde 	bl	800113c <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d8f7      	bhi.n	800117c <HAL_Delay+0x28>
  {
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000014 	.word	0x20000014

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	@ (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	@ (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0a      	blt.n	800122a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	490c      	ldr	r1, [pc, #48]	@ (800124c <__NVIC_SetPriority+0x4c>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001228:	e00a      	b.n	8001240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4908      	ldr	r1, [pc, #32]	@ (8001250 <__NVIC_SetPriority+0x50>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3b04      	subs	r3, #4
 8001238:	0112      	lsls	r2, r2, #4
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	440b      	add	r3, r1
 800123e:	761a      	strb	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	@ 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf28      	it	cs
 8001272:	2304      	movcs	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	2b06      	cmp	r3, #6
 800127c:	d902      	bls.n	8001284 <NVIC_EncodePriority+0x30>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3b03      	subs	r3, #3
 8001282:	e000      	b.n	8001286 <NVIC_EncodePriority+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	4313      	orrs	r3, r2
         );
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	@ 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012cc:	d301      	bcc.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00f      	b.n	80012f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4a0a      	ldr	r2, [pc, #40]	@ (80012fc <SysTick_Config+0x40>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	210f      	movs	r1, #15
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012e0:	f7ff ff8e 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <SysTick_Config+0x40>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <SysTick_Config+0x40>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff47 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff5c 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff8e 	bl	8001254 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5d 	bl	8001200 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffb0 	bl	80012bc <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001376:	e17f      	b.n	8001678 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2101      	movs	r1, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8171 	beq.w	8001672 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d005      	beq.n	80013a8 <HAL_GPIO_Init+0x40>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d130      	bne.n	800140a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013de:	2201      	movs	r2, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	f003 0201 	and.w	r2, r3, #1
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b03      	cmp	r3, #3
 8001414:	d118      	bne.n	8001448 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800141c:	2201      	movs	r2, #1
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	08db      	lsrs	r3, r3, #3
 8001432:	f003 0201 	and.w	r2, r3, #1
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b03      	cmp	r3, #3
 8001452:	d017      	beq.n	8001484 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d123      	bne.n	80014d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	08da      	lsrs	r2, r3, #3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3208      	adds	r2, #8
 8001498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	220f      	movs	r2, #15
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	08da      	lsrs	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3208      	adds	r2, #8
 80014d2:	6939      	ldr	r1, [r7, #16]
 80014d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0203 	and.w	r2, r3, #3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 80ac 	beq.w	8001672 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	4b5f      	ldr	r3, [pc, #380]	@ (8001698 <HAL_GPIO_Init+0x330>)
 800151c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151e:	4a5e      	ldr	r2, [pc, #376]	@ (8001698 <HAL_GPIO_Init+0x330>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6613      	str	r3, [r2, #96]	@ 0x60
 8001526:	4b5c      	ldr	r3, [pc, #368]	@ (8001698 <HAL_GPIO_Init+0x330>)
 8001528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001532:	4a5a      	ldr	r2, [pc, #360]	@ (800169c <HAL_GPIO_Init+0x334>)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3302      	adds	r3, #2
 800153a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	220f      	movs	r2, #15
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800155c:	d025      	beq.n	80015aa <HAL_GPIO_Init+0x242>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4f      	ldr	r2, [pc, #316]	@ (80016a0 <HAL_GPIO_Init+0x338>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d01f      	beq.n	80015a6 <HAL_GPIO_Init+0x23e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4e      	ldr	r2, [pc, #312]	@ (80016a4 <HAL_GPIO_Init+0x33c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d019      	beq.n	80015a2 <HAL_GPIO_Init+0x23a>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4d      	ldr	r2, [pc, #308]	@ (80016a8 <HAL_GPIO_Init+0x340>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0x236>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4c      	ldr	r2, [pc, #304]	@ (80016ac <HAL_GPIO_Init+0x344>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d00d      	beq.n	800159a <HAL_GPIO_Init+0x232>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4b      	ldr	r2, [pc, #300]	@ (80016b0 <HAL_GPIO_Init+0x348>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d007      	beq.n	8001596 <HAL_GPIO_Init+0x22e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4a      	ldr	r2, [pc, #296]	@ (80016b4 <HAL_GPIO_Init+0x34c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d101      	bne.n	8001592 <HAL_GPIO_Init+0x22a>
 800158e:	2306      	movs	r3, #6
 8001590:	e00c      	b.n	80015ac <HAL_GPIO_Init+0x244>
 8001592:	2307      	movs	r3, #7
 8001594:	e00a      	b.n	80015ac <HAL_GPIO_Init+0x244>
 8001596:	2305      	movs	r3, #5
 8001598:	e008      	b.n	80015ac <HAL_GPIO_Init+0x244>
 800159a:	2304      	movs	r3, #4
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x244>
 800159e:	2303      	movs	r3, #3
 80015a0:	e004      	b.n	80015ac <HAL_GPIO_Init+0x244>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e002      	b.n	80015ac <HAL_GPIO_Init+0x244>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <HAL_GPIO_Init+0x244>
 80015aa:	2300      	movs	r3, #0
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	f002 0203 	and.w	r2, r2, #3
 80015b2:	0092      	lsls	r2, r2, #2
 80015b4:	4093      	lsls	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015bc:	4937      	ldr	r1, [pc, #220]	@ (800169c <HAL_GPIO_Init+0x334>)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	089b      	lsrs	r3, r3, #2
 80015c2:	3302      	adds	r3, #2
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015ca:	4b3b      	ldr	r3, [pc, #236]	@ (80016b8 <HAL_GPIO_Init+0x350>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015ee:	4a32      	ldr	r2, [pc, #200]	@ (80016b8 <HAL_GPIO_Init+0x350>)
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015f4:	4b30      	ldr	r3, [pc, #192]	@ (80016b8 <HAL_GPIO_Init+0x350>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001618:	4a27      	ldr	r2, [pc, #156]	@ (80016b8 <HAL_GPIO_Init+0x350>)
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800161e:	4b26      	ldr	r3, [pc, #152]	@ (80016b8 <HAL_GPIO_Init+0x350>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	43db      	mvns	r3, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001642:	4a1d      	ldr	r2, [pc, #116]	@ (80016b8 <HAL_GPIO_Init+0x350>)
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001648:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <HAL_GPIO_Init+0x350>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800166c:	4a12      	ldr	r2, [pc, #72]	@ (80016b8 <HAL_GPIO_Init+0x350>)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	3301      	adds	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa22 f303 	lsr.w	r3, r2, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	f47f ae78 	bne.w	8001378 <HAL_GPIO_Init+0x10>
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	371c      	adds	r7, #28
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000
 80016a0:	48000400 	.word	0x48000400
 80016a4:	48000800 	.word	0x48000800
 80016a8:	48000c00 	.word	0x48000c00
 80016ac:	48001000 	.word	0x48001000
 80016b0:	48001400 	.word	0x48001400
 80016b4:	48001800 	.word	0x48001800
 80016b8:	40010400 	.word	0x40010400

080016bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016cc:	787b      	ldrb	r3, [r7, #1]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d8:	e002      	b.n	80016e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016da:	887a      	ldrh	r2, [r7, #2]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e08d      	b.n	800181a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d106      	bne.n	8001718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff faf6 	bl	8000d04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2224      	movs	r2, #36	@ 0x24
 800171c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800173c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800174c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d107      	bne.n	8001766 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	e006      	b.n	8001774 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001772:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d108      	bne.n	800178e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	e007      	b.n	800179e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800179c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691a      	ldr	r2, [r3, #16]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69d9      	ldr	r1, [r3, #28]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a1a      	ldr	r2, [r3, #32]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2220      	movs	r2, #32
 8001806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af02      	add	r7, sp, #8
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	4608      	mov	r0, r1
 800182e:	4611      	mov	r1, r2
 8001830:	461a      	mov	r2, r3
 8001832:	4603      	mov	r3, r0
 8001834:	817b      	strh	r3, [r7, #10]
 8001836:	460b      	mov	r3, r1
 8001838:	813b      	strh	r3, [r7, #8]
 800183a:	4613      	mov	r3, r2
 800183c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b20      	cmp	r3, #32
 8001848:	f040 80f9 	bne.w	8001a3e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <HAL_I2C_Mem_Write+0x34>
 8001852:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001854:	2b00      	cmp	r3, #0
 8001856:	d105      	bne.n	8001864 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800185e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0ed      	b.n	8001a40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_I2C_Mem_Write+0x4e>
 800186e:	2302      	movs	r3, #2
 8001870:	e0e6      	b.n	8001a40 <HAL_I2C_Mem_Write+0x21c>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800187a:	f7ff fc5f 	bl	800113c <HAL_GetTick>
 800187e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2319      	movs	r3, #25
 8001886:	2201      	movs	r2, #1
 8001888:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 fac3 	bl	8001e18 <I2C_WaitOnFlagUntilTimeout>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0d1      	b.n	8001a40 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2221      	movs	r2, #33	@ 0x21
 80018a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2240      	movs	r2, #64	@ 0x40
 80018a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6a3a      	ldr	r2, [r7, #32]
 80018b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80018bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018c4:	88f8      	ldrh	r0, [r7, #6]
 80018c6:	893a      	ldrh	r2, [r7, #8]
 80018c8:	8979      	ldrh	r1, [r7, #10]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	4603      	mov	r3, r0
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 f9d3 	bl	8001c80 <I2C_RequestMemoryWrite>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0a9      	b.n	8001a40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	2bff      	cmp	r3, #255	@ 0xff
 80018f4:	d90e      	bls.n	8001914 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	22ff      	movs	r2, #255	@ 0xff
 80018fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001900:	b2da      	uxtb	r2, r3
 8001902:	8979      	ldrh	r1, [r7, #10]
 8001904:	2300      	movs	r3, #0
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 fc47 	bl	80021a0 <I2C_TransferConfig>
 8001912:	e00f      	b.n	8001934 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001918:	b29a      	uxth	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001922:	b2da      	uxtb	r2, r3
 8001924:	8979      	ldrh	r1, [r7, #10]
 8001926:	2300      	movs	r3, #0
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 fc36 	bl	80021a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 fac6 	bl	8001eca <I2C_WaitOnTXISFlagUntilTimeout>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e07b      	b.n	8001a40 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001962:	b29b      	uxth	r3, r3
 8001964:	3b01      	subs	r3, #1
 8001966:	b29a      	uxth	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001970:	3b01      	subs	r3, #1
 8001972:	b29a      	uxth	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800197c:	b29b      	uxth	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d034      	beq.n	80019ec <HAL_I2C_Mem_Write+0x1c8>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001986:	2b00      	cmp	r3, #0
 8001988:	d130      	bne.n	80019ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001990:	2200      	movs	r2, #0
 8001992:	2180      	movs	r1, #128	@ 0x80
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 fa3f 	bl	8001e18 <I2C_WaitOnFlagUntilTimeout>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e04d      	b.n	8001a40 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	2bff      	cmp	r3, #255	@ 0xff
 80019ac:	d90e      	bls.n	80019cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	22ff      	movs	r2, #255	@ 0xff
 80019b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	8979      	ldrh	r1, [r7, #10]
 80019bc:	2300      	movs	r3, #0
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f000 fbeb 	bl	80021a0 <I2C_TransferConfig>
 80019ca:	e00f      	b.n	80019ec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	8979      	ldrh	r1, [r7, #10]
 80019de:	2300      	movs	r3, #0
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 fbda 	bl	80021a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d19e      	bne.n	8001934 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 faac 	bl	8001f58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e01a      	b.n	8001a40 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6859      	ldr	r1, [r3, #4]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <HAL_I2C_Mem_Write+0x224>)
 8001a1e:	400b      	ands	r3, r1
 8001a20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2220      	movs	r2, #32
 8001a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	e000      	b.n	8001a40 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001a3e:	2302      	movs	r3, #2
  }
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	fe00e800 	.word	0xfe00e800

08001a4c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af02      	add	r7, sp, #8
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	4608      	mov	r0, r1
 8001a56:	4611      	mov	r1, r2
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	817b      	strh	r3, [r7, #10]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	813b      	strh	r3, [r7, #8]
 8001a62:	4613      	mov	r3, r2
 8001a64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b20      	cmp	r3, #32
 8001a70:	f040 80fd 	bne.w	8001c6e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <HAL_I2C_Mem_Read+0x34>
 8001a7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a86:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0f1      	b.n	8001c70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_I2C_Mem_Read+0x4e>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e0ea      	b.n	8001c70 <HAL_I2C_Mem_Read+0x224>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001aa2:	f7ff fb4b 	bl	800113c <HAL_GetTick>
 8001aa6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2319      	movs	r3, #25
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 f9af 	bl	8001e18 <I2C_WaitOnFlagUntilTimeout>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0d5      	b.n	8001c70 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2222      	movs	r2, #34	@ 0x22
 8001ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2240      	movs	r2, #64	@ 0x40
 8001ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6a3a      	ldr	r2, [r7, #32]
 8001ade:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001aec:	88f8      	ldrh	r0, [r7, #6]
 8001aee:	893a      	ldrh	r2, [r7, #8]
 8001af0:	8979      	ldrh	r1, [r7, #10]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	4603      	mov	r3, r0
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 f913 	bl	8001d28 <I2C_RequestMemoryRead>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0ad      	b.n	8001c70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	2bff      	cmp	r3, #255	@ 0xff
 8001b1c:	d90e      	bls.n	8001b3c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2201      	movs	r2, #1
 8001b22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	8979      	ldrh	r1, [r7, #10]
 8001b2c:	4b52      	ldr	r3, [pc, #328]	@ (8001c78 <HAL_I2C_Mem_Read+0x22c>)
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 fb33 	bl	80021a0 <I2C_TransferConfig>
 8001b3a:	e00f      	b.n	8001b5c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	8979      	ldrh	r1, [r7, #10]
 8001b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c78 <HAL_I2C_Mem_Read+0x22c>)
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 fb22 	bl	80021a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b62:	2200      	movs	r2, #0
 8001b64:	2104      	movs	r1, #4
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 f956 	bl	8001e18 <I2C_WaitOnFlagUntilTimeout>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e07c      	b.n	8001c70 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d034      	beq.n	8001c1c <HAL_I2C_Mem_Read+0x1d0>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d130      	bne.n	8001c1c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2180      	movs	r1, #128	@ 0x80
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 f927 	bl	8001e18 <I2C_WaitOnFlagUntilTimeout>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e04d      	b.n	8001c70 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	2bff      	cmp	r3, #255	@ 0xff
 8001bdc:	d90e      	bls.n	8001bfc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2201      	movs	r2, #1
 8001be2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	8979      	ldrh	r1, [r7, #10]
 8001bec:	2300      	movs	r3, #0
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 fad3 	bl	80021a0 <I2C_TransferConfig>
 8001bfa:	e00f      	b.n	8001c1c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	8979      	ldrh	r1, [r7, #10]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 fac2 	bl	80021a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d19a      	bne.n	8001b5c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 f994 	bl	8001f58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e01a      	b.n	8001c70 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6859      	ldr	r1, [r3, #4]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <HAL_I2C_Mem_Read+0x230>)
 8001c4e:	400b      	ands	r3, r1
 8001c50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2220      	movs	r2, #32
 8001c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001c6e:	2302      	movs	r3, #2
  }
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	80002400 	.word	0x80002400
 8001c7c:	fe00e800 	.word	0xfe00e800

08001c80 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	4608      	mov	r0, r1
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4603      	mov	r3, r0
 8001c90:	817b      	strh	r3, [r7, #10]
 8001c92:	460b      	mov	r3, r1
 8001c94:	813b      	strh	r3, [r7, #8]
 8001c96:	4613      	mov	r3, r2
 8001c98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	8979      	ldrh	r1, [r7, #10]
 8001ca0:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <I2C_RequestMemoryWrite+0xa4>)
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 fa79 	bl	80021a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	69b9      	ldr	r1, [r7, #24]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f909 	bl	8001eca <I2C_WaitOnTXISFlagUntilTimeout>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e02c      	b.n	8001d1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d105      	bne.n	8001cd4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cc8:	893b      	ldrh	r3, [r7, #8]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	629a      	str	r2, [r3, #40]	@ 0x28
 8001cd2:	e015      	b.n	8001d00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001cd4:	893b      	ldrh	r3, [r7, #8]
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	69b9      	ldr	r1, [r7, #24]
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 f8ef 	bl	8001eca <I2C_WaitOnTXISFlagUntilTimeout>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e012      	b.n	8001d1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cf6:	893b      	ldrh	r3, [r7, #8]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2200      	movs	r2, #0
 8001d08:	2180      	movs	r1, #128	@ 0x80
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 f884 	bl	8001e18 <I2C_WaitOnFlagUntilTimeout>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	80002000 	.word	0x80002000

08001d28 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	4608      	mov	r0, r1
 8001d32:	4611      	mov	r1, r2
 8001d34:	461a      	mov	r2, r3
 8001d36:	4603      	mov	r3, r0
 8001d38:	817b      	strh	r3, [r7, #10]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	813b      	strh	r3, [r7, #8]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	8979      	ldrh	r1, [r7, #10]
 8001d48:	4b20      	ldr	r3, [pc, #128]	@ (8001dcc <I2C_RequestMemoryRead+0xa4>)
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	68f8      	ldr	r0, [r7, #12]
 8001d50:	f000 fa26 	bl	80021a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	69b9      	ldr	r1, [r7, #24]
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 f8b6 	bl	8001eca <I2C_WaitOnTXISFlagUntilTimeout>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e02c      	b.n	8001dc2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d105      	bne.n	8001d7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d6e:	893b      	ldrh	r3, [r7, #8]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d78:	e015      	b.n	8001da6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d7a:	893b      	ldrh	r3, [r7, #8]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	69b9      	ldr	r1, [r7, #24]
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f89c 	bl	8001eca <I2C_WaitOnTXISFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e012      	b.n	8001dc2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d9c:	893b      	ldrh	r3, [r7, #8]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	2200      	movs	r2, #0
 8001dae:	2140      	movs	r1, #64	@ 0x40
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 f831 	bl	8001e18 <I2C_WaitOnFlagUntilTimeout>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	80002000 	.word	0x80002000

08001dd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d103      	bne.n	8001dee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2200      	movs	r2, #0
 8001dec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d007      	beq.n	8001e0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699a      	ldr	r2, [r3, #24]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	619a      	str	r2, [r3, #24]
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	4613      	mov	r3, r2
 8001e26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e28:	e03b      	b.n	8001ea2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	6839      	ldr	r1, [r7, #0]
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f8d6 	bl	8001fe0 <I2C_IsErrorOccurred>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e041      	b.n	8001ec2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e44:	d02d      	beq.n	8001ea2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e46:	f7ff f979 	bl	800113c <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d302      	bcc.n	8001e5c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d122      	bne.n	8001ea2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699a      	ldr	r2, [r3, #24]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	4013      	ands	r3, r2
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d113      	bne.n	8001ea2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	f043 0220 	orr.w	r2, r3, #32
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00f      	b.n	8001ec2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	699a      	ldr	r2, [r3, #24]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d0b4      	beq.n	8001e2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b084      	sub	sp, #16
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ed6:	e033      	b.n	8001f40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	68b9      	ldr	r1, [r7, #8]
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 f87f 	bl	8001fe0 <I2C_IsErrorOccurred>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e031      	b.n	8001f50 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ef2:	d025      	beq.n	8001f40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ef4:	f7ff f922 	bl	800113c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d302      	bcc.n	8001f0a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d11a      	bne.n	8001f40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d013      	beq.n	8001f40 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1c:	f043 0220 	orr.w	r2, r3, #32
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e007      	b.n	8001f50 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d1c4      	bne.n	8001ed8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f64:	e02f      	b.n	8001fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 f838 	bl	8001fe0 <I2C_IsErrorOccurred>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e02d      	b.n	8001fd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f7a:	f7ff f8df 	bl	800113c <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d302      	bcc.n	8001f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d11a      	bne.n	8001fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	2b20      	cmp	r3, #32
 8001f9c:	d013      	beq.n	8001fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	f043 0220 	orr.w	r2, r3, #32
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2220      	movs	r2, #32
 8001fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e007      	b.n	8001fd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	d1c8      	bne.n	8001f66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	@ 0x28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	2b00      	cmp	r3, #0
 800200a:	d068      	beq.n	80020de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2210      	movs	r2, #16
 8002012:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002014:	e049      	b.n	80020aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800201c:	d045      	beq.n	80020aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800201e:	f7ff f88d 	bl	800113c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	429a      	cmp	r2, r3
 800202c:	d302      	bcc.n	8002034 <I2C_IsErrorOccurred+0x54>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d13a      	bne.n	80020aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800203e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002046:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002052:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002056:	d121      	bne.n	800209c <I2C_IsErrorOccurred+0xbc>
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800205e:	d01d      	beq.n	800209c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	2b20      	cmp	r3, #32
 8002064:	d01a      	beq.n	800209c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002074:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002076:	f7ff f861 	bl	800113c <HAL_GetTick>
 800207a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800207c:	e00e      	b.n	800209c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800207e:	f7ff f85d 	bl	800113c <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b19      	cmp	r3, #25
 800208a:	d907      	bls.n	800209c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	f043 0320 	orr.w	r3, r3, #32
 8002092:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800209a:	e006      	b.n	80020aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d1e9      	bne.n	800207e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f003 0320 	and.w	r3, r3, #32
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	d003      	beq.n	80020c0 <I2C_IsErrorOccurred+0xe0>
 80020b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0aa      	beq.n	8002016 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80020c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d103      	bne.n	80020d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2220      	movs	r2, #32
 80020ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	f043 0304 	orr.w	r3, r3, #4
 80020d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00b      	beq.n	8002108 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002100:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00b      	beq.n	800212a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	f043 0308 	orr.w	r3, r3, #8
 8002118:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002122:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00b      	beq.n	800214c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	f043 0302 	orr.w	r3, r3, #2
 800213a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002144:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800214c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01c      	beq.n	800218e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f7ff fe3b 	bl	8001dd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b0d      	ldr	r3, [pc, #52]	@ (800219c <I2C_IsErrorOccurred+0x1bc>)
 8002166:	400b      	ands	r3, r1
 8002168:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	431a      	orrs	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2220      	movs	r2, #32
 800217a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800218e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002192:	4618      	mov	r0, r3
 8002194:	3728      	adds	r7, #40	@ 0x28
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	fe00e800 	.word	0xfe00e800

080021a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	817b      	strh	r3, [r7, #10]
 80021ae:	4613      	mov	r3, r2
 80021b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021b2:	897b      	ldrh	r3, [r7, #10]
 80021b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021b8:	7a7b      	ldrb	r3, [r7, #9]
 80021ba:	041b      	lsls	r3, r3, #16
 80021bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	0d5b      	lsrs	r3, r3, #21
 80021da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80021de:	4b08      	ldr	r3, [pc, #32]	@ (8002200 <I2C_TransferConfig+0x60>)
 80021e0:	430b      	orrs	r3, r1
 80021e2:	43db      	mvns	r3, r3
 80021e4:	ea02 0103 	and.w	r1, r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80021f2:	bf00      	nop
 80021f4:	371c      	adds	r7, #28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	03ff63ff 	.word	0x03ff63ff

08002204 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b20      	cmp	r3, #32
 8002218:	d138      	bne.n	800228c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002224:	2302      	movs	r3, #2
 8002226:	e032      	b.n	800228e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2224      	movs	r2, #36	@ 0x24
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002256:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6819      	ldr	r1, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	e000      	b.n	800228e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800228c:	2302      	movs	r3, #2
  }
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800229a:	b480      	push	{r7}
 800229c:	b085      	sub	sp, #20
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d139      	bne.n	8002324 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e033      	b.n	8002326 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2224      	movs	r2, #36	@ 0x24
 80022ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0201 	bic.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	021b      	lsls	r3, r3, #8
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	e000      	b.n	8002326 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002324:	2302      	movs	r3, #2
  }
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002338:	4b04      	ldr	r3, [pc, #16]	@ (800234c <HAL_PWREx_GetVoltageRange+0x18>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40007000 	.word	0x40007000

08002350 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800235e:	d130      	bne.n	80023c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002360:	4b23      	ldr	r3, [pc, #140]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002368:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800236c:	d038      	beq.n	80023e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800236e:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002376:	4a1e      	ldr	r2, [pc, #120]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002378:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800237c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800237e:	4b1d      	ldr	r3, [pc, #116]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2232      	movs	r2, #50	@ 0x32
 8002384:	fb02 f303 	mul.w	r3, r2, r3
 8002388:	4a1b      	ldr	r2, [pc, #108]	@ (80023f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	0c9b      	lsrs	r3, r3, #18
 8002390:	3301      	adds	r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002394:	e002      	b.n	800239c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	3b01      	subs	r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800239c:	4b14      	ldr	r3, [pc, #80]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023a8:	d102      	bne.n	80023b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f2      	bne.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023b0:	4b0f      	ldr	r3, [pc, #60]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023bc:	d110      	bne.n	80023e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e00f      	b.n	80023e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023c2:	4b0b      	ldr	r3, [pc, #44]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ce:	d007      	beq.n	80023e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023d0:	4b07      	ldr	r3, [pc, #28]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023d8:	4a05      	ldr	r2, [pc, #20]	@ (80023f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40007000 	.word	0x40007000
 80023f4:	2000000c 	.word	0x2000000c
 80023f8:	431bde83 	.word	0x431bde83

080023fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e3ca      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800240e:	4b97      	ldr	r3, [pc, #604]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002418:	4b94      	ldr	r3, [pc, #592]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 80e4 	beq.w	80025f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d007      	beq.n	8002446 <HAL_RCC_OscConfig+0x4a>
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	2b0c      	cmp	r3, #12
 800243a:	f040 808b 	bne.w	8002554 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b01      	cmp	r3, #1
 8002442:	f040 8087 	bne.w	8002554 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002446:	4b89      	ldr	r3, [pc, #548]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_RCC_OscConfig+0x62>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e3a2      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1a      	ldr	r2, [r3, #32]
 8002462:	4b82      	ldr	r3, [pc, #520]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d004      	beq.n	8002478 <HAL_RCC_OscConfig+0x7c>
 800246e:	4b7f      	ldr	r3, [pc, #508]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002476:	e005      	b.n	8002484 <HAL_RCC_OscConfig+0x88>
 8002478:	4b7c      	ldr	r3, [pc, #496]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800247a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002484:	4293      	cmp	r3, r2
 8002486:	d223      	bcs.n	80024d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4618      	mov	r0, r3
 800248e:	f000 fd55 	bl	8002f3c <RCC_SetFlashLatencyFromMSIRange>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e383      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800249c:	4b73      	ldr	r3, [pc, #460]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a72      	ldr	r2, [pc, #456]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024a2:	f043 0308 	orr.w	r3, r3, #8
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b70      	ldr	r3, [pc, #448]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	496d      	ldr	r1, [pc, #436]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ba:	4b6c      	ldr	r3, [pc, #432]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	4968      	ldr	r1, [pc, #416]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	604b      	str	r3, [r1, #4]
 80024ce:	e025      	b.n	800251c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024d0:	4b66      	ldr	r3, [pc, #408]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a65      	ldr	r2, [pc, #404]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024d6:	f043 0308 	orr.w	r3, r3, #8
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4b63      	ldr	r3, [pc, #396]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4960      	ldr	r1, [pc, #384]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ee:	4b5f      	ldr	r3, [pc, #380]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	495b      	ldr	r1, [pc, #364]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d109      	bne.n	800251c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fd15 	bl	8002f3c <RCC_SetFlashLatencyFromMSIRange>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e343      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800251c:	f000 fc4a 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 8002520:	4602      	mov	r2, r0
 8002522:	4b52      	ldr	r3, [pc, #328]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	091b      	lsrs	r3, r3, #4
 8002528:	f003 030f 	and.w	r3, r3, #15
 800252c:	4950      	ldr	r1, [pc, #320]	@ (8002670 <HAL_RCC_OscConfig+0x274>)
 800252e:	5ccb      	ldrb	r3, [r1, r3]
 8002530:	f003 031f 	and.w	r3, r3, #31
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
 8002538:	4a4e      	ldr	r2, [pc, #312]	@ (8002674 <HAL_RCC_OscConfig+0x278>)
 800253a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800253c:	4b4e      	ldr	r3, [pc, #312]	@ (8002678 <HAL_RCC_OscConfig+0x27c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe fdab 	bl	800109c <HAL_InitTick>
 8002546:	4603      	mov	r3, r0
 8002548:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d052      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	e327      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d032      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800255c:	4b43      	ldr	r3, [pc, #268]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a42      	ldr	r2, [pc, #264]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002568:	f7fe fde8 	bl	800113c <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002570:	f7fe fde4 	bl	800113c <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e310      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002582:	4b3a      	ldr	r3, [pc, #232]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800258e:	4b37      	ldr	r3, [pc, #220]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a36      	ldr	r2, [pc, #216]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002594:	f043 0308 	orr.w	r3, r3, #8
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b34      	ldr	r3, [pc, #208]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4931      	ldr	r1, [pc, #196]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ac:	4b2f      	ldr	r3, [pc, #188]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	492c      	ldr	r1, [pc, #176]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
 80025c0:	e01a      	b.n	80025f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025c2:	4b2a      	ldr	r3, [pc, #168]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a29      	ldr	r2, [pc, #164]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025ce:	f7fe fdb5 	bl	800113c <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025d6:	f7fe fdb1 	bl	800113c <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e2dd      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025e8:	4b20      	ldr	r3, [pc, #128]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f0      	bne.n	80025d6 <HAL_RCC_OscConfig+0x1da>
 80025f4:	e000      	b.n	80025f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d074      	beq.n	80026ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	2b08      	cmp	r3, #8
 8002608:	d005      	beq.n	8002616 <HAL_RCC_OscConfig+0x21a>
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b0c      	cmp	r3, #12
 800260e:	d10e      	bne.n	800262e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b03      	cmp	r3, #3
 8002614:	d10b      	bne.n	800262e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002616:	4b15      	ldr	r3, [pc, #84]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d064      	beq.n	80026ec <HAL_RCC_OscConfig+0x2f0>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d160      	bne.n	80026ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e2ba      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002636:	d106      	bne.n	8002646 <HAL_RCC_OscConfig+0x24a>
 8002638:	4b0c      	ldr	r3, [pc, #48]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0b      	ldr	r2, [pc, #44]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800263e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	e026      	b.n	8002694 <HAL_RCC_OscConfig+0x298>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800264e:	d115      	bne.n	800267c <HAL_RCC_OscConfig+0x280>
 8002650:	4b06      	ldr	r3, [pc, #24]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a05      	ldr	r2, [pc, #20]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002656:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	4b03      	ldr	r3, [pc, #12]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a02      	ldr	r2, [pc, #8]	@ (800266c <HAL_RCC_OscConfig+0x270>)
 8002662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	e014      	b.n	8002694 <HAL_RCC_OscConfig+0x298>
 800266a:	bf00      	nop
 800266c:	40021000 	.word	0x40021000
 8002670:	08004e8c 	.word	0x08004e8c
 8002674:	2000000c 	.word	0x2000000c
 8002678:	20000010 	.word	0x20000010
 800267c:	4ba0      	ldr	r3, [pc, #640]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a9f      	ldr	r2, [pc, #636]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002682:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b9d      	ldr	r3, [pc, #628]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a9c      	ldr	r2, [pc, #624]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800268e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d013      	beq.n	80026c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe fd4e 	bl	800113c <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a4:	f7fe fd4a 	bl	800113c <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	@ 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e276      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026b6:	4b92      	ldr	r3, [pc, #584]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x2a8>
 80026c2:	e014      	b.n	80026ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe fd3a 	bl	800113c <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026cc:	f7fe fd36 	bl	800113c <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	@ 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e262      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026de:	4b88      	ldr	r3, [pc, #544]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x2d0>
 80026ea:	e000      	b.n	80026ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d060      	beq.n	80027bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d005      	beq.n	800270c <HAL_RCC_OscConfig+0x310>
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2b0c      	cmp	r3, #12
 8002704:	d119      	bne.n	800273a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d116      	bne.n	800273a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800270c:	4b7c      	ldr	r3, [pc, #496]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_OscConfig+0x328>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e23f      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002724:	4b76      	ldr	r3, [pc, #472]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	061b      	lsls	r3, r3, #24
 8002732:	4973      	ldr	r1, [pc, #460]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002738:	e040      	b.n	80027bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d023      	beq.n	800278a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002742:	4b6f      	ldr	r3, [pc, #444]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a6e      	ldr	r2, [pc, #440]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800274c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274e:	f7fe fcf5 	bl	800113c <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002756:	f7fe fcf1 	bl	800113c <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e21d      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002768:	4b65      	ldr	r3, [pc, #404]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002774:	4b62      	ldr	r3, [pc, #392]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	061b      	lsls	r3, r3, #24
 8002782:	495f      	ldr	r1, [pc, #380]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
 8002788:	e018      	b.n	80027bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278a:	4b5d      	ldr	r3, [pc, #372]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a5c      	ldr	r2, [pc, #368]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002790:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7fe fcd1 	bl	800113c <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279e:	f7fe fccd 	bl	800113c <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e1f9      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027b0:	4b53      	ldr	r3, [pc, #332]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f0      	bne.n	800279e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d03c      	beq.n	8002842 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01c      	beq.n	800280a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80027d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e0:	f7fe fcac 	bl	800113c <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e8:	f7fe fca8 	bl	800113c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e1d4      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027fa:	4b41      	ldr	r3, [pc, #260]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80027fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0ef      	beq.n	80027e8 <HAL_RCC_OscConfig+0x3ec>
 8002808:	e01b      	b.n	8002842 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280a:	4b3d      	ldr	r3, [pc, #244]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800280c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002810:	4a3b      	ldr	r2, [pc, #236]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281a:	f7fe fc8f 	bl	800113c <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002822:	f7fe fc8b 	bl	800113c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e1b7      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002834:	4b32      	ldr	r3, [pc, #200]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002836:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1ef      	bne.n	8002822 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80a6 	beq.w	800299c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002850:	2300      	movs	r3, #0
 8002852:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002854:	4b2a      	ldr	r3, [pc, #168]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10d      	bne.n	800287c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002860:	4b27      	ldr	r3, [pc, #156]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002864:	4a26      	ldr	r2, [pc, #152]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 8002866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800286a:	6593      	str	r3, [r2, #88]	@ 0x58
 800286c:	4b24      	ldr	r3, [pc, #144]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 800286e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002878:	2301      	movs	r3, #1
 800287a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800287c:	4b21      	ldr	r3, [pc, #132]	@ (8002904 <HAL_RCC_OscConfig+0x508>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d118      	bne.n	80028ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002888:	4b1e      	ldr	r3, [pc, #120]	@ (8002904 <HAL_RCC_OscConfig+0x508>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1d      	ldr	r2, [pc, #116]	@ (8002904 <HAL_RCC_OscConfig+0x508>)
 800288e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002892:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002894:	f7fe fc52 	bl	800113c <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289c:	f7fe fc4e 	bl	800113c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e17a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ae:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <HAL_RCC_OscConfig+0x508>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d108      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4d8>
 80028c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028d2:	e029      	b.n	8002928 <HAL_RCC_OscConfig+0x52c>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b05      	cmp	r3, #5
 80028da:	d115      	bne.n	8002908 <HAL_RCC_OscConfig+0x50c>
 80028dc:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e2:	4a07      	ldr	r2, [pc, #28]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80028e4:	f043 0304 	orr.w	r3, r3, #4
 80028e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028ec:	4b04      	ldr	r3, [pc, #16]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f2:	4a03      	ldr	r2, [pc, #12]	@ (8002900 <HAL_RCC_OscConfig+0x504>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028fc:	e014      	b.n	8002928 <HAL_RCC_OscConfig+0x52c>
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	40007000 	.word	0x40007000
 8002908:	4b9c      	ldr	r3, [pc, #624]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290e:	4a9b      	ldr	r2, [pc, #620]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002918:	4b98      	ldr	r3, [pc, #608]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291e:	4a97      	ldr	r2, [pc, #604]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002920:	f023 0304 	bic.w	r3, r3, #4
 8002924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d016      	beq.n	800295e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002930:	f7fe fc04 	bl	800113c <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002938:	f7fe fc00 	bl	800113c <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e12a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294e:	4b8b      	ldr	r3, [pc, #556]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0ed      	beq.n	8002938 <HAL_RCC_OscConfig+0x53c>
 800295c:	e015      	b.n	800298a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295e:	f7fe fbed 	bl	800113c <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002964:	e00a      	b.n	800297c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002966:	f7fe fbe9 	bl	800113c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002974:	4293      	cmp	r3, r2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e113      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800297c:	4b7f      	ldr	r3, [pc, #508]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1ed      	bne.n	8002966 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800298a:	7ffb      	ldrb	r3, [r7, #31]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002990:	4b7a      	ldr	r3, [pc, #488]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002994:	4a79      	ldr	r2, [pc, #484]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800299a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80fe 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	f040 80d0 	bne.w	8002b50 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029b0:	4b72      	ldr	r3, [pc, #456]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f003 0203 	and.w	r2, r3, #3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d130      	bne.n	8002a26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	3b01      	subs	r3, #1
 80029d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d127      	bne.n	8002a26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d11f      	bne.n	8002a26 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029f0:	2a07      	cmp	r2, #7
 80029f2:	bf14      	ite	ne
 80029f4:	2201      	movne	r2, #1
 80029f6:	2200      	moveq	r2, #0
 80029f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d113      	bne.n	8002a26 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a08:	085b      	lsrs	r3, r3, #1
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d109      	bne.n	8002a26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1c:	085b      	lsrs	r3, r3, #1
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d06e      	beq.n	8002b04 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	2b0c      	cmp	r3, #12
 8002a2a:	d069      	beq.n	8002b00 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a2c:	4b53      	ldr	r3, [pc, #332]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d105      	bne.n	8002a44 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a38:	4b50      	ldr	r3, [pc, #320]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0ad      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a48:	4b4c      	ldr	r3, [pc, #304]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a4b      	ldr	r2, [pc, #300]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002a4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a52:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a54:	f7fe fb72 	bl	800113c <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7fe fb6e 	bl	800113c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e09a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a6e:	4b43      	ldr	r3, [pc, #268]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a7a:	4b40      	ldr	r3, [pc, #256]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	4b40      	ldr	r3, [pc, #256]	@ (8002b80 <HAL_RCC_OscConfig+0x784>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a8a:	3a01      	subs	r2, #1
 8002a8c:	0112      	lsls	r2, r2, #4
 8002a8e:	4311      	orrs	r1, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a94:	0212      	lsls	r2, r2, #8
 8002a96:	4311      	orrs	r1, r2
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a9c:	0852      	lsrs	r2, r2, #1
 8002a9e:	3a01      	subs	r2, #1
 8002aa0:	0552      	lsls	r2, r2, #21
 8002aa2:	4311      	orrs	r1, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002aa8:	0852      	lsrs	r2, r2, #1
 8002aaa:	3a01      	subs	r2, #1
 8002aac:	0652      	lsls	r2, r2, #25
 8002aae:	4311      	orrs	r1, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ab4:	0912      	lsrs	r2, r2, #4
 8002ab6:	0452      	lsls	r2, r2, #17
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	4930      	ldr	r1, [pc, #192]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a2d      	ldr	r2, [pc, #180]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002ac6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002acc:	4b2b      	ldr	r3, [pc, #172]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4a2a      	ldr	r2, [pc, #168]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002ad2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ad6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ad8:	f7fe fb30 	bl	800113c <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7fe fb2c 	bl	800113c <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e058      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af2:	4b22      	ldr	r3, [pc, #136]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002afe:	e050      	b.n	8002ba2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e04f      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b04:	4b1d      	ldr	r3, [pc, #116]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d148      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b10:	4b1a      	ldr	r3, [pc, #104]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a19      	ldr	r2, [pc, #100]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002b16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b1c:	4b17      	ldr	r3, [pc, #92]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a16      	ldr	r2, [pc, #88]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002b22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b28:	f7fe fb08 	bl	800113c <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b30:	f7fe fb04 	bl	800113c <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e030      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b42:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0x734>
 8002b4e:	e028      	b.n	8002ba2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	2b0c      	cmp	r3, #12
 8002b54:	d023      	beq.n	8002b9e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b56:	4b09      	ldr	r3, [pc, #36]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a08      	ldr	r2, [pc, #32]	@ (8002b7c <HAL_RCC_OscConfig+0x780>)
 8002b5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b62:	f7fe faeb 	bl	800113c <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b68:	e00c      	b.n	8002b84 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fe fae7 	bl	800113c <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d905      	bls.n	8002b84 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e013      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b84:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <HAL_RCC_OscConfig+0x7b0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ec      	bne.n	8002b6a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b90:	4b06      	ldr	r3, [pc, #24]	@ (8002bac <HAL_RCC_OscConfig+0x7b0>)
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	4905      	ldr	r1, [pc, #20]	@ (8002bac <HAL_RCC_OscConfig+0x7b0>)
 8002b96:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <HAL_RCC_OscConfig+0x7b4>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60cb      	str	r3, [r1, #12]
 8002b9c:	e001      	b.n	8002ba2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3720      	adds	r7, #32
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	feeefffc 	.word	0xfeeefffc

08002bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0e7      	b.n	8002d98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc8:	4b75      	ldr	r3, [pc, #468]	@ (8002da0 <HAL_RCC_ClockConfig+0x1ec>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d910      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4b72      	ldr	r3, [pc, #456]	@ (8002da0 <HAL_RCC_ClockConfig+0x1ec>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 0207 	bic.w	r2, r3, #7
 8002bde:	4970      	ldr	r1, [pc, #448]	@ (8002da0 <HAL_RCC_ClockConfig+0x1ec>)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b6e      	ldr	r3, [pc, #440]	@ (8002da0 <HAL_RCC_ClockConfig+0x1ec>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0cf      	b.n	8002d98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d010      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	4b66      	ldr	r3, [pc, #408]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d908      	bls.n	8002c26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c14:	4b63      	ldr	r3, [pc, #396]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	4960      	ldr	r1, [pc, #384]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d04c      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3a:	4b5a      	ldr	r3, [pc, #360]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d121      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e0a6      	b.n	8002d98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d107      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c52:	4b54      	ldr	r3, [pc, #336]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d115      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e09a      	b.n	8002d98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e08e      	b.n	8002d98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e086      	b.n	8002d98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c8a:	4b46      	ldr	r3, [pc, #280]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f023 0203 	bic.w	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	4943      	ldr	r1, [pc, #268]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c9c:	f7fe fa4e 	bl	800113c <HAL_GetTick>
 8002ca0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca4:	f7fe fa4a 	bl	800113c <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e06e      	b.n	8002d98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	4b3a      	ldr	r3, [pc, #232]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 020c 	and.w	r2, r3, #12
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d1eb      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d010      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	4b31      	ldr	r3, [pc, #196]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d208      	bcs.n	8002cfa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	492b      	ldr	r1, [pc, #172]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cfa:	4b29      	ldr	r3, [pc, #164]	@ (8002da0 <HAL_RCC_ClockConfig+0x1ec>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d210      	bcs.n	8002d2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d08:	4b25      	ldr	r3, [pc, #148]	@ (8002da0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f023 0207 	bic.w	r2, r3, #7
 8002d10:	4923      	ldr	r1, [pc, #140]	@ (8002da0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d18:	4b21      	ldr	r3, [pc, #132]	@ (8002da0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d001      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e036      	b.n	8002d98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d008      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d36:	4b1b      	ldr	r3, [pc, #108]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	4918      	ldr	r1, [pc, #96]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d009      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d54:	4b13      	ldr	r3, [pc, #76]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4910      	ldr	r1, [pc, #64]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d68:	f000 f824 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002da4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	490b      	ldr	r1, [pc, #44]	@ (8002da8 <HAL_RCC_ClockConfig+0x1f4>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
 8002d84:	4a09      	ldr	r2, [pc, #36]	@ (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002d86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d88:	4b09      	ldr	r3, [pc, #36]	@ (8002db0 <HAL_RCC_ClockConfig+0x1fc>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe f985 	bl	800109c <HAL_InitTick>
 8002d92:	4603      	mov	r3, r0
 8002d94:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d96:	7afb      	ldrb	r3, [r7, #11]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40022000 	.word	0x40022000
 8002da4:	40021000 	.word	0x40021000
 8002da8:	08004e8c 	.word	0x08004e8c
 8002dac:	2000000c 	.word	0x2000000c
 8002db0:	20000010 	.word	0x20000010

08002db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b089      	sub	sp, #36	@ 0x24
 8002db8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	2b0c      	cmp	r3, #12
 8002de0:	d121      	bne.n	8002e26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d11e      	bne.n	8002e26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002de8:	4b34      	ldr	r3, [pc, #208]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d107      	bne.n	8002e04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002df4:	4b31      	ldr	r3, [pc, #196]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8002df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	61fb      	str	r3, [r7, #28]
 8002e02:	e005      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e04:	4b2d      	ldr	r3, [pc, #180]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e10:	4a2b      	ldr	r2, [pc, #172]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10d      	bne.n	8002e3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d102      	bne.n	8002e32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e2c:	4b25      	ldr	r3, [pc, #148]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	e004      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e38:	4b23      	ldr	r3, [pc, #140]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	2b0c      	cmp	r3, #12
 8002e40:	d134      	bne.n	8002eac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e42:	4b1e      	ldr	r3, [pc, #120]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d003      	beq.n	8002e5a <HAL_RCC_GetSysClockFreq+0xa6>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d003      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0xac>
 8002e58:	e005      	b.n	8002e66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e5c:	617b      	str	r3, [r7, #20]
      break;
 8002e5e:	e005      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e60:	4b19      	ldr	r3, [pc, #100]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e62:	617b      	str	r3, [r7, #20]
      break;
 8002e64:	e002      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	617b      	str	r3, [r7, #20]
      break;
 8002e6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e6c:	4b13      	ldr	r3, [pc, #76]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	3301      	adds	r3, #1
 8002e78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e7a:	4b10      	ldr	r3, [pc, #64]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	0a1b      	lsrs	r3, r3, #8
 8002e80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	fb03 f202 	mul.w	r2, r3, r2
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e92:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x108>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	0e5b      	lsrs	r3, r3, #25
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eaa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002eac:	69bb      	ldr	r3, [r7, #24]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3724      	adds	r7, #36	@ 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	08004ea4 	.word	0x08004ea4
 8002ec4:	00f42400 	.word	0x00f42400
 8002ec8:	007a1200 	.word	0x007a1200

08002ecc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed0:	4b03      	ldr	r3, [pc, #12]	@ (8002ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	2000000c 	.word	0x2000000c

08002ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ee8:	f7ff fff0 	bl	8002ecc <HAL_RCC_GetHCLKFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	4904      	ldr	r1, [pc, #16]	@ (8002f0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	08004e9c 	.word	0x08004e9c

08002f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f14:	f7ff ffda 	bl	8002ecc <HAL_RCC_GetHCLKFreq>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	4b06      	ldr	r3, [pc, #24]	@ (8002f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	0adb      	lsrs	r3, r3, #11
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	4904      	ldr	r1, [pc, #16]	@ (8002f38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f26:	5ccb      	ldrb	r3, [r1, r3]
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021000 	.word	0x40021000
 8002f38:	08004e9c 	.word	0x08004e9c

08002f3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f48:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f54:	f7ff f9ee 	bl	8002334 <HAL_PWREx_GetVoltageRange>
 8002f58:	6178      	str	r0, [r7, #20]
 8002f5a:	e014      	b.n	8002f86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f5c:	4b25      	ldr	r3, [pc, #148]	@ (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f60:	4a24      	ldr	r2, [pc, #144]	@ (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f66:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f68:	4b22      	ldr	r3, [pc, #136]	@ (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f74:	f7ff f9de 	bl	8002334 <HAL_PWREx_GetVoltageRange>
 8002f78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f84:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f8c:	d10b      	bne.n	8002fa6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b80      	cmp	r3, #128	@ 0x80
 8002f92:	d919      	bls.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f98:	d902      	bls.n	8002fa0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	e013      	b.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	e010      	b.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b80      	cmp	r3, #128	@ 0x80
 8002faa:	d902      	bls.n	8002fb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fac:	2303      	movs	r3, #3
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	e00a      	b.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b80      	cmp	r3, #128	@ 0x80
 8002fb6:	d102      	bne.n	8002fbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fb8:	2302      	movs	r3, #2
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	e004      	b.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b70      	cmp	r3, #112	@ 0x70
 8002fc2:	d101      	bne.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f023 0207 	bic.w	r2, r3, #7
 8002fd0:	4909      	ldr	r1, [pc, #36]	@ (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fd8:	4b07      	ldr	r3, [pc, #28]	@ (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d001      	beq.n	8002fea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40022000 	.word	0x40022000

08002ffc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003004:	2300      	movs	r3, #0
 8003006:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003008:	2300      	movs	r3, #0
 800300a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003014:	2b00      	cmp	r3, #0
 8003016:	d041      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800301c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003020:	d02a      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003022:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003026:	d824      	bhi.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003028:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800302c:	d008      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800302e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003032:	d81e      	bhi.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003038:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800303c:	d010      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800303e:	e018      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003040:	4b86      	ldr	r3, [pc, #536]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4a85      	ldr	r2, [pc, #532]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003046:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800304a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800304c:	e015      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3304      	adds	r3, #4
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fabb 	bl	80035d0 <RCCEx_PLLSAI1_Config>
 800305a:	4603      	mov	r3, r0
 800305c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800305e:	e00c      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3320      	adds	r3, #32
 8003064:	2100      	movs	r1, #0
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fba6 	bl	80037b8 <RCCEx_PLLSAI2_Config>
 800306c:	4603      	mov	r3, r0
 800306e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003070:	e003      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	74fb      	strb	r3, [r7, #19]
      break;
 8003076:	e000      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800307a:	7cfb      	ldrb	r3, [r7, #19]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10b      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003080:	4b76      	ldr	r3, [pc, #472]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003086:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800308e:	4973      	ldr	r1, [pc, #460]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003096:	e001      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003098:	7cfb      	ldrb	r3, [r7, #19]
 800309a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d041      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030b0:	d02a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80030b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030b6:	d824      	bhi.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030bc:	d008      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030c2:	d81e      	bhi.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030cc:	d010      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030ce:	e018      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030d0:	4b62      	ldr	r3, [pc, #392]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	4a61      	ldr	r2, [pc, #388]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030dc:	e015      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3304      	adds	r3, #4
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fa73 	bl	80035d0 <RCCEx_PLLSAI1_Config>
 80030ea:	4603      	mov	r3, r0
 80030ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030ee:	e00c      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3320      	adds	r3, #32
 80030f4:	2100      	movs	r1, #0
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fb5e 	bl	80037b8 <RCCEx_PLLSAI2_Config>
 80030fc:	4603      	mov	r3, r0
 80030fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003100:	e003      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	74fb      	strb	r3, [r7, #19]
      break;
 8003106:	e000      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800310a:	7cfb      	ldrb	r3, [r7, #19]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10b      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003110:	4b52      	ldr	r3, [pc, #328]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003116:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800311e:	494f      	ldr	r1, [pc, #316]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003126:	e001      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003128:	7cfb      	ldrb	r3, [r7, #19]
 800312a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80a0 	beq.w	800327a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313a:	2300      	movs	r3, #0
 800313c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800313e:	4b47      	ldr	r3, [pc, #284]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800314e:	2300      	movs	r3, #0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00d      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003154:	4b41      	ldr	r3, [pc, #260]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003158:	4a40      	ldr	r2, [pc, #256]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800315e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003160:	4b3e      	ldr	r3, [pc, #248]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316c:	2301      	movs	r3, #1
 800316e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003170:	4b3b      	ldr	r3, [pc, #236]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a3a      	ldr	r2, [pc, #232]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003176:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800317a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800317c:	f7fd ffde 	bl	800113c <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003182:	e009      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003184:	f7fd ffda 	bl	800113c <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d902      	bls.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	74fb      	strb	r3, [r7, #19]
        break;
 8003196:	e005      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003198:	4b31      	ldr	r3, [pc, #196]	@ (8003260 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0ef      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031a4:	7cfb      	ldrb	r3, [r7, #19]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d15c      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031aa:	4b2c      	ldr	r3, [pc, #176]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d01f      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d019      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031c8:	4b24      	ldr	r3, [pc, #144]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031d4:	4b21      	ldr	r3, [pc, #132]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031da:	4a20      	ldr	r2, [pc, #128]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031e4:	4b1d      	ldr	r3, [pc, #116]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ea:	4a1c      	ldr	r2, [pc, #112]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031f4:	4a19      	ldr	r2, [pc, #100]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d016      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003206:	f7fd ff99 	bl	800113c <HAL_GetTick>
 800320a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800320c:	e00b      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7fd ff95 	bl	800113c <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321c:	4293      	cmp	r3, r2
 800321e:	d902      	bls.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	74fb      	strb	r3, [r7, #19]
            break;
 8003224:	e006      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003226:	4b0d      	ldr	r3, [pc, #52]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0ec      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003234:	7cfb      	ldrb	r3, [r7, #19]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10c      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800323a:	4b08      	ldr	r3, [pc, #32]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003240:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800324a:	4904      	ldr	r1, [pc, #16]	@ (800325c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003252:	e009      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003254:	7cfb      	ldrb	r3, [r7, #19]
 8003256:	74bb      	strb	r3, [r7, #18]
 8003258:	e006      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000
 8003260:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003264:	7cfb      	ldrb	r3, [r7, #19]
 8003266:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003268:	7c7b      	ldrb	r3, [r7, #17]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d105      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326e:	4b9e      	ldr	r3, [pc, #632]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003272:	4a9d      	ldr	r2, [pc, #628]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003278:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003286:	4b98      	ldr	r3, [pc, #608]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328c:	f023 0203 	bic.w	r2, r3, #3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003294:	4994      	ldr	r1, [pc, #592]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032a8:	4b8f      	ldr	r3, [pc, #572]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ae:	f023 020c 	bic.w	r2, r3, #12
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b6:	498c      	ldr	r1, [pc, #560]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032ca:	4b87      	ldr	r3, [pc, #540]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	4983      	ldr	r1, [pc, #524]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032ec:	4b7e      	ldr	r3, [pc, #504]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	497b      	ldr	r1, [pc, #492]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0310 	and.w	r3, r3, #16
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800330e:	4b76      	ldr	r3, [pc, #472]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003314:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800331c:	4972      	ldr	r1, [pc, #456]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00a      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003330:	4b6d      	ldr	r3, [pc, #436]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003336:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800333e:	496a      	ldr	r1, [pc, #424]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003352:	4b65      	ldr	r3, [pc, #404]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003358:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003360:	4961      	ldr	r1, [pc, #388]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003374:	4b5c      	ldr	r3, [pc, #368]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003382:	4959      	ldr	r1, [pc, #356]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003396:	4b54      	ldr	r3, [pc, #336]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a4:	4950      	ldr	r1, [pc, #320]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033b8:	4b4b      	ldr	r3, [pc, #300]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033be:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c6:	4948      	ldr	r1, [pc, #288]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033da:	4b43      	ldr	r3, [pc, #268]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e8:	493f      	ldr	r1, [pc, #252]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d028      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033fc:	4b3a      	ldr	r3, [pc, #232]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003402:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800340a:	4937      	ldr	r1, [pc, #220]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003416:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800341a:	d106      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800341c:	4b32      	ldr	r3, [pc, #200]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4a31      	ldr	r2, [pc, #196]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003422:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003426:	60d3      	str	r3, [r2, #12]
 8003428:	e011      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800342e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003432:	d10c      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3304      	adds	r3, #4
 8003438:	2101      	movs	r1, #1
 800343a:	4618      	mov	r0, r3
 800343c:	f000 f8c8 	bl	80035d0 <RCCEx_PLLSAI1_Config>
 8003440:	4603      	mov	r3, r0
 8003442:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003444:	7cfb      	ldrb	r3, [r7, #19]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800344a:	7cfb      	ldrb	r3, [r7, #19]
 800344c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d028      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800345a:	4b23      	ldr	r3, [pc, #140]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003460:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003468:	491f      	ldr	r1, [pc, #124]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003474:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003478:	d106      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800347a:	4b1b      	ldr	r3, [pc, #108]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	4a1a      	ldr	r2, [pc, #104]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003480:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003484:	60d3      	str	r3, [r2, #12]
 8003486:	e011      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003490:	d10c      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3304      	adds	r3, #4
 8003496:	2101      	movs	r1, #1
 8003498:	4618      	mov	r0, r3
 800349a:	f000 f899 	bl	80035d0 <RCCEx_PLLSAI1_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034a2:	7cfb      	ldrb	r3, [r7, #19]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d02b      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034b8:	4b0b      	ldr	r3, [pc, #44]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c6:	4908      	ldr	r1, [pc, #32]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034d6:	d109      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034d8:	4b03      	ldr	r3, [pc, #12]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4a02      	ldr	r2, [pc, #8]	@ (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034e2:	60d3      	str	r3, [r2, #12]
 80034e4:	e014      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034f4:	d10c      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3304      	adds	r3, #4
 80034fa:	2101      	movs	r1, #1
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 f867 	bl	80035d0 <RCCEx_PLLSAI1_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003506:	7cfb      	ldrb	r3, [r7, #19]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800350c:	7cfb      	ldrb	r3, [r7, #19]
 800350e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d02f      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800351c:	4b2b      	ldr	r3, [pc, #172]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003522:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800352a:	4928      	ldr	r1, [pc, #160]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003536:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800353a:	d10d      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3304      	adds	r3, #4
 8003540:	2102      	movs	r1, #2
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f844 	bl	80035d0 <RCCEx_PLLSAI1_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d014      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003552:	7cfb      	ldrb	r3, [r7, #19]
 8003554:	74bb      	strb	r3, [r7, #18]
 8003556:	e011      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800355c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003560:	d10c      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3320      	adds	r3, #32
 8003566:	2102      	movs	r1, #2
 8003568:	4618      	mov	r0, r3
 800356a:	f000 f925 	bl	80037b8 <RCCEx_PLLSAI2_Config>
 800356e:	4603      	mov	r3, r0
 8003570:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003572:	7cfb      	ldrb	r3, [r7, #19]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003578:	7cfb      	ldrb	r3, [r7, #19]
 800357a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003588:	4b10      	ldr	r3, [pc, #64]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003596:	490d      	ldr	r1, [pc, #52]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00b      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035aa:	4b08      	ldr	r3, [pc, #32]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035ba:	4904      	ldr	r1, [pc, #16]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000

080035d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035de:	4b75      	ldr	r3, [pc, #468]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d018      	beq.n	800361c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035ea:	4b72      	ldr	r3, [pc, #456]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 0203 	and.w	r2, r3, #3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d10d      	bne.n	8003616 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
       ||
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d009      	beq.n	8003616 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003602:	4b6c      	ldr	r3, [pc, #432]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	091b      	lsrs	r3, r3, #4
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
       ||
 8003612:	429a      	cmp	r2, r3
 8003614:	d047      	beq.n	80036a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
 800361a:	e044      	b.n	80036a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b03      	cmp	r3, #3
 8003622:	d018      	beq.n	8003656 <RCCEx_PLLSAI1_Config+0x86>
 8003624:	2b03      	cmp	r3, #3
 8003626:	d825      	bhi.n	8003674 <RCCEx_PLLSAI1_Config+0xa4>
 8003628:	2b01      	cmp	r3, #1
 800362a:	d002      	beq.n	8003632 <RCCEx_PLLSAI1_Config+0x62>
 800362c:	2b02      	cmp	r3, #2
 800362e:	d009      	beq.n	8003644 <RCCEx_PLLSAI1_Config+0x74>
 8003630:	e020      	b.n	8003674 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003632:	4b60      	ldr	r3, [pc, #384]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d11d      	bne.n	800367a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003642:	e01a      	b.n	800367a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003644:	4b5b      	ldr	r3, [pc, #364]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800364c:	2b00      	cmp	r3, #0
 800364e:	d116      	bne.n	800367e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003654:	e013      	b.n	800367e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003656:	4b57      	ldr	r3, [pc, #348]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10f      	bne.n	8003682 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003662:	4b54      	ldr	r3, [pc, #336]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003672:	e006      	b.n	8003682 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
      break;
 8003678:	e004      	b.n	8003684 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800367a:	bf00      	nop
 800367c:	e002      	b.n	8003684 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800367e:	bf00      	nop
 8003680:	e000      	b.n	8003684 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003682:	bf00      	nop
    }

    if(status == HAL_OK)
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10d      	bne.n	80036a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800368a:	4b4a      	ldr	r3, [pc, #296]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6819      	ldr	r1, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	3b01      	subs	r3, #1
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	430b      	orrs	r3, r1
 80036a0:	4944      	ldr	r1, [pc, #272]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d17d      	bne.n	80037a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036ac:	4b41      	ldr	r3, [pc, #260]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a40      	ldr	r2, [pc, #256]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80036b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b8:	f7fd fd40 	bl	800113c <HAL_GetTick>
 80036bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036be:	e009      	b.n	80036d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c0:	f7fd fd3c 	bl	800113c <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d902      	bls.n	80036d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	73fb      	strb	r3, [r7, #15]
        break;
 80036d2:	e005      	b.n	80036e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036d4:	4b37      	ldr	r3, [pc, #220]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1ef      	bne.n	80036c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d160      	bne.n	80037a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d111      	bne.n	8003710 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036ec:	4b31      	ldr	r3, [pc, #196]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80036f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6892      	ldr	r2, [r2, #8]
 80036fc:	0211      	lsls	r1, r2, #8
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68d2      	ldr	r2, [r2, #12]
 8003702:	0912      	lsrs	r2, r2, #4
 8003704:	0452      	lsls	r2, r2, #17
 8003706:	430a      	orrs	r2, r1
 8003708:	492a      	ldr	r1, [pc, #168]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800370a:	4313      	orrs	r3, r2
 800370c:	610b      	str	r3, [r1, #16]
 800370e:	e027      	b.n	8003760 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d112      	bne.n	800373c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003716:	4b27      	ldr	r3, [pc, #156]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800371e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6892      	ldr	r2, [r2, #8]
 8003726:	0211      	lsls	r1, r2, #8
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6912      	ldr	r2, [r2, #16]
 800372c:	0852      	lsrs	r2, r2, #1
 800372e:	3a01      	subs	r2, #1
 8003730:	0552      	lsls	r2, r2, #21
 8003732:	430a      	orrs	r2, r1
 8003734:	491f      	ldr	r1, [pc, #124]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003736:	4313      	orrs	r3, r2
 8003738:	610b      	str	r3, [r1, #16]
 800373a:	e011      	b.n	8003760 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800373c:	4b1d      	ldr	r3, [pc, #116]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003744:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6892      	ldr	r2, [r2, #8]
 800374c:	0211      	lsls	r1, r2, #8
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6952      	ldr	r2, [r2, #20]
 8003752:	0852      	lsrs	r2, r2, #1
 8003754:	3a01      	subs	r2, #1
 8003756:	0652      	lsls	r2, r2, #25
 8003758:	430a      	orrs	r2, r1
 800375a:	4916      	ldr	r1, [pc, #88]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375c:	4313      	orrs	r3, r2
 800375e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003760:	4b14      	ldr	r3, [pc, #80]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a13      	ldr	r2, [pc, #76]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003766:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800376a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376c:	f7fd fce6 	bl	800113c <HAL_GetTick>
 8003770:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003772:	e009      	b.n	8003788 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003774:	f7fd fce2 	bl	800113c <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d902      	bls.n	8003788 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	73fb      	strb	r3, [r7, #15]
          break;
 8003786:	e005      	b.n	8003794 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003788:	4b0a      	ldr	r3, [pc, #40]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0ef      	beq.n	8003774 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003794:	7bfb      	ldrb	r3, [r7, #15]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800379a:	4b06      	ldr	r3, [pc, #24]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800379c:	691a      	ldr	r2, [r3, #16]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	4904      	ldr	r1, [pc, #16]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40021000 	.word	0x40021000

080037b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d018      	beq.n	8003804 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037d2:	4b67      	ldr	r3, [pc, #412]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f003 0203 	and.w	r2, r3, #3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d10d      	bne.n	80037fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
       ||
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037ea:	4b61      	ldr	r3, [pc, #388]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
       ||
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d047      	beq.n	800388e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	73fb      	strb	r3, [r7, #15]
 8003802:	e044      	b.n	800388e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b03      	cmp	r3, #3
 800380a:	d018      	beq.n	800383e <RCCEx_PLLSAI2_Config+0x86>
 800380c:	2b03      	cmp	r3, #3
 800380e:	d825      	bhi.n	800385c <RCCEx_PLLSAI2_Config+0xa4>
 8003810:	2b01      	cmp	r3, #1
 8003812:	d002      	beq.n	800381a <RCCEx_PLLSAI2_Config+0x62>
 8003814:	2b02      	cmp	r3, #2
 8003816:	d009      	beq.n	800382c <RCCEx_PLLSAI2_Config+0x74>
 8003818:	e020      	b.n	800385c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800381a:	4b55      	ldr	r3, [pc, #340]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d11d      	bne.n	8003862 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800382a:	e01a      	b.n	8003862 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800382c:	4b50      	ldr	r3, [pc, #320]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003834:	2b00      	cmp	r3, #0
 8003836:	d116      	bne.n	8003866 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800383c:	e013      	b.n	8003866 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800383e:	4b4c      	ldr	r3, [pc, #304]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10f      	bne.n	800386a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800384a:	4b49      	ldr	r3, [pc, #292]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800385a:	e006      	b.n	800386a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
      break;
 8003860:	e004      	b.n	800386c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003862:	bf00      	nop
 8003864:	e002      	b.n	800386c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003866:	bf00      	nop
 8003868:	e000      	b.n	800386c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800386a:	bf00      	nop
    }

    if(status == HAL_OK)
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10d      	bne.n	800388e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003872:	4b3f      	ldr	r3, [pc, #252]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6819      	ldr	r1, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	3b01      	subs	r3, #1
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	430b      	orrs	r3, r1
 8003888:	4939      	ldr	r1, [pc, #228]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 800388a:	4313      	orrs	r3, r2
 800388c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d167      	bne.n	8003964 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003894:	4b36      	ldr	r3, [pc, #216]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a35      	ldr	r2, [pc, #212]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800389e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a0:	f7fd fc4c 	bl	800113c <HAL_GetTick>
 80038a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038a6:	e009      	b.n	80038bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038a8:	f7fd fc48 	bl	800113c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d902      	bls.n	80038bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	73fb      	strb	r3, [r7, #15]
        break;
 80038ba:	e005      	b.n	80038c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038bc:	4b2c      	ldr	r3, [pc, #176]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1ef      	bne.n	80038a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d14a      	bne.n	8003964 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d111      	bne.n	80038f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038d4:	4b26      	ldr	r3, [pc, #152]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80038dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6892      	ldr	r2, [r2, #8]
 80038e4:	0211      	lsls	r1, r2, #8
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68d2      	ldr	r2, [r2, #12]
 80038ea:	0912      	lsrs	r2, r2, #4
 80038ec:	0452      	lsls	r2, r2, #17
 80038ee:	430a      	orrs	r2, r1
 80038f0:	491f      	ldr	r1, [pc, #124]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	614b      	str	r3, [r1, #20]
 80038f6:	e011      	b.n	800391c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003900:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6892      	ldr	r2, [r2, #8]
 8003908:	0211      	lsls	r1, r2, #8
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6912      	ldr	r2, [r2, #16]
 800390e:	0852      	lsrs	r2, r2, #1
 8003910:	3a01      	subs	r2, #1
 8003912:	0652      	lsls	r2, r2, #25
 8003914:	430a      	orrs	r2, r1
 8003916:	4916      	ldr	r1, [pc, #88]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003918:	4313      	orrs	r3, r2
 800391a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800391c:	4b14      	ldr	r3, [pc, #80]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a13      	ldr	r2, [pc, #76]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003926:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003928:	f7fd fc08 	bl	800113c <HAL_GetTick>
 800392c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800392e:	e009      	b.n	8003944 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003930:	f7fd fc04 	bl	800113c <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d902      	bls.n	8003944 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	73fb      	strb	r3, [r7, #15]
          break;
 8003942:	e005      	b.n	8003950 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003944:	4b0a      	ldr	r3, [pc, #40]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0ef      	beq.n	8003930 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003956:	4b06      	ldr	r3, [pc, #24]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	4904      	ldr	r1, [pc, #16]	@ (8003970 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003960:	4313      	orrs	r3, r2
 8003962:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003964:	7bfb      	ldrb	r3, [r7, #15]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000

08003974 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e040      	b.n	8003a08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fd fa12 	bl	8000dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2224      	movs	r2, #36	@ 0x24
 80039a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fb6a 	bl	8004094 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f8af 	bl	8003b24 <UART_SetConfig>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e01b      	b.n	8003a08 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fbe9 	bl	80041d8 <UART_CheckIdleState>
 8003a06:	4603      	mov	r3, r0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08a      	sub	sp, #40	@ 0x28
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	d177      	bne.n	8003b18 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_UART_Transmit+0x24>
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e070      	b.n	8003b1a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2221      	movs	r2, #33	@ 0x21
 8003a44:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a46:	f7fd fb79 	bl	800113c <HAL_GetTick>
 8003a4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	88fa      	ldrh	r2, [r7, #6]
 8003a50:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	88fa      	ldrh	r2, [r7, #6]
 8003a58:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a64:	d108      	bne.n	8003a78 <HAL_UART_Transmit+0x68>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d104      	bne.n	8003a78 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	e003      	b.n	8003a80 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a80:	e02f      	b.n	8003ae2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2180      	movs	r1, #128	@ 0x80
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 fc4b 	bl	8004328 <UART_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d004      	beq.n	8003aa2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e03b      	b.n	8003b1a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10b      	bne.n	8003ac0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	881a      	ldrh	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ab4:	b292      	uxth	r2, r2
 8003ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	3302      	adds	r3, #2
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	e007      	b.n	8003ad0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	781a      	ldrb	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	3301      	adds	r3, #1
 8003ace:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1c9      	bne.n	8003a82 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2200      	movs	r2, #0
 8003af6:	2140      	movs	r1, #64	@ 0x40
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fc15 	bl	8004328 <UART_WaitOnFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d004      	beq.n	8003b0e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e005      	b.n	8003b1a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	e000      	b.n	8003b1a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
  }
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b28:	b08a      	sub	sp, #40	@ 0x28
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4ba4      	ldr	r3, [pc, #656]	@ (8003de4 <UART_SetConfig+0x2c0>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	6812      	ldr	r2, [r2, #0]
 8003b5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a99      	ldr	r2, [pc, #612]	@ (8003de8 <UART_SetConfig+0x2c4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d004      	beq.n	8003b90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a90      	ldr	r2, [pc, #576]	@ (8003dec <UART_SetConfig+0x2c8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d126      	bne.n	8003bfc <UART_SetConfig+0xd8>
 8003bae:	4b90      	ldr	r3, [pc, #576]	@ (8003df0 <UART_SetConfig+0x2cc>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d81b      	bhi.n	8003bf4 <UART_SetConfig+0xd0>
 8003bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003bc4 <UART_SetConfig+0xa0>)
 8003bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc2:	bf00      	nop
 8003bc4:	08003bd5 	.word	0x08003bd5
 8003bc8:	08003be5 	.word	0x08003be5
 8003bcc:	08003bdd 	.word	0x08003bdd
 8003bd0:	08003bed 	.word	0x08003bed
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bda:	e116      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003be2:	e112      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003be4:	2304      	movs	r3, #4
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bea:	e10e      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003bec:	2308      	movs	r3, #8
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bf2:	e10a      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bfa:	e106      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a7c      	ldr	r2, [pc, #496]	@ (8003df4 <UART_SetConfig+0x2d0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d138      	bne.n	8003c78 <UART_SetConfig+0x154>
 8003c06:	4b7a      	ldr	r3, [pc, #488]	@ (8003df0 <UART_SetConfig+0x2cc>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	2b0c      	cmp	r3, #12
 8003c12:	d82d      	bhi.n	8003c70 <UART_SetConfig+0x14c>
 8003c14:	a201      	add	r2, pc, #4	@ (adr r2, 8003c1c <UART_SetConfig+0xf8>)
 8003c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1a:	bf00      	nop
 8003c1c:	08003c51 	.word	0x08003c51
 8003c20:	08003c71 	.word	0x08003c71
 8003c24:	08003c71 	.word	0x08003c71
 8003c28:	08003c71 	.word	0x08003c71
 8003c2c:	08003c61 	.word	0x08003c61
 8003c30:	08003c71 	.word	0x08003c71
 8003c34:	08003c71 	.word	0x08003c71
 8003c38:	08003c71 	.word	0x08003c71
 8003c3c:	08003c59 	.word	0x08003c59
 8003c40:	08003c71 	.word	0x08003c71
 8003c44:	08003c71 	.word	0x08003c71
 8003c48:	08003c71 	.word	0x08003c71
 8003c4c:	08003c69 	.word	0x08003c69
 8003c50:	2300      	movs	r3, #0
 8003c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c56:	e0d8      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c5e:	e0d4      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003c60:	2304      	movs	r3, #4
 8003c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c66:	e0d0      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003c68:	2308      	movs	r3, #8
 8003c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c6e:	e0cc      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003c70:	2310      	movs	r3, #16
 8003c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c76:	e0c8      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a5e      	ldr	r2, [pc, #376]	@ (8003df8 <UART_SetConfig+0x2d4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d125      	bne.n	8003cce <UART_SetConfig+0x1aa>
 8003c82:	4b5b      	ldr	r3, [pc, #364]	@ (8003df0 <UART_SetConfig+0x2cc>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c8c:	2b30      	cmp	r3, #48	@ 0x30
 8003c8e:	d016      	beq.n	8003cbe <UART_SetConfig+0x19a>
 8003c90:	2b30      	cmp	r3, #48	@ 0x30
 8003c92:	d818      	bhi.n	8003cc6 <UART_SetConfig+0x1a2>
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d00a      	beq.n	8003cae <UART_SetConfig+0x18a>
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d814      	bhi.n	8003cc6 <UART_SetConfig+0x1a2>
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <UART_SetConfig+0x182>
 8003ca0:	2b10      	cmp	r3, #16
 8003ca2:	d008      	beq.n	8003cb6 <UART_SetConfig+0x192>
 8003ca4:	e00f      	b.n	8003cc6 <UART_SetConfig+0x1a2>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cac:	e0ad      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cb4:	e0a9      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003cb6:	2304      	movs	r3, #4
 8003cb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cbc:	e0a5      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cc4:	e0a1      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003cc6:	2310      	movs	r3, #16
 8003cc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ccc:	e09d      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a4a      	ldr	r2, [pc, #296]	@ (8003dfc <UART_SetConfig+0x2d8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d125      	bne.n	8003d24 <UART_SetConfig+0x200>
 8003cd8:	4b45      	ldr	r3, [pc, #276]	@ (8003df0 <UART_SetConfig+0x2cc>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cde:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ce2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ce4:	d016      	beq.n	8003d14 <UART_SetConfig+0x1f0>
 8003ce6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ce8:	d818      	bhi.n	8003d1c <UART_SetConfig+0x1f8>
 8003cea:	2b80      	cmp	r3, #128	@ 0x80
 8003cec:	d00a      	beq.n	8003d04 <UART_SetConfig+0x1e0>
 8003cee:	2b80      	cmp	r3, #128	@ 0x80
 8003cf0:	d814      	bhi.n	8003d1c <UART_SetConfig+0x1f8>
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <UART_SetConfig+0x1d8>
 8003cf6:	2b40      	cmp	r3, #64	@ 0x40
 8003cf8:	d008      	beq.n	8003d0c <UART_SetConfig+0x1e8>
 8003cfa:	e00f      	b.n	8003d1c <UART_SetConfig+0x1f8>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d02:	e082      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d04:	2302      	movs	r3, #2
 8003d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d0a:	e07e      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d12:	e07a      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d14:	2308      	movs	r3, #8
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d1a:	e076      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d22:	e072      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a35      	ldr	r2, [pc, #212]	@ (8003e00 <UART_SetConfig+0x2dc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d12a      	bne.n	8003d84 <UART_SetConfig+0x260>
 8003d2e:	4b30      	ldr	r3, [pc, #192]	@ (8003df0 <UART_SetConfig+0x2cc>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d3c:	d01a      	beq.n	8003d74 <UART_SetConfig+0x250>
 8003d3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d42:	d81b      	bhi.n	8003d7c <UART_SetConfig+0x258>
 8003d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d48:	d00c      	beq.n	8003d64 <UART_SetConfig+0x240>
 8003d4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d4e:	d815      	bhi.n	8003d7c <UART_SetConfig+0x258>
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <UART_SetConfig+0x238>
 8003d54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d58:	d008      	beq.n	8003d6c <UART_SetConfig+0x248>
 8003d5a:	e00f      	b.n	8003d7c <UART_SetConfig+0x258>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d62:	e052      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d64:	2302      	movs	r3, #2
 8003d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d6a:	e04e      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d72:	e04a      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d74:	2308      	movs	r3, #8
 8003d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d7a:	e046      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d82:	e042      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a17      	ldr	r2, [pc, #92]	@ (8003de8 <UART_SetConfig+0x2c4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d13a      	bne.n	8003e04 <UART_SetConfig+0x2e0>
 8003d8e:	4b18      	ldr	r3, [pc, #96]	@ (8003df0 <UART_SetConfig+0x2cc>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d9c:	d01a      	beq.n	8003dd4 <UART_SetConfig+0x2b0>
 8003d9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003da2:	d81b      	bhi.n	8003ddc <UART_SetConfig+0x2b8>
 8003da4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003da8:	d00c      	beq.n	8003dc4 <UART_SetConfig+0x2a0>
 8003daa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dae:	d815      	bhi.n	8003ddc <UART_SetConfig+0x2b8>
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <UART_SetConfig+0x298>
 8003db4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003db8:	d008      	beq.n	8003dcc <UART_SetConfig+0x2a8>
 8003dba:	e00f      	b.n	8003ddc <UART_SetConfig+0x2b8>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dc2:	e022      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dca:	e01e      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003dcc:	2304      	movs	r3, #4
 8003dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd2:	e01a      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dda:	e016      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003ddc:	2310      	movs	r3, #16
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003de2:	e012      	b.n	8003e0a <UART_SetConfig+0x2e6>
 8003de4:	efff69f3 	.word	0xefff69f3
 8003de8:	40008000 	.word	0x40008000
 8003dec:	40013800 	.word	0x40013800
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40004400 	.word	0x40004400
 8003df8:	40004800 	.word	0x40004800
 8003dfc:	40004c00 	.word	0x40004c00
 8003e00:	40005000 	.word	0x40005000
 8003e04:	2310      	movs	r3, #16
 8003e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a9f      	ldr	r2, [pc, #636]	@ (800408c <UART_SetConfig+0x568>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d17a      	bne.n	8003f0a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d824      	bhi.n	8003e66 <UART_SetConfig+0x342>
 8003e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e24 <UART_SetConfig+0x300>)
 8003e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e22:	bf00      	nop
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003e67 	.word	0x08003e67
 8003e2c:	08003e51 	.word	0x08003e51
 8003e30:	08003e67 	.word	0x08003e67
 8003e34:	08003e57 	.word	0x08003e57
 8003e38:	08003e67 	.word	0x08003e67
 8003e3c:	08003e67 	.word	0x08003e67
 8003e40:	08003e67 	.word	0x08003e67
 8003e44:	08003e5f 	.word	0x08003e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e48:	f7ff f84c 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8003e4c:	61f8      	str	r0, [r7, #28]
        break;
 8003e4e:	e010      	b.n	8003e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e50:	4b8f      	ldr	r3, [pc, #572]	@ (8004090 <UART_SetConfig+0x56c>)
 8003e52:	61fb      	str	r3, [r7, #28]
        break;
 8003e54:	e00d      	b.n	8003e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e56:	f7fe ffad 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 8003e5a:	61f8      	str	r0, [r7, #28]
        break;
 8003e5c:	e009      	b.n	8003e72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e62:	61fb      	str	r3, [r7, #28]
        break;
 8003e64:	e005      	b.n	8003e72 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 80fb 	beq.w	8004070 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4413      	add	r3, r2
 8003e84:	69fa      	ldr	r2, [r7, #28]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d305      	bcc.n	8003e96 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d903      	bls.n	8003e9e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e9c:	e0e8      	b.n	8004070 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	461c      	mov	r4, r3
 8003ea4:	4615      	mov	r5, r2
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	022b      	lsls	r3, r5, #8
 8003eb0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003eb4:	0222      	lsls	r2, r4, #8
 8003eb6:	68f9      	ldr	r1, [r7, #12]
 8003eb8:	6849      	ldr	r1, [r1, #4]
 8003eba:	0849      	lsrs	r1, r1, #1
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	4688      	mov	r8, r1
 8003ec0:	4681      	mov	r9, r0
 8003ec2:	eb12 0a08 	adds.w	sl, r2, r8
 8003ec6:	eb43 0b09 	adc.w	fp, r3, r9
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ed8:	4650      	mov	r0, sl
 8003eda:	4659      	mov	r1, fp
 8003edc:	f7fc f974 	bl	80001c8 <__aeabi_uldivmod>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eee:	d308      	bcc.n	8003f02 <UART_SetConfig+0x3de>
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ef6:	d204      	bcs.n	8003f02 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	60da      	str	r2, [r3, #12]
 8003f00:	e0b6      	b.n	8004070 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f08:	e0b2      	b.n	8004070 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f12:	d15e      	bne.n	8003fd2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003f14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d828      	bhi.n	8003f6e <UART_SetConfig+0x44a>
 8003f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f24 <UART_SetConfig+0x400>)
 8003f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f22:	bf00      	nop
 8003f24:	08003f49 	.word	0x08003f49
 8003f28:	08003f51 	.word	0x08003f51
 8003f2c:	08003f59 	.word	0x08003f59
 8003f30:	08003f6f 	.word	0x08003f6f
 8003f34:	08003f5f 	.word	0x08003f5f
 8003f38:	08003f6f 	.word	0x08003f6f
 8003f3c:	08003f6f 	.word	0x08003f6f
 8003f40:	08003f6f 	.word	0x08003f6f
 8003f44:	08003f67 	.word	0x08003f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f48:	f7fe ffcc 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8003f4c:	61f8      	str	r0, [r7, #28]
        break;
 8003f4e:	e014      	b.n	8003f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f50:	f7fe ffde 	bl	8002f10 <HAL_RCC_GetPCLK2Freq>
 8003f54:	61f8      	str	r0, [r7, #28]
        break;
 8003f56:	e010      	b.n	8003f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f58:	4b4d      	ldr	r3, [pc, #308]	@ (8004090 <UART_SetConfig+0x56c>)
 8003f5a:	61fb      	str	r3, [r7, #28]
        break;
 8003f5c:	e00d      	b.n	8003f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f5e:	f7fe ff29 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 8003f62:	61f8      	str	r0, [r7, #28]
        break;
 8003f64:	e009      	b.n	8003f7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f6a:	61fb      	str	r3, [r7, #28]
        break;
 8003f6c:	e005      	b.n	8003f7a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d077      	beq.n	8004070 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	005a      	lsls	r2, r3, #1
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	441a      	add	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b0f      	cmp	r3, #15
 8003f9a:	d916      	bls.n	8003fca <UART_SetConfig+0x4a6>
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fa2:	d212      	bcs.n	8003fca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	f023 030f 	bic.w	r3, r3, #15
 8003fac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	8afb      	ldrh	r3, [r7, #22]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	8afa      	ldrh	r2, [r7, #22]
 8003fc6:	60da      	str	r2, [r3, #12]
 8003fc8:	e052      	b.n	8004070 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fd0:	e04e      	b.n	8004070 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fd2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d827      	bhi.n	800402a <UART_SetConfig+0x506>
 8003fda:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe0 <UART_SetConfig+0x4bc>)
 8003fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe0:	08004005 	.word	0x08004005
 8003fe4:	0800400d 	.word	0x0800400d
 8003fe8:	08004015 	.word	0x08004015
 8003fec:	0800402b 	.word	0x0800402b
 8003ff0:	0800401b 	.word	0x0800401b
 8003ff4:	0800402b 	.word	0x0800402b
 8003ff8:	0800402b 	.word	0x0800402b
 8003ffc:	0800402b 	.word	0x0800402b
 8004000:	08004023 	.word	0x08004023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004004:	f7fe ff6e 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8004008:	61f8      	str	r0, [r7, #28]
        break;
 800400a:	e014      	b.n	8004036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800400c:	f7fe ff80 	bl	8002f10 <HAL_RCC_GetPCLK2Freq>
 8004010:	61f8      	str	r0, [r7, #28]
        break;
 8004012:	e010      	b.n	8004036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004014:	4b1e      	ldr	r3, [pc, #120]	@ (8004090 <UART_SetConfig+0x56c>)
 8004016:	61fb      	str	r3, [r7, #28]
        break;
 8004018:	e00d      	b.n	8004036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800401a:	f7fe fecb 	bl	8002db4 <HAL_RCC_GetSysClockFreq>
 800401e:	61f8      	str	r0, [r7, #28]
        break;
 8004020:	e009      	b.n	8004036 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004026:	61fb      	str	r3, [r7, #28]
        break;
 8004028:	e005      	b.n	8004036 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004034:	bf00      	nop
    }

    if (pclk != 0U)
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d019      	beq.n	8004070 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	085a      	lsrs	r2, r3, #1
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	441a      	add	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	fbb2 f3f3 	udiv	r3, r2, r3
 800404e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2b0f      	cmp	r3, #15
 8004054:	d909      	bls.n	800406a <UART_SetConfig+0x546>
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800405c:	d205      	bcs.n	800406a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60da      	str	r2, [r3, #12]
 8004068:	e002      	b.n	8004070 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800407c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004080:	4618      	mov	r0, r3
 8004082:	3728      	adds	r7, #40	@ 0x28
 8004084:	46bd      	mov	sp, r7
 8004086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800408a:	bf00      	nop
 800408c:	40008000 	.word	0x40008000
 8004090:	00f42400 	.word	0x00f42400

08004094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01a      	beq.n	80041aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004192:	d10a      	bne.n	80041aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	605a      	str	r2, [r3, #4]
  }
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b098      	sub	sp, #96	@ 0x60
 80041dc:	af02      	add	r7, sp, #8
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041e8:	f7fc ffa8 	bl	800113c <HAL_GetTick>
 80041ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d12e      	bne.n	800425a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004204:	2200      	movs	r2, #0
 8004206:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f88c 	bl	8004328 <UART_WaitOnFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d021      	beq.n	800425a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800422a:	653b      	str	r3, [r7, #80]	@ 0x50
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004234:	647b      	str	r3, [r7, #68]	@ 0x44
 8004236:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800423a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e6      	bne.n	8004216 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e062      	b.n	8004320 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b04      	cmp	r3, #4
 8004266:	d149      	bne.n	80042fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004268:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004270:	2200      	movs	r2, #0
 8004272:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f856 	bl	8004328 <UART_WaitOnFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d03c      	beq.n	80042fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	623b      	str	r3, [r7, #32]
   return(result);
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80042a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e6      	bne.n	8004282 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3308      	adds	r3, #8
 80042ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3308      	adds	r3, #8
 80042d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042d4:	61fa      	str	r2, [r7, #28]
 80042d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	69b9      	ldr	r1, [r7, #24]
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	617b      	str	r3, [r7, #20]
   return(result);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e5      	bne.n	80042b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e011      	b.n	8004320 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3758      	adds	r7, #88	@ 0x58
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	603b      	str	r3, [r7, #0]
 8004334:	4613      	mov	r3, r2
 8004336:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004338:	e04f      	b.n	80043da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004340:	d04b      	beq.n	80043da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004342:	f7fc fefb 	bl	800113c <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	429a      	cmp	r2, r3
 8004350:	d302      	bcc.n	8004358 <UART_WaitOnFlagUntilTimeout+0x30>
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e04e      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b00      	cmp	r3, #0
 8004368:	d037      	beq.n	80043da <UART_WaitOnFlagUntilTimeout+0xb2>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b80      	cmp	r3, #128	@ 0x80
 800436e:	d034      	beq.n	80043da <UART_WaitOnFlagUntilTimeout+0xb2>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b40      	cmp	r3, #64	@ 0x40
 8004374:	d031      	beq.n	80043da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b08      	cmp	r3, #8
 8004382:	d110      	bne.n	80043a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2208      	movs	r2, #8
 800438a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f838 	bl	8004402 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2208      	movs	r2, #8
 8004396:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e029      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043b4:	d111      	bne.n	80043da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f81e 	bl	8004402 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e00f      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69da      	ldr	r2, [r3, #28]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4013      	ands	r3, r2
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	bf0c      	ite	eq
 80043ea:	2301      	moveq	r3, #1
 80043ec:	2300      	movne	r3, #0
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d0a0      	beq.n	800433a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004402:	b480      	push	{r7}
 8004404:	b095      	sub	sp, #84	@ 0x54
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800441e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004428:	643b      	str	r3, [r7, #64]	@ 0x40
 800442a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800442e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e6      	bne.n	800440a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3308      	adds	r3, #8
 8004442:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	61fb      	str	r3, [r7, #28]
   return(result);
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	f023 0301 	bic.w	r3, r3, #1
 8004452:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3308      	adds	r3, #8
 800445a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800445c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800445e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004462:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004464:	e841 2300 	strex	r3, r2, [r1]
 8004468:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e5      	bne.n	800443c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004474:	2b01      	cmp	r3, #1
 8004476:	d118      	bne.n	80044aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	60bb      	str	r3, [r7, #8]
   return(result);
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f023 0310 	bic.w	r3, r3, #16
 800448c:	647b      	str	r3, [r7, #68]	@ 0x44
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	6979      	ldr	r1, [r7, #20]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	613b      	str	r3, [r7, #16]
   return(result);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e6      	bne.n	8004478 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80044be:	bf00      	nop
 80044c0:	3754      	adds	r7, #84	@ 0x54
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <std>:
 80044cc:	2300      	movs	r3, #0
 80044ce:	b510      	push	{r4, lr}
 80044d0:	4604      	mov	r4, r0
 80044d2:	e9c0 3300 	strd	r3, r3, [r0]
 80044d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044da:	6083      	str	r3, [r0, #8]
 80044dc:	8181      	strh	r1, [r0, #12]
 80044de:	6643      	str	r3, [r0, #100]	@ 0x64
 80044e0:	81c2      	strh	r2, [r0, #14]
 80044e2:	6183      	str	r3, [r0, #24]
 80044e4:	4619      	mov	r1, r3
 80044e6:	2208      	movs	r2, #8
 80044e8:	305c      	adds	r0, #92	@ 0x5c
 80044ea:	f000 f90f 	bl	800470c <memset>
 80044ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004524 <std+0x58>)
 80044f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80044f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004528 <std+0x5c>)
 80044f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044f6:	4b0d      	ldr	r3, [pc, #52]	@ (800452c <std+0x60>)
 80044f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80044fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004530 <std+0x64>)
 80044fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80044fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <std+0x68>)
 8004500:	6224      	str	r4, [r4, #32]
 8004502:	429c      	cmp	r4, r3
 8004504:	d006      	beq.n	8004514 <std+0x48>
 8004506:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800450a:	4294      	cmp	r4, r2
 800450c:	d002      	beq.n	8004514 <std+0x48>
 800450e:	33d0      	adds	r3, #208	@ 0xd0
 8004510:	429c      	cmp	r4, r3
 8004512:	d105      	bne.n	8004520 <std+0x54>
 8004514:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800451c:	f000 b928 	b.w	8004770 <__retarget_lock_init_recursive>
 8004520:	bd10      	pop	{r4, pc}
 8004522:	bf00      	nop
 8004524:	08004a2d 	.word	0x08004a2d
 8004528:	08004a4f 	.word	0x08004a4f
 800452c:	08004a87 	.word	0x08004a87
 8004530:	08004aab 	.word	0x08004aab
 8004534:	2000017c 	.word	0x2000017c

08004538 <stdio_exit_handler>:
 8004538:	4a02      	ldr	r2, [pc, #8]	@ (8004544 <stdio_exit_handler+0xc>)
 800453a:	4903      	ldr	r1, [pc, #12]	@ (8004548 <stdio_exit_handler+0x10>)
 800453c:	4803      	ldr	r0, [pc, #12]	@ (800454c <stdio_exit_handler+0x14>)
 800453e:	f000 b869 	b.w	8004614 <_fwalk_sglue>
 8004542:	bf00      	nop
 8004544:	20000018 	.word	0x20000018
 8004548:	080049c5 	.word	0x080049c5
 800454c:	20000028 	.word	0x20000028

08004550 <cleanup_stdio>:
 8004550:	6841      	ldr	r1, [r0, #4]
 8004552:	4b0c      	ldr	r3, [pc, #48]	@ (8004584 <cleanup_stdio+0x34>)
 8004554:	4299      	cmp	r1, r3
 8004556:	b510      	push	{r4, lr}
 8004558:	4604      	mov	r4, r0
 800455a:	d001      	beq.n	8004560 <cleanup_stdio+0x10>
 800455c:	f000 fa32 	bl	80049c4 <_fflush_r>
 8004560:	68a1      	ldr	r1, [r4, #8]
 8004562:	4b09      	ldr	r3, [pc, #36]	@ (8004588 <cleanup_stdio+0x38>)
 8004564:	4299      	cmp	r1, r3
 8004566:	d002      	beq.n	800456e <cleanup_stdio+0x1e>
 8004568:	4620      	mov	r0, r4
 800456a:	f000 fa2b 	bl	80049c4 <_fflush_r>
 800456e:	68e1      	ldr	r1, [r4, #12]
 8004570:	4b06      	ldr	r3, [pc, #24]	@ (800458c <cleanup_stdio+0x3c>)
 8004572:	4299      	cmp	r1, r3
 8004574:	d004      	beq.n	8004580 <cleanup_stdio+0x30>
 8004576:	4620      	mov	r0, r4
 8004578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800457c:	f000 ba22 	b.w	80049c4 <_fflush_r>
 8004580:	bd10      	pop	{r4, pc}
 8004582:	bf00      	nop
 8004584:	2000017c 	.word	0x2000017c
 8004588:	200001e4 	.word	0x200001e4
 800458c:	2000024c 	.word	0x2000024c

08004590 <global_stdio_init.part.0>:
 8004590:	b510      	push	{r4, lr}
 8004592:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <global_stdio_init.part.0+0x30>)
 8004594:	4c0b      	ldr	r4, [pc, #44]	@ (80045c4 <global_stdio_init.part.0+0x34>)
 8004596:	4a0c      	ldr	r2, [pc, #48]	@ (80045c8 <global_stdio_init.part.0+0x38>)
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	4620      	mov	r0, r4
 800459c:	2200      	movs	r2, #0
 800459e:	2104      	movs	r1, #4
 80045a0:	f7ff ff94 	bl	80044cc <std>
 80045a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80045a8:	2201      	movs	r2, #1
 80045aa:	2109      	movs	r1, #9
 80045ac:	f7ff ff8e 	bl	80044cc <std>
 80045b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80045b4:	2202      	movs	r2, #2
 80045b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045ba:	2112      	movs	r1, #18
 80045bc:	f7ff bf86 	b.w	80044cc <std>
 80045c0:	200002b4 	.word	0x200002b4
 80045c4:	2000017c 	.word	0x2000017c
 80045c8:	08004539 	.word	0x08004539

080045cc <__sfp_lock_acquire>:
 80045cc:	4801      	ldr	r0, [pc, #4]	@ (80045d4 <__sfp_lock_acquire+0x8>)
 80045ce:	f000 b8d0 	b.w	8004772 <__retarget_lock_acquire_recursive>
 80045d2:	bf00      	nop
 80045d4:	200002b9 	.word	0x200002b9

080045d8 <__sfp_lock_release>:
 80045d8:	4801      	ldr	r0, [pc, #4]	@ (80045e0 <__sfp_lock_release+0x8>)
 80045da:	f000 b8cb 	b.w	8004774 <__retarget_lock_release_recursive>
 80045de:	bf00      	nop
 80045e0:	200002b9 	.word	0x200002b9

080045e4 <__sinit>:
 80045e4:	b510      	push	{r4, lr}
 80045e6:	4604      	mov	r4, r0
 80045e8:	f7ff fff0 	bl	80045cc <__sfp_lock_acquire>
 80045ec:	6a23      	ldr	r3, [r4, #32]
 80045ee:	b11b      	cbz	r3, 80045f8 <__sinit+0x14>
 80045f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f4:	f7ff bff0 	b.w	80045d8 <__sfp_lock_release>
 80045f8:	4b04      	ldr	r3, [pc, #16]	@ (800460c <__sinit+0x28>)
 80045fa:	6223      	str	r3, [r4, #32]
 80045fc:	4b04      	ldr	r3, [pc, #16]	@ (8004610 <__sinit+0x2c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1f5      	bne.n	80045f0 <__sinit+0xc>
 8004604:	f7ff ffc4 	bl	8004590 <global_stdio_init.part.0>
 8004608:	e7f2      	b.n	80045f0 <__sinit+0xc>
 800460a:	bf00      	nop
 800460c:	08004551 	.word	0x08004551
 8004610:	200002b4 	.word	0x200002b4

08004614 <_fwalk_sglue>:
 8004614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004618:	4607      	mov	r7, r0
 800461a:	4688      	mov	r8, r1
 800461c:	4614      	mov	r4, r2
 800461e:	2600      	movs	r6, #0
 8004620:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004624:	f1b9 0901 	subs.w	r9, r9, #1
 8004628:	d505      	bpl.n	8004636 <_fwalk_sglue+0x22>
 800462a:	6824      	ldr	r4, [r4, #0]
 800462c:	2c00      	cmp	r4, #0
 800462e:	d1f7      	bne.n	8004620 <_fwalk_sglue+0xc>
 8004630:	4630      	mov	r0, r6
 8004632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004636:	89ab      	ldrh	r3, [r5, #12]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d907      	bls.n	800464c <_fwalk_sglue+0x38>
 800463c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004640:	3301      	adds	r3, #1
 8004642:	d003      	beq.n	800464c <_fwalk_sglue+0x38>
 8004644:	4629      	mov	r1, r5
 8004646:	4638      	mov	r0, r7
 8004648:	47c0      	blx	r8
 800464a:	4306      	orrs	r6, r0
 800464c:	3568      	adds	r5, #104	@ 0x68
 800464e:	e7e9      	b.n	8004624 <_fwalk_sglue+0x10>

08004650 <_puts_r>:
 8004650:	6a03      	ldr	r3, [r0, #32]
 8004652:	b570      	push	{r4, r5, r6, lr}
 8004654:	6884      	ldr	r4, [r0, #8]
 8004656:	4605      	mov	r5, r0
 8004658:	460e      	mov	r6, r1
 800465a:	b90b      	cbnz	r3, 8004660 <_puts_r+0x10>
 800465c:	f7ff ffc2 	bl	80045e4 <__sinit>
 8004660:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004662:	07db      	lsls	r3, r3, #31
 8004664:	d405      	bmi.n	8004672 <_puts_r+0x22>
 8004666:	89a3      	ldrh	r3, [r4, #12]
 8004668:	0598      	lsls	r0, r3, #22
 800466a:	d402      	bmi.n	8004672 <_puts_r+0x22>
 800466c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800466e:	f000 f880 	bl	8004772 <__retarget_lock_acquire_recursive>
 8004672:	89a3      	ldrh	r3, [r4, #12]
 8004674:	0719      	lsls	r1, r3, #28
 8004676:	d502      	bpl.n	800467e <_puts_r+0x2e>
 8004678:	6923      	ldr	r3, [r4, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d135      	bne.n	80046ea <_puts_r+0x9a>
 800467e:	4621      	mov	r1, r4
 8004680:	4628      	mov	r0, r5
 8004682:	f000 fa55 	bl	8004b30 <__swsetup_r>
 8004686:	b380      	cbz	r0, 80046ea <_puts_r+0x9a>
 8004688:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800468c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800468e:	07da      	lsls	r2, r3, #31
 8004690:	d405      	bmi.n	800469e <_puts_r+0x4e>
 8004692:	89a3      	ldrh	r3, [r4, #12]
 8004694:	059b      	lsls	r3, r3, #22
 8004696:	d402      	bmi.n	800469e <_puts_r+0x4e>
 8004698:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800469a:	f000 f86b 	bl	8004774 <__retarget_lock_release_recursive>
 800469e:	4628      	mov	r0, r5
 80046a0:	bd70      	pop	{r4, r5, r6, pc}
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	da04      	bge.n	80046b0 <_puts_r+0x60>
 80046a6:	69a2      	ldr	r2, [r4, #24]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	dc17      	bgt.n	80046dc <_puts_r+0x8c>
 80046ac:	290a      	cmp	r1, #10
 80046ae:	d015      	beq.n	80046dc <_puts_r+0x8c>
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	6022      	str	r2, [r4, #0]
 80046b6:	7019      	strb	r1, [r3, #0]
 80046b8:	68a3      	ldr	r3, [r4, #8]
 80046ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046be:	3b01      	subs	r3, #1
 80046c0:	60a3      	str	r3, [r4, #8]
 80046c2:	2900      	cmp	r1, #0
 80046c4:	d1ed      	bne.n	80046a2 <_puts_r+0x52>
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	da11      	bge.n	80046ee <_puts_r+0x9e>
 80046ca:	4622      	mov	r2, r4
 80046cc:	210a      	movs	r1, #10
 80046ce:	4628      	mov	r0, r5
 80046d0:	f000 f9ef 	bl	8004ab2 <__swbuf_r>
 80046d4:	3001      	adds	r0, #1
 80046d6:	d0d7      	beq.n	8004688 <_puts_r+0x38>
 80046d8:	250a      	movs	r5, #10
 80046da:	e7d7      	b.n	800468c <_puts_r+0x3c>
 80046dc:	4622      	mov	r2, r4
 80046de:	4628      	mov	r0, r5
 80046e0:	f000 f9e7 	bl	8004ab2 <__swbuf_r>
 80046e4:	3001      	adds	r0, #1
 80046e6:	d1e7      	bne.n	80046b8 <_puts_r+0x68>
 80046e8:	e7ce      	b.n	8004688 <_puts_r+0x38>
 80046ea:	3e01      	subs	r6, #1
 80046ec:	e7e4      	b.n	80046b8 <_puts_r+0x68>
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	6022      	str	r2, [r4, #0]
 80046f4:	220a      	movs	r2, #10
 80046f6:	701a      	strb	r2, [r3, #0]
 80046f8:	e7ee      	b.n	80046d8 <_puts_r+0x88>
	...

080046fc <puts>:
 80046fc:	4b02      	ldr	r3, [pc, #8]	@ (8004708 <puts+0xc>)
 80046fe:	4601      	mov	r1, r0
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	f7ff bfa5 	b.w	8004650 <_puts_r>
 8004706:	bf00      	nop
 8004708:	20000024 	.word	0x20000024

0800470c <memset>:
 800470c:	4402      	add	r2, r0
 800470e:	4603      	mov	r3, r0
 8004710:	4293      	cmp	r3, r2
 8004712:	d100      	bne.n	8004716 <memset+0xa>
 8004714:	4770      	bx	lr
 8004716:	f803 1b01 	strb.w	r1, [r3], #1
 800471a:	e7f9      	b.n	8004710 <memset+0x4>

0800471c <__errno>:
 800471c:	4b01      	ldr	r3, [pc, #4]	@ (8004724 <__errno+0x8>)
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	20000024 	.word	0x20000024

08004728 <__libc_init_array>:
 8004728:	b570      	push	{r4, r5, r6, lr}
 800472a:	4d0d      	ldr	r5, [pc, #52]	@ (8004760 <__libc_init_array+0x38>)
 800472c:	4c0d      	ldr	r4, [pc, #52]	@ (8004764 <__libc_init_array+0x3c>)
 800472e:	1b64      	subs	r4, r4, r5
 8004730:	10a4      	asrs	r4, r4, #2
 8004732:	2600      	movs	r6, #0
 8004734:	42a6      	cmp	r6, r4
 8004736:	d109      	bne.n	800474c <__libc_init_array+0x24>
 8004738:	4d0b      	ldr	r5, [pc, #44]	@ (8004768 <__libc_init_array+0x40>)
 800473a:	4c0c      	ldr	r4, [pc, #48]	@ (800476c <__libc_init_array+0x44>)
 800473c:	f000 fb72 	bl	8004e24 <_init>
 8004740:	1b64      	subs	r4, r4, r5
 8004742:	10a4      	asrs	r4, r4, #2
 8004744:	2600      	movs	r6, #0
 8004746:	42a6      	cmp	r6, r4
 8004748:	d105      	bne.n	8004756 <__libc_init_array+0x2e>
 800474a:	bd70      	pop	{r4, r5, r6, pc}
 800474c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004750:	4798      	blx	r3
 8004752:	3601      	adds	r6, #1
 8004754:	e7ee      	b.n	8004734 <__libc_init_array+0xc>
 8004756:	f855 3b04 	ldr.w	r3, [r5], #4
 800475a:	4798      	blx	r3
 800475c:	3601      	adds	r6, #1
 800475e:	e7f2      	b.n	8004746 <__libc_init_array+0x1e>
 8004760:	08004edc 	.word	0x08004edc
 8004764:	08004edc 	.word	0x08004edc
 8004768:	08004edc 	.word	0x08004edc
 800476c:	08004ee0 	.word	0x08004ee0

08004770 <__retarget_lock_init_recursive>:
 8004770:	4770      	bx	lr

08004772 <__retarget_lock_acquire_recursive>:
 8004772:	4770      	bx	lr

08004774 <__retarget_lock_release_recursive>:
 8004774:	4770      	bx	lr
	...

08004778 <sbrk_aligned>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	4e0f      	ldr	r6, [pc, #60]	@ (80047b8 <sbrk_aligned+0x40>)
 800477c:	460c      	mov	r4, r1
 800477e:	6831      	ldr	r1, [r6, #0]
 8004780:	4605      	mov	r5, r0
 8004782:	b911      	cbnz	r1, 800478a <sbrk_aligned+0x12>
 8004784:	f000 fae2 	bl	8004d4c <_sbrk_r>
 8004788:	6030      	str	r0, [r6, #0]
 800478a:	4621      	mov	r1, r4
 800478c:	4628      	mov	r0, r5
 800478e:	f000 fadd 	bl	8004d4c <_sbrk_r>
 8004792:	1c43      	adds	r3, r0, #1
 8004794:	d103      	bne.n	800479e <sbrk_aligned+0x26>
 8004796:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800479a:	4620      	mov	r0, r4
 800479c:	bd70      	pop	{r4, r5, r6, pc}
 800479e:	1cc4      	adds	r4, r0, #3
 80047a0:	f024 0403 	bic.w	r4, r4, #3
 80047a4:	42a0      	cmp	r0, r4
 80047a6:	d0f8      	beq.n	800479a <sbrk_aligned+0x22>
 80047a8:	1a21      	subs	r1, r4, r0
 80047aa:	4628      	mov	r0, r5
 80047ac:	f000 face 	bl	8004d4c <_sbrk_r>
 80047b0:	3001      	adds	r0, #1
 80047b2:	d1f2      	bne.n	800479a <sbrk_aligned+0x22>
 80047b4:	e7ef      	b.n	8004796 <sbrk_aligned+0x1e>
 80047b6:	bf00      	nop
 80047b8:	200002bc 	.word	0x200002bc

080047bc <_malloc_r>:
 80047bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047c0:	1ccd      	adds	r5, r1, #3
 80047c2:	f025 0503 	bic.w	r5, r5, #3
 80047c6:	3508      	adds	r5, #8
 80047c8:	2d0c      	cmp	r5, #12
 80047ca:	bf38      	it	cc
 80047cc:	250c      	movcc	r5, #12
 80047ce:	2d00      	cmp	r5, #0
 80047d0:	4606      	mov	r6, r0
 80047d2:	db01      	blt.n	80047d8 <_malloc_r+0x1c>
 80047d4:	42a9      	cmp	r1, r5
 80047d6:	d904      	bls.n	80047e2 <_malloc_r+0x26>
 80047d8:	230c      	movs	r3, #12
 80047da:	6033      	str	r3, [r6, #0]
 80047dc:	2000      	movs	r0, #0
 80047de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048b8 <_malloc_r+0xfc>
 80047e6:	f000 f915 	bl	8004a14 <__malloc_lock>
 80047ea:	f8d8 3000 	ldr.w	r3, [r8]
 80047ee:	461c      	mov	r4, r3
 80047f0:	bb44      	cbnz	r4, 8004844 <_malloc_r+0x88>
 80047f2:	4629      	mov	r1, r5
 80047f4:	4630      	mov	r0, r6
 80047f6:	f7ff ffbf 	bl	8004778 <sbrk_aligned>
 80047fa:	1c43      	adds	r3, r0, #1
 80047fc:	4604      	mov	r4, r0
 80047fe:	d158      	bne.n	80048b2 <_malloc_r+0xf6>
 8004800:	f8d8 4000 	ldr.w	r4, [r8]
 8004804:	4627      	mov	r7, r4
 8004806:	2f00      	cmp	r7, #0
 8004808:	d143      	bne.n	8004892 <_malloc_r+0xd6>
 800480a:	2c00      	cmp	r4, #0
 800480c:	d04b      	beq.n	80048a6 <_malloc_r+0xea>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	4639      	mov	r1, r7
 8004812:	4630      	mov	r0, r6
 8004814:	eb04 0903 	add.w	r9, r4, r3
 8004818:	f000 fa98 	bl	8004d4c <_sbrk_r>
 800481c:	4581      	cmp	r9, r0
 800481e:	d142      	bne.n	80048a6 <_malloc_r+0xea>
 8004820:	6821      	ldr	r1, [r4, #0]
 8004822:	1a6d      	subs	r5, r5, r1
 8004824:	4629      	mov	r1, r5
 8004826:	4630      	mov	r0, r6
 8004828:	f7ff ffa6 	bl	8004778 <sbrk_aligned>
 800482c:	3001      	adds	r0, #1
 800482e:	d03a      	beq.n	80048a6 <_malloc_r+0xea>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	442b      	add	r3, r5
 8004834:	6023      	str	r3, [r4, #0]
 8004836:	f8d8 3000 	ldr.w	r3, [r8]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	bb62      	cbnz	r2, 8004898 <_malloc_r+0xdc>
 800483e:	f8c8 7000 	str.w	r7, [r8]
 8004842:	e00f      	b.n	8004864 <_malloc_r+0xa8>
 8004844:	6822      	ldr	r2, [r4, #0]
 8004846:	1b52      	subs	r2, r2, r5
 8004848:	d420      	bmi.n	800488c <_malloc_r+0xd0>
 800484a:	2a0b      	cmp	r2, #11
 800484c:	d917      	bls.n	800487e <_malloc_r+0xc2>
 800484e:	1961      	adds	r1, r4, r5
 8004850:	42a3      	cmp	r3, r4
 8004852:	6025      	str	r5, [r4, #0]
 8004854:	bf18      	it	ne
 8004856:	6059      	strne	r1, [r3, #4]
 8004858:	6863      	ldr	r3, [r4, #4]
 800485a:	bf08      	it	eq
 800485c:	f8c8 1000 	streq.w	r1, [r8]
 8004860:	5162      	str	r2, [r4, r5]
 8004862:	604b      	str	r3, [r1, #4]
 8004864:	4630      	mov	r0, r6
 8004866:	f000 f8db 	bl	8004a20 <__malloc_unlock>
 800486a:	f104 000b 	add.w	r0, r4, #11
 800486e:	1d23      	adds	r3, r4, #4
 8004870:	f020 0007 	bic.w	r0, r0, #7
 8004874:	1ac2      	subs	r2, r0, r3
 8004876:	bf1c      	itt	ne
 8004878:	1a1b      	subne	r3, r3, r0
 800487a:	50a3      	strne	r3, [r4, r2]
 800487c:	e7af      	b.n	80047de <_malloc_r+0x22>
 800487e:	6862      	ldr	r2, [r4, #4]
 8004880:	42a3      	cmp	r3, r4
 8004882:	bf0c      	ite	eq
 8004884:	f8c8 2000 	streq.w	r2, [r8]
 8004888:	605a      	strne	r2, [r3, #4]
 800488a:	e7eb      	b.n	8004864 <_malloc_r+0xa8>
 800488c:	4623      	mov	r3, r4
 800488e:	6864      	ldr	r4, [r4, #4]
 8004890:	e7ae      	b.n	80047f0 <_malloc_r+0x34>
 8004892:	463c      	mov	r4, r7
 8004894:	687f      	ldr	r7, [r7, #4]
 8004896:	e7b6      	b.n	8004806 <_malloc_r+0x4a>
 8004898:	461a      	mov	r2, r3
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	42a3      	cmp	r3, r4
 800489e:	d1fb      	bne.n	8004898 <_malloc_r+0xdc>
 80048a0:	2300      	movs	r3, #0
 80048a2:	6053      	str	r3, [r2, #4]
 80048a4:	e7de      	b.n	8004864 <_malloc_r+0xa8>
 80048a6:	230c      	movs	r3, #12
 80048a8:	6033      	str	r3, [r6, #0]
 80048aa:	4630      	mov	r0, r6
 80048ac:	f000 f8b8 	bl	8004a20 <__malloc_unlock>
 80048b0:	e794      	b.n	80047dc <_malloc_r+0x20>
 80048b2:	6005      	str	r5, [r0, #0]
 80048b4:	e7d6      	b.n	8004864 <_malloc_r+0xa8>
 80048b6:	bf00      	nop
 80048b8:	200002c0 	.word	0x200002c0

080048bc <__sflush_r>:
 80048bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c4:	0716      	lsls	r6, r2, #28
 80048c6:	4605      	mov	r5, r0
 80048c8:	460c      	mov	r4, r1
 80048ca:	d454      	bmi.n	8004976 <__sflush_r+0xba>
 80048cc:	684b      	ldr	r3, [r1, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	dc02      	bgt.n	80048d8 <__sflush_r+0x1c>
 80048d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	dd48      	ble.n	800496a <__sflush_r+0xae>
 80048d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048da:	2e00      	cmp	r6, #0
 80048dc:	d045      	beq.n	800496a <__sflush_r+0xae>
 80048de:	2300      	movs	r3, #0
 80048e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80048e4:	682f      	ldr	r7, [r5, #0]
 80048e6:	6a21      	ldr	r1, [r4, #32]
 80048e8:	602b      	str	r3, [r5, #0]
 80048ea:	d030      	beq.n	800494e <__sflush_r+0x92>
 80048ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80048ee:	89a3      	ldrh	r3, [r4, #12]
 80048f0:	0759      	lsls	r1, r3, #29
 80048f2:	d505      	bpl.n	8004900 <__sflush_r+0x44>
 80048f4:	6863      	ldr	r3, [r4, #4]
 80048f6:	1ad2      	subs	r2, r2, r3
 80048f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80048fa:	b10b      	cbz	r3, 8004900 <__sflush_r+0x44>
 80048fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80048fe:	1ad2      	subs	r2, r2, r3
 8004900:	2300      	movs	r3, #0
 8004902:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004904:	6a21      	ldr	r1, [r4, #32]
 8004906:	4628      	mov	r0, r5
 8004908:	47b0      	blx	r6
 800490a:	1c43      	adds	r3, r0, #1
 800490c:	89a3      	ldrh	r3, [r4, #12]
 800490e:	d106      	bne.n	800491e <__sflush_r+0x62>
 8004910:	6829      	ldr	r1, [r5, #0]
 8004912:	291d      	cmp	r1, #29
 8004914:	d82b      	bhi.n	800496e <__sflush_r+0xb2>
 8004916:	4a2a      	ldr	r2, [pc, #168]	@ (80049c0 <__sflush_r+0x104>)
 8004918:	410a      	asrs	r2, r1
 800491a:	07d6      	lsls	r6, r2, #31
 800491c:	d427      	bmi.n	800496e <__sflush_r+0xb2>
 800491e:	2200      	movs	r2, #0
 8004920:	6062      	str	r2, [r4, #4]
 8004922:	04d9      	lsls	r1, r3, #19
 8004924:	6922      	ldr	r2, [r4, #16]
 8004926:	6022      	str	r2, [r4, #0]
 8004928:	d504      	bpl.n	8004934 <__sflush_r+0x78>
 800492a:	1c42      	adds	r2, r0, #1
 800492c:	d101      	bne.n	8004932 <__sflush_r+0x76>
 800492e:	682b      	ldr	r3, [r5, #0]
 8004930:	b903      	cbnz	r3, 8004934 <__sflush_r+0x78>
 8004932:	6560      	str	r0, [r4, #84]	@ 0x54
 8004934:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004936:	602f      	str	r7, [r5, #0]
 8004938:	b1b9      	cbz	r1, 800496a <__sflush_r+0xae>
 800493a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800493e:	4299      	cmp	r1, r3
 8004940:	d002      	beq.n	8004948 <__sflush_r+0x8c>
 8004942:	4628      	mov	r0, r5
 8004944:	f000 fa24 	bl	8004d90 <_free_r>
 8004948:	2300      	movs	r3, #0
 800494a:	6363      	str	r3, [r4, #52]	@ 0x34
 800494c:	e00d      	b.n	800496a <__sflush_r+0xae>
 800494e:	2301      	movs	r3, #1
 8004950:	4628      	mov	r0, r5
 8004952:	47b0      	blx	r6
 8004954:	4602      	mov	r2, r0
 8004956:	1c50      	adds	r0, r2, #1
 8004958:	d1c9      	bne.n	80048ee <__sflush_r+0x32>
 800495a:	682b      	ldr	r3, [r5, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0c6      	beq.n	80048ee <__sflush_r+0x32>
 8004960:	2b1d      	cmp	r3, #29
 8004962:	d001      	beq.n	8004968 <__sflush_r+0xac>
 8004964:	2b16      	cmp	r3, #22
 8004966:	d11e      	bne.n	80049a6 <__sflush_r+0xea>
 8004968:	602f      	str	r7, [r5, #0]
 800496a:	2000      	movs	r0, #0
 800496c:	e022      	b.n	80049b4 <__sflush_r+0xf8>
 800496e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004972:	b21b      	sxth	r3, r3
 8004974:	e01b      	b.n	80049ae <__sflush_r+0xf2>
 8004976:	690f      	ldr	r7, [r1, #16]
 8004978:	2f00      	cmp	r7, #0
 800497a:	d0f6      	beq.n	800496a <__sflush_r+0xae>
 800497c:	0793      	lsls	r3, r2, #30
 800497e:	680e      	ldr	r6, [r1, #0]
 8004980:	bf08      	it	eq
 8004982:	694b      	ldreq	r3, [r1, #20]
 8004984:	600f      	str	r7, [r1, #0]
 8004986:	bf18      	it	ne
 8004988:	2300      	movne	r3, #0
 800498a:	eba6 0807 	sub.w	r8, r6, r7
 800498e:	608b      	str	r3, [r1, #8]
 8004990:	f1b8 0f00 	cmp.w	r8, #0
 8004994:	dde9      	ble.n	800496a <__sflush_r+0xae>
 8004996:	6a21      	ldr	r1, [r4, #32]
 8004998:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800499a:	4643      	mov	r3, r8
 800499c:	463a      	mov	r2, r7
 800499e:	4628      	mov	r0, r5
 80049a0:	47b0      	blx	r6
 80049a2:	2800      	cmp	r0, #0
 80049a4:	dc08      	bgt.n	80049b8 <__sflush_r+0xfc>
 80049a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ae:	81a3      	strh	r3, [r4, #12]
 80049b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b8:	4407      	add	r7, r0
 80049ba:	eba8 0800 	sub.w	r8, r8, r0
 80049be:	e7e7      	b.n	8004990 <__sflush_r+0xd4>
 80049c0:	dfbffffe 	.word	0xdfbffffe

080049c4 <_fflush_r>:
 80049c4:	b538      	push	{r3, r4, r5, lr}
 80049c6:	690b      	ldr	r3, [r1, #16]
 80049c8:	4605      	mov	r5, r0
 80049ca:	460c      	mov	r4, r1
 80049cc:	b913      	cbnz	r3, 80049d4 <_fflush_r+0x10>
 80049ce:	2500      	movs	r5, #0
 80049d0:	4628      	mov	r0, r5
 80049d2:	bd38      	pop	{r3, r4, r5, pc}
 80049d4:	b118      	cbz	r0, 80049de <_fflush_r+0x1a>
 80049d6:	6a03      	ldr	r3, [r0, #32]
 80049d8:	b90b      	cbnz	r3, 80049de <_fflush_r+0x1a>
 80049da:	f7ff fe03 	bl	80045e4 <__sinit>
 80049de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f3      	beq.n	80049ce <_fflush_r+0xa>
 80049e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80049e8:	07d0      	lsls	r0, r2, #31
 80049ea:	d404      	bmi.n	80049f6 <_fflush_r+0x32>
 80049ec:	0599      	lsls	r1, r3, #22
 80049ee:	d402      	bmi.n	80049f6 <_fflush_r+0x32>
 80049f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049f2:	f7ff febe 	bl	8004772 <__retarget_lock_acquire_recursive>
 80049f6:	4628      	mov	r0, r5
 80049f8:	4621      	mov	r1, r4
 80049fa:	f7ff ff5f 	bl	80048bc <__sflush_r>
 80049fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a00:	07da      	lsls	r2, r3, #31
 8004a02:	4605      	mov	r5, r0
 8004a04:	d4e4      	bmi.n	80049d0 <_fflush_r+0xc>
 8004a06:	89a3      	ldrh	r3, [r4, #12]
 8004a08:	059b      	lsls	r3, r3, #22
 8004a0a:	d4e1      	bmi.n	80049d0 <_fflush_r+0xc>
 8004a0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a0e:	f7ff feb1 	bl	8004774 <__retarget_lock_release_recursive>
 8004a12:	e7dd      	b.n	80049d0 <_fflush_r+0xc>

08004a14 <__malloc_lock>:
 8004a14:	4801      	ldr	r0, [pc, #4]	@ (8004a1c <__malloc_lock+0x8>)
 8004a16:	f7ff beac 	b.w	8004772 <__retarget_lock_acquire_recursive>
 8004a1a:	bf00      	nop
 8004a1c:	200002b8 	.word	0x200002b8

08004a20 <__malloc_unlock>:
 8004a20:	4801      	ldr	r0, [pc, #4]	@ (8004a28 <__malloc_unlock+0x8>)
 8004a22:	f7ff bea7 	b.w	8004774 <__retarget_lock_release_recursive>
 8004a26:	bf00      	nop
 8004a28:	200002b8 	.word	0x200002b8

08004a2c <__sread>:
 8004a2c:	b510      	push	{r4, lr}
 8004a2e:	460c      	mov	r4, r1
 8004a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a34:	f000 f978 	bl	8004d28 <_read_r>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	bfab      	itete	ge
 8004a3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a3e:	89a3      	ldrhlt	r3, [r4, #12]
 8004a40:	181b      	addge	r3, r3, r0
 8004a42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a46:	bfac      	ite	ge
 8004a48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a4a:	81a3      	strhlt	r3, [r4, #12]
 8004a4c:	bd10      	pop	{r4, pc}

08004a4e <__swrite>:
 8004a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a52:	461f      	mov	r7, r3
 8004a54:	898b      	ldrh	r3, [r1, #12]
 8004a56:	05db      	lsls	r3, r3, #23
 8004a58:	4605      	mov	r5, r0
 8004a5a:	460c      	mov	r4, r1
 8004a5c:	4616      	mov	r6, r2
 8004a5e:	d505      	bpl.n	8004a6c <__swrite+0x1e>
 8004a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a64:	2302      	movs	r3, #2
 8004a66:	2200      	movs	r2, #0
 8004a68:	f000 f94c 	bl	8004d04 <_lseek_r>
 8004a6c:	89a3      	ldrh	r3, [r4, #12]
 8004a6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a76:	81a3      	strh	r3, [r4, #12]
 8004a78:	4632      	mov	r2, r6
 8004a7a:	463b      	mov	r3, r7
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a82:	f000 b973 	b.w	8004d6c <_write_r>

08004a86 <__sseek>:
 8004a86:	b510      	push	{r4, lr}
 8004a88:	460c      	mov	r4, r1
 8004a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a8e:	f000 f939 	bl	8004d04 <_lseek_r>
 8004a92:	1c43      	adds	r3, r0, #1
 8004a94:	89a3      	ldrh	r3, [r4, #12]
 8004a96:	bf15      	itete	ne
 8004a98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004aa2:	81a3      	strheq	r3, [r4, #12]
 8004aa4:	bf18      	it	ne
 8004aa6:	81a3      	strhne	r3, [r4, #12]
 8004aa8:	bd10      	pop	{r4, pc}

08004aaa <__sclose>:
 8004aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aae:	f000 b8f7 	b.w	8004ca0 <_close_r>

08004ab2 <__swbuf_r>:
 8004ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab4:	460e      	mov	r6, r1
 8004ab6:	4614      	mov	r4, r2
 8004ab8:	4605      	mov	r5, r0
 8004aba:	b118      	cbz	r0, 8004ac4 <__swbuf_r+0x12>
 8004abc:	6a03      	ldr	r3, [r0, #32]
 8004abe:	b90b      	cbnz	r3, 8004ac4 <__swbuf_r+0x12>
 8004ac0:	f7ff fd90 	bl	80045e4 <__sinit>
 8004ac4:	69a3      	ldr	r3, [r4, #24]
 8004ac6:	60a3      	str	r3, [r4, #8]
 8004ac8:	89a3      	ldrh	r3, [r4, #12]
 8004aca:	071a      	lsls	r2, r3, #28
 8004acc:	d501      	bpl.n	8004ad2 <__swbuf_r+0x20>
 8004ace:	6923      	ldr	r3, [r4, #16]
 8004ad0:	b943      	cbnz	r3, 8004ae4 <__swbuf_r+0x32>
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	f000 f82b 	bl	8004b30 <__swsetup_r>
 8004ada:	b118      	cbz	r0, 8004ae4 <__swbuf_r+0x32>
 8004adc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004ae0:	4638      	mov	r0, r7
 8004ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	6922      	ldr	r2, [r4, #16]
 8004ae8:	1a98      	subs	r0, r3, r2
 8004aea:	6963      	ldr	r3, [r4, #20]
 8004aec:	b2f6      	uxtb	r6, r6
 8004aee:	4283      	cmp	r3, r0
 8004af0:	4637      	mov	r7, r6
 8004af2:	dc05      	bgt.n	8004b00 <__swbuf_r+0x4e>
 8004af4:	4621      	mov	r1, r4
 8004af6:	4628      	mov	r0, r5
 8004af8:	f7ff ff64 	bl	80049c4 <_fflush_r>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	d1ed      	bne.n	8004adc <__swbuf_r+0x2a>
 8004b00:	68a3      	ldr	r3, [r4, #8]
 8004b02:	3b01      	subs	r3, #1
 8004b04:	60a3      	str	r3, [r4, #8]
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	6022      	str	r2, [r4, #0]
 8004b0c:	701e      	strb	r6, [r3, #0]
 8004b0e:	6962      	ldr	r2, [r4, #20]
 8004b10:	1c43      	adds	r3, r0, #1
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d004      	beq.n	8004b20 <__swbuf_r+0x6e>
 8004b16:	89a3      	ldrh	r3, [r4, #12]
 8004b18:	07db      	lsls	r3, r3, #31
 8004b1a:	d5e1      	bpl.n	8004ae0 <__swbuf_r+0x2e>
 8004b1c:	2e0a      	cmp	r6, #10
 8004b1e:	d1df      	bne.n	8004ae0 <__swbuf_r+0x2e>
 8004b20:	4621      	mov	r1, r4
 8004b22:	4628      	mov	r0, r5
 8004b24:	f7ff ff4e 	bl	80049c4 <_fflush_r>
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	d0d9      	beq.n	8004ae0 <__swbuf_r+0x2e>
 8004b2c:	e7d6      	b.n	8004adc <__swbuf_r+0x2a>
	...

08004b30 <__swsetup_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	4b29      	ldr	r3, [pc, #164]	@ (8004bd8 <__swsetup_r+0xa8>)
 8004b34:	4605      	mov	r5, r0
 8004b36:	6818      	ldr	r0, [r3, #0]
 8004b38:	460c      	mov	r4, r1
 8004b3a:	b118      	cbz	r0, 8004b44 <__swsetup_r+0x14>
 8004b3c:	6a03      	ldr	r3, [r0, #32]
 8004b3e:	b90b      	cbnz	r3, 8004b44 <__swsetup_r+0x14>
 8004b40:	f7ff fd50 	bl	80045e4 <__sinit>
 8004b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b48:	0719      	lsls	r1, r3, #28
 8004b4a:	d422      	bmi.n	8004b92 <__swsetup_r+0x62>
 8004b4c:	06da      	lsls	r2, r3, #27
 8004b4e:	d407      	bmi.n	8004b60 <__swsetup_r+0x30>
 8004b50:	2209      	movs	r2, #9
 8004b52:	602a      	str	r2, [r5, #0]
 8004b54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b58:	81a3      	strh	r3, [r4, #12]
 8004b5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b5e:	e033      	b.n	8004bc8 <__swsetup_r+0x98>
 8004b60:	0758      	lsls	r0, r3, #29
 8004b62:	d512      	bpl.n	8004b8a <__swsetup_r+0x5a>
 8004b64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b66:	b141      	cbz	r1, 8004b7a <__swsetup_r+0x4a>
 8004b68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b6c:	4299      	cmp	r1, r3
 8004b6e:	d002      	beq.n	8004b76 <__swsetup_r+0x46>
 8004b70:	4628      	mov	r0, r5
 8004b72:	f000 f90d 	bl	8004d90 <_free_r>
 8004b76:	2300      	movs	r3, #0
 8004b78:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b7a:	89a3      	ldrh	r3, [r4, #12]
 8004b7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004b80:	81a3      	strh	r3, [r4, #12]
 8004b82:	2300      	movs	r3, #0
 8004b84:	6063      	str	r3, [r4, #4]
 8004b86:	6923      	ldr	r3, [r4, #16]
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	89a3      	ldrh	r3, [r4, #12]
 8004b8c:	f043 0308 	orr.w	r3, r3, #8
 8004b90:	81a3      	strh	r3, [r4, #12]
 8004b92:	6923      	ldr	r3, [r4, #16]
 8004b94:	b94b      	cbnz	r3, 8004baa <__swsetup_r+0x7a>
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ba0:	d003      	beq.n	8004baa <__swsetup_r+0x7a>
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	f000 f83f 	bl	8004c28 <__smakebuf_r>
 8004baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bae:	f013 0201 	ands.w	r2, r3, #1
 8004bb2:	d00a      	beq.n	8004bca <__swsetup_r+0x9a>
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	60a2      	str	r2, [r4, #8]
 8004bb8:	6962      	ldr	r2, [r4, #20]
 8004bba:	4252      	negs	r2, r2
 8004bbc:	61a2      	str	r2, [r4, #24]
 8004bbe:	6922      	ldr	r2, [r4, #16]
 8004bc0:	b942      	cbnz	r2, 8004bd4 <__swsetup_r+0xa4>
 8004bc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004bc6:	d1c5      	bne.n	8004b54 <__swsetup_r+0x24>
 8004bc8:	bd38      	pop	{r3, r4, r5, pc}
 8004bca:	0799      	lsls	r1, r3, #30
 8004bcc:	bf58      	it	pl
 8004bce:	6962      	ldrpl	r2, [r4, #20]
 8004bd0:	60a2      	str	r2, [r4, #8]
 8004bd2:	e7f4      	b.n	8004bbe <__swsetup_r+0x8e>
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	e7f7      	b.n	8004bc8 <__swsetup_r+0x98>
 8004bd8:	20000024 	.word	0x20000024

08004bdc <__swhatbuf_r>:
 8004bdc:	b570      	push	{r4, r5, r6, lr}
 8004bde:	460c      	mov	r4, r1
 8004be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be4:	2900      	cmp	r1, #0
 8004be6:	b096      	sub	sp, #88	@ 0x58
 8004be8:	4615      	mov	r5, r2
 8004bea:	461e      	mov	r6, r3
 8004bec:	da0d      	bge.n	8004c0a <__swhatbuf_r+0x2e>
 8004bee:	89a3      	ldrh	r3, [r4, #12]
 8004bf0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004bf4:	f04f 0100 	mov.w	r1, #0
 8004bf8:	bf14      	ite	ne
 8004bfa:	2340      	movne	r3, #64	@ 0x40
 8004bfc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c00:	2000      	movs	r0, #0
 8004c02:	6031      	str	r1, [r6, #0]
 8004c04:	602b      	str	r3, [r5, #0]
 8004c06:	b016      	add	sp, #88	@ 0x58
 8004c08:	bd70      	pop	{r4, r5, r6, pc}
 8004c0a:	466a      	mov	r2, sp
 8004c0c:	f000 f858 	bl	8004cc0 <_fstat_r>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	dbec      	blt.n	8004bee <__swhatbuf_r+0x12>
 8004c14:	9901      	ldr	r1, [sp, #4]
 8004c16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004c1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c1e:	4259      	negs	r1, r3
 8004c20:	4159      	adcs	r1, r3
 8004c22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c26:	e7eb      	b.n	8004c00 <__swhatbuf_r+0x24>

08004c28 <__smakebuf_r>:
 8004c28:	898b      	ldrh	r3, [r1, #12]
 8004c2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c2c:	079d      	lsls	r5, r3, #30
 8004c2e:	4606      	mov	r6, r0
 8004c30:	460c      	mov	r4, r1
 8004c32:	d507      	bpl.n	8004c44 <__smakebuf_r+0x1c>
 8004c34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	6123      	str	r3, [r4, #16]
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	6163      	str	r3, [r4, #20]
 8004c40:	b003      	add	sp, #12
 8004c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c44:	ab01      	add	r3, sp, #4
 8004c46:	466a      	mov	r2, sp
 8004c48:	f7ff ffc8 	bl	8004bdc <__swhatbuf_r>
 8004c4c:	9f00      	ldr	r7, [sp, #0]
 8004c4e:	4605      	mov	r5, r0
 8004c50:	4639      	mov	r1, r7
 8004c52:	4630      	mov	r0, r6
 8004c54:	f7ff fdb2 	bl	80047bc <_malloc_r>
 8004c58:	b948      	cbnz	r0, 8004c6e <__smakebuf_r+0x46>
 8004c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c5e:	059a      	lsls	r2, r3, #22
 8004c60:	d4ee      	bmi.n	8004c40 <__smakebuf_r+0x18>
 8004c62:	f023 0303 	bic.w	r3, r3, #3
 8004c66:	f043 0302 	orr.w	r3, r3, #2
 8004c6a:	81a3      	strh	r3, [r4, #12]
 8004c6c:	e7e2      	b.n	8004c34 <__smakebuf_r+0xc>
 8004c6e:	89a3      	ldrh	r3, [r4, #12]
 8004c70:	6020      	str	r0, [r4, #0]
 8004c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c76:	81a3      	strh	r3, [r4, #12]
 8004c78:	9b01      	ldr	r3, [sp, #4]
 8004c7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c7e:	b15b      	cbz	r3, 8004c98 <__smakebuf_r+0x70>
 8004c80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c84:	4630      	mov	r0, r6
 8004c86:	f000 f82d 	bl	8004ce4 <_isatty_r>
 8004c8a:	b128      	cbz	r0, 8004c98 <__smakebuf_r+0x70>
 8004c8c:	89a3      	ldrh	r3, [r4, #12]
 8004c8e:	f023 0303 	bic.w	r3, r3, #3
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	81a3      	strh	r3, [r4, #12]
 8004c98:	89a3      	ldrh	r3, [r4, #12]
 8004c9a:	431d      	orrs	r5, r3
 8004c9c:	81a5      	strh	r5, [r4, #12]
 8004c9e:	e7cf      	b.n	8004c40 <__smakebuf_r+0x18>

08004ca0 <_close_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	4d06      	ldr	r5, [pc, #24]	@ (8004cbc <_close_r+0x1c>)
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	4608      	mov	r0, r1
 8004caa:	602b      	str	r3, [r5, #0]
 8004cac:	f7fc f930 	bl	8000f10 <_close>
 8004cb0:	1c43      	adds	r3, r0, #1
 8004cb2:	d102      	bne.n	8004cba <_close_r+0x1a>
 8004cb4:	682b      	ldr	r3, [r5, #0]
 8004cb6:	b103      	cbz	r3, 8004cba <_close_r+0x1a>
 8004cb8:	6023      	str	r3, [r4, #0]
 8004cba:	bd38      	pop	{r3, r4, r5, pc}
 8004cbc:	200002c4 	.word	0x200002c4

08004cc0 <_fstat_r>:
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	4d07      	ldr	r5, [pc, #28]	@ (8004ce0 <_fstat_r+0x20>)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	4608      	mov	r0, r1
 8004cca:	4611      	mov	r1, r2
 8004ccc:	602b      	str	r3, [r5, #0]
 8004cce:	f7fc f92b 	bl	8000f28 <_fstat>
 8004cd2:	1c43      	adds	r3, r0, #1
 8004cd4:	d102      	bne.n	8004cdc <_fstat_r+0x1c>
 8004cd6:	682b      	ldr	r3, [r5, #0]
 8004cd8:	b103      	cbz	r3, 8004cdc <_fstat_r+0x1c>
 8004cda:	6023      	str	r3, [r4, #0]
 8004cdc:	bd38      	pop	{r3, r4, r5, pc}
 8004cde:	bf00      	nop
 8004ce0:	200002c4 	.word	0x200002c4

08004ce4 <_isatty_r>:
 8004ce4:	b538      	push	{r3, r4, r5, lr}
 8004ce6:	4d06      	ldr	r5, [pc, #24]	@ (8004d00 <_isatty_r+0x1c>)
 8004ce8:	2300      	movs	r3, #0
 8004cea:	4604      	mov	r4, r0
 8004cec:	4608      	mov	r0, r1
 8004cee:	602b      	str	r3, [r5, #0]
 8004cf0:	f7fc f92a 	bl	8000f48 <_isatty>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	d102      	bne.n	8004cfe <_isatty_r+0x1a>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	b103      	cbz	r3, 8004cfe <_isatty_r+0x1a>
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	200002c4 	.word	0x200002c4

08004d04 <_lseek_r>:
 8004d04:	b538      	push	{r3, r4, r5, lr}
 8004d06:	4d07      	ldr	r5, [pc, #28]	@ (8004d24 <_lseek_r+0x20>)
 8004d08:	4604      	mov	r4, r0
 8004d0a:	4608      	mov	r0, r1
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	2200      	movs	r2, #0
 8004d10:	602a      	str	r2, [r5, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	f7fc f923 	bl	8000f5e <_lseek>
 8004d18:	1c43      	adds	r3, r0, #1
 8004d1a:	d102      	bne.n	8004d22 <_lseek_r+0x1e>
 8004d1c:	682b      	ldr	r3, [r5, #0]
 8004d1e:	b103      	cbz	r3, 8004d22 <_lseek_r+0x1e>
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	bd38      	pop	{r3, r4, r5, pc}
 8004d24:	200002c4 	.word	0x200002c4

08004d28 <_read_r>:
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	4d07      	ldr	r5, [pc, #28]	@ (8004d48 <_read_r+0x20>)
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	4608      	mov	r0, r1
 8004d30:	4611      	mov	r1, r2
 8004d32:	2200      	movs	r2, #0
 8004d34:	602a      	str	r2, [r5, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	f7fc f8cd 	bl	8000ed6 <_read>
 8004d3c:	1c43      	adds	r3, r0, #1
 8004d3e:	d102      	bne.n	8004d46 <_read_r+0x1e>
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	b103      	cbz	r3, 8004d46 <_read_r+0x1e>
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	bd38      	pop	{r3, r4, r5, pc}
 8004d48:	200002c4 	.word	0x200002c4

08004d4c <_sbrk_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	4d06      	ldr	r5, [pc, #24]	@ (8004d68 <_sbrk_r+0x1c>)
 8004d50:	2300      	movs	r3, #0
 8004d52:	4604      	mov	r4, r0
 8004d54:	4608      	mov	r0, r1
 8004d56:	602b      	str	r3, [r5, #0]
 8004d58:	f7fc f90e 	bl	8000f78 <_sbrk>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d102      	bne.n	8004d66 <_sbrk_r+0x1a>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	b103      	cbz	r3, 8004d66 <_sbrk_r+0x1a>
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
 8004d68:	200002c4 	.word	0x200002c4

08004d6c <_write_r>:
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	4d07      	ldr	r5, [pc, #28]	@ (8004d8c <_write_r+0x20>)
 8004d70:	4604      	mov	r4, r0
 8004d72:	4608      	mov	r0, r1
 8004d74:	4611      	mov	r1, r2
 8004d76:	2200      	movs	r2, #0
 8004d78:	602a      	str	r2, [r5, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f7fb fcfa 	bl	8000774 <_write>
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	d102      	bne.n	8004d8a <_write_r+0x1e>
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	b103      	cbz	r3, 8004d8a <_write_r+0x1e>
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	bd38      	pop	{r3, r4, r5, pc}
 8004d8c:	200002c4 	.word	0x200002c4

08004d90 <_free_r>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	4605      	mov	r5, r0
 8004d94:	2900      	cmp	r1, #0
 8004d96:	d041      	beq.n	8004e1c <_free_r+0x8c>
 8004d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d9c:	1f0c      	subs	r4, r1, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bfb8      	it	lt
 8004da2:	18e4      	addlt	r4, r4, r3
 8004da4:	f7ff fe36 	bl	8004a14 <__malloc_lock>
 8004da8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e20 <_free_r+0x90>)
 8004daa:	6813      	ldr	r3, [r2, #0]
 8004dac:	b933      	cbnz	r3, 8004dbc <_free_r+0x2c>
 8004dae:	6063      	str	r3, [r4, #4]
 8004db0:	6014      	str	r4, [r2, #0]
 8004db2:	4628      	mov	r0, r5
 8004db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004db8:	f7ff be32 	b.w	8004a20 <__malloc_unlock>
 8004dbc:	42a3      	cmp	r3, r4
 8004dbe:	d908      	bls.n	8004dd2 <_free_r+0x42>
 8004dc0:	6820      	ldr	r0, [r4, #0]
 8004dc2:	1821      	adds	r1, r4, r0
 8004dc4:	428b      	cmp	r3, r1
 8004dc6:	bf01      	itttt	eq
 8004dc8:	6819      	ldreq	r1, [r3, #0]
 8004dca:	685b      	ldreq	r3, [r3, #4]
 8004dcc:	1809      	addeq	r1, r1, r0
 8004dce:	6021      	streq	r1, [r4, #0]
 8004dd0:	e7ed      	b.n	8004dae <_free_r+0x1e>
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	b10b      	cbz	r3, 8004ddc <_free_r+0x4c>
 8004dd8:	42a3      	cmp	r3, r4
 8004dda:	d9fa      	bls.n	8004dd2 <_free_r+0x42>
 8004ddc:	6811      	ldr	r1, [r2, #0]
 8004dde:	1850      	adds	r0, r2, r1
 8004de0:	42a0      	cmp	r0, r4
 8004de2:	d10b      	bne.n	8004dfc <_free_r+0x6c>
 8004de4:	6820      	ldr	r0, [r4, #0]
 8004de6:	4401      	add	r1, r0
 8004de8:	1850      	adds	r0, r2, r1
 8004dea:	4283      	cmp	r3, r0
 8004dec:	6011      	str	r1, [r2, #0]
 8004dee:	d1e0      	bne.n	8004db2 <_free_r+0x22>
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	6053      	str	r3, [r2, #4]
 8004df6:	4408      	add	r0, r1
 8004df8:	6010      	str	r0, [r2, #0]
 8004dfa:	e7da      	b.n	8004db2 <_free_r+0x22>
 8004dfc:	d902      	bls.n	8004e04 <_free_r+0x74>
 8004dfe:	230c      	movs	r3, #12
 8004e00:	602b      	str	r3, [r5, #0]
 8004e02:	e7d6      	b.n	8004db2 <_free_r+0x22>
 8004e04:	6820      	ldr	r0, [r4, #0]
 8004e06:	1821      	adds	r1, r4, r0
 8004e08:	428b      	cmp	r3, r1
 8004e0a:	bf04      	itt	eq
 8004e0c:	6819      	ldreq	r1, [r3, #0]
 8004e0e:	685b      	ldreq	r3, [r3, #4]
 8004e10:	6063      	str	r3, [r4, #4]
 8004e12:	bf04      	itt	eq
 8004e14:	1809      	addeq	r1, r1, r0
 8004e16:	6021      	streq	r1, [r4, #0]
 8004e18:	6054      	str	r4, [r2, #4]
 8004e1a:	e7ca      	b.n	8004db2 <_free_r+0x22>
 8004e1c:	bd38      	pop	{r3, r4, r5, pc}
 8004e1e:	bf00      	nop
 8004e20:	200002c0 	.word	0x200002c0

08004e24 <_init>:
 8004e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e26:	bf00      	nop
 8004e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e2a:	bc08      	pop	{r3}
 8004e2c:	469e      	mov	lr, r3
 8004e2e:	4770      	bx	lr

08004e30 <_fini>:
 8004e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e32:	bf00      	nop
 8004e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e36:	bc08      	pop	{r3}
 8004e38:	469e      	mov	lr, r3
 8004e3a:	4770      	bx	lr
