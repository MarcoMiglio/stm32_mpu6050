
stm32l476_mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  0800d780  0800d780  0000e780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddcc  0800ddcc  0000f1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ddcc  0800ddcc  0000edcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ddd4  0800ddd4  0000f1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddd4  0800ddd4  0000edd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ddd8  0800ddd8  0000edd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800dddc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  200001e0  0800dfbc  0000f1e0  2**3
                  ALLOC
 10 .ram2         00007ae4  10000000  10000000  00010000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000504  20000504  0000f504  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015331  00000000  00000000  0000f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002aff  00000000  00000000  00024541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  00027040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f89  00000000  00000000  00028458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028a0b  00000000  00000000  000293e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015379  00000000  00000000  00051dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5433  00000000  00000000  00067165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  0015c598  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006aac  00000000  00000000  0015c620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  001630cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d764 	.word	0x0800d764

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d764 	.word	0x0800d764

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe6:	f2ad 4d44 	subw	sp, sp, #1092	@ 0x444
 8000fea:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fec:	f002 f90c 	bl	8003208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff0:	f000 fa1e 	bl	8001430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff4:	f000 fba0 	bl	8001738 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ff8:	f000 fb80 	bl	80016fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ffc:	f000 fb4e 	bl	800169c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001000:	f000 fa76 	bl	80014f0 <MX_I2C1_Init>
  MX_RTC_Init();
 8001004:	f000 fab4 	bl	8001570 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET){ // Recovering from standby
 8001008:	4b8f      	ldr	r3, [pc, #572]	@ (8001248 <main+0x264>)
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001010:	2b00      	cmp	r3, #0
 8001012:	d027      	beq.n	8001064 <main+0x80>

    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the StandBy flag
 8001014:	4b8c      	ldr	r3, [pc, #560]	@ (8001248 <main+0x264>)
 8001016:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800101a:	619a      	str	r2, [r3, #24]

    /** Disable the WWAKEUP PIN **/
    HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN5);
 800101c:	2010      	movs	r0, #16
 800101e:	f005 f94d 	bl	80062bc <HAL_PWR_DisableWakeUpPin>

    awake_status = MPU6050_getIntMotionStatus(&hi2c1);  // clear interrupt status register
 8001022:	488a      	ldr	r0, [pc, #552]	@ (800124c <main+0x268>)
 8001024:	f001 fb36 	bl	8002694 <MPU6050_getIntMotionStatus>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	4b88      	ldr	r3, [pc, #544]	@ (8001250 <main+0x26c>)
 800102e:	701a      	strb	r2, [r3, #0]

    //reset all registers and re-initialize the device
    MPU6050_reset(&hi2c1);
 8001030:	4886      	ldr	r0, [pc, #536]	@ (800124c <main+0x268>)
 8001032:	f001 fa0f 	bl	8002454 <MPU6050_reset>
    HAL_Delay(50);
 8001036:	2032      	movs	r0, #50	@ 0x32
 8001038:	f002 f962 	bl	8003300 <HAL_Delay>

    printf("MPU6050 Initialized!\r\n");
 800103c:	4885      	ldr	r0, [pc, #532]	@ (8001254 <main+0x270>)
 800103e:	f009 fdef 	bl	800ac20 <puts>

    /* mpu6050 setup zero motion interrupt: */
    MPU6050_setupZeroMotionInt(&hi2c1, zeroMot_dur, zeroMot_th, MPU6050_offsets);
 8001042:	4b85      	ldr	r3, [pc, #532]	@ (8001258 <main+0x274>)
 8001044:	2250      	movs	r2, #80	@ 0x50
 8001046:	2196      	movs	r1, #150	@ 0x96
 8001048:	4880      	ldr	r0, [pc, #512]	@ (800124c <main+0x268>)
 800104a:	f001 fcb4 	bl	80029b6 <MPU6050_setupZeroMotionInt>


    /* modify mpu6050 settings to store sensor readings in the FIFO: */

    // maximum divider -> New samples fill the FIFO with a rate of 4 Hz
    bool overflowEnabled = false;
 800104e:	2300      	movs	r3, #0
 8001050:	f887 3426 	strb.w	r3, [r7, #1062]	@ 0x426
    MPU6050_setupFifoBuffer(&hi2c1, MPU6050_DLPF_BW_188, 0xFF, overflowEnabled);
 8001054:	f897 3426 	ldrb.w	r3, [r7, #1062]	@ 0x426
 8001058:	22ff      	movs	r2, #255	@ 0xff
 800105a:	2101      	movs	r1, #1
 800105c:	487b      	ldr	r0, [pc, #492]	@ (800124c <main+0x268>)
 800105e:	f001 fcfe 	bl	8002a5e <MPU6050_setupFifoBuffer>
 8001062:	e03c      	b.n	80010de <main+0xfa>



  } else { // 1st initialization:

    printf("First cycle!\r\n");
 8001064:	487d      	ldr	r0, [pc, #500]	@ (800125c <main+0x278>)
 8001066:	f009 fddb 	bl	800ac20 <puts>

    // Initialize buffers stored in RAM2 section:
    memset(mainBuff, 0, sizeof(mainBuff));
 800106a:	f647 22e0 	movw	r2, #31456	@ 0x7ae0
 800106e:	2100      	movs	r1, #0
 8001070:	487b      	ldr	r0, [pc, #492]	@ (8001260 <main+0x27c>)
 8001072:	f009 fdef 	bl	800ac54 <memset>
    buff_Head = 0;
 8001076:	4b7b      	ldr	r3, [pc, #492]	@ (8001264 <main+0x280>)
 8001078:	2200      	movs	r2, #0
 800107a:	801a      	strh	r2, [r3, #0]

    // Initialize IMU for the 1st time
    printf("Starting IMU...\r\n");
 800107c:	487a      	ldr	r0, [pc, #488]	@ (8001268 <main+0x284>)
 800107e:	f009 fdcf 	bl	800ac20 <puts>

    MPU6050_reset(&hi2c1);
 8001082:	4872      	ldr	r0, [pc, #456]	@ (800124c <main+0x268>)
 8001084:	f001 f9e6 	bl	8002454 <MPU6050_reset>
    HAL_Delay(50);
 8001088:	2032      	movs	r0, #50	@ 0x32
 800108a:	f002 f939 	bl	8003300 <HAL_Delay>

    uint8_t check = MPU6050_Initialize(&hi2c1, A2G, G250DPS, MPU6050_offsets);
 800108e:	4b72      	ldr	r3, [pc, #456]	@ (8001258 <main+0x274>)
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	486d      	ldr	r0, [pc, #436]	@ (800124c <main+0x268>)
 8001096:	f001 f903 	bl	80022a0 <MPU6050_Initialize>
 800109a:	4603      	mov	r3, r0
 800109c:	f887 3427 	strb.w	r3, [r7, #1063]	@ 0x427

    if (check == 0){ // If no errors during initialization
 80010a0:	f897 3427 	ldrb.w	r3, [r7, #1063]	@ 0x427
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d115      	bne.n	80010d4 <main+0xf0>
      printf("IMU Initialized! \r\n");
 80010a8:	4870      	ldr	r0, [pc, #448]	@ (800126c <main+0x288>)
 80010aa:	f009 fdb9 	bl	800ac20 <puts>

      while(1){/* block code execution */}
    }

    // Needed while loading the script (avoid conflict with ST-Link)
    HAL_Delay(500);
 80010ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010b2:	f002 f925 	bl	8003300 <HAL_Delay>

    // Initially deactivate wakeup function:
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80010b6:	486e      	ldr	r0, [pc, #440]	@ (8001270 <main+0x28c>)
 80010b8:	f007 f916 	bl	80082e8 <HAL_RTCEx_DeactivateWakeUpTimer>

    // Uncomment here to perform a new calibration routine:
    // MPU6050_selfCalibration(&hi2c1, A2G, G250DPS, readings, acel_deadzone, gyro_deadzone);

    // Set-up motion interrupt
    printf("Setting up motion interrupt!\r\n\n");
 80010bc:	486d      	ldr	r0, [pc, #436]	@ (8001274 <main+0x290>)
 80010be:	f009 fdaf 	bl	800ac20 <puts>

    MPU6050_setupMotionInt(&hi2c1, mot_dur, mot_th, MPU6050_offsets);
 80010c2:	4b65      	ldr	r3, [pc, #404]	@ (8001258 <main+0x274>)
 80010c4:	221e      	movs	r2, #30
 80010c6:	2101      	movs	r1, #1
 80010c8:	4860      	ldr	r0, [pc, #384]	@ (800124c <main+0x268>)
 80010ca:	f001 fc08 	bl	80028de <MPU6050_setupMotionInt>

    /** Now enter the standby mode **/
    enterStandbyMode();
 80010ce:	f000 fef7 	bl	8001ec0 <enterStandbyMode>
 80010d2:	e004      	b.n	80010de <main+0xfa>
      printf("An error occured during initializiation! \r\n");
 80010d4:	4868      	ldr	r0, [pc, #416]	@ (8001278 <main+0x294>)
 80010d6:	f009 fda3 	bl	800ac20 <puts>
      while(1){/* block code execution */}
 80010da:	bf00      	nop
 80010dc:	e7fd      	b.n	80010da <main+0xf6>
   */


  // local buff used to read FIFO data:
  uint8_t buff[FIFO_SIZE];
  memset(buff, 0, sizeof(buff));
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f009 fdb4 	bl	800ac54 <memset>
  /* Enable STOP2 mode*/


  /* calculate sleep time: */

  double fifoSamplingRate   = (double) gyro_output_rate/MPU6050_getRate(&hi2c1);
 80010ec:	4857      	ldr	r0, [pc, #348]	@ (800124c <main+0x268>)
 80010ee:	f001 f9c1 	bl	8002474 <MPU6050_getRate>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa15 	bl	8000524 <__aeabi_i2d>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	f04f 0000 	mov.w	r0, #0
 8001102:	495e      	ldr	r1, [pc, #376]	@ (800127c <main+0x298>)
 8001104:	f7ff fba2 	bl	800084c <__aeabi_ddiv>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	f507 6183 	add.w	r1, r7, #1048	@ 0x418
 8001110:	e9c1 2300 	strd	r2, r3, [r1]
  uint16_t fifo_max_packets = (uint16_t) FIFO_SIZE/FIFO_PACKET_SIZE;    // max entire packets in the FIFO buffer:
 8001114:	2355      	movs	r3, #85	@ 0x55
 8001116:	f8a7 3416 	strh.w	r3, [r7, #1046]	@ 0x416
  uint16_t defaultSleepTime = (uint16_t) (1000*(fifo_max_packets/fifoSamplingRate)) - fifo_off_time; // in ms!! Take some margin to avoid overflow conditions
 800111a:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fa00 	bl	8000524 <__aeabi_i2d>
 8001124:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	f7ff fb8e 	bl	800084c <__aeabi_ddiv>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	4b4f      	ldr	r3, [pc, #316]	@ (800127c <main+0x298>)
 800113e:	f7ff fa5b 	bl	80005f8 <__aeabi_dmul>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	f7ff fd2d 	bl	8000ba8 <__aeabi_d2uiz>
 800114e:	4603      	mov	r3, r0
 8001150:	b29b      	uxth	r3, r3
 8001152:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001156:	f8a7 3414 	strh.w	r3, [r7, #1044]	@ 0x414

  // initially sleep for the default time:
  wakeUpCounter = (defaultSleepTime/1e3)/(0.00048828125);
 800115a:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	@ 0x414
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f9e0 	bl	8000524 <__aeabi_i2d>
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4b44      	ldr	r3, [pc, #272]	@ (800127c <main+0x298>)
 800116a:	f7ff fb6f 	bl	800084c <__aeabi_ddiv>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 800117e:	f7ff fb65 	bl	800084c <__aeabi_ddiv>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f7ff fd0d 	bl	8000ba8 <__aeabi_d2uiz>
 800118e:	4603      	mov	r3, r0
 8001190:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410

  // suspend tick and setup RTC interrupt
  HAL_SuspendTick();
 8001194:	f002 f8d8 	bl	8003348 <HAL_SuspendTick>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeUpCounter, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8001198:	2200      	movs	r2, #0
 800119a:	f8d7 1410 	ldr.w	r1, [r7, #1040]	@ 0x410
 800119e:	4834      	ldr	r0, [pc, #208]	@ (8001270 <main+0x28c>)
 80011a0:	f007 f80e 	bl	80081c0 <HAL_RTCEx_SetWakeUpTimer_IT>

  /* Enter Stop mode 2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80011a4:	2001      	movs	r0, #1
 80011a6:	f005 f9fd 	bl	80065a4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // awake here...
    // deactivate the RTC interrupt and resume settings
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80011aa:	4831      	ldr	r0, [pc, #196]	@ (8001270 <main+0x28c>)
 80011ac:	f007 f89c 	bl	80082e8 <HAL_RTCEx_DeactivateWakeUpTimer>
    SystemClock_Config();
 80011b0:	f000 f93e 	bl	8001430 <SystemClock_Config>
    HAL_ResumeTick();
 80011b4:	f002 f8d8 	bl	8003368 <HAL_ResumeTick>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if(zero_mot_trg){ // if zero motion is triggered
 80011b8:	4b31      	ldr	r3, [pc, #196]	@ (8001280 <main+0x29c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80a6 	beq.w	800130e <main+0x32a>

      printf("\nZero motion\r\n");
 80011c2:	4830      	ldr	r0, [pc, #192]	@ (8001284 <main+0x2a0>)
 80011c4:	f009 fd2c 	bl	800ac20 <puts>

      // prevent new interrupt generation
      MPU6050_setIntZeroMotionEnabled(&hi2c1, false);
 80011c8:	2100      	movs	r1, #0
 80011ca:	4820      	ldr	r0, [pc, #128]	@ (800124c <main+0x268>)
 80011cc:	f001 f9a6 	bl	800251c <MPU6050_setIntZeroMotionEnabled>

      // get the full interrupt status vector:
      uint8_t interrupt_status = MPU6050_getIntStatus(&hi2c1);
 80011d0:	481e      	ldr	r0, [pc, #120]	@ (800124c <main+0x268>)
 80011d2:	f001 fa4f 	bl	8002674 <MPU6050_getIntStatus>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f

      // check zero motion and overflow bits:
      bool zeroMotBit   = (interrupt_status >> MPU6050_INTERRUPT_ZMOT_BIT) & 0x01;
 80011dc:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 80011e0:	095b      	lsrs	r3, r3, #5
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bf14      	ite	ne
 80011ec:	2301      	movne	r3, #1
 80011ee:	2300      	moveq	r3, #0
 80011f0:	f887 340e 	strb.w	r3, [r7, #1038]	@ 0x40e
      bool fifoOflowBit = (interrupt_status >> MPU6050_INTERRUPT_FIFO_OFLOW_BIT) & 0x01;
 80011f4:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	bf14      	ite	ne
 8001204:	2301      	movne	r3, #1
 8001206:	2300      	moveq	r3, #0
 8001208:	f887 340d 	strb.w	r3, [r7, #1037]	@ 0x40d

      // check motiont_status_reg --> determine if the interrupt was caused by motion_to_zero_motion event or vice-versa
      bool mot_to_zeroMot = MPU6050_getZeroMotionDetected(&hi2c1);
 800120c:	480f      	ldr	r0, [pc, #60]	@ (800124c <main+0x268>)
 800120e:	f001 fa58 	bl	80026c2 <MPU6050_getZeroMotionDetected>
 8001212:	4603      	mov	r3, r0
 8001214:	f887 340c 	strb.w	r3, [r7, #1036]	@ 0x40c

      /* Determine which signal triggered the system activation: */

      // FIFO overflow event:
      if (fifoOflowBit) {
 8001218:	f897 340d 	ldrb.w	r3, [r7, #1037]	@ 0x40d
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <main+0x246>
        // TODO manage overflow event
        printf("FIFO Oflow\r\n");
 8001220:	4819      	ldr	r0, [pc, #100]	@ (8001288 <main+0x2a4>)
 8001222:	f009 fcfd 	bl	800ac20 <puts>
        while(1);
 8001226:	bf00      	nop
 8001228:	e7fd      	b.n	8001226 <main+0x242>
      }

      // Zero motion event caused by zero_motion_to_motion status
      if (zeroMotBit & !mot_to_zeroMot) {
 800122a:	f897 340e 	ldrb.w	r3, [r7, #1038]	@ 0x40e
 800122e:	f897 240c 	ldrb.w	r2, [r7, #1036]	@ 0x40c
 8001232:	f082 0201 	eor.w	r2, r2, #1
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	4013      	ands	r3, r2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d028      	beq.n	8001290 <main+0x2ac>
        // TODO manage this event
        printf("Wrong zero mot\r\n");
 800123e:	4813      	ldr	r0, [pc, #76]	@ (800128c <main+0x2a8>)
 8001240:	f009 fcee 	bl	800ac20 <puts>
        while(1);
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <main+0x260>
 8001248:	40007000 	.word	0x40007000
 800124c:	200001fc 	.word	0x200001fc
 8001250:	20000368 	.word	0x20000368
 8001254:	0800d780 	.word	0x0800d780
 8001258:	20000000 	.word	0x20000000
 800125c:	0800d798 	.word	0x0800d798
 8001260:	10000000 	.word	0x10000000
 8001264:	10007ae0 	.word	0x10007ae0
 8001268:	0800d7a8 	.word	0x0800d7a8
 800126c:	0800d7bc 	.word	0x0800d7bc
 8001270:	20000298 	.word	0x20000298
 8001274:	0800d7fc 	.word	0x0800d7fc
 8001278:	0800d7d0 	.word	0x0800d7d0
 800127c:	408f4000 	.word	0x408f4000
 8001280:	20000345 	.word	0x20000345
 8001284:	0800d81c 	.word	0x0800d81c
 8001288:	0800d82c 	.word	0x0800d82c
 800128c:	0800d838 	.word	0x0800d838
      }

      // This point is reached only if the MCU was triggered by a real zero motion event

      // stop FIFO acquisition and read data:
      bool rehabilitateFifo = false;
 8001290:	2300      	movs	r3, #0
 8001292:	f887 340b 	strb.w	r3, [r7, #1035]	@ 0x40b
      fifoCount = readIMUFifoBuffer(&hi2c1, buff, rehabilitateFifo);
 8001296:	f897 240b 	ldrb.w	r2, [r7, #1035]	@ 0x40b
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4619      	mov	r1, r3
 800129e:	4854      	ldr	r0, [pc, #336]	@ (80013f0 <main+0x40c>)
 80012a0:	f000 fc20 	bl	8001ae4 <readIMUFifoBuffer>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f8a7 3408 	strh.w	r3, [r7, #1032]	@ 0x408

      // process FIFO data
      process_and_save_ImuReadings(buff, fifoCount, mainBuff, &buff_Head, ax, ay, az, gx, gy, gz);
 80012aa:	4b52      	ldr	r3, [pc, #328]	@ (80013f4 <main+0x410>)
 80012ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b0:	4a51      	ldr	r2, [pc, #324]	@ (80013f8 <main+0x414>)
 80012b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012b6:	4951      	ldr	r1, [pc, #324]	@ (80013fc <main+0x418>)
 80012b8:	f9b1 1000 	ldrsh.w	r1, [r1]
 80012bc:	4850      	ldr	r0, [pc, #320]	@ (8001400 <main+0x41c>)
 80012be:	f9b0 0000 	ldrsh.w	r0, [r0]
 80012c2:	4c50      	ldr	r4, [pc, #320]	@ (8001404 <main+0x420>)
 80012c4:	f9b4 4000 	ldrsh.w	r4, [r4]
 80012c8:	4d4f      	ldr	r5, [pc, #316]	@ (8001408 <main+0x424>)
 80012ca:	f9b5 5000 	ldrsh.w	r5, [r5]
 80012ce:	f8b7 c408 	ldrh.w	ip, [r7, #1032]	@ 0x408
 80012d2:	1d3e      	adds	r6, r7, #4
 80012d4:	9505      	str	r5, [sp, #20]
 80012d6:	9404      	str	r4, [sp, #16]
 80012d8:	9003      	str	r0, [sp, #12]
 80012da:	9102      	str	r1, [sp, #8]
 80012dc:	9201      	str	r2, [sp, #4]
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	4b4a      	ldr	r3, [pc, #296]	@ (800140c <main+0x428>)
 80012e2:	4a4b      	ldr	r2, [pc, #300]	@ (8001410 <main+0x42c>)
 80012e4:	4661      	mov	r1, ip
 80012e6:	4630      	mov	r0, r6
 80012e8:	f000 fc9c 	bl	8001c24 <process_and_save_ImuReadings>

      // Set-up MPU6050 for motion interrupt:
      MPU6050_reset(&hi2c1);
 80012ec:	4840      	ldr	r0, [pc, #256]	@ (80013f0 <main+0x40c>)
 80012ee:	f001 f8b1 	bl	8002454 <MPU6050_reset>
      HAL_Delay(50);
 80012f2:	2032      	movs	r0, #50	@ 0x32
 80012f4:	f002 f804 	bl	8003300 <HAL_Delay>

      // Set-up motion interrupt
      printf("Setting up motion interrupt!\r\n\n");
 80012f8:	4846      	ldr	r0, [pc, #280]	@ (8001414 <main+0x430>)
 80012fa:	f009 fc91 	bl	800ac20 <puts>

      MPU6050_setupMotionInt(&hi2c1, mot_dur, mot_th, MPU6050_offsets);
 80012fe:	4b46      	ldr	r3, [pc, #280]	@ (8001418 <main+0x434>)
 8001300:	221e      	movs	r2, #30
 8001302:	2101      	movs	r1, #1
 8001304:	483a      	ldr	r0, [pc, #232]	@ (80013f0 <main+0x40c>)
 8001306:	f001 faea 	bl	80028de <MPU6050_setupMotionInt>

      /** Now enter standby mode **/
      enterStandbyMode();
 800130a:	f000 fdd9 	bl	8001ec0 <enterStandbyMode>

    } /* End of zero motion event: enter deep sleep mode */

    if(rtc_trg){ // if rtc flag is set
 800130e:	4b43      	ldr	r3, [pc, #268]	@ (800141c <main+0x438>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f43f af49 	beq.w	80011aa <main+0x1c6>
      printf("\nFIFO read\r\n");
 8001318:	4841      	ldr	r0, [pc, #260]	@ (8001420 <main+0x43c>)
 800131a:	f009 fc81 	bl	800ac20 <puts>

      /* read FIFO buffer: */
      bool rehabilitateFifo = true;
 800131e:	2301      	movs	r3, #1
 8001320:	f887 3407 	strb.w	r3, [r7, #1031]	@ 0x407
      fifoCount = readIMUFifoBuffer(&hi2c1, buff, rehabilitateFifo);
 8001324:	f897 2407 	ldrb.w	r2, [r7, #1031]	@ 0x407
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4619      	mov	r1, r3
 800132c:	4830      	ldr	r0, [pc, #192]	@ (80013f0 <main+0x40c>)
 800132e:	f000 fbd9 	bl	8001ae4 <readIMUFifoBuffer>
 8001332:	4603      	mov	r3, r0
 8001334:	f8a7 3408 	strh.w	r3, [r7, #1032]	@ 0x408


      // Start counting total time required by the MCU
      // This time will be subtracted from the total sleep time
      Timer_On();
 8001338:	f000 fbbc 	bl	8001ab4 <Timer_On>

      /* Process data and write into permanent memories */

      process_and_save_ImuReadings(buff, fifoCount, mainBuff, &buff_Head, ax, ay, az, gx, gy, gz);
 800133c:	4b2d      	ldr	r3, [pc, #180]	@ (80013f4 <main+0x410>)
 800133e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001342:	4a2d      	ldr	r2, [pc, #180]	@ (80013f8 <main+0x414>)
 8001344:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001348:	492c      	ldr	r1, [pc, #176]	@ (80013fc <main+0x418>)
 800134a:	f9b1 1000 	ldrsh.w	r1, [r1]
 800134e:	482c      	ldr	r0, [pc, #176]	@ (8001400 <main+0x41c>)
 8001350:	f9b0 0000 	ldrsh.w	r0, [r0]
 8001354:	4c2b      	ldr	r4, [pc, #172]	@ (8001404 <main+0x420>)
 8001356:	f9b4 4000 	ldrsh.w	r4, [r4]
 800135a:	4d2b      	ldr	r5, [pc, #172]	@ (8001408 <main+0x424>)
 800135c:	f9b5 5000 	ldrsh.w	r5, [r5]
 8001360:	f8b7 c408 	ldrh.w	ip, [r7, #1032]	@ 0x408
 8001364:	1d3e      	adds	r6, r7, #4
 8001366:	9505      	str	r5, [sp, #20]
 8001368:	9404      	str	r4, [sp, #16]
 800136a:	9003      	str	r0, [sp, #12]
 800136c:	9102      	str	r1, [sp, #8]
 800136e:	9201      	str	r2, [sp, #4]
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	4b26      	ldr	r3, [pc, #152]	@ (800140c <main+0x428>)
 8001374:	4a26      	ldr	r2, [pc, #152]	@ (8001410 <main+0x42c>)
 8001376:	4661      	mov	r1, ip
 8001378:	4630      	mov	r0, r6
 800137a:	f000 fc53 	bl	8001c24 <process_and_save_ImuReadings>
          To configure the wake up timer to 20s the WakeUpCounter is set to 0xA017:
            RTC_WAKEUPCLOCK_RTCCLK_DIV = RTCCLK_Div16 = 16
            Wake-up Time Base = 16 /(32KHz) = 0.0005 seconds
            ==> WakeUpCounter = ~10s/0.0005s = 20000 = 0x4E20 */

      rtc_trg = false;
 800137e:	4b27      	ldr	r3, [pc, #156]	@ (800141c <main+0x438>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
      wakeUpCounter = ((defaultSleepTime - Timer_Status())/1e3)/(0.00048828125);
 8001384:	f8b7 4414 	ldrh.w	r4, [r7, #1044]	@ 0x414
 8001388:	f000 fba0 	bl	8001acc <Timer_Status>
 800138c:	4603      	mov	r3, r0
 800138e:	1ae3      	subs	r3, r4, r3
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f8b7 	bl	8000504 <__aeabi_ui2d>
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	4b22      	ldr	r3, [pc, #136]	@ (8001424 <main+0x440>)
 800139c:	f7ff fa56 	bl	800084c <__aeabi_ddiv>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 80013b0:	f7ff fa4c 	bl	800084c <__aeabi_ddiv>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fbf4 	bl	8000ba8 <__aeabi_d2uiz>
 80013c0:	4603      	mov	r3, r0
 80013c2:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410

      if(!zero_mot_trg){         // manage the case in which zero_mot is triggered while reading the FIFO
 80013c6:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <main+0x444>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	f083 0301 	eor.w	r3, r3, #1
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f43f aeea 	beq.w	80011aa <main+0x1c6>
        // Enter STOP2 mode:     // ==> skip sleep phase and manage this condition.
        HAL_SuspendTick();
 80013d6:	f001 ffb7 	bl	8003348 <HAL_SuspendTick>
        HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeUpCounter, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80013da:	2200      	movs	r2, #0
 80013dc:	f8d7 1410 	ldr.w	r1, [r7, #1040]	@ 0x410
 80013e0:	4812      	ldr	r0, [pc, #72]	@ (800142c <main+0x448>)
 80013e2:	f006 feed 	bl	80081c0 <HAL_RTCEx_SetWakeUpTimer_IT>


        /*  Enter Stop Mode 2 */
        HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f005 f8dc 	bl	80065a4 <HAL_PWREx_EnterSTOP2Mode>
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80013ec:	e6dd      	b.n	80011aa <main+0x1c6>
 80013ee:	bf00      	nop
 80013f0:	200001fc 	.word	0x200001fc
 80013f4:	2000036a 	.word	0x2000036a
 80013f8:	2000036c 	.word	0x2000036c
 80013fc:	2000036e 	.word	0x2000036e
 8001400:	20000388 	.word	0x20000388
 8001404:	2000038a 	.word	0x2000038a
 8001408:	2000038c 	.word	0x2000038c
 800140c:	10007ae0 	.word	0x10007ae0
 8001410:	10000000 	.word	0x10000000
 8001414:	0800d7fc 	.word	0x0800d7fc
 8001418:	20000000 	.word	0x20000000
 800141c:	20000346 	.word	0x20000346
 8001420:	0800d848 	.word	0x0800d848
 8001424:	408f4000 	.word	0x408f4000
 8001428:	20000345 	.word	0x20000345
 800142c:	20000298 	.word	0x20000298

08001430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b096      	sub	sp, #88	@ 0x58
 8001434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	2244      	movs	r2, #68	@ 0x44
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f009 fc08 	bl	800ac54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001444:	463b      	mov	r3, r7
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001452:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001456:	f004 ff6f 	bl	8006338 <HAL_PWREx_ControlVoltageScaling>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001460:	f000 fdaa 	bl	8001fb8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001464:	f004 fefa 	bl	800625c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001468:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <SystemClock_Config+0xbc>)
 800146a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800146e:	4a1f      	ldr	r2, [pc, #124]	@ (80014ec <SystemClock_Config+0xbc>)
 8001470:	f023 0318 	bic.w	r3, r3, #24
 8001474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001478:	2306      	movs	r3, #6
 800147a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800147c:	2301      	movs	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001480:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001484:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001486:	2310      	movs	r3, #16
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800148a:	2302      	movs	r3, #2
 800148c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800148e:	2302      	movs	r3, #2
 8001490:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001492:	2301      	movs	r3, #1
 8001494:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001496:	230a      	movs	r3, #10
 8001498:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800149a:	2307      	movs	r3, #7
 800149c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800149e:	2302      	movs	r3, #2
 80014a0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014a2:	2302      	movs	r3, #2
 80014a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4618      	mov	r0, r3
 80014ac:	f005 f8a6 	bl	80065fc <HAL_RCC_OscConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80014b6:	f000 fd7f 	bl	8001fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ba:	230f      	movs	r3, #15
 80014bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014be:	2303      	movs	r3, #3
 80014c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014ce:	463b      	mov	r3, r7
 80014d0:	2104      	movs	r1, #4
 80014d2:	4618      	mov	r0, r3
 80014d4:	f005 fc6e 	bl	8006db4 <HAL_RCC_ClockConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80014de:	f000 fd6b 	bl	8001fb8 <Error_Handler>
  }
}
 80014e2:	bf00      	nop
 80014e4:	3758      	adds	r7, #88	@ 0x58
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000

080014f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <MX_I2C1_Init+0x74>)
 80014f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001568 <MX_I2C1_Init+0x78>)
 80014f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001564 <MX_I2C1_Init+0x74>)
 80014fc:	4a1b      	ldr	r2, [pc, #108]	@ (800156c <MX_I2C1_Init+0x7c>)
 80014fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001500:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <MX_I2C1_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001506:	4b17      	ldr	r3, [pc, #92]	@ (8001564 <MX_I2C1_Init+0x74>)
 8001508:	2201      	movs	r2, #1
 800150a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800150c:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <MX_I2C1_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001512:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <MX_I2C1_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <MX_I2C1_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_I2C1_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001524:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <MX_I2C1_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800152a:	480e      	ldr	r0, [pc, #56]	@ (8001564 <MX_I2C1_Init+0x74>)
 800152c:	f002 fc90 	bl	8003e50 <HAL_I2C_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001536:	f000 fd3f 	bl	8001fb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800153a:	2100      	movs	r1, #0
 800153c:	4809      	ldr	r0, [pc, #36]	@ (8001564 <MX_I2C1_Init+0x74>)
 800153e:	f004 fdf5 	bl	800612c <HAL_I2CEx_ConfigAnalogFilter>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001548:	f000 fd36 	bl	8001fb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800154c:	2100      	movs	r1, #0
 800154e:	4805      	ldr	r0, [pc, #20]	@ (8001564 <MX_I2C1_Init+0x74>)
 8001550:	f004 fe37 	bl	80061c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800155a:	f000 fd2d 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200001fc 	.word	0x200001fc
 8001568:	40005400 	.word	0x40005400
 800156c:	00702991 	.word	0x00702991

08001570 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001584:	2300      	movs	r3, #0
 8001586:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001588:	4b3f      	ldr	r3, [pc, #252]	@ (8001688 <MX_RTC_Init+0x118>)
 800158a:	4a40      	ldr	r2, [pc, #256]	@ (800168c <MX_RTC_Init+0x11c>)
 800158c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800158e:	4b3e      	ldr	r3, [pc, #248]	@ (8001688 <MX_RTC_Init+0x118>)
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001594:	4b3c      	ldr	r3, [pc, #240]	@ (8001688 <MX_RTC_Init+0x118>)
 8001596:	227f      	movs	r2, #127	@ 0x7f
 8001598:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800159a:	4b3b      	ldr	r3, [pc, #236]	@ (8001688 <MX_RTC_Init+0x118>)
 800159c:	22ff      	movs	r2, #255	@ 0xff
 800159e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015a0:	4b39      	ldr	r3, [pc, #228]	@ (8001688 <MX_RTC_Init+0x118>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015a6:	4b38      	ldr	r3, [pc, #224]	@ (8001688 <MX_RTC_Init+0x118>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015ac:	4b36      	ldr	r3, [pc, #216]	@ (8001688 <MX_RTC_Init+0x118>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015b2:	4b35      	ldr	r3, [pc, #212]	@ (8001688 <MX_RTC_Init+0x118>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015b8:	4833      	ldr	r0, [pc, #204]	@ (8001688 <MX_RTC_Init+0x118>)
 80015ba:	f006 fadb 	bl	8007b74 <HAL_RTC_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80015c4:	f000 fcf8 	bl	8001fb8 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 80015c8:	4b31      	ldr	r3, [pc, #196]	@ (8001690 <MX_RTC_Init+0x120>)
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <MX_RTC_Init+0x6c>
    printf("\n\nWaking from StandBy mode, RTC skip!\r\n");
 80015d4:	482f      	ldr	r0, [pc, #188]	@ (8001694 <MX_RTC_Init+0x124>)
 80015d6:	f009 fb23 	bl	800ac20 <puts>
 80015da:	e052      	b.n	8001682 <MX_RTC_Init+0x112>
    return; // Exit the function to prevent reinitialize RTC
  } else {
    printf("\n\nInitializing RTC!\r\n");
 80015dc:	482e      	ldr	r0, [pc, #184]	@ (8001698 <MX_RTC_Init+0x128>)
 80015de:	f009 fb1f 	bl	800ac20 <puts>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2201      	movs	r2, #1
 80015fa:	4619      	mov	r1, r3
 80015fc:	4822      	ldr	r0, [pc, #136]	@ (8001688 <MX_RTC_Init+0x118>)
 80015fe:	f006 fb41 	bl	8007c84 <HAL_RTC_SetTime>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_RTC_Init+0x9c>
  {
    Error_Handler();
 8001608:	f000 fcd6 	bl	8001fb8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800160c:	2301      	movs	r3, #1
 800160e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001610:	2301      	movs	r3, #1
 8001612:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001614:	2301      	movs	r3, #1
 8001616:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001618:	2300      	movs	r3, #0
 800161a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800161c:	463b      	mov	r3, r7
 800161e:	2201      	movs	r2, #1
 8001620:	4619      	mov	r1, r3
 8001622:	4819      	ldr	r0, [pc, #100]	@ (8001688 <MX_RTC_Init+0x118>)
 8001624:	f006 fc27 	bl	8007e76 <HAL_RTC_SetDate>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800162e:	f000 fcc3 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Initialize RTC with user variables:
   sTime.Hours = startHours;
 8001632:	2313      	movs	r3, #19
 8001634:	713b      	strb	r3, [r7, #4]
   sTime.Minutes = startMinutes;
 8001636:	2315      	movs	r3, #21
 8001638:	717b      	strb	r3, [r7, #5]
   sTime.Seconds = startSeconds;
 800163a:	2300      	movs	r3, #0
 800163c:	71bb      	strb	r3, [r7, #6]
   sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
   sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2201      	movs	r2, #1
 800164a:	4619      	mov	r1, r3
 800164c:	480e      	ldr	r0, [pc, #56]	@ (8001688 <MX_RTC_Init+0x118>)
 800164e:	f006 fb19 	bl	8007c84 <HAL_RTC_SetTime>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_RTC_Init+0xec>
   {
     Error_Handler();
 8001658:	f000 fcae 	bl	8001fb8 <Error_Handler>
   }
   sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800165c:	2301      	movs	r3, #1
 800165e:	703b      	strb	r3, [r7, #0]
   sDate.Month = startMonth;
 8001660:	2310      	movs	r3, #16
 8001662:	707b      	strb	r3, [r7, #1]
   sDate.Date = startDate;
 8001664:	2315      	movs	r3, #21
 8001666:	70bb      	strb	r3, [r7, #2]
   sDate.Year = startYear;
 8001668:	2324      	movs	r3, #36	@ 0x24
 800166a:	70fb      	strb	r3, [r7, #3]

   if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800166c:	463b      	mov	r3, r7
 800166e:	2201      	movs	r2, #1
 8001670:	4619      	mov	r1, r3
 8001672:	4805      	ldr	r0, [pc, #20]	@ (8001688 <MX_RTC_Init+0x118>)
 8001674:	f006 fbff 	bl	8007e76 <HAL_RTC_SetDate>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_RTC_Init+0x112>
   {
     Error_Handler();
 800167e:	f000 fc9b 	bl	8001fb8 <Error_Handler>
   }

  /* USER CODE END RTC_Init 2 */

}
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000298 	.word	0x20000298
 800168c:	40002800 	.word	0x40002800
 8001690:	40007000 	.word	0x40007000
 8001694:	0800d854 	.word	0x0800d854
 8001698:	0800d87c 	.word	0x0800d87c

0800169c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016a0:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <MX_USART2_UART_Init+0x58>)
 80016a2:	4a15      	ldr	r2, [pc, #84]	@ (80016f8 <MX_USART2_UART_Init+0x5c>)
 80016a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016a6:	4b13      	ldr	r3, [pc, #76]	@ (80016f4 <MX_USART2_UART_Init+0x58>)
 80016a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ae:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <MX_USART2_UART_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	@ (80016f4 <MX_USART2_UART_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <MX_USART2_UART_Init+0x58>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <MX_USART2_UART_Init+0x58>)
 80016c2:	220c      	movs	r2, #12
 80016c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <MX_USART2_UART_Init+0x58>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016cc:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <MX_USART2_UART_Init+0x58>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <MX_USART2_UART_Init+0x58>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <MX_USART2_UART_Init+0x58>)
 80016da:	2200      	movs	r2, #0
 80016dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <MX_USART2_UART_Init+0x58>)
 80016e0:	f006 fe86 	bl	80083f0 <HAL_UART_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016ea:	f000 fc65 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200002bc 	.word	0x200002bc
 80016f8:	40004400 	.word	0x40004400

080016fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001702:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <MX_DMA_Init+0x38>)
 8001704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001706:	4a0b      	ldr	r2, [pc, #44]	@ (8001734 <MX_DMA_Init+0x38>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6493      	str	r3, [r2, #72]	@ 0x48
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <MX_DMA_Init+0x38>)
 8001710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	2011      	movs	r0, #17
 8001720:	f001 ff31 	bl	8003586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001724:	2011      	movs	r0, #17
 8001726:	f001 ff4a 	bl	80035be <HAL_NVIC_EnableIRQ>

}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000

08001738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	@ 0x28
 800173c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	4b56      	ldr	r3, [pc, #344]	@ (80018a8 <MX_GPIO_Init+0x170>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	4a55      	ldr	r2, [pc, #340]	@ (80018a8 <MX_GPIO_Init+0x170>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175a:	4b53      	ldr	r3, [pc, #332]	@ (80018a8 <MX_GPIO_Init+0x170>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001766:	4b50      	ldr	r3, [pc, #320]	@ (80018a8 <MX_GPIO_Init+0x170>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	4a4f      	ldr	r2, [pc, #316]	@ (80018a8 <MX_GPIO_Init+0x170>)
 800176c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001772:	4b4d      	ldr	r3, [pc, #308]	@ (80018a8 <MX_GPIO_Init+0x170>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	4b4a      	ldr	r3, [pc, #296]	@ (80018a8 <MX_GPIO_Init+0x170>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	4a49      	ldr	r2, [pc, #292]	@ (80018a8 <MX_GPIO_Init+0x170>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800178a:	4b47      	ldr	r3, [pc, #284]	@ (80018a8 <MX_GPIO_Init+0x170>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	4b44      	ldr	r3, [pc, #272]	@ (80018a8 <MX_GPIO_Init+0x170>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	4a43      	ldr	r2, [pc, #268]	@ (80018a8 <MX_GPIO_Init+0x170>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a2:	4b41      	ldr	r3, [pc, #260]	@ (80018a8 <MX_GPIO_Init+0x170>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ae:	4b3e      	ldr	r3, [pc, #248]	@ (80018a8 <MX_GPIO_Init+0x170>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b2:	4a3d      	ldr	r2, [pc, #244]	@ (80018a8 <MX_GPIO_Init+0x170>)
 80017b4:	f043 0308 	orr.w	r3, r3, #8
 80017b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ba:	4b3b      	ldr	r3, [pc, #236]	@ (80018a8 <MX_GPIO_Init+0x170>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2120      	movs	r1, #32
 80017ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ce:	f002 fb0f 	bl	8003df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017d8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4619      	mov	r1, r3
 80017e8:	4830      	ldr	r0, [pc, #192]	@ (80018ac <MX_GPIO_Init+0x174>)
 80017ea:	f002 f957 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017ee:	f641 73df 	movw	r3, #8159	@ 0x1fdf
 80017f2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f4:	2303      	movs	r3, #3
 80017f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	482a      	ldr	r0, [pc, #168]	@ (80018ac <MX_GPIO_Init+0x174>)
 8001804:	f002 f94a 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8001808:	f649 73d3 	movw	r3, #40915	@ 0x9fd3
 800180c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180e:	2303      	movs	r3, #3
 8001810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001820:	f002 f93c 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001824:	2320      	movs	r3, #32
 8001826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001828:	2301      	movs	r3, #1
 800182a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800183e:	f002 f92d 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_interrupt_Pin */
  GPIO_InitStruct.Pin = IMU_interrupt_Pin;
 8001842:	2320      	movs	r3, #32
 8001844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001846:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800184a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800184c:	2302      	movs	r3, #2
 800184e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_interrupt_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4619      	mov	r1, r3
 8001856:	4815      	ldr	r0, [pc, #84]	@ (80018ac <MX_GPIO_Init+0x174>)
 8001858:	f002 f920 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800185c:	f64f 43f7 	movw	r3, #64759	@ 0xfcf7
 8001860:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001862:	2303      	movs	r3, #3
 8001864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	480f      	ldr	r0, [pc, #60]	@ (80018b0 <MX_GPIO_Init+0x178>)
 8001872:	f002 f913 	bl	8003a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001876:	2304      	movs	r3, #4
 8001878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800187a:	2303      	movs	r3, #3
 800187c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	480a      	ldr	r0, [pc, #40]	@ (80018b4 <MX_GPIO_Init+0x17c>)
 800188a:	f002 f907 	bl	8003a9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	2017      	movs	r0, #23
 8001894:	f001 fe77 	bl	8003586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001898:	2017      	movs	r0, #23
 800189a:	f001 fe90 	bl	80035be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800189e:	bf00      	nop
 80018a0:	3728      	adds	r7, #40	@ 0x28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	48000800 	.word	0x48000800
 80018b0:	48000400 	.word	0x48000400
 80018b4:	48000c00 	.word	0x48000c00

080018b8 <_write>:

/* USER CODE BEGIN 4 */

// Function to redirect printf output to UART
int _write(int file, char *ptr, int len)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	4804      	ldr	r0, [pc, #16]	@ (80018e0 <_write+0x28>)
 80018d0:	f006 fddc 	bl	800848c <HAL_UART_Transmit>
  return len;
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200002bc 	.word	0x200002bc

080018e4 <add_data_to_buff>:


// TODO
uint8_t add_data_to_buff (char* buff, uint16_t* buff_Head, double ax, double ay, double az, double gx, double gy, double gz) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b096      	sub	sp, #88	@ 0x58
 80018e8:	af06      	add	r7, sp, #24
 80018ea:	6378      	str	r0, [r7, #52]	@ 0x34
 80018ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80018ee:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 80018f2:	ed87 1b08 	vstr	d1, [r7, #32]
 80018f6:	ed87 2b06 	vstr	d2, [r7, #24]
 80018fa:	ed87 3b04 	vstr	d3, [r7, #16]
 80018fe:	ed87 4b02 	vstr	d4, [r7, #8]
 8001902:	ed87 5b00 	vstr	d5, [r7]

  // Check for buffer overflow
  uint16_t init_buff_head = *buff_Head;
 8001906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t available_space = BUFFER_SIZE - *buff_Head;
 800190c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	f5c3 43f5 	rsb	r3, r3, #31360	@ 0x7a80
 8001914:	3360      	adds	r3, #96	@ 0x60
 8001916:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  if (available_space < SD_PACKET_SIZE) {  // +1 for null terminator
 8001918:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800191a:	2b2d      	cmp	r3, #45	@ 0x2d
 800191c:	d801      	bhi.n	8001922 <add_data_to_buff+0x3e>
    return -1;  // Indicate buffer full
 800191e:	23ff      	movs	r3, #255	@ 0xff
 8001920:	e04a      	b.n	80019b8 <add_data_to_buff+0xd4>
  }

  // Add Accelerometer:

  *buff_Head += snprintf(buff + *buff_Head, BUFFER_SIZE - *buff_Head,
 8001922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800192a:	1898      	adds	r0, r3, r2
 800192c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	f5c3 43f5 	rsb	r3, r3, #31360	@ 0x7a80
 8001934:	3360      	adds	r3, #96	@ 0x60
 8001936:	4619      	mov	r1, r3
 8001938:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800193c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001940:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001944:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001948:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800194c:	e9cd 2300 	strd	r2, r3, [sp]
 8001950:	4a1b      	ldr	r2, [pc, #108]	@ (80019c0 <add_data_to_buff+0xdc>)
 8001952:	f008 f963 	bl	8009c1c <sniprintf>
 8001956:	4601      	mov	r1, r0
 8001958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800195a:	881a      	ldrh	r2, [r3, #0]
 800195c:	b28b      	uxth	r3, r1
 800195e:	4413      	add	r3, r2
 8001960:	b29a      	uxth	r2, r3
 8001962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001964:	801a      	strh	r2, [r3, #0]
                                ax,
                                ay,
                                az);

  // Add Gyroscope:
  *buff_Head += snprintf(buff + *buff_Head, BUFFER_SIZE - *buff_Head,
 8001966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800196e:	1898      	adds	r0, r3, r2
 8001970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	f5c3 43f5 	rsb	r3, r3, #31360	@ 0x7a80
 8001978:	3360      	adds	r3, #96	@ 0x60
 800197a:	4619      	mov	r1, r3
 800197c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001980:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001984:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001988:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800198c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001990:	e9cd 2300 	strd	r2, r3, [sp]
 8001994:	4a0b      	ldr	r2, [pc, #44]	@ (80019c4 <add_data_to_buff+0xe0>)
 8001996:	f008 f941 	bl	8009c1c <sniprintf>
 800199a:	4601      	mov	r1, r0
 800199c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800199e:	881a      	ldrh	r2, [r3, #0]
 80019a0:	b28b      	uxth	r3, r1
 80019a2:	4413      	add	r3, r2
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019a8:	801a      	strh	r2, [r3, #0]
                                "%+07.2f %+07.2f %+07.2f\r\n",
                                gx,
                                gy,
                                gz);

  return *buff_Head - init_buff_head;
 80019aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	b2db      	uxtb	r3, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3740      	adds	r7, #64	@ 0x40
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	0800d894 	.word	0x0800d894
 80019c4:	0800d8ac 	.word	0x0800d8ac

080019c8 <add_time_to_buff>:


// TODO: add more comments here...
//add current time to main buffer, returns -1 if buffer full, number of bytes written otherwise
uint8_t add_time_to_buff (char * buff, uint16_t* buff_Head) {
 80019c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ca:	b08b      	sub	sp, #44	@ 0x2c
 80019cc:	af06      	add	r7, sp, #24
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]

  // Check for buffer overflow
  uint16_t init_buff_head = *buff_Head;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	81fb      	strh	r3, [r7, #14]
  uint16_t available_space = BUFFER_SIZE - *buff_Head;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	f5c3 43f5 	rsb	r3, r3, #31360	@ 0x7a80
 80019e0:	3360      	adds	r3, #96	@ 0x60
 80019e2:	81bb      	strh	r3, [r7, #12]

  // Ensure that the buffer is not overflowed
  if (available_space < SD_TIMESTAMP_SIZE) {  // +1 for null terminator
 80019e4:	89bb      	ldrh	r3, [r7, #12]
 80019e6:	2b15      	cmp	r3, #21
 80019e8:	d801      	bhi.n	80019ee <add_time_to_buff+0x26>
    return -1;  // Indicate buffer full
 80019ea:	23ff      	movs	r3, #255	@ 0xff
 80019ec:	e052      	b.n	8001a94 <add_time_to_buff+0xcc>
  }

  // Get current time:
  statusRTC = HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80019ee:	2200      	movs	r2, #0
 80019f0:	492a      	ldr	r1, [pc, #168]	@ (8001a9c <add_time_to_buff+0xd4>)
 80019f2:	482b      	ldr	r0, [pc, #172]	@ (8001aa0 <add_time_to_buff+0xd8>)
 80019f4:	f006 f9e3 	bl	8007dbe <HAL_RTC_GetTime>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b29      	ldr	r3, [pc, #164]	@ (8001aa4 <add_time_to_buff+0xdc>)
 80019fe:	701a      	strb	r2, [r3, #0]
  if (statusRTC != HAL_OK) {
 8001a00:	4b28      	ldr	r3, [pc, #160]	@ (8001aa4 <add_time_to_buff+0xdc>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d004      	beq.n	8001a12 <add_time_to_buff+0x4a>
    printf("RTC error!\r\n");
 8001a08:	4827      	ldr	r0, [pc, #156]	@ (8001aa8 <add_time_to_buff+0xe0>)
 8001a0a:	f009 f909 	bl	800ac20 <puts>
    while(1);
 8001a0e:	bf00      	nop
 8001a10:	e7fd      	b.n	8001a0e <add_time_to_buff+0x46>
  }

  // Get current date:
  statusRTC = HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001a12:	2200      	movs	r2, #0
 8001a14:	4925      	ldr	r1, [pc, #148]	@ (8001aac <add_time_to_buff+0xe4>)
 8001a16:	4822      	ldr	r0, [pc, #136]	@ (8001aa0 <add_time_to_buff+0xd8>)
 8001a18:	f006 fab4 	bl	8007f84 <HAL_RTC_GetDate>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <add_time_to_buff+0xdc>)
 8001a22:	701a      	strb	r2, [r3, #0]
  if (statusRTC != HAL_OK) {
 8001a24:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <add_time_to_buff+0xdc>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <add_time_to_buff+0x6e>
    printf("RTC error!\r\n");
 8001a2c:	481e      	ldr	r0, [pc, #120]	@ (8001aa8 <add_time_to_buff+0xe0>)
 8001a2e:	f009 f8f7 	bl	800ac20 <puts>
    while(1);
 8001a32:	bf00      	nop
 8001a34:	e7fd      	b.n	8001a32 <add_time_to_buff+0x6a>
  }

  // Add time stamp:
  *buff_Head += snprintf(buff + *buff_Head, available_space, "T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	1898      	adds	r0, r3, r2
 8001a40:	89b9      	ldrh	r1, [r7, #12]
                         sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001a42:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <add_time_to_buff+0xe4>)
 8001a44:	78db      	ldrb	r3, [r3, #3]
  *buff_Head += snprintf(buff + *buff_Head, available_space, "T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001a46:	469c      	mov	ip, r3
                         sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001a48:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <add_time_to_buff+0xe4>)
 8001a4a:	785b      	ldrb	r3, [r3, #1]
  *buff_Head += snprintf(buff + *buff_Head, available_space, "T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001a4c:	461a      	mov	r2, r3
                         sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001a4e:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <add_time_to_buff+0xe4>)
 8001a50:	789b      	ldrb	r3, [r3, #2]
  *buff_Head += snprintf(buff + *buff_Head, available_space, "T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001a52:	461c      	mov	r4, r3
                         sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001a54:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <add_time_to_buff+0xd4>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
  *buff_Head += snprintf(buff + *buff_Head, available_space, "T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001a58:	461d      	mov	r5, r3
                         sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001a5a:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <add_time_to_buff+0xd4>)
 8001a5c:	785b      	ldrb	r3, [r3, #1]
  *buff_Head += snprintf(buff + *buff_Head, available_space, "T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001a5e:	461e      	mov	r6, r3
                         sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001a60:	4b0e      	ldr	r3, [pc, #56]	@ (8001a9c <add_time_to_buff+0xd4>)
 8001a62:	789b      	ldrb	r3, [r3, #2]
  *buff_Head += snprintf(buff + *buff_Head, available_space, "T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001a64:	9304      	str	r3, [sp, #16]
 8001a66:	9603      	str	r6, [sp, #12]
 8001a68:	9502      	str	r5, [sp, #8]
 8001a6a:	9401      	str	r4, [sp, #4]
 8001a6c:	9200      	str	r2, [sp, #0]
 8001a6e:	4663      	mov	r3, ip
 8001a70:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab0 <add_time_to_buff+0xe8>)
 8001a72:	f008 f8d3 	bl	8009c1c <sniprintf>
 8001a76:	4601      	mov	r1, r0
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	881a      	ldrh	r2, [r3, #0]
 8001a7c:	b28b      	uxth	r3, r1
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	801a      	strh	r2, [r3, #0]


  return *buff_Head - init_buff_head;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	89fb      	ldrh	r3, [r7, #14]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	b2db      	uxtb	r3, r3
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a9c:	20000348 	.word	0x20000348
 8001aa0:	20000298 	.word	0x20000298
 8001aa4:	20000360 	.word	0x20000360
 8001aa8:	0800d8c8 	.word	0x0800d8c8
 8001aac:	2000035c 	.word	0x2000035c
 8001ab0:	0800d8d4 	.word	0x0800d8d4

08001ab4 <Timer_On>:


// TODO
void Timer_On() {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  timerTickStart = HAL_GetTick();
 8001ab8:	f001 fc16 	bl	80032e8 <HAL_GetTick>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4a02      	ldr	r2, [pc, #8]	@ (8001ac8 <Timer_On+0x14>)
 8001ac0:	6013      	str	r3, [r2, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000364 	.word	0x20000364

08001acc <Timer_Status>:


// TODO
uint32_t Timer_Status() {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  return HAL_GetTick() - timerTickStart;
 8001ad0:	f001 fc0a 	bl	80032e8 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b02      	ldr	r3, [pc, #8]	@ (8001ae0 <Timer_Status+0x14>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	1ad3      	subs	r3, r2, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000364 	.word	0x20000364

08001ae4 <readIMUFifoBuffer>:


//TODO
uint16_t readIMUFifoBuffer(I2C_HandleTypeDef *I2Cx, uint8_t *temp_buff, bool rehabilitateFifo) {
 8001ae4:	b5b0      	push	{r4, r5, r7, lr}
 8001ae6:	b08a      	sub	sp, #40	@ 0x28
 8001ae8:	af04      	add	r7, sp, #16
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	4613      	mov	r3, r2
 8001af0:	71fb      	strb	r3, [r7, #7]
  uint16_t fifoCount;

  // wait full packet received
  do {
   fifoCount = MPU6050_getFIFOCount(I2Cx);
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f001 f8d3 	bl	8002c9e <MPU6050_getFIFOCount>
 8001af8:	4603      	mov	r3, r0
 8001afa:	82fb      	strh	r3, [r7, #22]

  // TODO: add additional check to drop data if fifoCount%12 != 0
  } while(fifoCount % FIFO_PACKET_SIZE != 0);
 8001afc:	8afa      	ldrh	r2, [r7, #22]
 8001afe:	4b42      	ldr	r3, [pc, #264]	@ (8001c08 <readIMUFifoBuffer+0x124>)
 8001b00:	fba3 1302 	umull	r1, r3, r3, r2
 8001b04:	08d9      	lsrs	r1, r3, #3
 8001b06:	460b      	mov	r3, r1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	440b      	add	r3, r1
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1ed      	bne.n	8001af2 <readIMUFifoBuffer+0xe>

  // prevent new incoming packets
  MPU6050_setFIFOEnabled(I2Cx, false);
 8001b16:	2100      	movs	r1, #0
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f001 f89e 	bl	8002c5a <MPU6050_setFIFOEnabled>

  // prevent new data incoming in the FIFO while reading:
  MPU6050_setXGyroFIFOEnabled(I2Cx, false);
 8001b1e:	2100      	movs	r1, #0
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f001 f840 	bl	8002ba6 <MPU6050_setXGyroFIFOEnabled>
  MPU6050_setYGyroFIFOEnabled(I2Cx, false);
 8001b26:	2100      	movs	r1, #0
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f001 f84e 	bl	8002bca <MPU6050_setYGyroFIFOEnabled>
  MPU6050_setZGyroFIFOEnabled(I2Cx, false);
 8001b2e:	2100      	movs	r1, #0
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f001 f85c 	bl	8002bee <MPU6050_setZGyroFIFOEnabled>
  MPU6050_setAccelFIFOEnabled(I2Cx, false);
 8001b36:	2100      	movs	r1, #0
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f001 f86a 	bl	8002c12 <MPU6050_setAccelFIFOEnabled>

  // Enable the FIFO for reading:
  MPU6050_setFIFOEnabled(I2Cx, true);
 8001b3e:	2101      	movs	r1, #1
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f001 f88a 	bl	8002c5a <MPU6050_setFIFOEnabled>

  // read FIFO here...
  //MPU6050_getFIFOBytes(&hi2c1, buff, fifoCount);

  HAL_I2C_Mem_Read_DMA(I2Cx, MPU6050_ADDR, MPU6050_RA_FIFO_R_W, 1, temp_buff, fifoCount);
 8001b46:	8afb      	ldrh	r3, [r7, #22]
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2301      	movs	r3, #1
 8001b50:	2274      	movs	r2, #116	@ 0x74
 8001b52:	21d0      	movs	r1, #208	@ 0xd0
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f002 fc45 	bl	80043e4 <HAL_I2C_Mem_Read_DMA>

  // TODO remove this debug
  printf("Bytes: %d\r\n", fifoCount);
 8001b5a:	8afb      	ldrh	r3, [r7, #22]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	482b      	ldr	r0, [pc, #172]	@ (8001c0c <readIMUFifoBuffer+0x128>)
 8001b60:	f008 fff6 	bl	800ab50 <iprintf>

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001b64:	2200      	movs	r2, #0
 8001b66:	492a      	ldr	r1, [pc, #168]	@ (8001c10 <readIMUFifoBuffer+0x12c>)
 8001b68:	482a      	ldr	r0, [pc, #168]	@ (8001c14 <readIMUFifoBuffer+0x130>)
 8001b6a:	f006 f928 	bl	8007dbe <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	4929      	ldr	r1, [pc, #164]	@ (8001c18 <readIMUFifoBuffer+0x134>)
 8001b72:	4828      	ldr	r0, [pc, #160]	@ (8001c14 <readIMUFifoBuffer+0x130>)
 8001b74:	f006 fa06 	bl	8007f84 <HAL_RTC_GetDate>
  printf("T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
           sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001b78:	4b27      	ldr	r3, [pc, #156]	@ (8001c18 <readIMUFifoBuffer+0x134>)
 8001b7a:	78db      	ldrb	r3, [r3, #3]
  printf("T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001b7c:	4618      	mov	r0, r3
           sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001b7e:	4b26      	ldr	r3, [pc, #152]	@ (8001c18 <readIMUFifoBuffer+0x134>)
 8001b80:	785b      	ldrb	r3, [r3, #1]
  printf("T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001b82:	461c      	mov	r4, r3
           sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001b84:	4b24      	ldr	r3, [pc, #144]	@ (8001c18 <readIMUFifoBuffer+0x134>)
 8001b86:	789b      	ldrb	r3, [r3, #2]
  printf("T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001b88:	461d      	mov	r5, r3
           sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001b8a:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <readIMUFifoBuffer+0x12c>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
  printf("T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001b8e:	461a      	mov	r2, r3
           sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001b90:	4b1f      	ldr	r3, [pc, #124]	@ (8001c10 <readIMUFifoBuffer+0x12c>)
 8001b92:	785b      	ldrb	r3, [r3, #1]
  printf("T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001b94:	4619      	mov	r1, r3
           sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001b96:	4b1e      	ldr	r3, [pc, #120]	@ (8001c10 <readIMUFifoBuffer+0x12c>)
 8001b98:	789b      	ldrb	r3, [r3, #2]
  printf("T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001b9a:	9302      	str	r3, [sp, #8]
 8001b9c:	9101      	str	r1, [sp, #4]
 8001b9e:	9200      	str	r2, [sp, #0]
 8001ba0:	462b      	mov	r3, r5
 8001ba2:	4622      	mov	r2, r4
 8001ba4:	4601      	mov	r1, r0
 8001ba6:	481d      	ldr	r0, [pc, #116]	@ (8001c1c <readIMUFifoBuffer+0x138>)
 8001ba8:	f008 ffd2 	bl	800ab50 <iprintf>

  while(!dmaTxDone);
 8001bac:	bf00      	nop
 8001bae:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <readIMUFifoBuffer+0x13c>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	f083 0301 	eor.w	r3, r3, #1
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f8      	bne.n	8001bae <readIMUFifoBuffer+0xca>
  dmaTxDone = false;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	@ (8001c20 <readIMUFifoBuffer+0x13c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]

  // here FIFO can be enabled again: (avoid losing samples)

  // prevent new incoming packets
  MPU6050_setFIFOEnabled(I2Cx, false);
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f001 f848 	bl	8002c5a <MPU6050_setFIFOEnabled>

  // activate sensors writing to FIFO
  MPU6050_setXGyroFIFOEnabled(I2Cx, true);
 8001bca:	2101      	movs	r1, #1
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 ffea 	bl	8002ba6 <MPU6050_setXGyroFIFOEnabled>
  MPU6050_setYGyroFIFOEnabled(I2Cx, true);
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 fff8 	bl	8002bca <MPU6050_setYGyroFIFOEnabled>
  MPU6050_setZGyroFIFOEnabled(I2Cx, true);
 8001bda:	2101      	movs	r1, #1
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f001 f806 	bl	8002bee <MPU6050_setZGyroFIFOEnabled>
  MPU6050_setAccelFIFOEnabled(I2Cx, true);
 8001be2:	2101      	movs	r1, #1
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f001 f814 	bl	8002c12 <MPU6050_setAccelFIFOEnabled>

  // reset FIFO:
  MPU6050_resetFIFO(I2Cx);
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f001 f847 	bl	8002c7e <MPU6050_resetFIFO>

  // activate FIFO for a new cycle: (prevent activation if zero motion triggered)
  if (rehabilitateFifo) MPU6050_setFIFOEnabled(I2Cx, true);
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <readIMUFifoBuffer+0x11a>
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f001 f82e 	bl	8002c5a <MPU6050_setFIFOEnabled>

  return fifoCount;
 8001bfe:	8afb      	ldrh	r3, [r7, #22]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bdb0      	pop	{r4, r5, r7, pc}
 8001c08:	aaaaaaab 	.word	0xaaaaaaab
 8001c0c:	0800d8f8 	.word	0x0800d8f8
 8001c10:	20000348 	.word	0x20000348
 8001c14:	20000298 	.word	0x20000298
 8001c18:	2000035c 	.word	0x2000035c
 8001c1c:	0800d8d4 	.word	0x0800d8d4
 8001c20:	20000344 	.word	0x20000344

08001c24 <process_and_save_ImuReadings>:


//TODO
void process_and_save_ImuReadings(uint8_t *fifoBuff, uint16_t fifoSize, char *sramBuff, uint16_t *sramBuff_Head,
                        int16_t ax, int16_t ay, int16_t az, int16_t gx, int16_t gy, int16_t gz){
 8001c24:	b5b0      	push	{r4, r5, r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	460b      	mov	r3, r1
 8001c32:	817b      	strh	r3, [r7, #10]


  // write time stamp into the sram2 buff:
  int8_t new_bytes = add_time_to_buff(sramBuff, sramBuff_Head);
 8001c34:	6839      	ldr	r1, [r7, #0]
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fec6 	bl	80019c8 <add_time_to_buff>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	74fb      	strb	r3, [r7, #19]

  if (new_bytes == -1){
 8001c40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c48:	d114      	bne.n	8001c74 <process_and_save_ImuReadings+0x50>
    // write to SD card here...
    printf("Buffer full, write to SD card\r\n");
 8001c4a:	4894      	ldr	r0, [pc, #592]	@ (8001e9c <process_and_save_ImuReadings+0x278>)
 8001c4c:	f008 ffe8 	bl	800ac20 <puts>
    HAL_Delay(1000);
 8001c50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c54:	f001 fb54 	bl	8003300 <HAL_Delay>

    // reset buffer:
    memset(sramBuff, 0, *sramBuff_Head);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2100      	movs	r1, #0
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f008 fff7 	bl	800ac54 <memset>
    *sramBuff_Head = 0;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	801a      	strh	r2, [r3, #0]

    // now add timestamp to main buff:
    add_time_to_buff(sramBuff, sramBuff_Head);
 8001c6c:	6839      	ldr	r1, [r7, #0]
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff feaa 	bl	80019c8 <add_time_to_buff>
  }

  for (int i = 0; i < fifoSize; i += FIFO_PACKET_SIZE) {
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	e105      	b.n	8001e86 <process_and_save_ImuReadings+0x262>
    // combine raw data and convert into readable format:
    ax = (((int16_t)fifoBuff[i]) << 8) | fifoBuff[i+1];
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	b21a      	sxth	r2, r3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	68f9      	ldr	r1, [r7, #12]
 8001c8c:	440b      	add	r3, r1
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	4313      	orrs	r3, r2
 8001c94:	853b      	strh	r3, [r7, #40]	@ 0x28
    ay = (((int16_t)fifoBuff[i+2]) << 8) | fifoBuff[i+3];
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3302      	adds	r3, #2
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	3303      	adds	r3, #3
 8001ca8:	68f9      	ldr	r1, [r7, #12]
 8001caa:	440b      	add	r3, r1
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    az = (((int16_t)fifoBuff[i+4]) << 8) | fifoBuff[i+5];
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	b21a      	sxth	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3305      	adds	r3, #5
 8001cc6:	68f9      	ldr	r1, [r7, #12]
 8001cc8:	440b      	add	r3, r1
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	863b      	strh	r3, [r7, #48]	@ 0x30

    gx = (((int16_t)fifoBuff[i+6]) << 8) | fifoBuff[i+7];
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3306      	adds	r3, #6
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4413      	add	r3, r2
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	b21a      	sxth	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	3307      	adds	r3, #7
 8001ce4:	68f9      	ldr	r1, [r7, #12]
 8001ce6:	440b      	add	r3, r1
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	b21b      	sxth	r3, r3
 8001cec:	4313      	orrs	r3, r2
 8001cee:	86bb      	strh	r3, [r7, #52]	@ 0x34
    gy = (((int16_t)fifoBuff[i+8]) << 8) | fifoBuff[i+9];
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3308      	adds	r3, #8
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	b21a      	sxth	r2, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	3309      	adds	r3, #9
 8001d02:	68f9      	ldr	r1, [r7, #12]
 8001d04:	440b      	add	r3, r1
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	873b      	strh	r3, [r7, #56]	@ 0x38
    gz = (((int16_t)fifoBuff[i+10]) << 8) | fifoBuff[i+11];
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	330a      	adds	r3, #10
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4413      	add	r3, r2
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	b21a      	sxth	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	330b      	adds	r3, #11
 8001d20:	68f9      	ldr	r1, [r7, #12]
 8001d22:	440b      	add	r3, r1
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b21b      	sxth	r3, r3
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    // scale measurement depending on resolution:
    Ax = (double)ax * accelerationResolution;
 8001d2c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fbf7 	bl	8000524 <__aeabi_i2d>
 8001d36:	4604      	mov	r4, r0
 8001d38:	460d      	mov	r5, r1
 8001d3a:	4b59      	ldr	r3, [pc, #356]	@ (8001ea0 <process_and_save_ImuReadings+0x27c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fc02 	bl	8000548 <__aeabi_f2d>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4620      	mov	r0, r4
 8001d4a:	4629      	mov	r1, r5
 8001d4c:	f7fe fc54 	bl	80005f8 <__aeabi_dmul>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4953      	ldr	r1, [pc, #332]	@ (8001ea4 <process_and_save_ImuReadings+0x280>)
 8001d56:	e9c1 2300 	strd	r2, r3, [r1]
    Ay = (double)ay * accelerationResolution;
 8001d5a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fbe0 	bl	8000524 <__aeabi_i2d>
 8001d64:	4604      	mov	r4, r0
 8001d66:	460d      	mov	r5, r1
 8001d68:	4b4d      	ldr	r3, [pc, #308]	@ (8001ea0 <process_and_save_ImuReadings+0x27c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fbeb 	bl	8000548 <__aeabi_f2d>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4620      	mov	r0, r4
 8001d78:	4629      	mov	r1, r5
 8001d7a:	f7fe fc3d 	bl	80005f8 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4949      	ldr	r1, [pc, #292]	@ (8001ea8 <process_and_save_ImuReadings+0x284>)
 8001d84:	e9c1 2300 	strd	r2, r3, [r1]
    Az = (double)az * accelerationResolution;
 8001d88:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fbc9 	bl	8000524 <__aeabi_i2d>
 8001d92:	4604      	mov	r4, r0
 8001d94:	460d      	mov	r5, r1
 8001d96:	4b42      	ldr	r3, [pc, #264]	@ (8001ea0 <process_and_save_ImuReadings+0x27c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fbd4 	bl	8000548 <__aeabi_f2d>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4620      	mov	r0, r4
 8001da6:	4629      	mov	r1, r5
 8001da8:	f7fe fc26 	bl	80005f8 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	493e      	ldr	r1, [pc, #248]	@ (8001eac <process_and_save_ImuReadings+0x288>)
 8001db2:	e9c1 2300 	strd	r2, r3, [r1]
    Gx = (double)gx * gyroscopeResolution;
 8001db6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fbb2 	bl	8000524 <__aeabi_i2d>
 8001dc0:	4604      	mov	r4, r0
 8001dc2:	460d      	mov	r5, r1
 8001dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb0 <process_and_save_ImuReadings+0x28c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fbbd 	bl	8000548 <__aeabi_f2d>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	f7fe fc0f 	bl	80005f8 <__aeabi_dmul>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4935      	ldr	r1, [pc, #212]	@ (8001eb4 <process_and_save_ImuReadings+0x290>)
 8001de0:	e9c1 2300 	strd	r2, r3, [r1]
    Gy = (double)gy * gyroscopeResolution;
 8001de4:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fb9b 	bl	8000524 <__aeabi_i2d>
 8001dee:	4604      	mov	r4, r0
 8001df0:	460d      	mov	r5, r1
 8001df2:	4b2f      	ldr	r3, [pc, #188]	@ (8001eb0 <process_and_save_ImuReadings+0x28c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fba6 	bl	8000548 <__aeabi_f2d>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4620      	mov	r0, r4
 8001e02:	4629      	mov	r1, r5
 8001e04:	f7fe fbf8 	bl	80005f8 <__aeabi_dmul>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	492a      	ldr	r1, [pc, #168]	@ (8001eb8 <process_and_save_ImuReadings+0x294>)
 8001e0e:	e9c1 2300 	strd	r2, r3, [r1]
    Gz = (double)gz * gyroscopeResolution;
 8001e12:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fb84 	bl	8000524 <__aeabi_i2d>
 8001e1c:	4604      	mov	r4, r0
 8001e1e:	460d      	mov	r5, r1
 8001e20:	4b23      	ldr	r3, [pc, #140]	@ (8001eb0 <process_and_save_ImuReadings+0x28c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fb8f 	bl	8000548 <__aeabi_f2d>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4620      	mov	r0, r4
 8001e30:	4629      	mov	r1, r5
 8001e32:	f7fe fbe1 	bl	80005f8 <__aeabi_dmul>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4920      	ldr	r1, [pc, #128]	@ (8001ebc <process_and_save_ImuReadings+0x298>)
 8001e3c:	e9c1 2300 	strd	r2, r3, [r1]
//        printf("Gz: %.3f °/s\r\n", Gz);
//
//        HAL_Delay(500);

    // write time stamp into the sram2 buff:
    uint8_t new_bytes = add_data_to_buff(sramBuff, sramBuff_Head, Ax, Ay, Az, Gx, Gy, Gz);
 8001e40:	4b18      	ldr	r3, [pc, #96]	@ (8001ea4 <process_and_save_ImuReadings+0x280>)
 8001e42:	ed93 7b00 	vldr	d7, [r3]
 8001e46:	4b18      	ldr	r3, [pc, #96]	@ (8001ea8 <process_and_save_ImuReadings+0x284>)
 8001e48:	ed93 6b00 	vldr	d6, [r3]
 8001e4c:	4b17      	ldr	r3, [pc, #92]	@ (8001eac <process_and_save_ImuReadings+0x288>)
 8001e4e:	ed93 2b00 	vldr	d2, [r3]
 8001e52:	4b18      	ldr	r3, [pc, #96]	@ (8001eb4 <process_and_save_ImuReadings+0x290>)
 8001e54:	ed93 3b00 	vldr	d3, [r3]
 8001e58:	4b17      	ldr	r3, [pc, #92]	@ (8001eb8 <process_and_save_ImuReadings+0x294>)
 8001e5a:	ed93 4b00 	vldr	d4, [r3]
 8001e5e:	4b17      	ldr	r3, [pc, #92]	@ (8001ebc <process_and_save_ImuReadings+0x298>)
 8001e60:	ed93 5b00 	vldr	d5, [r3]
 8001e64:	eeb0 1a46 	vmov.f32	s2, s12
 8001e68:	eef0 1a66 	vmov.f32	s3, s13
 8001e6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001e70:	eef0 0a67 	vmov.f32	s1, s15
 8001e74:	6839      	ldr	r1, [r7, #0]
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff fd34 	bl	80018e4 <add_data_to_buff>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	74bb      	strb	r3, [r7, #18]
  for (int i = 0; i < fifoSize; i += FIFO_PACKET_SIZE) {
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	330c      	adds	r3, #12
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	897b      	ldrh	r3, [r7, #10]
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	f6ff aef5 	blt.w	8001c7a <process_and_save_ImuReadings+0x56>

      // now add timestamp to main buff:
      add_data_to_buff(sramBuff, sramBuff_Head, Ax, Ay, Az, Gx, Gy, Gz);
    }
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bdb0      	pop	{r4, r5, r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	0800d904 	.word	0x0800d904
 8001ea0:	200003a8 	.word	0x200003a8
 8001ea4:	20000370 	.word	0x20000370
 8001ea8:	20000378 	.word	0x20000378
 8001eac:	20000380 	.word	0x20000380
 8001eb0:	200003ac 	.word	0x200003ac
 8001eb4:	20000390 	.word	0x20000390
 8001eb8:	20000398 	.word	0x20000398
 8001ebc:	200003a0 	.word	0x200003a0

08001ec0 <enterStandbyMode>:


void enterStandbyMode(){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
  /* Clear the WU FLAG */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8001ec6:	4b17      	ldr	r3, [pc, #92]	@ (8001f24 <enterStandbyMode+0x64>)
 8001ec8:	221f      	movs	r2, #31
 8001eca:	619a      	str	r2, [r3, #24]

  printf("About to sleep...\r\n");
 8001ecc:	4816      	ldr	r0, [pc, #88]	@ (8001f28 <enterStandbyMode+0x68>)
 8001ece:	f008 fea7 	bl	800ac20 <puts>


  // TODO: check here -> reconfigure EXTI pin as SYS_WKUP
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001ed2:	2017      	movs	r0, #23
 8001ed4:	f001 fb81 	bl	80035da <HAL_NVIC_DisableIRQ>

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin  = GPIO_PIN_5;
 8001ee6:	2320      	movs	r3, #32
 8001ee8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	480d      	ldr	r0, [pc, #52]	@ (8001f2c <enterStandbyMode+0x6c>)
 8001ef8:	f001 fdd0 	bl	8003a9c <HAL_GPIO_Init>

  // Enable pull down on SYS_WKUP pin
  HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_C, PWR_GPIO_BIT_5);
 8001efc:	2120      	movs	r1, #32
 8001efe:	2002      	movs	r0, #2
 8001f00:	f004 fa70 	bl	80063e4 <HAL_PWREx_EnableGPIOPullDown>
  HAL_PWREx_EnablePullUpPullDownConfig();
 8001f04:	f004 fb12 	bl	800652c <HAL_PWREx_EnablePullUpPullDownConfig>

  // Enable RAM2 content retention
  HAL_PWREx_EnableSRAM2ContentRetention();
 8001f08:	f004 fb20 	bl	800654c <HAL_PWREx_EnableSRAM2ContentRetention>

  /* Enable the WAKEUP PIN */
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN5);
 8001f0c:	2010      	movs	r0, #16
 8001f0e:	f004 f9b5 	bl	800627c <HAL_PWR_EnableWakeUpPin>

  printf("Entering standby mode\r\n");
 8001f12:	4807      	ldr	r0, [pc, #28]	@ (8001f30 <enterStandbyMode+0x70>)
 8001f14:	f008 fe84 	bl	800ac20 <puts>

  /* Finally enter the standby mode */
  HAL_PWR_EnterSTANDBYMode();
 8001f18:	f004 f9e6 	bl	80062e8 <HAL_PWR_EnterSTANDBYMode>
}
 8001f1c:	bf00      	nop
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40007000 	.word	0x40007000
 8001f28:	0800d924 	.word	0x0800d924
 8001f2c:	48000800 	.word	0x48000800
 8001f30:	0800d938 	.word	0x0800d938

08001f34 <HAL_I2C_MemRxCpltCallback>:


//TODO
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef * hi2c) {
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  dmaTxDone = true;
 8001f3c:	4b04      	ldr	r3, [pc, #16]	@ (8001f50 <HAL_I2C_MemRxCpltCallback+0x1c>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000344 	.word	0x20000344

08001f54 <HAL_I2C_ErrorCallback>:


//TODO
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef * hi2c){
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  printf("Err DMA!\r\n");
 8001f5c:	4803      	ldr	r0, [pc, #12]	@ (8001f6c <HAL_I2C_ErrorCallback+0x18>)
 8001f5e:	f008 fe5f 	bl	800ac20 <puts>
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	0800d950 	.word	0x0800d950

08001f70 <HAL_RTCEx_WakeUpTimerEventCallback>:

//TODO
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  rtc_trg = true;
 8001f78:	4b04      	ldr	r3, [pc, #16]	@ (8001f8c <HAL_RTCEx_WakeUpTimerEventCallback+0x1c>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000346 	.word	0x20000346

08001f90 <HAL_GPIO_EXTI_Callback>:

//TODO
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == IMU_interrupt_Pin)
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	d102      	bne.n	8001fa6 <HAL_GPIO_EXTI_Callback+0x16>
  {
    // code here...
    zero_mot_trg = true;
 8001fa0:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <HAL_GPIO_EXTI_Callback+0x24>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]

  }
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000345 	.word	0x20000345

08001fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fbc:	b672      	cpsid	i
}
 8001fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <Error_Handler+0x8>

08001fc4 <I2Cdev_readBit>:
 * @param regAddr Register regAddr to read from
 * @param bitNum Bit position to read (0-7)
 * @param data Container for single bit value
 * @return Status of read operation (true = success)
 */
HAL_StatusTypeDef I2Cdev_readBit(I2C_HandleTypeDef *I2Cx, uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af04      	add	r7, sp, #16
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	4608      	mov	r0, r1
 8001fce:	4611      	mov	r1, r2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	70fb      	strb	r3, [r7, #3]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	70bb      	strb	r3, [r7, #2]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	707b      	strb	r3, [r7, #1]
  uint8_t b;
  HAL_StatusTypeDef status =  HAL_I2C_Mem_Read(I2Cx, devAddr, regAddr, 1, &b, 1, HAL_MAX_DELAY);
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	b299      	uxth	r1, r3
 8001fe2:	78bb      	ldrb	r3, [r7, #2]
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fea:	9302      	str	r3, [sp, #8]
 8001fec:	2301      	movs	r3, #1
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	f107 030e 	add.w	r3, r7, #14
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f002 f8d9 	bl	80041b0 <HAL_I2C_Mem_Read>
 8001ffe:	4603      	mov	r3, r0
 8002000:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK){
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10a      	bne.n	800201e <I2Cdev_readBit+0x5a>
    //*data = b & (1 << bitNum);
    *data = (b >> bitNum) & 0x01;
 8002008:	7bbb      	ldrb	r3, [r7, #14]
 800200a:	461a      	mov	r2, r3
 800200c:	787b      	ldrb	r3, [r7, #1]
 800200e:	fa42 f303 	asr.w	r3, r2, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	b2da      	uxtb	r2, r3
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <I2Cdev_writeBit>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
HAL_StatusTypeDef I2Cdev_writeBit(I2C_HandleTypeDef *I2Cx, uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af04      	add	r7, sp, #16
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	4608      	mov	r0, r1
 8002032:	4611      	mov	r1, r2
 8002034:	461a      	mov	r2, r3
 8002036:	4603      	mov	r3, r0
 8002038:	70fb      	strb	r3, [r7, #3]
 800203a:	460b      	mov	r3, r1
 800203c:	70bb      	strb	r3, [r7, #2]
 800203e:	4613      	mov	r3, r2
 8002040:	707b      	strb	r3, [r7, #1]
  uint8_t b;
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(I2Cx, devAddr, regAddr, 1, &b, 1, HAL_MAX_DELAY);
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	b299      	uxth	r1, r3
 8002046:	78bb      	ldrb	r3, [r7, #2]
 8002048:	b29a      	uxth	r2, r3
 800204a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800204e:	9302      	str	r3, [sp, #8]
 8002050:	2301      	movs	r3, #1
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	f107 030e 	add.w	r3, r7, #14
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	2301      	movs	r3, #1
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f002 f8a7 	bl	80041b0 <HAL_I2C_Mem_Read>
 8002062:	4603      	mov	r3, r0
 8002064:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK) {
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d12c      	bne.n	80020c6 <I2Cdev_writeBit+0x9e>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 800206c:	7e3b      	ldrb	r3, [r7, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <I2Cdev_writeBit+0x60>
 8002072:	787b      	ldrb	r3, [r7, #1]
 8002074:	2201      	movs	r2, #1
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	b25a      	sxtb	r2, r3
 800207c:	7bbb      	ldrb	r3, [r7, #14]
 800207e:	b25b      	sxtb	r3, r3
 8002080:	4313      	orrs	r3, r2
 8002082:	b25b      	sxtb	r3, r3
 8002084:	b2db      	uxtb	r3, r3
 8002086:	e00b      	b.n	80020a0 <I2Cdev_writeBit+0x78>
 8002088:	787b      	ldrb	r3, [r7, #1]
 800208a:	2201      	movs	r2, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	b25b      	sxtb	r3, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	b25a      	sxtb	r2, r3
 8002096:	7bbb      	ldrb	r3, [r7, #14]
 8002098:	b25b      	sxtb	r3, r3
 800209a:	4013      	ands	r3, r2
 800209c:	b25b      	sxtb	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	73bb      	strb	r3, [r7, #14]
    status = HAL_I2C_Mem_Write(I2Cx, devAddr, regAddr, 1, &b, 1, HAL_MAX_DELAY);
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	b299      	uxth	r1, r3
 80020a6:	78bb      	ldrb	r3, [r7, #2]
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020ae:	9302      	str	r3, [sp, #8]
 80020b0:	2301      	movs	r3, #1
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	f107 030e 	add.w	r3, r7, #14
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	2301      	movs	r3, #1
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f001 ff63 	bl	8003f88 <HAL_I2C_Mem_Write>
 80020c2:	4603      	mov	r3, r0
 80020c4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <I2Cdev_writeBits>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
HAL_StatusTypeDef I2Cdev_writeBits(I2C_HandleTypeDef *I2Cx, uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af04      	add	r7, sp, #16
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	4608      	mov	r0, r1
 80020da:	4611      	mov	r1, r2
 80020dc:	461a      	mov	r2, r3
 80020de:	4603      	mov	r3, r0
 80020e0:	70fb      	strb	r3, [r7, #3]
 80020e2:	460b      	mov	r3, r1
 80020e4:	70bb      	strb	r3, [r7, #2]
 80020e6:	4613      	mov	r3, r2
 80020e8:	707b      	strb	r3, [r7, #1]
  // 10101111 original value (sample)
  // 10100011 original & ~mask
  // 10101011 masked | value
  uint8_t b;

  if (HAL_I2C_Mem_Read(I2Cx, devAddr, regAddr, 1, &b, 1, HAL_MAX_DELAY) == HAL_OK) {
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	b299      	uxth	r1, r3
 80020ee:	78bb      	ldrb	r3, [r7, #2]
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020f6:	9302      	str	r3, [sp, #8]
 80020f8:	2301      	movs	r3, #1
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	f107 030e 	add.w	r3, r7, #14
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	2301      	movs	r3, #1
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f002 f853 	bl	80041b0 <HAL_I2C_Mem_Read>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d138      	bne.n	8002182 <I2Cdev_writeBits+0xb2>
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1); // (1 << length)-1: creates length-subsequent ones
 8002110:	7e3b      	ldrb	r3, [r7, #24]
 8002112:	2201      	movs	r2, #1
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	1e5a      	subs	r2, r3, #1
 800211a:	7879      	ldrb	r1, [r7, #1]
 800211c:	7e3b      	ldrb	r3, [r7, #24]
 800211e:	1acb      	subs	r3, r1, r3
 8002120:	3301      	adds	r3, #1
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	73fb      	strb	r3, [r7, #15]
                                   // Then the mask is shifted into correct position
    data <<= (bitStart - length + 1); // shift data into correct position
 8002128:	7f3a      	ldrb	r2, [r7, #28]
 800212a:	7879      	ldrb	r1, [r7, #1]
 800212c:	7e3b      	ldrb	r3, [r7, #24]
 800212e:	1acb      	subs	r3, r1, r3
 8002130:	3301      	adds	r3, #1
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	773b      	strb	r3, [r7, #28]
    data &= mask; // zero all non-important bits in data
 8002138:	7f3a      	ldrb	r2, [r7, #28]
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	4013      	ands	r3, r2
 800213e:	773b      	strb	r3, [r7, #28]
    b &= ~(mask); // zero all important bits in existing byte
 8002140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002144:	43db      	mvns	r3, r3
 8002146:	b25a      	sxtb	r2, r3
 8002148:	7bbb      	ldrb	r3, [r7, #14]
 800214a:	b25b      	sxtb	r3, r3
 800214c:	4013      	ands	r3, r2
 800214e:	b25b      	sxtb	r3, r3
 8002150:	b2db      	uxtb	r3, r3
 8002152:	73bb      	strb	r3, [r7, #14]
    b |= data; // combine data with existing byte
 8002154:	7bba      	ldrb	r2, [r7, #14]
 8002156:	7f3b      	ldrb	r3, [r7, #28]
 8002158:	4313      	orrs	r3, r2
 800215a:	b2db      	uxtb	r3, r3
 800215c:	73bb      	strb	r3, [r7, #14]
    return HAL_I2C_Mem_Write(I2Cx, devAddr, regAddr, 1, &b, 1, HAL_MAX_DELAY);
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	b299      	uxth	r1, r3
 8002162:	78bb      	ldrb	r3, [r7, #2]
 8002164:	b29a      	uxth	r2, r3
 8002166:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800216a:	9302      	str	r3, [sp, #8]
 800216c:	2301      	movs	r3, #1
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	f107 030e 	add.w	r3, r7, #14
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2301      	movs	r3, #1
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f001 ff05 	bl	8003f88 <HAL_I2C_Mem_Write>
 800217e:	4603      	mov	r3, r0
 8002180:	e000      	b.n	8002184 <I2Cdev_writeBits+0xb4>
  } else {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
  }
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <I2Cdev_readByte>:
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
HAL_StatusTypeDef I2Cdev_readByte(I2C_HandleTypeDef *I2Cx, uint8_t devAddr, uint8_t regAddr, uint8_t *data) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af04      	add	r7, sp, #16
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	72fb      	strb	r3, [r7, #11]
 800219a:	4613      	mov	r3, r2
 800219c:	72bb      	strb	r3, [r7, #10]
  return HAL_I2C_Mem_Read(I2Cx, devAddr, regAddr, 1, data, 1, HAL_MAX_DELAY);
 800219e:	7afb      	ldrb	r3, [r7, #11]
 80021a0:	b299      	uxth	r1, r3
 80021a2:	7abb      	ldrb	r3, [r7, #10]
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021aa:	9302      	str	r3, [sp, #8]
 80021ac:	2301      	movs	r3, #1
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	2301      	movs	r3, #1
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f001 fffa 	bl	80041b0 <HAL_I2C_Mem_Read>
 80021bc:	4603      	mov	r3, r0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <I2Cdev_writeByte>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
HAL_StatusTypeDef I2Cdev_writeByte(I2C_HandleTypeDef *I2Cx, uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b086      	sub	sp, #24
 80021ca:	af04      	add	r7, sp, #16
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	4608      	mov	r0, r1
 80021d0:	4611      	mov	r1, r2
 80021d2:	461a      	mov	r2, r3
 80021d4:	4603      	mov	r3, r0
 80021d6:	70fb      	strb	r3, [r7, #3]
 80021d8:	460b      	mov	r3, r1
 80021da:	70bb      	strb	r3, [r7, #2]
 80021dc:	4613      	mov	r3, r2
 80021de:	707b      	strb	r3, [r7, #1]
  return HAL_I2C_Mem_Write(I2Cx, devAddr, regAddr, 1, &data, 1, HAL_MAX_DELAY);
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	b299      	uxth	r1, r3
 80021e4:	78bb      	ldrb	r3, [r7, #2]
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021ec:	9302      	str	r3, [sp, #8]
 80021ee:	2301      	movs	r3, #1
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	1c7b      	adds	r3, r7, #1
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2301      	movs	r3, #1
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f001 fec5 	bl	8003f88 <HAL_I2C_Mem_Write>
 80021fe:	4603      	mov	r3, r0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <I2Cdev_readBytes>:
 * @param regAddr First register regAddr to read from
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @return Status of operation (true = success)
 */
HAL_StatusTypeDef I2Cdev_readBytes(I2C_HandleTypeDef *I2Cx, uint8_t devAddr, uint8_t regAddr, uint16_t length, uint8_t *data) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af04      	add	r7, sp, #16
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	4608      	mov	r0, r1
 8002212:	4611      	mov	r1, r2
 8002214:	461a      	mov	r2, r3
 8002216:	4603      	mov	r3, r0
 8002218:	70fb      	strb	r3, [r7, #3]
 800221a:	460b      	mov	r3, r1
 800221c:	70bb      	strb	r3, [r7, #2]
 800221e:	4613      	mov	r3, r2
 8002220:	803b      	strh	r3, [r7, #0]
  return HAL_I2C_Mem_Read(I2Cx, devAddr, regAddr, 1, data, length, HAL_MAX_DELAY);
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	b299      	uxth	r1, r3
 8002226:	78bb      	ldrb	r3, [r7, #2]
 8002228:	b29a      	uxth	r2, r3
 800222a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800222e:	9302      	str	r3, [sp, #8]
 8002230:	883b      	ldrh	r3, [r7, #0]
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	2301      	movs	r3, #1
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f001 ffb8 	bl	80041b0 <HAL_I2C_Mem_Read>
 8002240:	4603      	mov	r3, r0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <I2Cdev_writeWord>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New word value to write
 * @return Status of operation (true = success)
 */
HAL_StatusTypeDef I2Cdev_writeWord(I2C_HandleTypeDef *I2Cx, uint8_t devAddr, uint8_t regAddr, uint16_t value) {
 800224a:	b580      	push	{r7, lr}
 800224c:	b088      	sub	sp, #32
 800224e:	af04      	add	r7, sp, #16
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	4608      	mov	r0, r1
 8002254:	4611      	mov	r1, r2
 8002256:	461a      	mov	r2, r3
 8002258:	4603      	mov	r3, r0
 800225a:	70fb      	strb	r3, [r7, #3]
 800225c:	460b      	mov	r3, r1
 800225e:	70bb      	strb	r3, [r7, #2]
 8002260:	4613      	mov	r3, r2
 8002262:	803b      	strh	r3, [r7, #0]
  uint8_t data[2];
  data[0] = (uint8_t)(value >> 8);    // Most significant byte;
 8002264:	883b      	ldrh	r3, [r7, #0]
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	b29b      	uxth	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	733b      	strb	r3, [r7, #12]
  data[1] = (uint8_t)(value & 0xFF);  // Least significant byte;
 800226e:	883b      	ldrh	r3, [r7, #0]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	737b      	strb	r3, [r7, #13]
  return HAL_I2C_Mem_Write(I2Cx, devAddr, regAddr, 1, data, 2, HAL_MAX_DELAY);
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	b299      	uxth	r1, r3
 8002278:	78bb      	ldrb	r3, [r7, #2]
 800227a:	b29a      	uxth	r2, r3
 800227c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002280:	9302      	str	r3, [sp, #8]
 8002282:	2302      	movs	r3, #2
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	f107 030c 	add.w	r3, r7, #12
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2301      	movs	r3, #1
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f001 fe7a 	bl	8003f88 <HAL_I2C_Mem_Write>
 8002294:	4603      	mov	r3, r0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <MPU6050_Initialize>:
 * @param gyroRange gyroscope FS range, see GYRO_FS in mpu6050.h
 * @param offsets pointer to buffer containing offsets for both accelerometer and gyroscope
 * @return initialization status (true if correctly done)
 */
uint8_t MPU6050_Initialize(I2C_HandleTypeDef *I2Cx, ACCEL_FS accelRange, GYRO_FS gyroRange, int16_t* offsets)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	@ 0x28
 80022a4:	af04      	add	r7, sp, #16
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	72fb      	strb	r3, [r7, #11]
 80022ae:	4613      	mov	r3, r2
 80022b0:	72bb      	strb	r3, [r7, #10]
  uint8_t check;
  uint8_t Data;

  // check device ID WHO_AM_I

  HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 100);
 80022b2:	2364      	movs	r3, #100	@ 0x64
 80022b4:	9302      	str	r3, [sp, #8]
 80022b6:	2301      	movs	r3, #1
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	f107 0317 	add.w	r3, r7, #23
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2301      	movs	r3, #1
 80022c2:	2275      	movs	r2, #117	@ 0x75
 80022c4:	21d0      	movs	r1, #208	@ 0xd0
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f001 ff72 	bl	80041b0 <HAL_I2C_Mem_Read>

  if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
 80022ce:	2b68      	cmp	r3, #104	@ 0x68
 80022d0:	f040 80af 	bne.w	8002432 <MPU6050_Initialize+0x192>
  {
    // Power management register 0X6B we should write all 0's to wake the sensor up
    // Also reset all the registers status
    Data = 0x00;
 80022d4:	2300      	movs	r3, #0
 80022d6:	75bb      	strb	r3, [r7, #22]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 100);
 80022d8:	2364      	movs	r3, #100	@ 0x64
 80022da:	9302      	str	r3, [sp, #8]
 80022dc:	2301      	movs	r3, #1
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	f107 0316 	add.w	r3, r7, #22
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	2301      	movs	r3, #1
 80022e8:	226b      	movs	r2, #107	@ 0x6b
 80022ea:	21d0      	movs	r1, #208	@ 0xd0
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f001 fe4b 	bl	8003f88 <HAL_I2C_Mem_Write>

    // Set accelerometer configuration in ACCEL_CONFIG Register
    switch (accelRange)
 80022f2:	7afb      	ldrb	r3, [r7, #11]
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d82f      	bhi.n	8002358 <MPU6050_Initialize+0xb8>
 80022f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002300 <MPU6050_Initialize+0x60>)
 80022fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fe:	bf00      	nop
 8002300:	08002311 	.word	0x08002311
 8002304:	08002323 	.word	0x08002323
 8002308:	08002335 	.word	0x08002335
 800230c:	08002347 	.word	0x08002347
    {
      case A2G:
      MPU6050_setFullScaleAccelRange(I2Cx, MPU6050_ACCEL_FS_2);
 8002310:	2100      	movs	r1, #0
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 fa5d 	bl	80027d2 <MPU6050_setFullScaleAccelRange>
      accelerationResolution = 2.0 / 32768.0;
 8002318:	4b48      	ldr	r3, [pc, #288]	@ (800243c <MPU6050_Initialize+0x19c>)
 800231a:	f04f 5262 	mov.w	r2, #947912704	@ 0x38800000
 800231e:	601a      	str	r2, [r3, #0]
      break;
 8002320:	e01c      	b.n	800235c <MPU6050_Initialize+0xbc>

      case A4G:
      MPU6050_setFullScaleAccelRange(I2Cx, MPU6050_ACCEL_FS_4);
 8002322:	2101      	movs	r1, #1
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fa54 	bl	80027d2 <MPU6050_setFullScaleAccelRange>
      accelerationResolution = 4.0 / 32768.0;
 800232a:	4b44      	ldr	r3, [pc, #272]	@ (800243c <MPU6050_Initialize+0x19c>)
 800232c:	f04f 5264 	mov.w	r2, #956301312	@ 0x39000000
 8002330:	601a      	str	r2, [r3, #0]
      break;
 8002332:	e013      	b.n	800235c <MPU6050_Initialize+0xbc>

      case A8G:
      MPU6050_setFullScaleAccelRange(I2Cx, MPU6050_ACCEL_FS_8);
 8002334:	2102      	movs	r1, #2
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fa4b 	bl	80027d2 <MPU6050_setFullScaleAccelRange>
      accelerationResolution = 8.0 / 32768.0;
 800233c:	4b3f      	ldr	r3, [pc, #252]	@ (800243c <MPU6050_Initialize+0x19c>)
 800233e:	f04f 5266 	mov.w	r2, #964689920	@ 0x39800000
 8002342:	601a      	str	r2, [r3, #0]
      break;
 8002344:	e00a      	b.n	800235c <MPU6050_Initialize+0xbc>

      case A16G:
      MPU6050_setFullScaleAccelRange(I2Cx, MPU6050_ACCEL_FS_16);
 8002346:	2103      	movs	r1, #3
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 fa42 	bl	80027d2 <MPU6050_setFullScaleAccelRange>
      accelerationResolution = 16.0 / 32768.0;
 800234e:	4b3b      	ldr	r3, [pc, #236]	@ (800243c <MPU6050_Initialize+0x19c>)
 8002350:	f04f 5268 	mov.w	r2, #973078528	@ 0x3a000000
 8002354:	601a      	str	r2, [r3, #0]
      break;
 8002356:	e001      	b.n	800235c <MPU6050_Initialize+0xbc>

      default:
      return 1;
 8002358:	2301      	movs	r3, #1
 800235a:	e06b      	b.n	8002434 <MPU6050_Initialize+0x194>
    }

    // Set Gyroscope configuration in GYRO_CONFIG Register
    switch (gyroRange)
 800235c:	7abb      	ldrb	r3, [r7, #10]
 800235e:	2b03      	cmp	r3, #3
 8002360:	d82a      	bhi.n	80023b8 <MPU6050_Initialize+0x118>
 8002362:	a201      	add	r2, pc, #4	@ (adr r2, 8002368 <MPU6050_Initialize+0xc8>)
 8002364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002368:	08002379 	.word	0x08002379
 800236c:	08002389 	.word	0x08002389
 8002370:	08002399 	.word	0x08002399
 8002374:	080023a9 	.word	0x080023a9
    {
      case G250DPS:
      MPU6050_setFullScaleGyroRange(I2Cx, MPU6050_GYRO_FS_250);
 8002378:	2100      	movs	r1, #0
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 fa61 	bl	8002842 <MPU6050_setFullScaleGyroRange>
      gyroscopeResolution = 250.0 / 32768.0;
 8002380:	4b2f      	ldr	r3, [pc, #188]	@ (8002440 <MPU6050_Initialize+0x1a0>)
 8002382:	4a30      	ldr	r2, [pc, #192]	@ (8002444 <MPU6050_Initialize+0x1a4>)
 8002384:	601a      	str	r2, [r3, #0]
      break;
 8002386:	e019      	b.n	80023bc <MPU6050_Initialize+0x11c>

      case G500DPS:
      MPU6050_setFullScaleGyroRange(I2Cx, MPU6050_GYRO_FS_500);
 8002388:	2101      	movs	r1, #1
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 fa59 	bl	8002842 <MPU6050_setFullScaleGyroRange>
      gyroscopeResolution = 500.0 / 32768.0;
 8002390:	4b2b      	ldr	r3, [pc, #172]	@ (8002440 <MPU6050_Initialize+0x1a0>)
 8002392:	4a2d      	ldr	r2, [pc, #180]	@ (8002448 <MPU6050_Initialize+0x1a8>)
 8002394:	601a      	str	r2, [r3, #0]
      break;
 8002396:	e011      	b.n	80023bc <MPU6050_Initialize+0x11c>

      case G1000DPS:
      MPU6050_setFullScaleGyroRange(I2Cx, MPU6050_GYRO_FS_1000);
 8002398:	2102      	movs	r1, #2
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 fa51 	bl	8002842 <MPU6050_setFullScaleGyroRange>
      gyroscopeResolution = 1000.0 / 32768.0;
 80023a0:	4b27      	ldr	r3, [pc, #156]	@ (8002440 <MPU6050_Initialize+0x1a0>)
 80023a2:	4a2a      	ldr	r2, [pc, #168]	@ (800244c <MPU6050_Initialize+0x1ac>)
 80023a4:	601a      	str	r2, [r3, #0]
      break;
 80023a6:	e009      	b.n	80023bc <MPU6050_Initialize+0x11c>

      case G2000DPS:
      MPU6050_setFullScaleGyroRange(I2Cx, MPU6050_GYRO_FS_2000);
 80023a8:	2103      	movs	r1, #3
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 fa49 	bl	8002842 <MPU6050_setFullScaleGyroRange>
      gyroscopeResolution = 2000.0 / 32768.0;
 80023b0:	4b23      	ldr	r3, [pc, #140]	@ (8002440 <MPU6050_Initialize+0x1a0>)
 80023b2:	4a27      	ldr	r2, [pc, #156]	@ (8002450 <MPU6050_Initialize+0x1b0>)
 80023b4:	601a      	str	r2, [r3, #0]
      break;
 80023b6:	e001      	b.n	80023bc <MPU6050_Initialize+0x11c>

      default:
      return 1;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e03b      	b.n	8002434 <MPU6050_Initialize+0x194>
    }

    // make sure everything is running:
    MPU6050_setSleepEnabled(I2Cx, false);
 80023bc:	2100      	movs	r1, #0
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f878 	bl	80024b4 <MPU6050_setSleepEnabled>

    // set correct offset values:
    MPU6050_setXAccelOffset(I2Cx, offsets[0]);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ca:	4619      	mov	r1, r3
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 fb8a 	bl	8002ae6 <MPU6050_setXAccelOffset>
    MPU6050_setYAccelOffset(I2Cx, offsets[1]);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3302      	adds	r3, #2
 80023d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023da:	4619      	mov	r1, r3
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 fb92 	bl	8002b06 <MPU6050_setYAccelOffset>
    MPU6050_setZAccelOffset(I2Cx, offsets[2]);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3304      	adds	r3, #4
 80023e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ea:	4619      	mov	r1, r3
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 fb9a 	bl	8002b26 <MPU6050_setZAccelOffset>

    MPU6050_setXGyroOffset(I2Cx, offsets[3]);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3306      	adds	r3, #6
 80023f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023fa:	4619      	mov	r1, r3
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 fba2 	bl	8002b46 <MPU6050_setXGyroOffset>
    MPU6050_setYGyroOffset(I2Cx, offsets[4]);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3308      	adds	r3, #8
 8002406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800240a:	4619      	mov	r1, r3
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 fbaa 	bl	8002b66 <MPU6050_setYGyroOffset>
    MPU6050_setZGyroOffset(I2Cx, offsets[5]);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	330a      	adds	r3, #10
 8002416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800241a:	4619      	mov	r1, r3
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 fbb2 	bl	8002b86 <MPU6050_setZGyroOffset>

    // turn off temperature sensor, saves ~ 60 uA in active mode
    MPU6050_setTempSensorEnabled(I2Cx, 0);
 8002422:	2100      	movs	r1, #0
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 f963 	bl	80026f0 <MPU6050_setTempSensorEnabled>

    // turn off internal DMP, saves ~ 100 uA in active mode
    MPU6050_setDMPEnabled(I2Cx, 0);
 800242a:	2100      	movs	r1, #0
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 fa44 	bl	80028ba <MPU6050_setDMPEnabled>
  }
  return 0;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	200003a8 	.word	0x200003a8
 8002440:	200003ac 	.word	0x200003ac
 8002444:	3bfa0000 	.word	0x3bfa0000
 8002448:	3c7a0000 	.word	0x3c7a0000
 800244c:	3cfa0000 	.word	0x3cfa0000
 8002450:	3d7a0000 	.word	0x3d7a0000

08002454 <MPU6050_reset>:
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050_reset(I2C_HandleTypeDef *I2Cx) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af02      	add	r7, sp, #8
 800245a:	6078      	str	r0, [r7, #4]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 800245c:	2301      	movs	r3, #1
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2307      	movs	r3, #7
 8002462:	226b      	movs	r2, #107	@ 0x6b
 8002464:	21d0      	movs	r1, #208	@ 0xd0
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff fdde 	bl	8002028 <I2Cdev_writeBit>
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <MPU6050_getRate>:
 *
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @return Current sample rate
 * @see MPU6050_RA_SMPLRT_DIV
 */
uint8_t MPU6050_getRate(I2C_HandleTypeDef *I2Cx) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint8_t data;
  I2Cdev_readByte(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, &data);
 800247c:	f107 030f 	add.w	r3, r7, #15
 8002480:	2219      	movs	r2, #25
 8002482:	21d0      	movs	r1, #208	@ 0xd0
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff fe81 	bl	800218c <I2Cdev_readByte>
  return data;
 800248a:	7bfb      	ldrb	r3, [r7, #15]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <MPU6050_setRate>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param rate New sample rate divider
 * @see getRate()
 * @see MPU6050_RA_SMPLRT_DIV
 */
void MPU6050_setRate(I2C_HandleTypeDef *I2Cx, uint8_t rate) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeByte(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, rate);
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	2219      	movs	r2, #25
 80024a4:	21d0      	movs	r1, #208	@ 0xd0
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fe8d 	bl	80021c6 <I2Cdev_writeByte>
}
 80024ac:	bf00      	nop
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <MPU6050_setSleepEnabled>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see PWR_MGMT_1_REG
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050_setSleepEnabled(I2C_HandleTypeDef *I2Cx, bool enabled){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af02      	add	r7, sp, #8
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, MPU6050_PWR1_SLEEP_BIT, enabled);
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	2306      	movs	r3, #6
 80024c6:	226b      	movs	r2, #107	@ 0x6b
 80024c8:	21d0      	movs	r1, #208	@ 0xd0
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff fdac 	bl	8002028 <I2Cdev_writeBit>
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <MPU6050_setIntEnabled>:
 * @param enabled New interrupt enabled status
 * @see getIntFreefallEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FF_BIT
 **/
void MPU6050_setIntEnabled(I2C_HandleTypeDef *I2Cx, uint8_t enabled) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeByte(I2Cx, MPU6050_ADDR, INT_ENABLE_REG, enabled);
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	2238      	movs	r2, #56	@ 0x38
 80024e8:	21d0      	movs	r1, #208	@ 0xd0
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff fe6b 	bl	80021c6 <I2Cdev_writeByte>
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <MPU6050_setIntMotionEnabled>:
 * @param enabled New interrupt enabled status
 * @see getIntMotionEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_MOT_BIT
 **/
void MPU6050_setIntMotionEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, INT_ENABLE_REG, MPU6050_INTERRUPT_MOT_BIT, enabled);
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	2306      	movs	r3, #6
 800250a:	2238      	movs	r2, #56	@ 0x38
 800250c:	21d0      	movs	r1, #208	@ 0xd0
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff fd8a 	bl	8002028 <I2Cdev_writeBit>
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <MPU6050_setIntZeroMotionEnabled>:
 * @param enabled New interrupt enabled status
 * @see getIntZeroMotionEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_ZMOT_BIT
 **/
void MPU6050_setIntZeroMotionEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af02      	add	r7, sp, #8
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBit(I2Cx, MPU6050_ADDR, INT_ENABLE_REG, MPU6050_INTERRUPT_ZMOT_BIT, enabled);
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	2305      	movs	r3, #5
 800252e:	2238      	movs	r2, #56	@ 0x38
 8002530:	21d0      	movs	r1, #208	@ 0xd0
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff fd78 	bl	8002028 <I2Cdev_writeBit>
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <MPU6050_setMotionDetectionDuration>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param duration New motion detection duration threshold value (LSB = 1ms)
 * @see getMotionDetectionDuration()
 * @see MPU6050_RA_MOT_DUR
 */
void MPU6050_setMotionDetectionDuration(I2C_HandleTypeDef *I2Cx, uint8_t duration) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeByte(I2Cx, MPU6050_ADDR, MOT_DUR_TH_REG, duration);
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	2220      	movs	r2, #32
 8002550:	21d0      	movs	r1, #208	@ 0xd0
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff fe37 	bl	80021c6 <I2Cdev_writeByte>
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <MPU6050_setZeroMotionDetectionDuration>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 * @see getZeroMotionDetectionDuration()
 * @see MPU6050_RA_ZRMOT_DUR
 */
void MPU6050_setZeroMotionDetectionDuration(I2C_HandleTypeDef *I2Cx, uint8_t duration) {
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeByte(I2Cx, MPU6050_ADDR, ZRMOT_DUR_REG, duration);
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	2222      	movs	r2, #34	@ 0x22
 8002570:	21d0      	movs	r1, #208	@ 0xd0
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff fe27 	bl	80021c6 <I2Cdev_writeByte>
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <MPU6050_setMotionDetectionThreshold>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 * @see getMotionDetectionThreshold()
 * @see MPU6050_RA_MOT_THR
 */
void MPU6050_setMotionDetectionThreshold(I2C_HandleTypeDef *I2Cx, uint8_t threshold) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeByte(I2Cx, MPU6050_ADDR, MOT_DET_TH_REG, threshold);
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	221f      	movs	r2, #31
 8002590:	21d0      	movs	r1, #208	@ 0xd0
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff fe17 	bl	80021c6 <I2Cdev_writeByte>
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <MPU6050_setZeroMotionDetectionThreshold>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 * @see getZeroMotionDetectionThreshold()
 * @see MPU6050_RA_ZRMOT_THR
 */
void MPU6050_setZeroMotionDetectionThreshold(I2C_HandleTypeDef *I2Cx, uint8_t threshold) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeByte(I2Cx, MPU6050_ADDR, ZRMOT_THR_REG, threshold);
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	2221      	movs	r2, #33	@ 0x21
 80025b0:	21d0      	movs	r1, #208	@ 0xd0
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff fe07 	bl	80021c6 <I2Cdev_writeByte>
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <MPU6050_setWakeCycleEnabled>:
 * @param enabled New sleep mode enabled status
 * @see getWakeCycleEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CYCLE_BIT
 */
void MPU6050_setWakeCycleEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, MPU6050_PWR1_CYCLE_BIT, enabled);
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2305      	movs	r3, #5
 80025d2:	226b      	movs	r2, #107	@ 0x6b
 80025d4:	21d0      	movs	r1, #208	@ 0xd0
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff fd26 	bl	8002028 <I2Cdev_writeBit>
}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <MPU6050_setInterruptLatch>:
 * @param latch New latch mode (0=50us-pulse, 1=latch-until-int-cleared)
 * @see getInterruptLatch()
 * @see MPU6050_RA_INT_PIN_CFG
 * @see MPU6050_INTCFG_LATCH_INT_EN_BIT
 */
void MPU6050_setInterruptLatch(I2C_HandleTypeDef *I2Cx, bool latch) {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, INT_PIN_CFG, MPU6050_INTCFG_LATCH_INT_EN_BIT, latch);
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	2305      	movs	r3, #5
 80025f6:	2237      	movs	r2, #55	@ 0x37
 80025f8:	21d0      	movs	r1, #208	@ 0xd0
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff fd14 	bl	8002028 <I2Cdev_writeBit>
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <MPU6050_setInterruptLatchClear>:
 * @param clear New latch clear mode (0=status-read-only, 1=any-register-read)
 * @see getInterruptLatchClear()
 * @see MPU6050_RA_INT_PIN_CFG
 * @see MPU6050_INTCFG_INT_RD_CLEAR_BIT
 */
void MPU6050_setInterruptLatchClear(I2C_HandleTypeDef *I2Cx, bool clear) {
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af02      	add	r7, sp, #8
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, INT_PIN_CFG, MPU6050_INTCFG_INT_RD_CLEAR_BIT, clear);
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	2304      	movs	r3, #4
 800261a:	2237      	movs	r2, #55	@ 0x37
 800261c:	21d0      	movs	r1, #208	@ 0xd0
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff fd02 	bl	8002028 <I2Cdev_writeBit>
}
 8002624:	bf00      	nop
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <MPU6050_setInterruptDrive>:
 * @param drive New interrupt drive mode (0=push-pull, 1=open-drain)
 * @see getInterruptDrive()
 * @see MPU6050_RA_INT_PIN_CFG
 * @see MPU6050_INTCFG_INT_OPEN_BIT
 */
void MPU6050_setInterruptDrive(I2C_HandleTypeDef *I2Cx, bool drive) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af02      	add	r7, sp, #8
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, INT_PIN_CFG, MPU6050_INTCFG_INT_OPEN_BIT, drive);
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	2306      	movs	r3, #6
 800263e:	2237      	movs	r2, #55	@ 0x37
 8002640:	21d0      	movs	r1, #208	@ 0xd0
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff fcf0 	bl	8002028 <I2Cdev_writeBit>
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <MPU6050_setInterruptMode>:
 * @param mode New interrupt mode (0=active-high, 1=active-low)
 * @see getInterruptMode()
 * @see MPU6050_RA_INT_PIN_CFG
 * @see MPU6050_INTCFG_INT_LEVEL_BIT
 */
void MPU6050_setInterruptMode(I2C_HandleTypeDef *I2Cx, bool mode) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af02      	add	r7, sp, #8
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, INT_PIN_CFG, MPU6050_INTCFG_INT_LEVEL_BIT, mode);
 800265c:	78fb      	ldrb	r3, [r7, #3]
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	2307      	movs	r3, #7
 8002662:	2237      	movs	r2, #55	@ 0x37
 8002664:	21d0      	movs	r1, #208	@ 0xd0
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff fcde 	bl	8002028 <I2Cdev_writeBit>
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <MPU6050_getIntStatus>:
 * the entire register.
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050_getIntStatus(I2C_HandleTypeDef *I2Cx) {
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint8_t data;
  I2Cdev_readByte(I2Cx, MPU6050_ADDR, INT_STATUS_REG, &data);
 800267c:	f107 030f 	add.w	r3, r7, #15
 8002680:	223a      	movs	r2, #58	@ 0x3a
 8002682:	21d0      	movs	r1, #208	@ 0xd0
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff fd81 	bl	800218c <I2Cdev_readByte>
  return data;
 800268a:	7bfb      	ldrb	r3, [r7, #15]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <MPU6050_getIntMotionStatus>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 * @see MPU6050_INTERRUPT_MOT_BIT
 */
bool MPU6050_getIntMotionStatus(I2C_HandleTypeDef *I2Cx) {
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af02      	add	r7, sp, #8
 800269a:	6078      	str	r0, [r7, #4]
  uint8_t data;
  I2Cdev_readBit(I2Cx, MPU6050_ADDR, INT_STATUS_REG, MPU6050_INTERRUPT_MOT_BIT, &data);
 800269c:	f107 030f 	add.w	r3, r7, #15
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	2306      	movs	r3, #6
 80026a4:	223a      	movs	r2, #58	@ 0x3a
 80026a6:	21d0      	movs	r1, #208	@ 0xd0
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff fc8b 	bl	8001fc4 <I2Cdev_readBit>
  return data != 0;
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf14      	ite	ne
 80026b4:	2301      	movne	r3, #1
 80026b6:	2300      	moveq	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <MPU6050_getZeroMotionDetected>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @return Motion detection status
 * @see MPU6050_RA_MOT_DETECT_STATUS
 * @see MPU6050_MOTION_MOT_ZRMOT_BIT
 */
bool MPU6050_getZeroMotionDetected(I2C_HandleTypeDef *I2Cx) {
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af02      	add	r7, sp, #8
 80026c8:	6078      	str	r0, [r7, #4]
  uint8_t data;
  I2Cdev_readBit(I2Cx, MPU6050_ADDR, MOT_DETECT_STATUS_REG, MPU6050_MOTION_MOT_ZRMOT_BIT, &data);
 80026ca:	f107 030f 	add.w	r3, r7, #15
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2300      	movs	r3, #0
 80026d2:	2261      	movs	r2, #97	@ 0x61
 80026d4:	21d0      	movs	r1, #208	@ 0xd0
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff fc74 	bl	8001fc4 <I2Cdev_readBit>
  return data != 0;
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bf14      	ite	ne
 80026e2:	2301      	movne	r3, #1
 80026e4:	2300      	moveq	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <MPU6050_setTempSensorEnabled>:
 * @param enabled New temperature sensor enabled status
 * @see getTempSensorEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_TEMP_DIS_BIT
 */
void MPU6050_setTempSensorEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	70fb      	strb	r3, [r7, #3]
  // 1 is actually disabled here
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, MPU6050_PWR1_TEMP_DIS_BIT, !enabled);
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	f083 0301 	eor.w	r3, r3, #1
 8002702:	b2db      	uxtb	r3, r3
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	2303      	movs	r3, #3
 8002708:	226b      	movs	r2, #107	@ 0x6b
 800270a:	21d0      	movs	r1, #208	@ 0xd0
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff fc8b 	bl	8002028 <I2Cdev_writeBit>
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <MPU6050_setWakeFrequency>:
/** Set wake frequency in Accel-Only Low Power Mode.
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param frequency New wake frequency
 * @see MPU6050_RA_PWR_MGMT_2
 */
void MPU6050_setWakeFrequency(I2C_HandleTypeDef *I2Cx, uint8_t frequency) {
 800271a:	b580      	push	{r7, lr}
 800271c:	b084      	sub	sp, #16
 800271e:	af02      	add	r7, sp, #8
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBits(I2Cx, MPU6050_ADDR, PWR_MGMT_2_REG, MPU6050_PWR2_LP_WAKE_CTRL_BIT, MPU6050_PWR2_LP_WAKE_CTRL_LENGTH, frequency);
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	2302      	movs	r3, #2
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2307      	movs	r3, #7
 8002730:	226c      	movs	r2, #108	@ 0x6c
 8002732:	21d0      	movs	r1, #208	@ 0xd0
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff fccb 	bl	80020d0 <I2Cdev_writeBits>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <MPU6050_setStandbyXAccelEnabled>:
 * @param New X-axis standby enabled status
 * @see getStandbyXAccelEnabled()
 * @see MPU6050_RA_PWR_MGMT_2
 * @see MPU6050_PWR2_STBY_XA_BIT
 */
void MPU6050_setStandbyXAccelEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af02      	add	r7, sp, #8
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_2_REG, MPU6050_PWR2_STBY_XA_BIT, enabled);
 800274e:	78fb      	ldrb	r3, [r7, #3]
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	2305      	movs	r3, #5
 8002754:	226c      	movs	r2, #108	@ 0x6c
 8002756:	21d0      	movs	r1, #208	@ 0xd0
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff fc65 	bl	8002028 <I2Cdev_writeBit>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <MPU6050_setStandbyYAccelEnabled>:
 * @param New Y-axis standby enabled status
 * @see getStandbyYAccelEnabled()
 * @see MPU6050_RA_PWR_MGMT_2
 * @see MPU6050_PWR2_STBY_YA_BIT
 */
void MPU6050_setStandbyYAccelEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 8002766:	b580      	push	{r7, lr}
 8002768:	b084      	sub	sp, #16
 800276a:	af02      	add	r7, sp, #8
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_2_REG, MPU6050_PWR2_STBY_YA_BIT, enabled);
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	2304      	movs	r3, #4
 8002778:	226c      	movs	r2, #108	@ 0x6c
 800277a:	21d0      	movs	r1, #208	@ 0xd0
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff fc53 	bl	8002028 <I2Cdev_writeBit>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <MPU6050_setStandbyZAccelEnabled>:
 * @param New Z-axis standby enabled status
 * @see getStandbyZAccelEnabled()
 * @see MPU6050_RA_PWR_MGMT_2
 * @see MPU6050_PWR2_STBY_ZA_BIT
 */
void MPU6050_setStandbyZAccelEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af02      	add	r7, sp, #8
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_2_REG, MPU6050_PWR2_STBY_ZA_BIT, enabled);
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	2303      	movs	r3, #3
 800279c:	226c      	movs	r2, #108	@ 0x6c
 800279e:	21d0      	movs	r1, #208	@ 0xd0
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7ff fc41 	bl	8002028 <I2Cdev_writeBit>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <MPU6050_setStandbyXGyroEnabled>:
 * @param New X-axis standby enabled status
 * @see getStandbyXGyroEnabled()
 * @see MPU6050_RA_PWR_MGMT_2
 * @see MPU6050_PWR2_STBY_XG_BIT
 */
void MPU6050_setStandbyXGyroEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af02      	add	r7, sp, #8
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	460b      	mov	r3, r1
 80027b8:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_2_REG, MPU6050_PWR2_STBY_XG_BIT, enabled);
 80027ba:	78fb      	ldrb	r3, [r7, #3]
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	2302      	movs	r3, #2
 80027c0:	226c      	movs	r2, #108	@ 0x6c
 80027c2:	21d0      	movs	r1, #208	@ 0xd0
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff fc2f 	bl	8002028 <I2Cdev_writeBit>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <MPU6050_setFullScaleAccelRange>:
/** Set full-scale accelerometer range.
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050_setFullScaleAccelRange(I2C_HandleTypeDef *I2Cx, uint8_t range) {
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af02      	add	r7, sp, #8
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	460b      	mov	r3, r1
 80027dc:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBits(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	9301      	str	r3, [sp, #4]
 80027e2:	2302      	movs	r3, #2
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	2304      	movs	r3, #4
 80027e8:	221c      	movs	r2, #28
 80027ea:	21d0      	movs	r1, #208	@ 0xd0
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff fc6f 	bl	80020d0 <I2Cdev_writeBits>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <MPU6050_setStandbyYGyroEnabled>:
 * @param New Y-axis standby enabled status
 * @see getStandbyYGyroEnabled()
 * @see MPU6050_RA_PWR_MGMT_2
 * @see MPU6050_PWR2_STBY_YG_BIT
 */
void MPU6050_setStandbyYGyroEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af02      	add	r7, sp, #8
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	460b      	mov	r3, r1
 8002804:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_2_REG, MPU6050_PWR2_STBY_YG_BIT, enabled);
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2301      	movs	r3, #1
 800280c:	226c      	movs	r2, #108	@ 0x6c
 800280e:	21d0      	movs	r1, #208	@ 0xd0
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff fc09 	bl	8002028 <I2Cdev_writeBit>
}
 8002816:	bf00      	nop
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <MPU6050_setStandbyZGyroEnabled>:
 * @param New Z-axis standby enabled status
 * @see getStandbyZGyroEnabled()
 * @see MPU6050_RA_PWR_MGMT_2
 * @see MPU6050_PWR2_STBY_ZG_BIT
 */
void MPU6050_setStandbyZGyroEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af02      	add	r7, sp, #8
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	460b      	mov	r3, r1
 8002828:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_2_REG, MPU6050_PWR2_STBY_ZG_BIT, enabled);
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	2300      	movs	r3, #0
 8002830:	226c      	movs	r2, #108	@ 0x6c
 8002832:	21d0      	movs	r1, #208	@ 0xd0
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff fbf7 	bl	8002028 <I2Cdev_writeBit>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <MPU6050_setFullScaleGyroRange>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050_setFullScaleGyroRange(I2C_HandleTypeDef *I2Cx, uint8_t range) {
 8002842:	b580      	push	{r7, lr}
 8002844:	b084      	sub	sp, #16
 8002846:	af02      	add	r7, sp, #8
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	460b      	mov	r3, r1
 800284c:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBits(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	2302      	movs	r3, #2
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	2304      	movs	r3, #4
 8002858:	221b      	movs	r2, #27
 800285a:	21d0      	movs	r1, #208	@ 0xd0
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff fc37 	bl	80020d0 <I2Cdev_writeBits>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <MPU6050_setDHPFMode>:
 * @param bandwidth New high-pass filter configuration
 * @see setDHPFMode()
 * @see MPU6050_DHPF_RESET
 * @see MPU6050_RA_ACCEL_CONFIG
 */
void MPU6050_setDHPFMode(I2C_HandleTypeDef *I2Cx, uint8_t bandwidth) {
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af02      	add	r7, sp, #8
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	460b      	mov	r3, r1
 8002874:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBits(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, MPU6050_ACONFIG_ACCEL_HPF_BIT, MPU6050_ACONFIG_ACCEL_HPF_LENGTH, bandwidth);
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	2303      	movs	r3, #3
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	2302      	movs	r3, #2
 8002880:	221c      	movs	r2, #28
 8002882:	21d0      	movs	r1, #208	@ 0xd0
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff fc23 	bl	80020d0 <I2Cdev_writeBits>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <MPU6050_setDLPFMode>:
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050_setDLPFMode(I2C_HandleTypeDef *I2Cx, uint8_t mode) {
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af02      	add	r7, sp, #8
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	460b      	mov	r3, r1
 800289c:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBits(I2Cx, MPU6050_ADDR, DLPF_CFG_REG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
 800289e:	78fb      	ldrb	r3, [r7, #3]
 80028a0:	9301      	str	r3, [sp, #4]
 80028a2:	2303      	movs	r3, #3
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	2302      	movs	r3, #2
 80028a8:	221a      	movs	r2, #26
 80028aa:	21d0      	movs	r1, #208	@ 0xd0
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff fc0f 	bl	80020d0 <I2Cdev_writeBits>
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <MPU6050_setDMPEnabled>:
 *
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param enabled updated DMP status
 * @see gitHub page, no documentation provided about this register
 */
void MPU6050_setDMPEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af02      	add	r7, sp, #8
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, USER_CTRL_REG, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	2307      	movs	r3, #7
 80028cc:	226a      	movs	r2, #106	@ 0x6a
 80028ce:	21d0      	movs	r1, #208	@ 0xd0
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff fba9 	bl	8002028 <I2Cdev_writeBit>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <MPU6050_setupMotionInt>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param duration 8-bit unsigned integer container for motion duration threshold in ms
 * @param threshold 8-bit unsigned integer container for motion detection threshold in mg
 * @param offsets data buffer containing gyroscope and accelerometer offsets to be used during initialization
 */
void MPU6050_setupMotionInt(I2C_HandleTypeDef *I2Cx, uint8_t duration, uint8_t threshold, int16_t* offsets) {
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	607b      	str	r3, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	72fb      	strb	r3, [r7, #11]
 80028ec:	4613      	mov	r3, r2
 80028ee:	72bb      	strb	r3, [r7, #10]

  // make sure standard settings are used
  MPU6050_Initialize(I2Cx, A2G, G250DPS, offsets);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	2100      	movs	r1, #0
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f7ff fcd2 	bl	80022a0 <MPU6050_Initialize>

  //set trigger event: Active high until interrupt status register is cleared, push-pull configuration
  MPU6050_setInterruptLatch(I2Cx, 0);
 80028fc:	2100      	movs	r1, #0
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f7ff fe70 	bl	80025e4 <MPU6050_setInterruptLatch>
  MPU6050_setInterruptLatchClear(I2Cx, 0);
 8002904:	2100      	movs	r1, #0
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f7ff fe7e 	bl	8002608 <MPU6050_setInterruptLatchClear>
  MPU6050_setInterruptDrive(I2Cx, 0);
 800290c:	2100      	movs	r1, #0
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f7ff fe8c 	bl	800262c <MPU6050_setInterruptDrive>
  MPU6050_setInterruptMode(I2Cx, 0);
 8002914:	2100      	movs	r1, #0
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f7ff fe9a 	bl	8002650 <MPU6050_setInterruptMode>

  // Ensure the accelerometer is running
  MPU6050_setSleepEnabled(I2Cx, false);
 800291c:	2100      	movs	r1, #0
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f7ff fdc8 	bl	80024b4 <MPU6050_setSleepEnabled>
  MPU6050_setWakeCycleEnabled(I2Cx, false);
 8002924:	2100      	movs	r1, #0
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f7ff fe4a 	bl	80025c0 <MPU6050_setWakeCycleEnabled>
  MPU6050_setStandbyXAccelEnabled(I2Cx, false);
 800292c:	2100      	movs	r1, #0
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f7ff ff07 	bl	8002742 <MPU6050_setStandbyXAccelEnabled>
  MPU6050_setStandbyYAccelEnabled(I2Cx, false);
 8002934:	2100      	movs	r1, #0
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f7ff ff15 	bl	8002766 <MPU6050_setStandbyYAccelEnabled>
  MPU6050_setStandbyZAccelEnabled(I2Cx, false);
 800293c:	2100      	movs	r1, #0
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f7ff ff23 	bl	800278a <MPU6050_setStandbyZAccelEnabled>

  //Set the accelerometer HPF to reset settings
  MPU6050_setDHPFMode(I2Cx, MPU6050_DHPF_RESET);
 8002944:	2100      	movs	r1, #0
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7ff ff8f 	bl	800286a <MPU6050_setDHPFMode>

  //Set the accelerometer LPF to 256Hz Bandwidth
  MPU6050_setDLPFMode(I2Cx, MPU6050_DLPF_BW_256);
 800294c:	2100      	movs	r1, #0
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f7ff ff9f 	bl	8002892 <MPU6050_setDLPFMode>

  //Enable the motion interrupt
  MPU6050_setIntEnabled(I2Cx, 0b00000000);
 8002954:	2100      	movs	r1, #0
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f7ff fdbe 	bl	80024d8 <MPU6050_setIntEnabled>
  MPU6050_setIntMotionEnabled(I2Cx, true);
 800295c:	2101      	movs	r1, #1
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f7ff fdca 	bl	80024f8 <MPU6050_setIntMotionEnabled>

  //Set the motion detection duration
  MPU6050_setMotionDetectionDuration(I2Cx, duration); //Duration in ms
 8002964:	7afb      	ldrb	r3, [r7, #11]
 8002966:	4619      	mov	r1, r3
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f7ff fde9 	bl	8002540 <MPU6050_setMotionDetectionDuration>

  //Set the motion detection threshold
  MPU6050_setMotionDetectionThreshold(I2Cx, threshold); // Threshold in 2mg
 800296e:	7abb      	ldrb	r3, [r7, #10]
 8002970:	4619      	mov	r1, r3
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f7ff fe04 	bl	8002580 <MPU6050_setMotionDetectionThreshold>

  //1 ms delay
  HAL_Delay(1);
 8002978:	2001      	movs	r0, #1
 800297a:	f000 fcc1 	bl	8003300 <HAL_Delay>

  //Set the accelerometer HPF to HOLD settings
  MPU6050_setDHPFMode(I2Cx, MPU6050_DHPF_HOLD);
 800297e:	2107      	movs	r1, #7
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f7ff ff72 	bl	800286a <MPU6050_setDHPFMode>

  // Set the wakeup frequency
  MPU6050_setWakeFrequency(I2Cx, MPU6050_WAKE_FREQ_1P25);
 8002986:	2100      	movs	r1, #0
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f7ff fec6 	bl	800271a <MPU6050_setWakeFrequency>
  MPU6050_setStandbyXGyroEnabled(I2Cx, true);
 800298e:	2101      	movs	r1, #1
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f7ff ff0c 	bl	80027ae <MPU6050_setStandbyXGyroEnabled>
  MPU6050_setStandbyYGyroEnabled(I2Cx, true);
 8002996:	2101      	movs	r1, #1
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7ff ff2e 	bl	80027fa <MPU6050_setStandbyYGyroEnabled>
  MPU6050_setStandbyZGyroEnabled(I2Cx, true);
 800299e:	2101      	movs	r1, #1
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f7ff ff3c 	bl	800281e <MPU6050_setStandbyZGyroEnabled>

  // Enable cycle mode
  MPU6050_setWakeCycleEnabled(I2Cx, true);
 80029a6:	2101      	movs	r1, #1
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7ff fe09 	bl	80025c0 <MPU6050_setWakeCycleEnabled>

}
 80029ae:	bf00      	nop
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <MPU6050_setupZeroMotionInt>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param duration 8-bit unsigned integer container for zero motion duration threshold in ms
 * @param threshold 8-bit unsigned integer container for zero motion detection threshold in mg
 * @param offsets data buffer containing gyroscope and accelerometer offsets to be used during initialization
 */
void MPU6050_setupZeroMotionInt(I2C_HandleTypeDef *I2Cx, uint8_t duration, uint8_t threshold, int16_t* offsets) {
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	72fb      	strb	r3, [r7, #11]
 80029c4:	4613      	mov	r3, r2
 80029c6:	72bb      	strb	r3, [r7, #10]

  // make sure standard settings are used
  MPU6050_Initialize(I2Cx, A2G, G250DPS, offsets);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	2100      	movs	r1, #0
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f7ff fc66 	bl	80022a0 <MPU6050_Initialize>

  //set trigger event: Active high until interrupt status register is cleared, push-pull configuration
  MPU6050_setInterruptLatch(I2Cx, 0);
 80029d4:	2100      	movs	r1, #0
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f7ff fe04 	bl	80025e4 <MPU6050_setInterruptLatch>
  MPU6050_setInterruptLatchClear(I2Cx, 0);
 80029dc:	2100      	movs	r1, #0
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f7ff fe12 	bl	8002608 <MPU6050_setInterruptLatchClear>
  MPU6050_setInterruptDrive(I2Cx, 0);
 80029e4:	2100      	movs	r1, #0
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f7ff fe20 	bl	800262c <MPU6050_setInterruptDrive>
  MPU6050_setInterruptMode(I2Cx, 0);
 80029ec:	2100      	movs	r1, #0
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f7ff fe2e 	bl	8002650 <MPU6050_setInterruptMode>

  // Ensure the accelerometer is running
  MPU6050_setSleepEnabled(I2Cx, false);
 80029f4:	2100      	movs	r1, #0
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f7ff fd5c 	bl	80024b4 <MPU6050_setSleepEnabled>
  MPU6050_setWakeCycleEnabled(I2Cx, false);
 80029fc:	2100      	movs	r1, #0
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f7ff fdde 	bl	80025c0 <MPU6050_setWakeCycleEnabled>
  MPU6050_setStandbyXAccelEnabled(I2Cx, false);
 8002a04:	2100      	movs	r1, #0
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f7ff fe9b 	bl	8002742 <MPU6050_setStandbyXAccelEnabled>
  MPU6050_setStandbyYAccelEnabled(I2Cx, false);
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f7ff fea9 	bl	8002766 <MPU6050_setStandbyYAccelEnabled>
  MPU6050_setStandbyZAccelEnabled(I2Cx, false);
 8002a14:	2100      	movs	r1, #0
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f7ff feb7 	bl	800278a <MPU6050_setStandbyZAccelEnabled>

  //Set the accelerometer HPF to reset settings
  MPU6050_setDHPFMode(I2Cx, MPU6050_DHPF_RESET);
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f7ff ff23 	bl	800286a <MPU6050_setDHPFMode>
  //
  //MPU6050_setDLPFMode(I2Cx, MPU6050_DLPF_BW_256);


  //Enable the motion interrupt
  MPU6050_setIntEnabled(I2Cx, 0b00000000);
 8002a24:	2100      	movs	r1, #0
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f7ff fd56 	bl	80024d8 <MPU6050_setIntEnabled>
  MPU6050_setIntZeroMotionEnabled(I2Cx, true);
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f7ff fd74 	bl	800251c <MPU6050_setIntZeroMotionEnabled>

  //Set the motion detection duration
  MPU6050_setZeroMotionDetectionDuration(I2Cx, duration);   //Duration in ms
 8002a34:	7afb      	ldrb	r3, [r7, #11]
 8002a36:	4619      	mov	r1, r3
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f7ff fd91 	bl	8002560 <MPU6050_setZeroMotionDetectionDuration>

  //Set the motion detection threshold
  MPU6050_setZeroMotionDetectionThreshold(I2Cx, threshold); // Threshold in 2mg
 8002a3e:	7abb      	ldrb	r3, [r7, #10]
 8002a40:	4619      	mov	r1, r3
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f7ff fdac 	bl	80025a0 <MPU6050_setZeroMotionDetectionThreshold>

  //1 ms delay
  HAL_Delay(1);
 8002a48:	2001      	movs	r0, #1
 8002a4a:	f000 fc59 	bl	8003300 <HAL_Delay>

  //Set the accelerometer HPF to HOLD settings
  MPU6050_setDHPFMode(I2Cx, MPU6050_DHPF_5);
 8002a4e:	2101      	movs	r1, #1
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7ff ff0a 	bl	800286a <MPU6050_setDHPFMode>

}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <MPU6050_setupFifoBuffer>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param dlpfMode 8-bit unsigned integer variable to specify the lowpass filter frequency, which affects sensors output rate
 * @param freqDivider 8-bit unsigned integer that specifies the sensors update frequency (actual sampFrequency = gyroFreq/freqDivider)
 * @param overflowEnabled bool used to activate the fifo buffer overflow interrupt line
 */
void MPU6050_setupFifoBuffer(I2C_HandleTypeDef *I2Cx, uint8_t dlpfMode, uint8_t freqDivider, bool overflowEnabled) {
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	4608      	mov	r0, r1
 8002a68:	4611      	mov	r1, r2
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	70fb      	strb	r3, [r7, #3]
 8002a70:	460b      	mov	r3, r1
 8002a72:	70bb      	strb	r3, [r7, #2]
 8002a74:	4613      	mov	r3, r2
 8002a76:	707b      	strb	r3, [r7, #1]
  // force gyro output rate to 1kHz
   MPU6050_setDLPFMode(I2Cx, dlpfMode);
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ff08 	bl	8002892 <MPU6050_setDLPFMode>

   // frequency divider:
   MPU6050_setRate(I2Cx, freqDivider);
 8002a82:	78bb      	ldrb	r3, [r7, #2]
 8002a84:	4619      	mov	r1, r3
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7ff fd04 	bl	8002494 <MPU6050_setRate>

   // enable sensors writing to FIFO:
   MPU6050_setXGyroFIFOEnabled(I2Cx, true);
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f889 	bl	8002ba6 <MPU6050_setXGyroFIFOEnabled>
   MPU6050_setYGyroFIFOEnabled(I2Cx, true);
 8002a94:	2101      	movs	r1, #1
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f897 	bl	8002bca <MPU6050_setYGyroFIFOEnabled>
   MPU6050_setZGyroFIFOEnabled(I2Cx, true);
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f8a5 	bl	8002bee <MPU6050_setZGyroFIFOEnabled>
   MPU6050_setAccelFIFOEnabled(I2Cx, true);
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f8b3 	bl	8002c12 <MPU6050_setAccelFIFOEnabled>

   // enable interrupt generation when the FIFO overflows:
   MPU6050_setIntFIFOBufferOverflowEnabled(I2Cx, overflowEnabled);
 8002aac:	787b      	ldrb	r3, [r7, #1]
 8002aae:	4619      	mov	r1, r3
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f8c0 	bl	8002c36 <MPU6050_setIntFIFOBufferOverflowEnabled>

   //set trigger event: Active high until interrupt status register is cleared, push-pull configuration
   MPU6050_setInterruptLatch(I2Cx, 0);
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff fd93 	bl	80025e4 <MPU6050_setInterruptLatch>
   MPU6050_setInterruptLatchClear(I2Cx, 0);
 8002abe:	2100      	movs	r1, #0
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff fda1 	bl	8002608 <MPU6050_setInterruptLatchClear>
   MPU6050_setInterruptDrive(I2Cx, 0);
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff fdaf 	bl	800262c <MPU6050_setInterruptDrive>
   MPU6050_setInterruptMode(I2Cx, 0);
 8002ace:	2100      	movs	r1, #0
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff fdbd 	bl	8002650 <MPU6050_setInterruptMode>

   // Enable the FIFO here:
   MPU6050_setFIFOEnabled(I2Cx, true);
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f8be 	bl	8002c5a <MPU6050_setFIFOEnabled>

}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <MPU6050_setXAccelOffset>:

/** Update accelerometer x-axis offset
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param offset 16-bit signed integer container for new offset value
 */
void MPU6050_setXAccelOffset(I2C_HandleTypeDef *I2Cx, int16_t offset) {
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	460b      	mov	r3, r1
 8002af0:	807b      	strh	r3, [r7, #2]
  I2Cdev_writeWord(I2Cx, MPU6050_ADDR, XA_OFFS_H, offset);
 8002af2:	887b      	ldrh	r3, [r7, #2]
 8002af4:	2206      	movs	r2, #6
 8002af6:	21d0      	movs	r1, #208	@ 0xd0
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff fba6 	bl	800224a <I2Cdev_writeWord>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <MPU6050_setYAccelOffset>:

/** Update accelerometer y-axis offset
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param offset 16-bit signed integer container for new offset value
 */
void MPU6050_setYAccelOffset(I2C_HandleTypeDef *I2Cx, int16_t offset) {
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	807b      	strh	r3, [r7, #2]
  I2Cdev_writeWord(I2Cx, MPU6050_ADDR, YA_OFFS_H, offset);
 8002b12:	887b      	ldrh	r3, [r7, #2]
 8002b14:	2208      	movs	r2, #8
 8002b16:	21d0      	movs	r1, #208	@ 0xd0
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff fb96 	bl	800224a <I2Cdev_writeWord>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <MPU6050_setZAccelOffset>:

/** Update accelerometer z-axis offset
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param offset 16-bit signed integer container for new offset value
 */
void MPU6050_setZAccelOffset(I2C_HandleTypeDef *I2Cx, int16_t offset) {
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	807b      	strh	r3, [r7, #2]
  I2Cdev_writeWord(I2Cx, MPU6050_ADDR, ZA_OFFS_H, offset);
 8002b32:	887b      	ldrh	r3, [r7, #2]
 8002b34:	220a      	movs	r2, #10
 8002b36:	21d0      	movs	r1, #208	@ 0xd0
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff fb86 	bl	800224a <I2Cdev_writeWord>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <MPU6050_setXGyroOffset>:

/** Update gyroscope x-axis offset
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param offset 16-bit signed integer container for new offset value
 */
void MPU6050_setXGyroOffset(I2C_HandleTypeDef *I2Cx, int16_t offset) {
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	807b      	strh	r3, [r7, #2]
  I2Cdev_writeWord(I2Cx, MPU6050_ADDR, XG_OFFS_USRH, offset);
 8002b52:	887b      	ldrh	r3, [r7, #2]
 8002b54:	2213      	movs	r2, #19
 8002b56:	21d0      	movs	r1, #208	@ 0xd0
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff fb76 	bl	800224a <I2Cdev_writeWord>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <MPU6050_setYGyroOffset>:

/** Update gyroscope y-axis offset
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param offset 16-bit signed integer container for new offset value
 */
void MPU6050_setYGyroOffset(I2C_HandleTypeDef *I2Cx, int16_t offset) {
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	807b      	strh	r3, [r7, #2]
  I2Cdev_writeWord(I2Cx, MPU6050_ADDR, YG_OFFS_USRH, offset);
 8002b72:	887b      	ldrh	r3, [r7, #2]
 8002b74:	2215      	movs	r2, #21
 8002b76:	21d0      	movs	r1, #208	@ 0xd0
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff fb66 	bl	800224a <I2Cdev_writeWord>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <MPU6050_setZGyroOffset>:

/** Update gyroscope z-axis offset
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param offset 16-bit signed integer container for new offset value
 */
void MPU6050_setZGyroOffset(I2C_HandleTypeDef *I2Cx, int16_t offset) {
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	807b      	strh	r3, [r7, #2]
  I2Cdev_writeWord(I2Cx, MPU6050_ADDR, ZG_OFFS_USRH, offset);
 8002b92:	887b      	ldrh	r3, [r7, #2]
 8002b94:	2217      	movs	r2, #23
 8002b96:	21d0      	movs	r1, #208	@ 0xd0
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff fb56 	bl	800224a <I2Cdev_writeWord>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <MPU6050_setXGyroFIFOEnabled>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param enabled New gyroscope X-axis FIFO enabled value
 * @see getXGyroFIFOEnabled()
 * @see MPU6050_RA_FIFO_EN
 */
void MPU6050_setXGyroFIFOEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af02      	add	r7, sp, #8
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, MPU6050_RA_FIFO_EN, MPU6050_XG_FIFO_EN_BIT, enabled);
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	2306      	movs	r3, #6
 8002bb8:	2223      	movs	r2, #35	@ 0x23
 8002bba:	21d0      	movs	r1, #208	@ 0xd0
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff fa33 	bl	8002028 <I2Cdev_writeBit>
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <MPU6050_setYGyroFIFOEnabled>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param enabled New gyroscope Y-axis FIFO enabled value
 * @see getYGyroFIFOEnabled()
 * @see MPU6050_RA_FIFO_EN
 */
void MPU6050_setYGyroFIFOEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af02      	add	r7, sp, #8
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBit(I2Cx, MPU6050_ADDR, MPU6050_RA_FIFO_EN, MPU6050_YG_FIFO_EN_BIT, enabled);
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	2305      	movs	r3, #5
 8002bdc:	2223      	movs	r2, #35	@ 0x23
 8002bde:	21d0      	movs	r1, #208	@ 0xd0
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff fa21 	bl	8002028 <I2Cdev_writeBit>
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <MPU6050_setZGyroFIFOEnabled>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param enabled New gyroscope Z-axis FIFO enabled value
 * @see getZGyroFIFOEnabled()
 * @see MPU6050_RA_FIFO_EN
 */
void MPU6050_setZGyroFIFOEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	af02      	add	r7, sp, #8
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBit(I2Cx, MPU6050_ADDR, MPU6050_RA_FIFO_EN, MPU6050_ZG_FIFO_EN_BIT, enabled);
 8002bfa:	78fb      	ldrb	r3, [r7, #3]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	2304      	movs	r3, #4
 8002c00:	2223      	movs	r2, #35	@ 0x23
 8002c02:	21d0      	movs	r1, #208	@ 0xd0
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff fa0f 	bl	8002028 <I2Cdev_writeBit>
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <MPU6050_setAccelFIFOEnabled>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param enabled New accelerometer FIFO enabled value
 * @see getAccelFIFOEnabled()
 * @see MPU6050_RA_FIFO_EN
 */
void MPU6050_setAccelFIFOEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af02      	add	r7, sp, #8
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, MPU6050_RA_FIFO_EN, MPU6050_ACCEL_FIFO_EN_BIT, enabled);
 8002c1e:	78fb      	ldrb	r3, [r7, #3]
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	2303      	movs	r3, #3
 8002c24:	2223      	movs	r2, #35	@ 0x23
 8002c26:	21d0      	movs	r1, #208	@ 0xd0
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff f9fd 	bl	8002028 <I2Cdev_writeBit>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <MPU6050_setIntFIFOBufferOverflowEnabled>:
 * @param enabled New interrupt enabled status
 * @see getIntFIFOBufferOverflowEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FIFO_OFLOW_BIT
 **/
void MPU6050_setIntFIFOBufferOverflowEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af02      	add	r7, sp, #8
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	460b      	mov	r3, r1
 8002c40:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, INT_ENABLE_REG, MPU6050_INTERRUPT_FIFO_OFLOW_BIT, enabled);
 8002c42:	78fb      	ldrb	r3, [r7, #3]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	2304      	movs	r3, #4
 8002c48:	2238      	movs	r2, #56	@ 0x38
 8002c4a:	21d0      	movs	r1, #208	@ 0xd0
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff f9eb 	bl	8002028 <I2Cdev_writeBit>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <MPU6050_setFIFOEnabled>:
 * @param enabled New FIFO enabled status
 * @see getFIFOEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_EN_BIT
 */
void MPU6050_setFIFOEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b084      	sub	sp, #16
 8002c5e:	af02      	add	r7, sp, #8
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	460b      	mov	r3, r1
 8002c64:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, USER_CTRL_REG, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	2306      	movs	r3, #6
 8002c6c:	226a      	movs	r2, #106	@ 0x6a
 8002c6e:	21d0      	movs	r1, #208	@ 0xd0
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff f9d9 	bl	8002028 <I2Cdev_writeBit>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <MPU6050_resetFIFO>:
 * bit automatically clears to 0 after the reset has been triggered.
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050_resetFIFO(I2C_HandleTypeDef *I2Cx) {
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af02      	add	r7, sp, #8
 8002c84:	6078      	str	r0, [r7, #4]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, USER_CTRL_REG, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8002c86:	2301      	movs	r3, #1
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	226a      	movs	r2, #106	@ 0x6a
 8002c8e:	21d0      	movs	r1, #208	@ 0xd0
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff f9c9 	bl	8002028 <I2Cdev_writeBit>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <MPU6050_getFIFOCount>:
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @return Current FIFO buffer size
 */
uint16_t MPU6050_getFIFOCount(I2C_HandleTypeDef *I2Cx) {
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af02      	add	r7, sp, #8
 8002ca4:	6078      	str	r0, [r7, #4]
  uint8_t data[2];
  I2Cdev_readBytes(I2Cx, MPU6050_ADDR, MPU6050_RA_FIFO_COUNTH, 2, data);
 8002ca6:	f107 030c 	add.w	r3, r7, #12
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	2302      	movs	r3, #2
 8002cae:	2272      	movs	r2, #114	@ 0x72
 8002cb0:	21d0      	movs	r1, #208	@ 0xd0
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff faa8 	bl	8002208 <I2Cdev_readBytes>
  return (((uint16_t)data[0]) << 8) | data[1];
 8002cb8:	7b3b      	ldrb	r3, [r7, #12]
 8002cba:	021b      	lsls	r3, r3, #8
 8002cbc:	b21a      	sxth	r2, r3
 8002cbe:	7b7b      	ldrb	r3, [r7, #13]
 8002cc0:	b21b      	sxth	r3, r3
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	b21b      	sxth	r3, r3
 8002cc6:	b29b      	uxth	r3, r3
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d14 <HAL_MspInit+0x44>)
 8002cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cda:	4a0e      	ldr	r2, [pc, #56]	@ (8002d14 <HAL_MspInit+0x44>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8002d14 <HAL_MspInit+0x44>)
 8002ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	607b      	str	r3, [r7, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cee:	4b09      	ldr	r3, [pc, #36]	@ (8002d14 <HAL_MspInit+0x44>)
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf2:	4a08      	ldr	r2, [pc, #32]	@ (8002d14 <HAL_MspInit+0x44>)
 8002cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cfa:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <HAL_MspInit+0x44>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000

08002d18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b0ac      	sub	sp, #176	@ 0xb0
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	2288      	movs	r2, #136	@ 0x88
 8002d36:	2100      	movs	r1, #0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f007 ff8b 	bl	800ac54 <memset>
  if(hi2c->Instance==I2C1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a3e      	ldr	r2, [pc, #248]	@ (8002e3c <HAL_I2C_MspInit+0x124>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d174      	bne.n	8002e32 <HAL_I2C_MspInit+0x11a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d48:	2340      	movs	r3, #64	@ 0x40
 8002d4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	4618      	mov	r0, r3
 8002d56:	f004 fa51 	bl	80071fc <HAL_RCCEx_PeriphCLKConfig>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002d60:	f7ff f92a 	bl	8001fb8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d64:	4b36      	ldr	r3, [pc, #216]	@ (8002e40 <HAL_I2C_MspInit+0x128>)
 8002d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d68:	4a35      	ldr	r2, [pc, #212]	@ (8002e40 <HAL_I2C_MspInit+0x128>)
 8002d6a:	f043 0302 	orr.w	r3, r3, #2
 8002d6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d70:	4b33      	ldr	r3, [pc, #204]	@ (8002e40 <HAL_I2C_MspInit+0x128>)
 8002d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d7c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d84:	2312      	movs	r3, #18
 8002d86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d90:	2303      	movs	r3, #3
 8002d92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d96:	2304      	movs	r3, #4
 8002d98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002da0:	4619      	mov	r1, r3
 8002da2:	4828      	ldr	r0, [pc, #160]	@ (8002e44 <HAL_I2C_MspInit+0x12c>)
 8002da4:	f000 fe7a 	bl	8003a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002da8:	4b25      	ldr	r3, [pc, #148]	@ (8002e40 <HAL_I2C_MspInit+0x128>)
 8002daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dac:	4a24      	ldr	r2, [pc, #144]	@ (8002e40 <HAL_I2C_MspInit+0x128>)
 8002dae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002db4:	4b22      	ldr	r3, [pc, #136]	@ (8002e40 <HAL_I2C_MspInit+0x128>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8002dc0:	4b21      	ldr	r3, [pc, #132]	@ (8002e48 <HAL_I2C_MspInit+0x130>)
 8002dc2:	4a22      	ldr	r2, [pc, #136]	@ (8002e4c <HAL_I2C_MspInit+0x134>)
 8002dc4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8002dc6:	4b20      	ldr	r3, [pc, #128]	@ (8002e48 <HAL_I2C_MspInit+0x130>)
 8002dc8:	2203      	movs	r2, #3
 8002dca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8002e48 <HAL_I2C_MspInit+0x130>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e48 <HAL_I2C_MspInit+0x130>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e48 <HAL_I2C_MspInit+0x130>)
 8002dda:	2280      	movs	r2, #128	@ 0x80
 8002ddc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dde:	4b1a      	ldr	r3, [pc, #104]	@ (8002e48 <HAL_I2C_MspInit+0x130>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002de4:	4b18      	ldr	r3, [pc, #96]	@ (8002e48 <HAL_I2C_MspInit+0x130>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002dea:	4b17      	ldr	r3, [pc, #92]	@ (8002e48 <HAL_I2C_MspInit+0x130>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002df0:	4b15      	ldr	r3, [pc, #84]	@ (8002e48 <HAL_I2C_MspInit+0x130>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002df6:	4814      	ldr	r0, [pc, #80]	@ (8002e48 <HAL_I2C_MspInit+0x130>)
 8002df8:	f000 fc0a 	bl	8003610 <HAL_DMA_Init>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 8002e02:	f7ff f8d9 	bl	8001fb8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a0f      	ldr	r2, [pc, #60]	@ (8002e48 <HAL_I2C_MspInit+0x130>)
 8002e0a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002e48 <HAL_I2C_MspInit+0x130>)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002e12:	2200      	movs	r2, #0
 8002e14:	2100      	movs	r1, #0
 8002e16:	201f      	movs	r0, #31
 8002e18:	f000 fbb5 	bl	8003586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002e1c:	201f      	movs	r0, #31
 8002e1e:	f000 fbce 	bl	80035be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002e22:	2200      	movs	r2, #0
 8002e24:	2100      	movs	r1, #0
 8002e26:	2020      	movs	r0, #32
 8002e28:	f000 fbad 	bl	8003586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002e2c:	2020      	movs	r0, #32
 8002e2e:	f000 fbc6 	bl	80035be <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002e32:	bf00      	nop
 8002e34:	37b0      	adds	r7, #176	@ 0xb0
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40005400 	.word	0x40005400
 8002e40:	40021000 	.word	0x40021000
 8002e44:	48000400 	.word	0x48000400
 8002e48:	20000250 	.word	0x20000250
 8002e4c:	40020080 	.word	0x40020080

08002e50 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b0a4      	sub	sp, #144	@ 0x90
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e58:	f107 0308 	add.w	r3, r7, #8
 8002e5c:	2288      	movs	r2, #136	@ 0x88
 8002e5e:	2100      	movs	r1, #0
 8002e60:	4618      	mov	r0, r3
 8002e62:	f007 fef7 	bl	800ac54 <memset>
  if(hrtc->Instance==RTC)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a14      	ldr	r2, [pc, #80]	@ (8002ebc <HAL_RTC_MspInit+0x6c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d120      	bne.n	8002eb2 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e74:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002e76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e7e:	f107 0308 	add.w	r3, r7, #8
 8002e82:	4618      	mov	r0, r3
 8002e84:	f004 f9ba 	bl	80071fc <HAL_RCCEx_PeriphCLKConfig>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002e8e:	f7ff f893 	bl	8001fb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e92:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_RTC_MspInit+0x70>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e98:	4a09      	ldr	r2, [pc, #36]	@ (8002ec0 <HAL_RTC_MspInit+0x70>)
 8002e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	2003      	movs	r0, #3
 8002ea8:	f000 fb6d 	bl	8003586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002eac:	2003      	movs	r0, #3
 8002eae:	f000 fb86 	bl	80035be <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002eb2:	bf00      	nop
 8002eb4:	3790      	adds	r7, #144	@ 0x90
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40002800 	.word	0x40002800
 8002ec0:	40021000 	.word	0x40021000

08002ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b0ac      	sub	sp, #176	@ 0xb0
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ecc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
 8002eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002edc:	f107 0314 	add.w	r3, r7, #20
 8002ee0:	2288      	movs	r2, #136	@ 0x88
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f007 feb5 	bl	800ac54 <memset>
  if(huart->Instance==USART2)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a21      	ldr	r2, [pc, #132]	@ (8002f74 <HAL_UART_MspInit+0xb0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d13b      	bne.n	8002f6c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002efc:	f107 0314 	add.w	r3, r7, #20
 8002f00:	4618      	mov	r0, r3
 8002f02:	f004 f97b 	bl	80071fc <HAL_RCCEx_PeriphCLKConfig>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f0c:	f7ff f854 	bl	8001fb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f10:	4b19      	ldr	r3, [pc, #100]	@ (8002f78 <HAL_UART_MspInit+0xb4>)
 8002f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f14:	4a18      	ldr	r2, [pc, #96]	@ (8002f78 <HAL_UART_MspInit+0xb4>)
 8002f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f1c:	4b16      	ldr	r3, [pc, #88]	@ (8002f78 <HAL_UART_MspInit+0xb4>)
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f28:	4b13      	ldr	r3, [pc, #76]	@ (8002f78 <HAL_UART_MspInit+0xb4>)
 8002f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2c:	4a12      	ldr	r2, [pc, #72]	@ (8002f78 <HAL_UART_MspInit+0xb4>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f34:	4b10      	ldr	r3, [pc, #64]	@ (8002f78 <HAL_UART_MspInit+0xb4>)
 8002f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f40:	230c      	movs	r3, #12
 8002f42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f46:	2302      	movs	r3, #2
 8002f48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f52:	2303      	movs	r3, #3
 8002f54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f58:	2307      	movs	r3, #7
 8002f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f62:	4619      	mov	r1, r3
 8002f64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f68:	f000 fd98 	bl	8003a9c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002f6c:	bf00      	nop
 8002f6e:	37b0      	adds	r7, #176	@ 0xb0
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40004400 	.word	0x40004400
 8002f78:	40021000 	.word	0x40021000

08002f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f80:	bf00      	nop
 8002f82:	e7fd      	b.n	8002f80 <NMI_Handler+0x4>

08002f84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f88:	bf00      	nop
 8002f8a:	e7fd      	b.n	8002f88 <HardFault_Handler+0x4>

08002f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f90:	bf00      	nop
 8002f92:	e7fd      	b.n	8002f90 <MemManage_Handler+0x4>

08002f94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f98:	bf00      	nop
 8002f9a:	e7fd      	b.n	8002f98 <BusFault_Handler+0x4>

08002f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fa0:	bf00      	nop
 8002fa2:	e7fd      	b.n	8002fa0 <UsageFault_Handler+0x4>

08002fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fd2:	f000 f975 	bl	80032c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002fe0:	4802      	ldr	r0, [pc, #8]	@ (8002fec <RTC_WKUP_IRQHandler+0x10>)
 8002fe2:	f005 f9df 	bl	80083a4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000298 	.word	0x20000298

08002ff0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002ff4:	4802      	ldr	r0, [pc, #8]	@ (8003000 <DMA1_Channel7_IRQHandler+0x10>)
 8002ff6:	f000 fc64 	bl	80038c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	20000250 	.word	0x20000250

08003004 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_interrupt_Pin);
 8003008:	2020      	movs	r0, #32
 800300a:	f000 ff09 	bl	8003e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003018:	4802      	ldr	r0, [pc, #8]	@ (8003024 <I2C1_EV_IRQHandler+0x10>)
 800301a:	f001 fac9 	bl	80045b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	200001fc 	.word	0x200001fc

08003028 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800302c:	4802      	ldr	r0, [pc, #8]	@ (8003038 <I2C1_ER_IRQHandler+0x10>)
 800302e:	f001 fad9 	bl	80045e4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	200001fc 	.word	0x200001fc

0800303c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return 1;
 8003040:	2301      	movs	r3, #1
}
 8003042:	4618      	mov	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <_kill>:

int _kill(int pid, int sig)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003056:	f007 fe09 	bl	800ac6c <__errno>
 800305a:	4603      	mov	r3, r0
 800305c:	2216      	movs	r2, #22
 800305e:	601a      	str	r2, [r3, #0]
  return -1;
 8003060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <_exit>:

void _exit (int status)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003074:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff ffe7 	bl	800304c <_kill>
  while (1) {}    /* Make sure we hang here */
 800307e:	bf00      	nop
 8003080:	e7fd      	b.n	800307e <_exit+0x12>

08003082 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b086      	sub	sp, #24
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	e00a      	b.n	80030aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003094:	f3af 8000 	nop.w
 8003098:	4601      	mov	r1, r0
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	60ba      	str	r2, [r7, #8]
 80030a0:	b2ca      	uxtb	r2, r1
 80030a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	3301      	adds	r3, #1
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	dbf0      	blt.n	8003094 <_read+0x12>
  }

  return len;
 80030b2:	687b      	ldr	r3, [r7, #4]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <_close>:
  }
  return len;
}

int _close(int file)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030e4:	605a      	str	r2, [r3, #4]
  return 0;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <_isatty>:

int _isatty(int file)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030fc:	2301      	movs	r3, #1
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800310a:	b480      	push	{r7}
 800310c:	b085      	sub	sp, #20
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800312c:	4a14      	ldr	r2, [pc, #80]	@ (8003180 <_sbrk+0x5c>)
 800312e:	4b15      	ldr	r3, [pc, #84]	@ (8003184 <_sbrk+0x60>)
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003138:	4b13      	ldr	r3, [pc, #76]	@ (8003188 <_sbrk+0x64>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d102      	bne.n	8003146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003140:	4b11      	ldr	r3, [pc, #68]	@ (8003188 <_sbrk+0x64>)
 8003142:	4a12      	ldr	r2, [pc, #72]	@ (800318c <_sbrk+0x68>)
 8003144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003146:	4b10      	ldr	r3, [pc, #64]	@ (8003188 <_sbrk+0x64>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	429a      	cmp	r2, r3
 8003152:	d207      	bcs.n	8003164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003154:	f007 fd8a 	bl	800ac6c <__errno>
 8003158:	4603      	mov	r3, r0
 800315a:	220c      	movs	r2, #12
 800315c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800315e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003162:	e009      	b.n	8003178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003164:	4b08      	ldr	r3, [pc, #32]	@ (8003188 <_sbrk+0x64>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800316a:	4b07      	ldr	r3, [pc, #28]	@ (8003188 <_sbrk+0x64>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	4a05      	ldr	r2, [pc, #20]	@ (8003188 <_sbrk+0x64>)
 8003174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003176:	68fb      	ldr	r3, [r7, #12]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20018000 	.word	0x20018000
 8003184:	00000400 	.word	0x00000400
 8003188:	200003b0 	.word	0x200003b0
 800318c:	20000508 	.word	0x20000508

08003190 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003194:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <SystemInit+0x20>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319a:	4a05      	ldr	r2, [pc, #20]	@ (80031b0 <SystemInit+0x20>)
 800319c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80031a4:	bf00      	nop
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80031b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031b8:	f7ff ffea 	bl	8003190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031bc:	480c      	ldr	r0, [pc, #48]	@ (80031f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80031be:	490d      	ldr	r1, [pc, #52]	@ (80031f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031c0:	4a0d      	ldr	r2, [pc, #52]	@ (80031f8 <LoopForever+0xe>)
  movs r3, #0
 80031c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031c4:	e002      	b.n	80031cc <LoopCopyDataInit>

080031c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ca:	3304      	adds	r3, #4

080031cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031d0:	d3f9      	bcc.n	80031c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031d2:	4a0a      	ldr	r2, [pc, #40]	@ (80031fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80031d4:	4c0a      	ldr	r4, [pc, #40]	@ (8003200 <LoopForever+0x16>)
  movs r3, #0
 80031d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031d8:	e001      	b.n	80031de <LoopFillZerobss>

080031da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031dc:	3204      	adds	r2, #4

080031de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031e0:	d3fb      	bcc.n	80031da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031e2:	f007 fd49 	bl	800ac78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031e6:	f7fd fefd 	bl	8000fe4 <main>

080031ea <LoopForever>:

LoopForever:
    b LoopForever
 80031ea:	e7fe      	b.n	80031ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80031ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80031f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031f4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80031f8:	0800dddc 	.word	0x0800dddc
  ldr r2, =_sbss
 80031fc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003200:	20000504 	.word	0x20000504

08003204 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003204:	e7fe      	b.n	8003204 <ADC1_2_IRQHandler>
	...

08003208 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003212:	4b0c      	ldr	r3, [pc, #48]	@ (8003244 <HAL_Init+0x3c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a0b      	ldr	r2, [pc, #44]	@ (8003244 <HAL_Init+0x3c>)
 8003218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800321c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800321e:	2003      	movs	r0, #3
 8003220:	f000 f9a6 	bl	8003570 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003224:	2000      	movs	r0, #0
 8003226:	f000 f80f 	bl	8003248 <HAL_InitTick>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	71fb      	strb	r3, [r7, #7]
 8003234:	e001      	b.n	800323a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003236:	f7ff fd4b 	bl	8002cd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800323a:	79fb      	ldrb	r3, [r7, #7]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40022000 	.word	0x40022000

08003248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003254:	4b17      	ldr	r3, [pc, #92]	@ (80032b4 <HAL_InitTick+0x6c>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d023      	beq.n	80032a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800325c:	4b16      	ldr	r3, [pc, #88]	@ (80032b8 <HAL_InitTick+0x70>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b14      	ldr	r3, [pc, #80]	@ (80032b4 <HAL_InitTick+0x6c>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	4619      	mov	r1, r3
 8003266:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800326a:	fbb3 f3f1 	udiv	r3, r3, r1
 800326e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f9bf 	bl	80035f6 <HAL_SYSTICK_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10f      	bne.n	800329e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b0f      	cmp	r3, #15
 8003282:	d809      	bhi.n	8003298 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003284:	2200      	movs	r2, #0
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800328c:	f000 f97b 	bl	8003586 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003290:	4a0a      	ldr	r2, [pc, #40]	@ (80032bc <HAL_InitTick+0x74>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	e007      	b.n	80032a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
 800329c:	e004      	b.n	80032a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
 80032a2:	e001      	b.n	80032a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000014 	.word	0x20000014
 80032b8:	2000000c 	.word	0x2000000c
 80032bc:	20000010 	.word	0x20000010

080032c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032c4:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_IncTick+0x20>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	4b06      	ldr	r3, [pc, #24]	@ (80032e4 <HAL_IncTick+0x24>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4413      	add	r3, r2
 80032d0:	4a04      	ldr	r2, [pc, #16]	@ (80032e4 <HAL_IncTick+0x24>)
 80032d2:	6013      	str	r3, [r2, #0]
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000014 	.word	0x20000014
 80032e4:	200003b4 	.word	0x200003b4

080032e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return uwTick;
 80032ec:	4b03      	ldr	r3, [pc, #12]	@ (80032fc <HAL_GetTick+0x14>)
 80032ee:	681b      	ldr	r3, [r3, #0]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	200003b4 	.word	0x200003b4

08003300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003308:	f7ff ffee 	bl	80032e8 <HAL_GetTick>
 800330c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003318:	d005      	beq.n	8003326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800331a:	4b0a      	ldr	r3, [pc, #40]	@ (8003344 <HAL_Delay+0x44>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003326:	bf00      	nop
 8003328:	f7ff ffde 	bl	80032e8 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	429a      	cmp	r2, r3
 8003336:	d8f7      	bhi.n	8003328 <HAL_Delay+0x28>
  {
  }
}
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000014 	.word	0x20000014

08003348 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800334c:	4b05      	ldr	r3, [pc, #20]	@ (8003364 <HAL_SuspendTick+0x1c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a04      	ldr	r2, [pc, #16]	@ (8003364 <HAL_SuspendTick+0x1c>)
 8003352:	f023 0302 	bic.w	r3, r3, #2
 8003356:	6013      	str	r3, [r2, #0]
}
 8003358:	bf00      	nop
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	e000e010 	.word	0xe000e010

08003368 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800336c:	4b05      	ldr	r3, [pc, #20]	@ (8003384 <HAL_ResumeTick+0x1c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a04      	ldr	r2, [pc, #16]	@ (8003384 <HAL_ResumeTick+0x1c>)
 8003372:	f043 0302 	orr.w	r3, r3, #2
 8003376:	6013      	str	r3, [r2, #0]
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000e010 	.word	0xe000e010

08003388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003398:	4b0c      	ldr	r3, [pc, #48]	@ (80033cc <__NVIC_SetPriorityGrouping+0x44>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033a4:	4013      	ands	r3, r2
 80033a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ba:	4a04      	ldr	r2, [pc, #16]	@ (80033cc <__NVIC_SetPriorityGrouping+0x44>)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	60d3      	str	r3, [r2, #12]
}
 80033c0:	bf00      	nop
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d4:	4b04      	ldr	r3, [pc, #16]	@ (80033e8 <__NVIC_GetPriorityGrouping+0x18>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	0a1b      	lsrs	r3, r3, #8
 80033da:	f003 0307 	and.w	r3, r3, #7
}
 80033de:	4618      	mov	r0, r3
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	db0b      	blt.n	8003416 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	f003 021f 	and.w	r2, r3, #31
 8003404:	4907      	ldr	r1, [pc, #28]	@ (8003424 <__NVIC_EnableIRQ+0x38>)
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	2001      	movs	r0, #1
 800340e:	fa00 f202 	lsl.w	r2, r0, r2
 8003412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	e000e100 	.word	0xe000e100

08003428 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	2b00      	cmp	r3, #0
 8003438:	db12      	blt.n	8003460 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	f003 021f 	and.w	r2, r3, #31
 8003440:	490a      	ldr	r1, [pc, #40]	@ (800346c <__NVIC_DisableIRQ+0x44>)
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	2001      	movs	r0, #1
 800344a:	fa00 f202 	lsl.w	r2, r0, r2
 800344e:	3320      	adds	r3, #32
 8003450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003454:	f3bf 8f4f 	dsb	sy
}
 8003458:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800345a:	f3bf 8f6f 	isb	sy
}
 800345e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	e000e100 	.word	0xe000e100

08003470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	6039      	str	r1, [r7, #0]
 800347a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800347c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003480:	2b00      	cmp	r3, #0
 8003482:	db0a      	blt.n	800349a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	b2da      	uxtb	r2, r3
 8003488:	490c      	ldr	r1, [pc, #48]	@ (80034bc <__NVIC_SetPriority+0x4c>)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	0112      	lsls	r2, r2, #4
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	440b      	add	r3, r1
 8003494:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003498:	e00a      	b.n	80034b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4908      	ldr	r1, [pc, #32]	@ (80034c0 <__NVIC_SetPriority+0x50>)
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	3b04      	subs	r3, #4
 80034a8:	0112      	lsls	r2, r2, #4
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	440b      	add	r3, r1
 80034ae:	761a      	strb	r2, [r3, #24]
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	e000e100 	.word	0xe000e100
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b089      	sub	sp, #36	@ 0x24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f1c3 0307 	rsb	r3, r3, #7
 80034de:	2b04      	cmp	r3, #4
 80034e0:	bf28      	it	cs
 80034e2:	2304      	movcs	r3, #4
 80034e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	3304      	adds	r3, #4
 80034ea:	2b06      	cmp	r3, #6
 80034ec:	d902      	bls.n	80034f4 <NVIC_EncodePriority+0x30>
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3b03      	subs	r3, #3
 80034f2:	e000      	b.n	80034f6 <NVIC_EncodePriority+0x32>
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	401a      	ands	r2, r3
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800350c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	fa01 f303 	lsl.w	r3, r1, r3
 8003516:	43d9      	mvns	r1, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	4313      	orrs	r3, r2
         );
}
 800351e:	4618      	mov	r0, r3
 8003520:	3724      	adds	r7, #36	@ 0x24
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800353c:	d301      	bcc.n	8003542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800353e:	2301      	movs	r3, #1
 8003540:	e00f      	b.n	8003562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003542:	4a0a      	ldr	r2, [pc, #40]	@ (800356c <SysTick_Config+0x40>)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3b01      	subs	r3, #1
 8003548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800354a:	210f      	movs	r1, #15
 800354c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003550:	f7ff ff8e 	bl	8003470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003554:	4b05      	ldr	r3, [pc, #20]	@ (800356c <SysTick_Config+0x40>)
 8003556:	2200      	movs	r2, #0
 8003558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800355a:	4b04      	ldr	r3, [pc, #16]	@ (800356c <SysTick_Config+0x40>)
 800355c:	2207      	movs	r2, #7
 800355e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	e000e010 	.word	0xe000e010

08003570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff ff05 	bl	8003388 <__NVIC_SetPriorityGrouping>
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b086      	sub	sp, #24
 800358a:	af00      	add	r7, sp, #0
 800358c:	4603      	mov	r3, r0
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	607a      	str	r2, [r7, #4]
 8003592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003598:	f7ff ff1a 	bl	80033d0 <__NVIC_GetPriorityGrouping>
 800359c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	6978      	ldr	r0, [r7, #20]
 80035a4:	f7ff ff8e 	bl	80034c4 <NVIC_EncodePriority>
 80035a8:	4602      	mov	r2, r0
 80035aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ae:	4611      	mov	r1, r2
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ff5d 	bl	8003470 <__NVIC_SetPriority>
}
 80035b6:	bf00      	nop
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	4603      	mov	r3, r0
 80035c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff ff0d 	bl	80033ec <__NVIC_EnableIRQ>
}
 80035d2:	bf00      	nop
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	4603      	mov	r3, r0
 80035e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80035e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ff1d 	bl	8003428 <__NVIC_DisableIRQ>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff ff94 	bl	800352c <SysTick_Config>
 8003604:	4603      	mov	r3, r0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e098      	b.n	8003754 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	4b4d      	ldr	r3, [pc, #308]	@ (8003760 <HAL_DMA_Init+0x150>)
 800362a:	429a      	cmp	r2, r3
 800362c:	d80f      	bhi.n	800364e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	4b4b      	ldr	r3, [pc, #300]	@ (8003764 <HAL_DMA_Init+0x154>)
 8003636:	4413      	add	r3, r2
 8003638:	4a4b      	ldr	r2, [pc, #300]	@ (8003768 <HAL_DMA_Init+0x158>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	091b      	lsrs	r3, r3, #4
 8003640:	009a      	lsls	r2, r3, #2
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a48      	ldr	r2, [pc, #288]	@ (800376c <HAL_DMA_Init+0x15c>)
 800364a:	641a      	str	r2, [r3, #64]	@ 0x40
 800364c:	e00e      	b.n	800366c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	4b46      	ldr	r3, [pc, #280]	@ (8003770 <HAL_DMA_Init+0x160>)
 8003656:	4413      	add	r3, r2
 8003658:	4a43      	ldr	r2, [pc, #268]	@ (8003768 <HAL_DMA_Init+0x158>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	091b      	lsrs	r3, r3, #4
 8003660:	009a      	lsls	r2, r3, #2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a42      	ldr	r2, [pc, #264]	@ (8003774 <HAL_DMA_Init+0x164>)
 800366a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003686:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003690:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800369c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036c6:	d039      	beq.n	800373c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036cc:	4a27      	ldr	r2, [pc, #156]	@ (800376c <HAL_DMA_Init+0x15c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d11a      	bne.n	8003708 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80036d2:	4b29      	ldr	r3, [pc, #164]	@ (8003778 <HAL_DMA_Init+0x168>)
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036da:	f003 031c 	and.w	r3, r3, #28
 80036de:	210f      	movs	r1, #15
 80036e0:	fa01 f303 	lsl.w	r3, r1, r3
 80036e4:	43db      	mvns	r3, r3
 80036e6:	4924      	ldr	r1, [pc, #144]	@ (8003778 <HAL_DMA_Init+0x168>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80036ec:	4b22      	ldr	r3, [pc, #136]	@ (8003778 <HAL_DMA_Init+0x168>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6859      	ldr	r1, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f8:	f003 031c 	and.w	r3, r3, #28
 80036fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003700:	491d      	ldr	r1, [pc, #116]	@ (8003778 <HAL_DMA_Init+0x168>)
 8003702:	4313      	orrs	r3, r2
 8003704:	600b      	str	r3, [r1, #0]
 8003706:	e019      	b.n	800373c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003708:	4b1c      	ldr	r3, [pc, #112]	@ (800377c <HAL_DMA_Init+0x16c>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003710:	f003 031c 	and.w	r3, r3, #28
 8003714:	210f      	movs	r1, #15
 8003716:	fa01 f303 	lsl.w	r3, r1, r3
 800371a:	43db      	mvns	r3, r3
 800371c:	4917      	ldr	r1, [pc, #92]	@ (800377c <HAL_DMA_Init+0x16c>)
 800371e:	4013      	ands	r3, r2
 8003720:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003722:	4b16      	ldr	r3, [pc, #88]	@ (800377c <HAL_DMA_Init+0x16c>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6859      	ldr	r1, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372e:	f003 031c 	and.w	r3, r3, #28
 8003732:	fa01 f303 	lsl.w	r3, r1, r3
 8003736:	4911      	ldr	r1, [pc, #68]	@ (800377c <HAL_DMA_Init+0x16c>)
 8003738:	4313      	orrs	r3, r2
 800373a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	40020407 	.word	0x40020407
 8003764:	bffdfff8 	.word	0xbffdfff8
 8003768:	cccccccd 	.word	0xcccccccd
 800376c:	40020000 	.word	0x40020000
 8003770:	bffdfbf8 	.word	0xbffdfbf8
 8003774:	40020400 	.word	0x40020400
 8003778:	400200a8 	.word	0x400200a8
 800377c:	400204a8 	.word	0x400204a8

08003780 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_DMA_Start_IT+0x20>
 800379c:	2302      	movs	r3, #2
 800379e:	e04b      	b.n	8003838 <HAL_DMA_Start_IT+0xb8>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d13a      	bne.n	800382a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0201 	bic.w	r2, r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f92f 	bl	8003a3c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d008      	beq.n	80037f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f042 020e 	orr.w	r2, r2, #14
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	e00f      	b.n	8003818 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0204 	bic.w	r2, r2, #4
 8003806:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 020a 	orr.w	r2, r2, #10
 8003816:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	e005      	b.n	8003836 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003832:	2302      	movs	r3, #2
 8003834:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003836:	7dfb      	ldrb	r3, [r7, #23]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d005      	beq.n	8003864 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2204      	movs	r2, #4
 800385c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	73fb      	strb	r3, [r7, #15]
 8003862:	e029      	b.n	80038b8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 020e 	bic.w	r2, r2, #14
 8003872:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003888:	f003 021c 	and.w	r2, r3, #28
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003890:	2101      	movs	r1, #1
 8003892:	fa01 f202 	lsl.w	r2, r1, r2
 8003896:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	4798      	blx	r3
    }
  }
  return status;
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038de:	f003 031c 	and.w	r3, r3, #28
 80038e2:	2204      	movs	r2, #4
 80038e4:	409a      	lsls	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d026      	beq.n	800393c <HAL_DMA_IRQHandler+0x7a>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d021      	beq.n	800393c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b00      	cmp	r3, #0
 8003904:	d107      	bne.n	8003916 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0204 	bic.w	r2, r2, #4
 8003914:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391a:	f003 021c 	and.w	r2, r3, #28
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	2104      	movs	r1, #4
 8003924:	fa01 f202 	lsl.w	r2, r1, r2
 8003928:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392e:	2b00      	cmp	r3, #0
 8003930:	d071      	beq.n	8003a16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800393a:	e06c      	b.n	8003a16 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003940:	f003 031c 	and.w	r3, r3, #28
 8003944:	2202      	movs	r2, #2
 8003946:	409a      	lsls	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d02e      	beq.n	80039ae <HAL_DMA_IRQHandler+0xec>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d029      	beq.n	80039ae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10b      	bne.n	8003980 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 020a 	bic.w	r2, r2, #10
 8003976:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003984:	f003 021c 	and.w	r2, r3, #28
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398c:	2102      	movs	r1, #2
 800398e:	fa01 f202 	lsl.w	r2, r1, r2
 8003992:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d038      	beq.n	8003a16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80039ac:	e033      	b.n	8003a16 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b2:	f003 031c 	and.w	r3, r3, #28
 80039b6:	2208      	movs	r2, #8
 80039b8:	409a      	lsls	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4013      	ands	r3, r2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d02a      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x156>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d025      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 020e 	bic.w	r2, r2, #14
 80039da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e0:	f003 021c 	and.w	r2, r3, #28
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	2101      	movs	r1, #1
 80039ea:	fa01 f202 	lsl.w	r2, r1, r2
 80039ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d004      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a16:	bf00      	nop
 8003a18:	bf00      	nop
}
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a2e:	b2db      	uxtb	r3, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4e:	f003 021c 	and.w	r2, r3, #28
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a56:	2101      	movs	r1, #1
 8003a58:	fa01 f202 	lsl.w	r2, r1, r2
 8003a5c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b10      	cmp	r3, #16
 8003a6c:	d108      	bne.n	8003a80 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a7e:	e007      	b.n	8003a90 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	60da      	str	r2, [r3, #12]
}
 8003a90:	bf00      	nop
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aaa:	e17f      	b.n	8003dac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab8:	4013      	ands	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 8171 	beq.w	8003da6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d005      	beq.n	8003adc <HAL_GPIO_Init+0x40>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d130      	bne.n	8003b3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4013      	ands	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b12:	2201      	movs	r2, #1
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	f003 0201 	and.w	r2, r3, #1
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d118      	bne.n	8003b7c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003b50:	2201      	movs	r2, #1
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	08db      	lsrs	r3, r3, #3
 8003b66:	f003 0201 	and.w	r2, r3, #1
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d017      	beq.n	8003bb8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	2203      	movs	r2, #3
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d123      	bne.n	8003c0c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	08da      	lsrs	r2, r3, #3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3208      	adds	r2, #8
 8003bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	220f      	movs	r2, #15
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4013      	ands	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	08da      	lsrs	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3208      	adds	r2, #8
 8003c06:	6939      	ldr	r1, [r7, #16]
 8003c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4013      	ands	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0203 	and.w	r2, r3, #3
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80ac 	beq.w	8003da6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c4e:	4b5f      	ldr	r3, [pc, #380]	@ (8003dcc <HAL_GPIO_Init+0x330>)
 8003c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c52:	4a5e      	ldr	r2, [pc, #376]	@ (8003dcc <HAL_GPIO_Init+0x330>)
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c5a:	4b5c      	ldr	r3, [pc, #368]	@ (8003dcc <HAL_GPIO_Init+0x330>)
 8003c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	60bb      	str	r3, [r7, #8]
 8003c64:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c66:	4a5a      	ldr	r2, [pc, #360]	@ (8003dd0 <HAL_GPIO_Init+0x334>)
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	3302      	adds	r3, #2
 8003c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	220f      	movs	r2, #15
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4013      	ands	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003c90:	d025      	beq.n	8003cde <HAL_GPIO_Init+0x242>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a4f      	ldr	r2, [pc, #316]	@ (8003dd4 <HAL_GPIO_Init+0x338>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d01f      	beq.n	8003cda <HAL_GPIO_Init+0x23e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a4e      	ldr	r2, [pc, #312]	@ (8003dd8 <HAL_GPIO_Init+0x33c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d019      	beq.n	8003cd6 <HAL_GPIO_Init+0x23a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a4d      	ldr	r2, [pc, #308]	@ (8003ddc <HAL_GPIO_Init+0x340>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d013      	beq.n	8003cd2 <HAL_GPIO_Init+0x236>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a4c      	ldr	r2, [pc, #304]	@ (8003de0 <HAL_GPIO_Init+0x344>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00d      	beq.n	8003cce <HAL_GPIO_Init+0x232>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a4b      	ldr	r2, [pc, #300]	@ (8003de4 <HAL_GPIO_Init+0x348>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d007      	beq.n	8003cca <HAL_GPIO_Init+0x22e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a4a      	ldr	r2, [pc, #296]	@ (8003de8 <HAL_GPIO_Init+0x34c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d101      	bne.n	8003cc6 <HAL_GPIO_Init+0x22a>
 8003cc2:	2306      	movs	r3, #6
 8003cc4:	e00c      	b.n	8003ce0 <HAL_GPIO_Init+0x244>
 8003cc6:	2307      	movs	r3, #7
 8003cc8:	e00a      	b.n	8003ce0 <HAL_GPIO_Init+0x244>
 8003cca:	2305      	movs	r3, #5
 8003ccc:	e008      	b.n	8003ce0 <HAL_GPIO_Init+0x244>
 8003cce:	2304      	movs	r3, #4
 8003cd0:	e006      	b.n	8003ce0 <HAL_GPIO_Init+0x244>
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e004      	b.n	8003ce0 <HAL_GPIO_Init+0x244>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e002      	b.n	8003ce0 <HAL_GPIO_Init+0x244>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <HAL_GPIO_Init+0x244>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	f002 0203 	and.w	r2, r2, #3
 8003ce6:	0092      	lsls	r2, r2, #2
 8003ce8:	4093      	lsls	r3, r2
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003cf0:	4937      	ldr	r1, [pc, #220]	@ (8003dd0 <HAL_GPIO_Init+0x334>)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	089b      	lsrs	r3, r3, #2
 8003cf6:	3302      	adds	r3, #2
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8003dec <HAL_GPIO_Init+0x350>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	43db      	mvns	r3, r3
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d22:	4a32      	ldr	r2, [pc, #200]	@ (8003dec <HAL_GPIO_Init+0x350>)
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d28:	4b30      	ldr	r3, [pc, #192]	@ (8003dec <HAL_GPIO_Init+0x350>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	43db      	mvns	r3, r3
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4013      	ands	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d4c:	4a27      	ldr	r2, [pc, #156]	@ (8003dec <HAL_GPIO_Init+0x350>)
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d52:	4b26      	ldr	r3, [pc, #152]	@ (8003dec <HAL_GPIO_Init+0x350>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d76:	4a1d      	ldr	r2, [pc, #116]	@ (8003dec <HAL_GPIO_Init+0x350>)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dec <HAL_GPIO_Init+0x350>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	43db      	mvns	r3, r3
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003da0:	4a12      	ldr	r2, [pc, #72]	@ (8003dec <HAL_GPIO_Init+0x350>)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	3301      	adds	r3, #1
 8003daa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	fa22 f303 	lsr.w	r3, r2, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f47f ae78 	bne.w	8003aac <HAL_GPIO_Init+0x10>
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	40010000 	.word	0x40010000
 8003dd4:	48000400 	.word	0x48000400
 8003dd8:	48000800 	.word	0x48000800
 8003ddc:	48000c00 	.word	0x48000c00
 8003de0:	48001000 	.word	0x48001000
 8003de4:	48001400 	.word	0x48001400
 8003de8:	48001800 	.word	0x48001800
 8003dec:	40010400 	.word	0x40010400

08003df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	807b      	strh	r3, [r7, #2]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e00:	787b      	ldrb	r3, [r7, #1]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e06:	887a      	ldrh	r2, [r7, #2]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e0c:	e002      	b.n	8003e14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e0e:	887a      	ldrh	r2, [r7, #2]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e2a:	4b08      	ldr	r3, [pc, #32]	@ (8003e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d006      	beq.n	8003e44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e36:	4a05      	ldr	r2, [pc, #20]	@ (8003e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e3c:	88fb      	ldrh	r3, [r7, #6]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe f8a6 	bl	8001f90 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40010400 	.word	0x40010400

08003e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e08d      	b.n	8003f7e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fe ff4e 	bl	8002d18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2224      	movs	r2, #36	@ 0x24
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ea0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003eb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d107      	bne.n	8003eca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ec6:	609a      	str	r2, [r3, #8]
 8003ec8:	e006      	b.n	8003ed8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003ed6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d108      	bne.n	8003ef2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eee:	605a      	str	r2, [r3, #4]
 8003ef0:	e007      	b.n	8003f02 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69d9      	ldr	r1, [r3, #28]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1a      	ldr	r2, [r3, #32]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	4608      	mov	r0, r1
 8003f92:	4611      	mov	r1, r2
 8003f94:	461a      	mov	r2, r3
 8003f96:	4603      	mov	r3, r0
 8003f98:	817b      	strh	r3, [r7, #10]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	813b      	strh	r3, [r7, #8]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	f040 80f9 	bne.w	80041a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <HAL_I2C_Mem_Write+0x34>
 8003fb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d105      	bne.n	8003fc8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fc2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0ed      	b.n	80041a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_I2C_Mem_Write+0x4e>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e0e6      	b.n	80041a4 <HAL_I2C_Mem_Write+0x21c>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fde:	f7ff f983 	bl	80032e8 <HAL_GetTick>
 8003fe2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	2319      	movs	r3, #25
 8003fea:	2201      	movs	r2, #1
 8003fec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f001 fdc4 	bl	8005b7e <I2C_WaitOnFlagUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0d1      	b.n	80041a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2221      	movs	r2, #33	@ 0x21
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2240      	movs	r2, #64	@ 0x40
 800400c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a3a      	ldr	r2, [r7, #32]
 800401a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004020:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004028:	88f8      	ldrh	r0, [r7, #6]
 800402a:	893a      	ldrh	r2, [r7, #8]
 800402c:	8979      	ldrh	r1, [r7, #10]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	9301      	str	r3, [sp, #4]
 8004032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	4603      	mov	r3, r0
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 ff91 	bl	8004f60 <I2C_RequestMemoryWrite>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0a9      	b.n	80041a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004054:	b29b      	uxth	r3, r3
 8004056:	2bff      	cmp	r3, #255	@ 0xff
 8004058:	d90e      	bls.n	8004078 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	22ff      	movs	r2, #255	@ 0xff
 800405e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004064:	b2da      	uxtb	r2, r3
 8004066:	8979      	ldrh	r1, [r7, #10]
 8004068:	2300      	movs	r3, #0
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f001 ff47 	bl	8005f04 <I2C_TransferConfig>
 8004076:	e00f      	b.n	8004098 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004086:	b2da      	uxtb	r2, r3
 8004088:	8979      	ldrh	r1, [r7, #10]
 800408a:	2300      	movs	r3, #0
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f001 ff36 	bl	8005f04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f001 fdc7 	bl	8005c30 <I2C_WaitOnTXISFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e07b      	b.n	80041a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	781a      	ldrb	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d034      	beq.n	8004150 <HAL_I2C_Mem_Write+0x1c8>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d130      	bne.n	8004150 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f4:	2200      	movs	r2, #0
 80040f6:	2180      	movs	r1, #128	@ 0x80
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f001 fd40 	bl	8005b7e <I2C_WaitOnFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e04d      	b.n	80041a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	2bff      	cmp	r3, #255	@ 0xff
 8004110:	d90e      	bls.n	8004130 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	22ff      	movs	r2, #255	@ 0xff
 8004116:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411c:	b2da      	uxtb	r2, r3
 800411e:	8979      	ldrh	r1, [r7, #10]
 8004120:	2300      	movs	r3, #0
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f001 feeb 	bl	8005f04 <I2C_TransferConfig>
 800412e:	e00f      	b.n	8004150 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004134:	b29a      	uxth	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413e:	b2da      	uxtb	r2, r3
 8004140:	8979      	ldrh	r1, [r7, #10]
 8004142:	2300      	movs	r3, #0
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f001 feda 	bl	8005f04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004154:	b29b      	uxth	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d19e      	bne.n	8004098 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f001 fdad 	bl	8005cbe <I2C_WaitOnSTOPFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e01a      	b.n	80041a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2220      	movs	r2, #32
 8004174:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6859      	ldr	r1, [r3, #4]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	4b0a      	ldr	r3, [pc, #40]	@ (80041ac <HAL_I2C_Mem_Write+0x224>)
 8004182:	400b      	ands	r3, r1
 8004184:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	e000      	b.n	80041a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80041a2:	2302      	movs	r3, #2
  }
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	fe00e800 	.word	0xfe00e800

080041b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af02      	add	r7, sp, #8
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	4608      	mov	r0, r1
 80041ba:	4611      	mov	r1, r2
 80041bc:	461a      	mov	r2, r3
 80041be:	4603      	mov	r3, r0
 80041c0:	817b      	strh	r3, [r7, #10]
 80041c2:	460b      	mov	r3, r1
 80041c4:	813b      	strh	r3, [r7, #8]
 80041c6:	4613      	mov	r3, r2
 80041c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	f040 80fd 	bne.w	80043d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <HAL_I2C_Mem_Read+0x34>
 80041de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d105      	bne.n	80041f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0f1      	b.n	80043d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d101      	bne.n	80041fe <HAL_I2C_Mem_Read+0x4e>
 80041fa:	2302      	movs	r3, #2
 80041fc:	e0ea      	b.n	80043d4 <HAL_I2C_Mem_Read+0x224>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004206:	f7ff f86f 	bl	80032e8 <HAL_GetTick>
 800420a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	2319      	movs	r3, #25
 8004212:	2201      	movs	r2, #1
 8004214:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f001 fcb0 	bl	8005b7e <I2C_WaitOnFlagUntilTimeout>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0d5      	b.n	80043d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2222      	movs	r2, #34	@ 0x22
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2240      	movs	r2, #64	@ 0x40
 8004234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a3a      	ldr	r2, [r7, #32]
 8004242:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004248:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004250:	88f8      	ldrh	r0, [r7, #6]
 8004252:	893a      	ldrh	r2, [r7, #8]
 8004254:	8979      	ldrh	r1, [r7, #10]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	4603      	mov	r3, r0
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 fed1 	bl	8005008 <I2C_RequestMemoryRead>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0ad      	b.n	80043d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800427c:	b29b      	uxth	r3, r3
 800427e:	2bff      	cmp	r3, #255	@ 0xff
 8004280:	d90e      	bls.n	80042a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800428c:	b2da      	uxtb	r2, r3
 800428e:	8979      	ldrh	r1, [r7, #10]
 8004290:	4b52      	ldr	r3, [pc, #328]	@ (80043dc <HAL_I2C_Mem_Read+0x22c>)
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f001 fe33 	bl	8005f04 <I2C_TransferConfig>
 800429e:	e00f      	b.n	80042c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	8979      	ldrh	r1, [r7, #10]
 80042b2:	4b4a      	ldr	r3, [pc, #296]	@ (80043dc <HAL_I2C_Mem_Read+0x22c>)
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f001 fe22 	bl	8005f04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c6:	2200      	movs	r2, #0
 80042c8:	2104      	movs	r1, #4
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f001 fc57 	bl	8005b7e <I2C_WaitOnFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e07c      	b.n	80043d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d034      	beq.n	8004380 <HAL_I2C_Mem_Read+0x1d0>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431a:	2b00      	cmp	r3, #0
 800431c:	d130      	bne.n	8004380 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004324:	2200      	movs	r2, #0
 8004326:	2180      	movs	r1, #128	@ 0x80
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f001 fc28 	bl	8005b7e <I2C_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e04d      	b.n	80043d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	2bff      	cmp	r3, #255	@ 0xff
 8004340:	d90e      	bls.n	8004360 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2201      	movs	r2, #1
 8004346:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434c:	b2da      	uxtb	r2, r3
 800434e:	8979      	ldrh	r1, [r7, #10]
 8004350:	2300      	movs	r3, #0
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f001 fdd3 	bl	8005f04 <I2C_TransferConfig>
 800435e:	e00f      	b.n	8004380 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436e:	b2da      	uxtb	r2, r3
 8004370:	8979      	ldrh	r1, [r7, #10]
 8004372:	2300      	movs	r3, #0
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f001 fdc2 	bl	8005f04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d19a      	bne.n	80042c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f001 fc95 	bl	8005cbe <I2C_WaitOnSTOPFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e01a      	b.n	80043d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2220      	movs	r2, #32
 80043a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6859      	ldr	r1, [r3, #4]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b0b      	ldr	r3, [pc, #44]	@ (80043e0 <HAL_I2C_Mem_Read+0x230>)
 80043b2:	400b      	ands	r3, r1
 80043b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e000      	b.n	80043d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
  }
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	80002400 	.word	0x80002400
 80043e0:	fe00e800 	.word	0xfe00e800

080043e4 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	4608      	mov	r0, r1
 80043ee:	4611      	mov	r1, r2
 80043f0:	461a      	mov	r2, r3
 80043f2:	4603      	mov	r3, r0
 80043f4:	817b      	strh	r3, [r7, #10]
 80043f6:	460b      	mov	r3, r1
 80043f8:	813b      	strh	r3, [r7, #8]
 80043fa:	4613      	mov	r3, r2
 80043fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b20      	cmp	r3, #32
 8004408:	f040 80c2 	bne.w	8004590 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_I2C_Mem_Read_DMA+0x34>
 8004412:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004414:	2b00      	cmp	r3, #0
 8004416:	d105      	bne.n	8004424 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800441e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0b6      	b.n	8004592 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800442e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004432:	d101      	bne.n	8004438 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8004434:	2302      	movs	r3, #2
 8004436:	e0ac      	b.n	8004592 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_I2C_Mem_Read_DMA+0x62>
 8004442:	2302      	movs	r3, #2
 8004444:	e0a5      	b.n	8004592 <HAL_I2C_Mem_Read_DMA+0x1ae>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2222      	movs	r2, #34	@ 0x22
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2240      	movs	r2, #64	@ 0x40
 800445a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a3a      	ldr	r2, [r7, #32]
 8004468:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800446e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4a4a      	ldr	r2, [pc, #296]	@ (800459c <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8004474:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4a49      	ldr	r2, [pc, #292]	@ (80045a0 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 800447a:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800447c:	897a      	ldrh	r2, [r7, #10]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004486:	b29b      	uxth	r3, r3
 8004488:	2bff      	cmp	r3, #255	@ 0xff
 800448a:	d903      	bls.n	8004494 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	22ff      	movs	r2, #255	@ 0xff
 8004490:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004492:	e004      	b.n	800449e <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d109      	bne.n	80044b8 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044a4:	893b      	ldrh	r3, [r7, #8]
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80044b6:	e00b      	b.n	80044d0 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044b8:	893b      	ldrh	r3, [r7, #8]
 80044ba:	0a1b      	lsrs	r3, r3, #8
 80044bc:	b29b      	uxth	r3, r3
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80044c6:	893b      	ldrh	r3, [r7, #8]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	461a      	mov	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d020      	beq.n	800451a <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044dc:	4a31      	ldr	r2, [pc, #196]	@ (80045a4 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 80044de:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e4:	4a30      	ldr	r2, [pc, #192]	@ (80045a8 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 80044e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ec:	2200      	movs	r2, #0
 80044ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f4:	2200      	movs	r2, #0
 80044f6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3324      	adds	r3, #36	@ 0x24
 8004502:	4619      	mov	r1, r3
 8004504:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800450a:	f7ff f939 	bl	8003780 <HAL_DMA_Start_IT>
 800450e:	4603      	mov	r3, r0
 8004510:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004512:	7dfb      	ldrb	r3, [r7, #23]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d127      	bne.n	8004568 <HAL_I2C_Mem_Read_DMA+0x184>
 8004518:	e013      	b.n	8004542 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2220      	movs	r2, #32
 800451e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e027      	b.n	8004592 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004542:	88fb      	ldrh	r3, [r7, #6]
 8004544:	b2da      	uxtb	r2, r3
 8004546:	8979      	ldrh	r1, [r7, #10]
 8004548:	4b18      	ldr	r3, [pc, #96]	@ (80045ac <HAL_I2C_Mem_Read_DMA+0x1c8>)
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	2300      	movs	r3, #0
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f001 fcd8 	bl	8005f04 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800455c:	2101      	movs	r1, #1
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f001 fd02 	bl	8005f68 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	e014      	b.n	8004592 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457c:	f043 0210 	orr.w	r2, r3, #16
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8004590:	2302      	movs	r3, #2
  }
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	ffff0000 	.word	0xffff0000
 80045a0:	08004b29 	.word	0x08004b29
 80045a4:	08005a63 	.word	0x08005a63
 80045a8:	08005b15 	.word	0x08005b15
 80045ac:	80002000 	.word	0x80002000

080045b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	68f9      	ldr	r1, [r7, #12]
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	4798      	blx	r3
  }
}
 80045dc:	bf00      	nop
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00f      	beq.n	8004626 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004614:	f043 0201 	orr.w	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004624:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00f      	beq.n	8004650 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463e:	f043 0208 	orr.w	r2, r3, #8
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800464e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00f      	beq.n	800467a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004668:	f043 0202 	orr.w	r2, r3, #2
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004678:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 030b 	and.w	r3, r3, #11
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800468a:	68f9      	ldr	r1, [r7, #12]
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f001 f8ad 	bl	80057ec <I2C_ITError>
  }
}
 8004692:	bf00      	nop
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	460b      	mov	r3, r1
 80046f4:	70fb      	strb	r3, [r7, #3]
 80046f6:	4613      	mov	r3, r2
 80046f8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b086      	sub	sp, #24
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004752:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <I2C_Slave_ISR_IT+0x24>
 8004762:	2302      	movs	r3, #2
 8004764:	e0e2      	b.n	800492c <I2C_Slave_ISR_IT+0x1ea>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b00      	cmp	r3, #0
 8004776:	d009      	beq.n	800478c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800477e:	2b00      	cmp	r3, #0
 8004780:	d004      	beq.n	800478c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004782:	6939      	ldr	r1, [r7, #16]
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 fe79 	bl	800547c <I2C_ITSlaveCplt>
 800478a:	e0ca      	b.n	8004922 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f003 0310 	and.w	r3, r3, #16
 8004792:	2b00      	cmp	r3, #0
 8004794:	d04b      	beq.n	800482e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800479c:	2b00      	cmp	r3, #0
 800479e:	d046      	beq.n	800482e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d128      	bne.n	80047fc <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b28      	cmp	r3, #40	@ 0x28
 80047b4:	d108      	bne.n	80047c8 <I2C_Slave_ISR_IT+0x86>
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047bc:	d104      	bne.n	80047c8 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80047be:	6939      	ldr	r1, [r7, #16]
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 ffbf 	bl	8005744 <I2C_ITListenCplt>
 80047c6:	e031      	b.n	800482c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b29      	cmp	r3, #41	@ 0x29
 80047d2:	d10e      	bne.n	80047f2 <I2C_Slave_ISR_IT+0xb0>
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047da:	d00a      	beq.n	80047f2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2210      	movs	r2, #16
 80047e2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f001 f918 	bl	8005a1a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fd21 	bl	8005232 <I2C_ITSlaveSeqCplt>
 80047f0:	e01c      	b.n	800482c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2210      	movs	r2, #16
 80047f8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80047fa:	e08f      	b.n	800491c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2210      	movs	r2, #16
 8004802:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004808:	f043 0204 	orr.w	r2, r3, #4
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <I2C_Slave_ISR_IT+0xdc>
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800481c:	d17e      	bne.n	800491c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004822:	4619      	mov	r1, r3
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 ffe1 	bl	80057ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800482a:	e077      	b.n	800491c <I2C_Slave_ISR_IT+0x1da>
 800482c:	e076      	b.n	800491c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d02f      	beq.n	8004898 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800483e:	2b00      	cmp	r3, #0
 8004840:	d02a      	beq.n	8004898 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004846:	b29b      	uxth	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d018      	beq.n	800487e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d14b      	bne.n	8004920 <I2C_Slave_ISR_IT+0x1de>
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800488e:	d047      	beq.n	8004920 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 fcce 	bl	8005232 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004896:	e043      	b.n	8004920 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d004      	beq.n	80048b6 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80048ac:	6939      	ldr	r1, [r7, #16]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 fbfe 	bl	80050b0 <I2C_ITAddrCplt>
 80048b4:	e035      	b.n	8004922 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d030      	beq.n	8004922 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d02b      	beq.n	8004922 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d018      	beq.n	8004906 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d8:	781a      	ldrb	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004904:	e00d      	b.n	8004922 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800490c:	d002      	beq.n	8004914 <I2C_Slave_ISR_IT+0x1d2>
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d106      	bne.n	8004922 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 fc8c 	bl	8005232 <I2C_ITSlaveSeqCplt>
 800491a:	e002      	b.n	8004922 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800491c:	bf00      	nop
 800491e:	e000      	b.n	8004922 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8004920:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <I2C_Master_ISR_DMA+0x1a>
 800494a:	2302      	movs	r3, #2
 800494c:	e0e7      	b.n	8004b1e <I2C_Master_ISR_DMA+0x1ea>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f003 0310 	and.w	r3, r3, #16
 800495c:	2b00      	cmp	r3, #0
 800495e:	d016      	beq.n	800498e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004966:	2b00      	cmp	r3, #0
 8004968:	d011      	beq.n	800498e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2210      	movs	r2, #16
 8004970:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004976:	f043 0204 	orr.w	r2, r3, #4
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800497e:	2120      	movs	r1, #32
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f001 faf1 	bl	8005f68 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f001 f847 	bl	8005a1a <I2C_Flush_TXDR>
 800498c:	e0c2      	b.n	8004b14 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004994:	2b00      	cmp	r3, #0
 8004996:	d07f      	beq.n	8004a98 <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d07a      	beq.n	8004a98 <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049b0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d05c      	beq.n	8004a76 <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049c8:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2bff      	cmp	r3, #255	@ 0xff
 80049d2:	d914      	bls.n	80049fe <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	0c1b      	lsrs	r3, r3, #16
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d103      	bne.n	80049f0 <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2201      	movs	r2, #1
 80049ec:	851a      	strh	r2, [r3, #40]	@ 0x28
 80049ee:	e002      	b.n	80049f6 <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	22ff      	movs	r2, #255	@ 0xff
 80049f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 80049f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	e010      	b.n	8004a20 <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a10:	d003      	beq.n	8004a1a <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	e002      	b.n	8004a20 <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004a1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a1e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	8a79      	ldrh	r1, [r7, #18]
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f001 fa68 	bl	8005f04 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b22      	cmp	r3, #34	@ 0x22
 8004a50:	d108      	bne.n	8004a64 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a60:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004a62:	e057      	b.n	8004b14 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a72:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004a74:	e04e      	b.n	8004b14 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a84:	d003      	beq.n	8004a8e <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fb96 	bl	80051b8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004a8c:	e042      	b.n	8004b14 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004a8e:	2140      	movs	r1, #64	@ 0x40
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 feab 	bl	80057ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004a96:	e03d      	b.n	8004b14 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d028      	beq.n	8004af4 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d023      	beq.n	8004af4 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d119      	bne.n	8004aea <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ac4:	d025      	beq.n	8004b12 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ace:	d108      	bne.n	8004ae2 <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ade:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004ae0:	e017      	b.n	8004b12 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 fb68 	bl	80051b8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004ae8:	e013      	b.n	8004b12 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004aea:	2140      	movs	r1, #64	@ 0x40
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 fe7d 	bl	80057ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004af2:	e00e      	b.n	8004b12 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 fbee 	bl	80052ec <I2C_ITMasterCplt>
 8004b10:	e000      	b.n	8004b14 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8004b12:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004b34:	4b90      	ldr	r3, [pc, #576]	@ (8004d78 <I2C_Mem_ISR_DMA+0x250>)
 8004b36:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <I2C_Mem_ISR_DMA+0x1e>
 8004b42:	2302      	movs	r3, #2
 8004b44:	e12f      	b.n	8004da6 <I2C_Mem_ISR_DMA+0x27e>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d016      	beq.n	8004b86 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d011      	beq.n	8004b86 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2210      	movs	r2, #16
 8004b68:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6e:	f043 0204 	orr.w	r2, r3, #4
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004b76:	2120      	movs	r1, #32
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f001 f9f5 	bl	8005f68 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 ff4b 	bl	8005a1a <I2C_Flush_TXDR>
 8004b84:	e10a      	b.n	8004d9c <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00e      	beq.n	8004bae <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d009      	beq.n	8004bae <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ba2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004baa:	651a      	str	r2, [r3, #80]	@ 0x50
 8004bac:	e0f6      	b.n	8004d9c <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d06d      	beq.n	8004c94 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d068      	beq.n	8004c94 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f001 fa53 	bl	8006070 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004bca:	2110      	movs	r1, #16
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f001 f9cb 	bl	8005f68 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d056      	beq.n	8004c8a <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2bff      	cmp	r3, #255	@ 0xff
 8004be4:	d91e      	bls.n	8004c24 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	0c1b      	lsrs	r3, r3, #16
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d103      	bne.n	8004c02 <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004c00:	e002      	b.n	8004c08 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	22ff      	movs	r2, #255	@ 0xff
 8004c06:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c0c:	b299      	uxth	r1, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	2300      	movs	r3, #0
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f001 f971 	bl	8005f04 <I2C_TransferConfig>
 8004c22:	e011      	b.n	8004c48 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c32:	b299      	uxth	r1, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f001 f95e 	bl	8005f04 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b22      	cmp	r3, #34	@ 0x22
 8004c64:	d108      	bne.n	8004c78 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c74:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004c76:	e091      	b.n	8004d9c <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c86:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004c88:	e088      	b.n	8004d9c <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004c8a:	2140      	movs	r1, #64	@ 0x40
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 fdad 	bl	80057ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004c92:	e083      	b.n	8004d9c <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d070      	beq.n	8004d80 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d06b      	beq.n	8004d80 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004ca8:	2101      	movs	r1, #1
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f001 f9e0 	bl	8006070 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004cb0:	2110      	movs	r1, #16
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f001 f958 	bl	8005f68 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b22      	cmp	r3, #34	@ 0x22
 8004cc2:	d101      	bne.n	8004cc8 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8004cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8004d7c <I2C_Mem_ISR_DMA+0x254>)
 8004cc6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2bff      	cmp	r3, #255	@ 0xff
 8004cd0:	d91e      	bls.n	8004d10 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	0c1b      	lsrs	r3, r3, #16
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d103      	bne.n	8004cee <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004cec:	e002      	b.n	8004cf4 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	22ff      	movs	r2, #255	@ 0xff
 8004cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cf8:	b299      	uxth	r1, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f001 f8fb 	bl	8005f04 <I2C_TransferConfig>
 8004d0e:	e011      	b.n	8004d34 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d1e:	b299      	uxth	r1, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f001 f8e8 	bl	8005f04 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b22      	cmp	r3, #34	@ 0x22
 8004d50:	d108      	bne.n	8004d64 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d60:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d62:	e01b      	b.n	8004d9c <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d72:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d74:	e012      	b.n	8004d9c <I2C_Mem_ISR_DMA+0x274>
 8004d76:	bf00      	nop
 8004d78:	80002000 	.word	0x80002000
 8004d7c:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d008      	beq.n	8004d9c <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 faa8 	bl	80052ec <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop

08004db0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <I2C_Slave_ISR_DMA+0x24>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e0c0      	b.n	8004f56 <I2C_Slave_ISR_DMA+0x1a6>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d009      	beq.n	8004dfa <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d004      	beq.n	8004dfa <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 fb42 	bl	800547c <I2C_ITSlaveCplt>
 8004df8:	e0a8      	b.n	8004f4c <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 8095 	beq.w	8004f30 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 808f 	beq.w	8004f30 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d104      	bne.n	8004e26 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d07d      	beq.n	8004f22 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00c      	beq.n	8004e48 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8004e44:	2301      	movs	r3, #1
 8004e46:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00c      	beq.n	8004e6a <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d007      	beq.n	8004e6a <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8004e66:	2301      	movs	r3, #1
 8004e68:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d128      	bne.n	8004ec2 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b28      	cmp	r3, #40	@ 0x28
 8004e7a:	d108      	bne.n	8004e8e <I2C_Slave_ISR_DMA+0xde>
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e82:	d104      	bne.n	8004e8e <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004e84:	68b9      	ldr	r1, [r7, #8]
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 fc5c 	bl	8005744 <I2C_ITListenCplt>
 8004e8c:	e048      	b.n	8004f20 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b29      	cmp	r3, #41	@ 0x29
 8004e98:	d10e      	bne.n	8004eb8 <I2C_Slave_ISR_DMA+0x108>
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ea0:	d00a      	beq.n	8004eb8 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2210      	movs	r2, #16
 8004ea8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f000 fdb5 	bl	8005a1a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f9be 	bl	8005232 <I2C_ITSlaveSeqCplt>
 8004eb6:	e033      	b.n	8004f20 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2210      	movs	r2, #16
 8004ebe:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004ec0:	e034      	b.n	8004f2c <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2210      	movs	r2, #16
 8004ec8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ece:	f043 0204 	orr.w	r2, r3, #4
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004edc:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <I2C_Slave_ISR_DMA+0x13c>
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004eea:	d11f      	bne.n	8004f2c <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004eec:	7dfb      	ldrb	r3, [r7, #23]
 8004eee:	2b21      	cmp	r3, #33	@ 0x21
 8004ef0:	d002      	beq.n	8004ef8 <I2C_Slave_ISR_DMA+0x148>
 8004ef2:	7dfb      	ldrb	r3, [r7, #23]
 8004ef4:	2b29      	cmp	r3, #41	@ 0x29
 8004ef6:	d103      	bne.n	8004f00 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2221      	movs	r2, #33	@ 0x21
 8004efc:	631a      	str	r2, [r3, #48]	@ 0x30
 8004efe:	e008      	b.n	8004f12 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
 8004f02:	2b22      	cmp	r3, #34	@ 0x22
 8004f04:	d002      	beq.n	8004f0c <I2C_Slave_ISR_DMA+0x15c>
 8004f06:	7dfb      	ldrb	r3, [r7, #23]
 8004f08:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f0a:	d102      	bne.n	8004f12 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2222      	movs	r2, #34	@ 0x22
 8004f10:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f16:	4619      	mov	r1, r3
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 fc67 	bl	80057ec <I2C_ITError>
      if (treatdmanack == 1U)
 8004f1e:	e005      	b.n	8004f2c <I2C_Slave_ISR_DMA+0x17c>
 8004f20:	e004      	b.n	8004f2c <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2210      	movs	r2, #16
 8004f28:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004f2a:	e00f      	b.n	8004f4c <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8004f2c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004f2e:	e00d      	b.n	8004f4c <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d008      	beq.n	8004f4c <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 f8b2 	bl	80050b0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3720      	adds	r7, #32
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	4608      	mov	r0, r1
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	4603      	mov	r3, r0
 8004f70:	817b      	strh	r3, [r7, #10]
 8004f72:	460b      	mov	r3, r1
 8004f74:	813b      	strh	r3, [r7, #8]
 8004f76:	4613      	mov	r3, r2
 8004f78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004f7a:	88fb      	ldrh	r3, [r7, #6]
 8004f7c:	b2da      	uxtb	r2, r3
 8004f7e:	8979      	ldrh	r1, [r7, #10]
 8004f80:	4b20      	ldr	r3, [pc, #128]	@ (8005004 <I2C_RequestMemoryWrite+0xa4>)
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 ffbb 	bl	8005f04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f8e:	69fa      	ldr	r2, [r7, #28]
 8004f90:	69b9      	ldr	r1, [r7, #24]
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fe4c 	bl	8005c30 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e02c      	b.n	8004ffc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fa2:	88fb      	ldrh	r3, [r7, #6]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d105      	bne.n	8004fb4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fa8:	893b      	ldrh	r3, [r7, #8]
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fb2:	e015      	b.n	8004fe0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fb4:	893b      	ldrh	r3, [r7, #8]
 8004fb6:	0a1b      	lsrs	r3, r3, #8
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	69b9      	ldr	r1, [r7, #24]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 fe32 	bl	8005c30 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e012      	b.n	8004ffc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fd6:	893b      	ldrh	r3, [r7, #8]
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	2180      	movs	r1, #128	@ 0x80
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 fdc7 	bl	8005b7e <I2C_WaitOnFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	80002000 	.word	0x80002000

08005008 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af02      	add	r7, sp, #8
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	4608      	mov	r0, r1
 8005012:	4611      	mov	r1, r2
 8005014:	461a      	mov	r2, r3
 8005016:	4603      	mov	r3, r0
 8005018:	817b      	strh	r3, [r7, #10]
 800501a:	460b      	mov	r3, r1
 800501c:	813b      	strh	r3, [r7, #8]
 800501e:	4613      	mov	r3, r2
 8005020:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	b2da      	uxtb	r2, r3
 8005026:	8979      	ldrh	r1, [r7, #10]
 8005028:	4b20      	ldr	r3, [pc, #128]	@ (80050ac <I2C_RequestMemoryRead+0xa4>)
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	2300      	movs	r3, #0
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 ff68 	bl	8005f04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005034:	69fa      	ldr	r2, [r7, #28]
 8005036:	69b9      	ldr	r1, [r7, #24]
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 fdf9 	bl	8005c30 <I2C_WaitOnTXISFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e02c      	b.n	80050a2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005048:	88fb      	ldrh	r3, [r7, #6]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d105      	bne.n	800505a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800504e:	893b      	ldrh	r3, [r7, #8]
 8005050:	b2da      	uxtb	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	629a      	str	r2, [r3, #40]	@ 0x28
 8005058:	e015      	b.n	8005086 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800505a:	893b      	ldrh	r3, [r7, #8]
 800505c:	0a1b      	lsrs	r3, r3, #8
 800505e:	b29b      	uxth	r3, r3
 8005060:	b2da      	uxtb	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005068:	69fa      	ldr	r2, [r7, #28]
 800506a:	69b9      	ldr	r1, [r7, #24]
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fddf 	bl	8005c30 <I2C_WaitOnTXISFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e012      	b.n	80050a2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800507c:	893b      	ldrh	r3, [r7, #8]
 800507e:	b2da      	uxtb	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2200      	movs	r2, #0
 800508e:	2140      	movs	r1, #64	@ 0x40
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 fd74 	bl	8005b7e <I2C_WaitOnFlagUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	80002000 	.word	0x80002000

080050b0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80050c6:	2b28      	cmp	r3, #40	@ 0x28
 80050c8:	d16a      	bne.n	80051a0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	0c1b      	lsrs	r3, r3, #16
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	0c1b      	lsrs	r3, r3, #16
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80050e8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050f6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005104:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d138      	bne.n	8005180 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800510e:	897b      	ldrh	r3, [r7, #10]
 8005110:	09db      	lsrs	r3, r3, #7
 8005112:	b29a      	uxth	r2, r3
 8005114:	89bb      	ldrh	r3, [r7, #12]
 8005116:	4053      	eors	r3, r2
 8005118:	b29b      	uxth	r3, r3
 800511a:	f003 0306 	and.w	r3, r3, #6
 800511e:	2b00      	cmp	r3, #0
 8005120:	d11c      	bne.n	800515c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005122:	897b      	ldrh	r3, [r7, #10]
 8005124:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005134:	2b02      	cmp	r3, #2
 8005136:	d13b      	bne.n	80051b0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2208      	movs	r2, #8
 8005144:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800514e:	89ba      	ldrh	r2, [r7, #12]
 8005150:	7bfb      	ldrb	r3, [r7, #15]
 8005152:	4619      	mov	r1, r3
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7ff fac8 	bl	80046ea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800515a:	e029      	b.n	80051b0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800515c:	893b      	ldrh	r3, [r7, #8]
 800515e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005160:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 ff83 	bl	8006070 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005172:	89ba      	ldrh	r2, [r7, #12]
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	4619      	mov	r1, r3
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7ff fab6 	bl	80046ea <HAL_I2C_AddrCallback>
}
 800517e:	e017      	b.n	80051b0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005180:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 ff73 	bl	8006070 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005192:	89ba      	ldrh	r2, [r7, #12]
 8005194:	7bfb      	ldrb	r3, [r7, #15]
 8005196:	4619      	mov	r1, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7ff faa6 	bl	80046ea <HAL_I2C_AddrCallback>
}
 800519e:	e007      	b.n	80051b0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2208      	movs	r2, #8
 80051a6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80051b0:	bf00      	nop
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b21      	cmp	r3, #33	@ 0x21
 80051d2:	d115      	bne.n	8005200 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2211      	movs	r2, #17
 80051e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80051e8:	2101      	movs	r1, #1
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 ff40 	bl	8006070 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff fa4e 	bl	800469a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051fe:	e014      	b.n	800522a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2212      	movs	r2, #18
 800520c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005214:	2102      	movs	r1, #2
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 ff2a 	bl	8006070 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7ff fa42 	bl	80046ae <HAL_I2C_MasterRxCpltCallback>
}
 800522a:	bf00      	nop
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d008      	beq.n	8005266 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	e00c      	b.n	8005280 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800527e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b29      	cmp	r3, #41	@ 0x29
 800528a:	d112      	bne.n	80052b2 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2228      	movs	r2, #40	@ 0x28
 8005290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2221      	movs	r2, #33	@ 0x21
 8005298:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800529a:	2101      	movs	r1, #1
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fee7 	bl	8006070 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff fa09 	bl	80046c2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80052b0:	e017      	b.n	80052e2 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80052bc:	d111      	bne.n	80052e2 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2228      	movs	r2, #40	@ 0x28
 80052c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2222      	movs	r2, #34	@ 0x22
 80052ca:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80052cc:	2102      	movs	r1, #2
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fece 	bl	8006070 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7ff f9fa 	bl	80046d6 <HAL_I2C_SlaveRxCpltCallback>
}
 80052e2:	bf00      	nop
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2220      	movs	r2, #32
 8005300:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b21      	cmp	r3, #33	@ 0x21
 800530c:	d107      	bne.n	800531e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800530e:	2101      	movs	r1, #1
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fead 	bl	8006070 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2211      	movs	r2, #17
 800531a:	631a      	str	r2, [r3, #48]	@ 0x30
 800531c:	e00c      	b.n	8005338 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b22      	cmp	r3, #34	@ 0x22
 8005328:	d106      	bne.n	8005338 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800532a:	2102      	movs	r1, #2
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fe9f 	bl	8006070 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2212      	movs	r2, #18
 8005336:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6859      	ldr	r1, [r3, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4b4c      	ldr	r3, [pc, #304]	@ (8005474 <I2C_ITMasterCplt+0x188>)
 8005344:	400b      	ands	r3, r1
 8005346:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a49      	ldr	r2, [pc, #292]	@ (8005478 <I2C_ITMasterCplt+0x18c>)
 8005352:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f003 0310 	and.w	r3, r3, #16
 800535a:	2b00      	cmp	r3, #0
 800535c:	d009      	beq.n	8005372 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2210      	movs	r2, #16
 8005364:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536a:	f043 0204 	orr.w	r2, r3, #4
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b60      	cmp	r3, #96	@ 0x60
 800537c:	d10a      	bne.n	8005394 <I2C_ITMasterCplt+0xa8>
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538e:	b2db      	uxtb	r3, r3
 8005390:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005392:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 fb40 	bl	8005a1a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b60      	cmp	r3, #96	@ 0x60
 80053aa:	d002      	beq.n	80053b2 <I2C_ITMasterCplt+0xc6>
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d006      	beq.n	80053c0 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b6:	4619      	mov	r1, r3
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fa17 	bl	80057ec <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80053be:	e054      	b.n	800546a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b21      	cmp	r3, #33	@ 0x21
 80053ca:	d124      	bne.n	8005416 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b40      	cmp	r3, #64	@ 0x40
 80053e4:	d10b      	bne.n	80053fe <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7ff f98f 	bl	800471a <HAL_I2C_MemTxCpltCallback>
}
 80053fc:	e035      	b.n	800546a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff f943 	bl	800469a <HAL_I2C_MasterTxCpltCallback>
}
 8005414:	e029      	b.n	800546a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b22      	cmp	r3, #34	@ 0x22
 8005420:	d123      	bne.n	800546a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2220      	movs	r2, #32
 8005426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b40      	cmp	r3, #64	@ 0x40
 800543a:	d10b      	bne.n	8005454 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7fc fd71 	bl	8001f34 <HAL_I2C_MemRxCpltCallback>
}
 8005452:	e00a      	b.n	800546a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7ff f922 	bl	80046ae <HAL_I2C_MasterRxCpltCallback>
}
 800546a:	bf00      	nop
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	fe00e800 	.word	0xfe00e800
 8005478:	ffff0000 	.word	0xffff0000

0800547c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005496:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800549e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2220      	movs	r2, #32
 80054a6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054a8:	7afb      	ldrb	r3, [r7, #11]
 80054aa:	2b21      	cmp	r3, #33	@ 0x21
 80054ac:	d002      	beq.n	80054b4 <I2C_ITSlaveCplt+0x38>
 80054ae:	7afb      	ldrb	r3, [r7, #11]
 80054b0:	2b29      	cmp	r3, #41	@ 0x29
 80054b2:	d108      	bne.n	80054c6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80054b4:	f248 0101 	movw	r1, #32769	@ 0x8001
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fdd9 	bl	8006070 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2221      	movs	r2, #33	@ 0x21
 80054c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80054c4:	e019      	b.n	80054fa <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054c6:	7afb      	ldrb	r3, [r7, #11]
 80054c8:	2b22      	cmp	r3, #34	@ 0x22
 80054ca:	d002      	beq.n	80054d2 <I2C_ITSlaveCplt+0x56>
 80054cc:	7afb      	ldrb	r3, [r7, #11]
 80054ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80054d0:	d108      	bne.n	80054e4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80054d2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fdca 	bl	8006070 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2222      	movs	r2, #34	@ 0x22
 80054e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80054e2:	e00a      	b.n	80054fa <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80054e4:	7afb      	ldrb	r3, [r7, #11]
 80054e6:	2b28      	cmp	r3, #40	@ 0x28
 80054e8:	d107      	bne.n	80054fa <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80054ea:	f248 0103 	movw	r1, #32771	@ 0x8003
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fdbe 	bl	8006070 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005508:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6859      	ldr	r1, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	4b89      	ldr	r3, [pc, #548]	@ (800573c <I2C_ITSlaveCplt+0x2c0>)
 8005516:	400b      	ands	r3, r1
 8005518:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fa7d 	bl	8005a1a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d013      	beq.n	8005552 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005538:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800553e:	2b00      	cmp	r3, #0
 8005540:	d01f      	beq.n	8005582 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	b29a      	uxth	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005550:	e017      	b.n	8005582 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d012      	beq.n	8005582 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800556a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005570:	2b00      	cmp	r3, #0
 8005572:	d006      	beq.n	8005582 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	b29a      	uxth	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d020      	beq.n	80055ce <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f023 0304 	bic.w	r3, r3, #4
 8005592:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a6:	1c5a      	adds	r2, r3, #1
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00c      	beq.n	80055ce <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055dc:	f043 0204 	orr.w	r2, r3, #4
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f003 0310 	and.w	r3, r3, #16
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d049      	beq.n	8005682 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d044      	beq.n	8005682 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d128      	bne.n	8005654 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b28      	cmp	r3, #40	@ 0x28
 800560c:	d108      	bne.n	8005620 <I2C_ITSlaveCplt+0x1a4>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005614:	d104      	bne.n	8005620 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005616:	6979      	ldr	r1, [r7, #20]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f893 	bl	8005744 <I2C_ITListenCplt>
 800561e:	e030      	b.n	8005682 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b29      	cmp	r3, #41	@ 0x29
 800562a:	d10e      	bne.n	800564a <I2C_ITSlaveCplt+0x1ce>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005632:	d00a      	beq.n	800564a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2210      	movs	r2, #16
 800563a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f9ec 	bl	8005a1a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff fdf5 	bl	8005232 <I2C_ITSlaveSeqCplt>
 8005648:	e01b      	b.n	8005682 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2210      	movs	r2, #16
 8005650:	61da      	str	r2, [r3, #28]
 8005652:	e016      	b.n	8005682 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2210      	movs	r2, #16
 800565a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005660:	f043 0204 	orr.w	r2, r3, #4
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <I2C_ITSlaveCplt+0x1fa>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005674:	d105      	bne.n	8005682 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567a:	4619      	mov	r1, r3
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f8b5 	bl	80057ec <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005694:	2b00      	cmp	r3, #0
 8005696:	d010      	beq.n	80056ba <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569c:	4619      	mov	r1, r3
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f8a4 	bl	80057ec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b28      	cmp	r3, #40	@ 0x28
 80056ae:	d141      	bne.n	8005734 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80056b0:	6979      	ldr	r1, [r7, #20]
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f846 	bl	8005744 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056b8:	e03c      	b.n	8005734 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056be:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80056c2:	d014      	beq.n	80056ee <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff fdb4 	bl	8005232 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a1c      	ldr	r2, [pc, #112]	@ (8005740 <I2C_ITSlaveCplt+0x2c4>)
 80056ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff f80d 	bl	8004706 <HAL_I2C_ListenCpltCallback>
}
 80056ec:	e022      	b.n	8005734 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b22      	cmp	r3, #34	@ 0x22
 80056f8:	d10e      	bne.n	8005718 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7fe ffe0 	bl	80046d6 <HAL_I2C_SlaveRxCpltCallback>
}
 8005716:	e00d      	b.n	8005734 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fe ffc7 	bl	80046c2 <HAL_I2C_SlaveTxCpltCallback>
}
 8005734:	bf00      	nop
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	fe00e800 	.word	0xfe00e800
 8005740:	ffff0000 	.word	0xffff0000

08005744 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a25      	ldr	r2, [pc, #148]	@ (80057e8 <I2C_ITListenCplt+0xa4>)
 8005752:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b00      	cmp	r3, #0
 8005778:	d022      	beq.n	80057c0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005796:	2b00      	cmp	r3, #0
 8005798:	d012      	beq.n	80057c0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b8:	f043 0204 	orr.w	r2, r3, #4
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80057c0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 fc53 	bl	8006070 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2210      	movs	r2, #16
 80057d0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fe ff93 	bl	8004706 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80057e0:	bf00      	nop
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	ffff0000 	.word	0xffff0000

080057ec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057fc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a6d      	ldr	r2, [pc, #436]	@ (80059c0 <I2C_ITError+0x1d4>)
 800580a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	431a      	orrs	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	2b28      	cmp	r3, #40	@ 0x28
 8005822:	d005      	beq.n	8005830 <I2C_ITError+0x44>
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b29      	cmp	r3, #41	@ 0x29
 8005828:	d002      	beq.n	8005830 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	2b2a      	cmp	r3, #42	@ 0x2a
 800582e:	d10b      	bne.n	8005848 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005830:	2103      	movs	r1, #3
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fc1c 	bl	8006070 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2228      	movs	r2, #40	@ 0x28
 800583c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a60      	ldr	r2, [pc, #384]	@ (80059c4 <I2C_ITError+0x1d8>)
 8005844:	635a      	str	r2, [r3, #52]	@ 0x34
 8005846:	e030      	b.n	80058aa <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005848:	f248 0103 	movw	r1, #32771	@ 0x8003
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fc0f 	bl	8006070 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f8e1 	bl	8005a1a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b60      	cmp	r3, #96	@ 0x60
 8005862:	d01f      	beq.n	80058a4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b20      	cmp	r3, #32
 8005878:	d114      	bne.n	80058a4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	f003 0310 	and.w	r3, r3, #16
 8005884:	2b10      	cmp	r3, #16
 8005886:	d109      	bne.n	800589c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2210      	movs	r2, #16
 800588e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005894:	f043 0204 	orr.w	r2, r3, #4
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2220      	movs	r2, #32
 80058a2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ae:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d039      	beq.n	800592c <I2C_ITError+0x140>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b11      	cmp	r3, #17
 80058bc:	d002      	beq.n	80058c4 <I2C_ITError+0xd8>
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b21      	cmp	r3, #33	@ 0x21
 80058c2:	d133      	bne.n	800592c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058d2:	d107      	bne.n	80058e4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80058e2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fe f899 	bl	8003a20 <HAL_DMA_GetState>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d017      	beq.n	8005924 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f8:	4a33      	ldr	r2, [pc, #204]	@ (80059c8 <I2C_ITError+0x1dc>)
 80058fa:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005908:	4618      	mov	r0, r3
 800590a:	f7fd ff99 	bl	8003840 <HAL_DMA_Abort_IT>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d04d      	beq.n	80059b0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800591e:	4610      	mov	r0, r2
 8005920:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005922:	e045      	b.n	80059b0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f851 	bl	80059cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800592a:	e041      	b.n	80059b0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005930:	2b00      	cmp	r3, #0
 8005932:	d039      	beq.n	80059a8 <I2C_ITError+0x1bc>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b12      	cmp	r3, #18
 8005938:	d002      	beq.n	8005940 <I2C_ITError+0x154>
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	2b22      	cmp	r3, #34	@ 0x22
 800593e:	d133      	bne.n	80059a8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800594a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800594e:	d107      	bne.n	8005960 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800595e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005964:	4618      	mov	r0, r3
 8005966:	f7fe f85b 	bl	8003a20 <HAL_DMA_GetState>
 800596a:	4603      	mov	r3, r0
 800596c:	2b01      	cmp	r3, #1
 800596e:	d017      	beq.n	80059a0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005974:	4a14      	ldr	r2, [pc, #80]	@ (80059c8 <I2C_ITError+0x1dc>)
 8005976:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005984:	4618      	mov	r0, r3
 8005986:	f7fd ff5b 	bl	8003840 <HAL_DMA_Abort_IT>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d011      	beq.n	80059b4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800599a:	4610      	mov	r0, r2
 800599c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800599e:	e009      	b.n	80059b4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f813 	bl	80059cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059a6:	e005      	b.n	80059b4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f80f 	bl	80059cc <I2C_TreatErrorCallback>
  }
}
 80059ae:	e002      	b.n	80059b6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80059b0:	bf00      	nop
 80059b2:	e000      	b.n	80059b6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059b4:	bf00      	nop
}
 80059b6:	bf00      	nop
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	ffff0000 	.word	0xffff0000
 80059c4:	08004743 	.word	0x08004743
 80059c8:	08005b43 	.word	0x08005b43

080059cc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b60      	cmp	r3, #96	@ 0x60
 80059de:	d10e      	bne.n	80059fe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fe fe99 	bl	800472e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80059fc:	e009      	b.n	8005a12 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7fc faa1 	bl	8001f54 <HAL_I2C_ErrorCallback>
}
 8005a12:	bf00      	nop
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d103      	bne.n	8005a38 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2200      	movs	r2, #0
 8005a36:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d007      	beq.n	8005a56 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	699a      	ldr	r2, [r3, #24]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0201 	orr.w	r2, r2, #1
 8005a54:	619a      	str	r2, [r3, #24]
  }
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b084      	sub	sp, #16
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a7e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005a8a:	2120      	movs	r1, #32
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 fa6b 	bl	8005f68 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005a92:	e03b      	b.n	8005b0c <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005a9c:	441a      	add	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2bff      	cmp	r3, #255	@ 0xff
 8005aaa:	d911      	bls.n	8005ad0 <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	0c1b      	lsrs	r3, r3, #16
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d103      	bne.n	8005ac8 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005ac6:	e008      	b.n	8005ada <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	22ff      	movs	r2, #255	@ 0xff
 8005acc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005ace:	e004      	b.n	8005ada <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3324      	adds	r3, #36	@ 0x24
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aea:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005af0:	f7fd fe46 	bl	8003780 <HAL_DMA_Start_IT>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d004      	beq.n	8005b04 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005afa:	2110      	movs	r1, #16
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f7ff fe75 	bl	80057ec <I2C_ITError>
}
 8005b02:	e003      	b.n	8005b0c <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005b04:	2140      	movs	r1, #64	@ 0x40
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 fa2e 	bl	8005f68 <I2C_Enable_IRQ>
}
 8005b0c:	bf00      	nop
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b20:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b30:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005b32:	2110      	movs	r1, #16
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f7ff fe59 	bl	80057ec <I2C_ITError>
}
 8005b3a:	bf00      	nop
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b084      	sub	sp, #16
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f7ff ff2b 	bl	80059cc <I2C_TreatErrorCallback>
}
 8005b76:	bf00      	nop
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b084      	sub	sp, #16
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	603b      	str	r3, [r7, #0]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b8e:	e03b      	b.n	8005c08 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	6839      	ldr	r1, [r7, #0]
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 f8d5 	bl	8005d44 <I2C_IsErrorOccurred>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e041      	b.n	8005c28 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005baa:	d02d      	beq.n	8005c08 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bac:	f7fd fb9c 	bl	80032e8 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d302      	bcc.n	8005bc2 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d122      	bne.n	8005c08 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	699a      	ldr	r2, [r3, #24]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	bf0c      	ite	eq
 8005bd2:	2301      	moveq	r3, #1
 8005bd4:	2300      	movne	r3, #0
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d113      	bne.n	8005c08 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be4:	f043 0220 	orr.w	r2, r3, #32
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e00f      	b.n	8005c28 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699a      	ldr	r2, [r3, #24]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	4013      	ands	r3, r2
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	bf0c      	ite	eq
 8005c18:	2301      	moveq	r3, #1
 8005c1a:	2300      	movne	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	461a      	mov	r2, r3
 8005c20:	79fb      	ldrb	r3, [r7, #7]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d0b4      	beq.n	8005b90 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c3c:	e033      	b.n	8005ca6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 f87e 	bl	8005d44 <I2C_IsErrorOccurred>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e031      	b.n	8005cb6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c58:	d025      	beq.n	8005ca6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c5a:	f7fd fb45 	bl	80032e8 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d302      	bcc.n	8005c70 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d11a      	bne.n	8005ca6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d013      	beq.n	8005ca6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c82:	f043 0220 	orr.w	r2, r3, #32
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e007      	b.n	8005cb6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d1c4      	bne.n	8005c3e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	60b9      	str	r1, [r7, #8]
 8005cc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cca:	e02f      	b.n	8005d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 f837 	bl	8005d44 <I2C_IsErrorOccurred>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e02d      	b.n	8005d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce0:	f7fd fb02 	bl	80032e8 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d302      	bcc.n	8005cf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d11a      	bne.n	8005d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b20      	cmp	r3, #32
 8005d02:	d013      	beq.n	8005d2c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d08:	f043 0220 	orr.w	r2, r3, #32
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e007      	b.n	8005d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b20      	cmp	r3, #32
 8005d38:	d1c8      	bne.n	8005ccc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08a      	sub	sp, #40	@ 0x28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	f003 0310 	and.w	r3, r3, #16
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d068      	beq.n	8005e42 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2210      	movs	r2, #16
 8005d76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d78:	e049      	b.n	8005e0e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d80:	d045      	beq.n	8005e0e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d82:	f7fd fab1 	bl	80032e8 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d302      	bcc.n	8005d98 <I2C_IsErrorOccurred+0x54>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d13a      	bne.n	8005e0e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005da2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005daa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005db6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dba:	d121      	bne.n	8005e00 <I2C_IsErrorOccurred+0xbc>
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dc2:	d01d      	beq.n	8005e00 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005dc4:	7cfb      	ldrb	r3, [r7, #19]
 8005dc6:	2b20      	cmp	r3, #32
 8005dc8:	d01a      	beq.n	8005e00 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dd8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005dda:	f7fd fa85 	bl	80032e8 <HAL_GetTick>
 8005dde:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005de0:	e00e      	b.n	8005e00 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005de2:	f7fd fa81 	bl	80032e8 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b19      	cmp	r3, #25
 8005dee:	d907      	bls.n	8005e00 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	f043 0320 	orr.w	r3, r3, #32
 8005df6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005dfe:	e006      	b.n	8005e0e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	f003 0320 	and.w	r3, r3, #32
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	d1e9      	bne.n	8005de2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	f003 0320 	and.w	r3, r3, #32
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d003      	beq.n	8005e24 <I2C_IsErrorOccurred+0xe0>
 8005e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0aa      	beq.n	8005d7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005e24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d103      	bne.n	8005e34 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2220      	movs	r2, #32
 8005e32:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	f043 0304 	orr.w	r3, r3, #4
 8005e3a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00b      	beq.n	8005e6c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	f043 0301 	orr.w	r3, r3, #1
 8005e5a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00b      	beq.n	8005e8e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	f043 0308 	orr.w	r3, r3, #8
 8005e7c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00b      	beq.n	8005eb0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	f043 0302 	orr.w	r3, r3, #2
 8005e9e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ea8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d01c      	beq.n	8005ef2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f7ff fdae 	bl	8005a1a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6859      	ldr	r1, [r3, #4]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8005f00 <I2C_IsErrorOccurred+0x1bc>)
 8005eca:	400b      	ands	r3, r1
 8005ecc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3728      	adds	r7, #40	@ 0x28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	fe00e800 	.word	0xfe00e800

08005f04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	607b      	str	r3, [r7, #4]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	817b      	strh	r3, [r7, #10]
 8005f12:	4613      	mov	r3, r2
 8005f14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f16:	897b      	ldrh	r3, [r7, #10]
 8005f18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f1c:	7a7b      	ldrb	r3, [r7, #9]
 8005f1e:	041b      	lsls	r3, r3, #16
 8005f20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	0d5b      	lsrs	r3, r3, #21
 8005f3e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005f42:	4b08      	ldr	r3, [pc, #32]	@ (8005f64 <I2C_TransferConfig+0x60>)
 8005f44:	430b      	orrs	r3, r1
 8005f46:	43db      	mvns	r3, r3
 8005f48:	ea02 0103 	and.w	r1, r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005f56:	bf00      	nop
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	03ff63ff 	.word	0x03ff63ff

08005f68 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f7c:	4a39      	ldr	r2, [pc, #228]	@ (8006064 <I2C_Enable_IRQ+0xfc>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d032      	beq.n	8005fe8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005f86:	4a38      	ldr	r2, [pc, #224]	@ (8006068 <I2C_Enable_IRQ+0x100>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d02d      	beq.n	8005fe8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005f90:	4a36      	ldr	r2, [pc, #216]	@ (800606c <I2C_Enable_IRQ+0x104>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d028      	beq.n	8005fe8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005f96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	da03      	bge.n	8005fa6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005fa4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005fa6:	887b      	ldrh	r3, [r7, #2]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d003      	beq.n	8005fb8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005fb6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005fb8:	887b      	ldrh	r3, [r7, #2]
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005fc8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005fca:	887b      	ldrh	r3, [r7, #2]
 8005fcc:	2b10      	cmp	r3, #16
 8005fce:	d103      	bne.n	8005fd8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005fd6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005fd8:	887b      	ldrh	r3, [r7, #2]
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	d133      	bne.n	8006046 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f043 0320 	orr.w	r3, r3, #32
 8005fe4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005fe6:	e02e      	b.n	8006046 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005fe8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	da03      	bge.n	8005ff8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005ff6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005ff8:	887b      	ldrh	r3, [r7, #2]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006008:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800600a:	887b      	ldrh	r3, [r7, #2]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800601a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800601c:	887b      	ldrh	r3, [r7, #2]
 800601e:	2b10      	cmp	r3, #16
 8006020:	d103      	bne.n	800602a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006028:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800602a:	887b      	ldrh	r3, [r7, #2]
 800602c:	2b20      	cmp	r3, #32
 800602e:	d103      	bne.n	8006038 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006036:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006038:	887b      	ldrh	r3, [r7, #2]
 800603a:	2b40      	cmp	r3, #64	@ 0x40
 800603c:	d103      	bne.n	8006046 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006044:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6819      	ldr	r1, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	430a      	orrs	r2, r1
 8006054:	601a      	str	r2, [r3, #0]
}
 8006056:	bf00      	nop
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	08004935 	.word	0x08004935
 8006068:	08004db1 	.word	0x08004db1
 800606c:	08004b29 	.word	0x08004b29

08006070 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006080:	887b      	ldrh	r3, [r7, #2]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00f      	beq.n	80060aa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006090:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006098:	b2db      	uxtb	r3, r3
 800609a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800609e:	2b28      	cmp	r3, #40	@ 0x28
 80060a0:	d003      	beq.n	80060aa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80060a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80060aa:	887b      	ldrh	r3, [r7, #2]
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00f      	beq.n	80060d4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80060ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80060c8:	2b28      	cmp	r3, #40	@ 0x28
 80060ca:	d003      	beq.n	80060d4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80060d2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80060d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	da03      	bge.n	80060e4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80060e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80060e4:	887b      	ldrh	r3, [r7, #2]
 80060e6:	2b10      	cmp	r3, #16
 80060e8:	d103      	bne.n	80060f2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80060f0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80060f2:	887b      	ldrh	r3, [r7, #2]
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	d103      	bne.n	8006100 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f043 0320 	orr.w	r3, r3, #32
 80060fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006100:	887b      	ldrh	r3, [r7, #2]
 8006102:	2b40      	cmp	r3, #64	@ 0x40
 8006104:	d103      	bne.n	800610e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800610c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6819      	ldr	r1, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	43da      	mvns	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	400a      	ands	r2, r1
 800611e:	601a      	str	r2, [r3, #0]
}
 8006120:	bf00      	nop
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b20      	cmp	r3, #32
 8006140:	d138      	bne.n	80061b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800614c:	2302      	movs	r3, #2
 800614e:	e032      	b.n	80061b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2224      	movs	r2, #36	@ 0x24
 800615c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0201 	bic.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800617e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6819      	ldr	r1, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0201 	orr.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	e000      	b.n	80061b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061b4:	2302      	movs	r3, #2
  }
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b085      	sub	sp, #20
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b20      	cmp	r3, #32
 80061d6:	d139      	bne.n	800624c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d101      	bne.n	80061e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061e2:	2302      	movs	r3, #2
 80061e4:	e033      	b.n	800624e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2224      	movs	r2, #36	@ 0x24
 80061f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0201 	bic.w	r2, r2, #1
 8006204:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006214:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	021b      	lsls	r3, r3, #8
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2220      	movs	r2, #32
 800623c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	e000      	b.n	800624e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800624c:	2302      	movs	r3, #2
  }
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
	...

0800625c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800625c:	b480      	push	{r7}
 800625e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006260:	4b05      	ldr	r3, [pc, #20]	@ (8006278 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a04      	ldr	r2, [pc, #16]	@ (8006278 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800626a:	6013      	str	r3, [r2, #0]
}
 800626c:	bf00      	nop
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40007000 	.word	0x40007000

0800627c <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8006284:	4b0c      	ldr	r3, [pc, #48]	@ (80062b8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f003 031f 	and.w	r3, r3, #31
 800628e:	43db      	mvns	r3, r3
 8006290:	401a      	ands	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	4908      	ldr	r1, [pc, #32]	@ (80062b8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8006298:	4313      	orrs	r3, r2
 800629a:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 800629c:	4b06      	ldr	r3, [pc, #24]	@ (80062b8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f003 031f 	and.w	r3, r3, #31
 80062a6:	4904      	ldr	r1, [pc, #16]	@ (80062b8 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	608b      	str	r3, [r1, #8]


}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	40007000 	.word	0x40007000

080062bc <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 80062c4:	4b07      	ldr	r3, [pc, #28]	@ (80062e4 <HAL_PWR_DisableWakeUpPin+0x28>)
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f003 031f 	and.w	r3, r3, #31
 80062ce:	43db      	mvns	r3, r3
 80062d0:	4904      	ldr	r1, [pc, #16]	@ (80062e4 <HAL_PWR_DisableWakeUpPin+0x28>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	608b      	str	r3, [r1, #8]
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40007000 	.word	0x40007000

080062e8 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 80062ec:	4b09      	ldr	r3, [pc, #36]	@ (8006314 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f023 0307 	bic.w	r3, r3, #7
 80062f4:	4a07      	ldr	r2, [pc, #28]	@ (8006314 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80062f6:	f043 0303 	orr.w	r3, r3, #3
 80062fa:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80062fc:	4b06      	ldr	r3, [pc, #24]	@ (8006318 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	4a05      	ldr	r2, [pc, #20]	@ (8006318 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8006302:	f043 0304 	orr.w	r3, r3, #4
 8006306:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8006308:	bf30      	wfi
}
 800630a:	bf00      	nop
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	40007000 	.word	0x40007000
 8006318:	e000ed00 	.word	0xe000ed00

0800631c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006320:	4b04      	ldr	r3, [pc, #16]	@ (8006334 <HAL_PWREx_GetVoltageRange+0x18>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006328:	4618      	mov	r0, r3
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	40007000 	.word	0x40007000

08006338 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006346:	d130      	bne.n	80063aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006348:	4b23      	ldr	r3, [pc, #140]	@ (80063d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006350:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006354:	d038      	beq.n	80063c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006356:	4b20      	ldr	r3, [pc, #128]	@ (80063d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800635e:	4a1e      	ldr	r2, [pc, #120]	@ (80063d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006360:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006364:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006366:	4b1d      	ldr	r3, [pc, #116]	@ (80063dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2232      	movs	r2, #50	@ 0x32
 800636c:	fb02 f303 	mul.w	r3, r2, r3
 8006370:	4a1b      	ldr	r2, [pc, #108]	@ (80063e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006372:	fba2 2303 	umull	r2, r3, r2, r3
 8006376:	0c9b      	lsrs	r3, r3, #18
 8006378:	3301      	adds	r3, #1
 800637a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800637c:	e002      	b.n	8006384 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3b01      	subs	r3, #1
 8006382:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006384:	4b14      	ldr	r3, [pc, #80]	@ (80063d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800638c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006390:	d102      	bne.n	8006398 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1f2      	bne.n	800637e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006398:	4b0f      	ldr	r3, [pc, #60]	@ (80063d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063a4:	d110      	bne.n	80063c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e00f      	b.n	80063ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80063aa:	4b0b      	ldr	r3, [pc, #44]	@ (80063d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80063b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063b6:	d007      	beq.n	80063c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80063b8:	4b07      	ldr	r3, [pc, #28]	@ (80063d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80063c0:	4a05      	ldr	r2, [pc, #20]	@ (80063d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80063c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40007000 	.word	0x40007000
 80063dc:	2000000c 	.word	0x2000000c
 80063e0:	431bde83 	.word	0x431bde83

080063e4 <HAL_PWREx_EnableGPIOPullDown>:
  *         I/O pins are available) or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b07      	cmp	r3, #7
 80063f6:	f200 808d 	bhi.w	8006514 <HAL_PWREx_EnableGPIOPullDown+0x130>
 80063fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006400 <HAL_PWREx_EnableGPIOPullDown+0x1c>)
 80063fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006400:	08006421 	.word	0x08006421
 8006404:	08006445 	.word	0x08006445
 8006408:	08006465 	.word	0x08006465
 800640c:	08006481 	.word	0x08006481
 8006410:	0800649d 	.word	0x0800649d
 8006414:	080064b9 	.word	0x080064b9
 8006418:	080064d5 	.word	0x080064d5
 800641c:	080064f1 	.word	0x080064f1
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 8006420:	4b41      	ldr	r3, [pc, #260]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006422:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800642a:	493f      	ldr	r1, [pc, #252]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800642c:	4313      	orrs	r3, r2
 800642e:	624b      	str	r3, [r1, #36]	@ 0x24
       CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 8006430:	4b3d      	ldr	r3, [pc, #244]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006432:	6a1a      	ldr	r2, [r3, #32]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800643a:	43db      	mvns	r3, r3
 800643c:	493a      	ldr	r1, [pc, #232]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800643e:	4013      	ands	r3, r2
 8006440:	620b      	str	r3, [r1, #32]
       break;
 8006442:	e06a      	b.n	800651a <HAL_PWREx_EnableGPIOPullDown+0x136>
    case PWR_GPIO_B:
       SET_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 8006444:	4b38      	ldr	r3, [pc, #224]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	f023 0310 	bic.w	r3, r3, #16
 800644e:	4936      	ldr	r1, [pc, #216]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006450:	4313      	orrs	r3, r2
 8006452:	62cb      	str	r3, [r1, #44]	@ 0x2c
       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 8006454:	4b34      	ldr	r3, [pc, #208]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006456:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	43db      	mvns	r3, r3
 800645c:	4932      	ldr	r1, [pc, #200]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800645e:	4013      	ands	r3, r2
 8006460:	628b      	str	r3, [r1, #40]	@ 0x28
       break;
 8006462:	e05a      	b.n	800651a <HAL_PWREx_EnableGPIOPullDown+0x136>
    case PWR_GPIO_C:
       SET_BIT(PWR->PDCRC, GPIONumber);
 8006464:	4b30      	ldr	r3, [pc, #192]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006466:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006468:	492f      	ldr	r1, [pc, #188]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	4313      	orrs	r3, r2
 800646e:	634b      	str	r3, [r1, #52]	@ 0x34
       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 8006470:	4b2d      	ldr	r3, [pc, #180]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006472:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	43db      	mvns	r3, r3
 8006478:	492b      	ldr	r1, [pc, #172]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800647a:	4013      	ands	r3, r2
 800647c:	630b      	str	r3, [r1, #48]	@ 0x30
       break;
 800647e:	e04c      	b.n	800651a <HAL_PWREx_EnableGPIOPullDown+0x136>
#if defined(GPIOD)
    case PWR_GPIO_D:
       SET_BIT(PWR->PDCRD, GPIONumber);
 8006480:	4b29      	ldr	r3, [pc, #164]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006482:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006484:	4928      	ldr	r1, [pc, #160]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	4313      	orrs	r3, r2
 800648a:	63cb      	str	r3, [r1, #60]	@ 0x3c
       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 800648c:	4b26      	ldr	r3, [pc, #152]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800648e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	43db      	mvns	r3, r3
 8006494:	4924      	ldr	r1, [pc, #144]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006496:	4013      	ands	r3, r2
 8006498:	638b      	str	r3, [r1, #56]	@ 0x38
       break;
 800649a:	e03e      	b.n	800651a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       SET_BIT(PWR->PDCRE, GPIONumber);
 800649c:	4b22      	ldr	r3, [pc, #136]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800649e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064a0:	4921      	ldr	r1, [pc, #132]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	644b      	str	r3, [r1, #68]	@ 0x44
       CLEAR_BIT(PWR->PUCRE, GPIONumber);
 80064a8:	4b1f      	ldr	r3, [pc, #124]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80064aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	43db      	mvns	r3, r3
 80064b0:	491d      	ldr	r1, [pc, #116]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80064b2:	4013      	ands	r3, r2
 80064b4:	640b      	str	r3, [r1, #64]	@ 0x40
       break;
 80064b6:	e030      	b.n	800651a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       SET_BIT(PWR->PDCRF, GPIONumber);
 80064b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80064ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064bc:	491a      	ldr	r1, [pc, #104]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	64cb      	str	r3, [r1, #76]	@ 0x4c
       CLEAR_BIT(PWR->PUCRF, GPIONumber);
 80064c4:	4b18      	ldr	r3, [pc, #96]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80064c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	43db      	mvns	r3, r3
 80064cc:	4916      	ldr	r1, [pc, #88]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80064ce:	4013      	ands	r3, r2
 80064d0:	648b      	str	r3, [r1, #72]	@ 0x48
       break;
 80064d2:	e022      	b.n	800651a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       SET_BIT(PWR->PDCRG, GPIONumber);
 80064d4:	4b14      	ldr	r3, [pc, #80]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80064d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064d8:	4913      	ldr	r1, [pc, #76]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	4313      	orrs	r3, r2
 80064de:	654b      	str	r3, [r1, #84]	@ 0x54
       CLEAR_BIT(PWR->PUCRG, GPIONumber);
 80064e0:	4b11      	ldr	r3, [pc, #68]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80064e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	43db      	mvns	r3, r3
 80064e8:	490f      	ldr	r1, [pc, #60]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80064ea:	4013      	ands	r3, r2
 80064ec:	650b      	str	r3, [r1, #80]	@ 0x50
       break;
 80064ee:	e014      	b.n	800651a <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
    case PWR_GPIO_H:
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       SET_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       SET_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 80064f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80064f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	490b      	ldr	r1, [pc, #44]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	65cb      	str	r3, [r1, #92]	@ 0x5c
#endif
       CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8006500:	4b09      	ldr	r3, [pc, #36]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006502:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	43db      	mvns	r3, r3
 800650c:	4906      	ldr	r1, [pc, #24]	@ (8006528 <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800650e:	4013      	ands	r3, r2
 8006510:	658b      	str	r3, [r1, #88]	@ 0x58
       break;
 8006512:	e002      	b.n	800651a <HAL_PWREx_EnableGPIOPullDown+0x136>
       SET_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	73fb      	strb	r3, [r7, #15]
      break;
 8006518:	bf00      	nop
  }

  return status;
 800651a:	7bfb      	ldrb	r3, [r7, #15]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	40007000 	.word	0x40007000

0800652c <HAL_PWREx_EnablePullUpPullDownConfig>:
  *        HAL_PWREx_EnableGPIOPullUp() and HAL_PWREx_EnableGPIOPullDown() API's ensure there
  *        is no conflict when setting PUy or PDy bit.
  * @retval None
  */
void HAL_PWREx_EnablePullUpPullDownConfig(void)
{
 800652c:	b480      	push	{r7}
 800652e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 8006530:	4b05      	ldr	r3, [pc, #20]	@ (8006548 <HAL_PWREx_EnablePullUpPullDownConfig+0x1c>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	4a04      	ldr	r2, [pc, #16]	@ (8006548 <HAL_PWREx_EnablePullUpPullDownConfig+0x1c>)
 8006536:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800653a:	6093      	str	r3, [r2, #8]
}
 800653c:	bf00      	nop
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40007000 	.word	0x40007000

0800654c <HAL_PWREx_EnableSRAM2ContentRetention>:
/**
  * @brief Enable Full SRAM2 content retention in Standby mode.
  * @retval None
  */
void HAL_PWREx_EnableSRAM2ContentRetention(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
  (void) HAL_PWREx_SetSRAM2ContentRetention(PWR_FULL_SRAM2_RETENTION);
 8006550:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006554:	f000 f802 	bl	800655c <HAL_PWREx_SetSRAM2ContentRetention>
}
 8006558:	bf00      	nop
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_PWREx_SetSRAM2ContentRetention>:
  *            @arg @ref PWR_4KBYTES_SRAM2_RETENTION   Only 4 Kbytes of SRAM2 is powered by the low-power regulator in Standby mode
  * @note  PWR_4KBYTES_SRAM2_RETENTION parameter is not available on all devices
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_SetSRAM2ContentRetention(uint32_t SRAM2Size)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_SRAM2_RETENTION(SRAM2Size));

  if (SRAM2Size == PWR_NO_SRAM2_RETENTION)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <HAL_PWREx_SetSRAM2ContentRetention+0x1c>
  {
    CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
 800656a:	4b0d      	ldr	r3, [pc, #52]	@ (80065a0 <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	4a0c      	ldr	r2, [pc, #48]	@ (80065a0 <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 8006570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006574:	6093      	str	r3, [r2, #8]
 8006576:	e00c      	b.n	8006592 <HAL_PWREx_SetSRAM2ContentRetention+0x36>
  }
  else if (SRAM2Size == PWR_FULL_SRAM2_RETENTION)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800657e:	d106      	bne.n	800658e <HAL_PWREx_SetSRAM2ContentRetention+0x32>
  {
    MODIFY_REG(PWR->CR3, PWR_CR3_RRS, PWR_FULL_SRAM2_RETENTION);
 8006580:	4b07      	ldr	r3, [pc, #28]	@ (80065a0 <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	4a06      	ldr	r2, [pc, #24]	@ (80065a0 <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 8006586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800658a:	6093      	str	r3, [r2, #8]
 800658c:	e001      	b.n	8006592 <HAL_PWREx_SetSRAM2ContentRetention+0x36>
  {
    MODIFY_REG(PWR->CR3, PWR_CR3_RRS, PWR_4KBYTES_SRAM2_RETENTION);
  }
#endif /* PWR_CR3_RRS_1 */
  else {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e000      	b.n	8006594 <HAL_PWREx_SetSRAM2ContentRetention+0x38>
  }

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	40007000 	.word	0x40007000

080065a4 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	4603      	mov	r3, r0
 80065ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 80065ae:	4b11      	ldr	r3, [pc, #68]	@ (80065f4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f023 0307 	bic.w	r3, r3, #7
 80065b6:	4a0f      	ldr	r2, [pc, #60]	@ (80065f4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80065b8:	f043 0302 	orr.w	r3, r3, #2
 80065bc:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80065be:	4b0e      	ldr	r3, [pc, #56]	@ (80065f8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	4a0d      	ldr	r2, [pc, #52]	@ (80065f8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80065c4:	f043 0304 	orr.w	r3, r3, #4
 80065c8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80065ca:	79fb      	ldrb	r3, [r7, #7]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d101      	bne.n	80065d4 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80065d0:	bf30      	wfi
 80065d2:	e002      	b.n	80065da <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80065d4:	bf40      	sev
    __WFE();
 80065d6:	bf20      	wfe
    __WFE();
 80065d8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80065da:	4b07      	ldr	r3, [pc, #28]	@ (80065f8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	4a06      	ldr	r2, [pc, #24]	@ (80065f8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80065e0:	f023 0304 	bic.w	r3, r3, #4
 80065e4:	6113      	str	r3, [r2, #16]
}
 80065e6:	bf00      	nop
 80065e8:	370c      	adds	r7, #12
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	40007000 	.word	0x40007000
 80065f8:	e000ed00 	.word	0xe000ed00

080065fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e3ca      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800660e:	4b97      	ldr	r3, [pc, #604]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f003 030c 	and.w	r3, r3, #12
 8006616:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006618:	4b94      	ldr	r3, [pc, #592]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f003 0303 	and.w	r3, r3, #3
 8006620:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0310 	and.w	r3, r3, #16
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 80e4 	beq.w	80067f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <HAL_RCC_OscConfig+0x4a>
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	2b0c      	cmp	r3, #12
 800663a:	f040 808b 	bne.w	8006754 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b01      	cmp	r3, #1
 8006642:	f040 8087 	bne.w	8006754 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006646:	4b89      	ldr	r3, [pc, #548]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d005      	beq.n	800665e <HAL_RCC_OscConfig+0x62>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e3a2      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1a      	ldr	r2, [r3, #32]
 8006662:	4b82      	ldr	r3, [pc, #520]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d004      	beq.n	8006678 <HAL_RCC_OscConfig+0x7c>
 800666e:	4b7f      	ldr	r3, [pc, #508]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006676:	e005      	b.n	8006684 <HAL_RCC_OscConfig+0x88>
 8006678:	4b7c      	ldr	r3, [pc, #496]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 800667a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800667e:	091b      	lsrs	r3, r3, #4
 8006680:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006684:	4293      	cmp	r3, r2
 8006686:	d223      	bcs.n	80066d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	4618      	mov	r0, r3
 800668e:	f000 fd55 	bl	800713c <RCC_SetFlashLatencyFromMSIRange>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e383      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800669c:	4b73      	ldr	r3, [pc, #460]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a72      	ldr	r2, [pc, #456]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 80066a2:	f043 0308 	orr.w	r3, r3, #8
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	4b70      	ldr	r3, [pc, #448]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	496d      	ldr	r1, [pc, #436]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066ba:	4b6c      	ldr	r3, [pc, #432]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	69db      	ldr	r3, [r3, #28]
 80066c6:	021b      	lsls	r3, r3, #8
 80066c8:	4968      	ldr	r1, [pc, #416]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	604b      	str	r3, [r1, #4]
 80066ce:	e025      	b.n	800671c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066d0:	4b66      	ldr	r3, [pc, #408]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a65      	ldr	r2, [pc, #404]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 80066d6:	f043 0308 	orr.w	r3, r3, #8
 80066da:	6013      	str	r3, [r2, #0]
 80066dc:	4b63      	ldr	r3, [pc, #396]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	4960      	ldr	r1, [pc, #384]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066ee:	4b5f      	ldr	r3, [pc, #380]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	021b      	lsls	r3, r3, #8
 80066fc:	495b      	ldr	r1, [pc, #364]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d109      	bne.n	800671c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	4618      	mov	r0, r3
 800670e:	f000 fd15 	bl	800713c <RCC_SetFlashLatencyFromMSIRange>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e343      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800671c:	f000 fc4a 	bl	8006fb4 <HAL_RCC_GetSysClockFreq>
 8006720:	4602      	mov	r2, r0
 8006722:	4b52      	ldr	r3, [pc, #328]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	091b      	lsrs	r3, r3, #4
 8006728:	f003 030f 	and.w	r3, r3, #15
 800672c:	4950      	ldr	r1, [pc, #320]	@ (8006870 <HAL_RCC_OscConfig+0x274>)
 800672e:	5ccb      	ldrb	r3, [r1, r3]
 8006730:	f003 031f 	and.w	r3, r3, #31
 8006734:	fa22 f303 	lsr.w	r3, r2, r3
 8006738:	4a4e      	ldr	r2, [pc, #312]	@ (8006874 <HAL_RCC_OscConfig+0x278>)
 800673a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800673c:	4b4e      	ldr	r3, [pc, #312]	@ (8006878 <HAL_RCC_OscConfig+0x27c>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4618      	mov	r0, r3
 8006742:	f7fc fd81 	bl	8003248 <HAL_InitTick>
 8006746:	4603      	mov	r3, r0
 8006748:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800674a:	7bfb      	ldrb	r3, [r7, #15]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d052      	beq.n	80067f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	e327      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d032      	beq.n	80067c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800675c:	4b43      	ldr	r3, [pc, #268]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a42      	ldr	r2, [pc, #264]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 8006762:	f043 0301 	orr.w	r3, r3, #1
 8006766:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006768:	f7fc fdbe 	bl	80032e8 <HAL_GetTick>
 800676c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800676e:	e008      	b.n	8006782 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006770:	f7fc fdba 	bl	80032e8 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	2b02      	cmp	r3, #2
 800677c:	d901      	bls.n	8006782 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e310      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006782:	4b3a      	ldr	r3, [pc, #232]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d0f0      	beq.n	8006770 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800678e:	4b37      	ldr	r3, [pc, #220]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a36      	ldr	r2, [pc, #216]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 8006794:	f043 0308 	orr.w	r3, r3, #8
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	4b34      	ldr	r3, [pc, #208]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	4931      	ldr	r1, [pc, #196]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067ac:	4b2f      	ldr	r3, [pc, #188]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	021b      	lsls	r3, r3, #8
 80067ba:	492c      	ldr	r1, [pc, #176]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	604b      	str	r3, [r1, #4]
 80067c0:	e01a      	b.n	80067f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80067c2:	4b2a      	ldr	r3, [pc, #168]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a29      	ldr	r2, [pc, #164]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 80067c8:	f023 0301 	bic.w	r3, r3, #1
 80067cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80067ce:	f7fc fd8b 	bl	80032e8 <HAL_GetTick>
 80067d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80067d4:	e008      	b.n	80067e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067d6:	f7fc fd87 	bl	80032e8 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d901      	bls.n	80067e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e2dd      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80067e8:	4b20      	ldr	r3, [pc, #128]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0302 	and.w	r3, r3, #2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1f0      	bne.n	80067d6 <HAL_RCC_OscConfig+0x1da>
 80067f4:	e000      	b.n	80067f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80067f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d074      	beq.n	80068ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	2b08      	cmp	r3, #8
 8006808:	d005      	beq.n	8006816 <HAL_RCC_OscConfig+0x21a>
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	2b0c      	cmp	r3, #12
 800680e:	d10e      	bne.n	800682e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	2b03      	cmp	r3, #3
 8006814:	d10b      	bne.n	800682e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006816:	4b15      	ldr	r3, [pc, #84]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d064      	beq.n	80068ec <HAL_RCC_OscConfig+0x2f0>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d160      	bne.n	80068ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e2ba      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006836:	d106      	bne.n	8006846 <HAL_RCC_OscConfig+0x24a>
 8006838:	4b0c      	ldr	r3, [pc, #48]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a0b      	ldr	r2, [pc, #44]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 800683e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006842:	6013      	str	r3, [r2, #0]
 8006844:	e026      	b.n	8006894 <HAL_RCC_OscConfig+0x298>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800684e:	d115      	bne.n	800687c <HAL_RCC_OscConfig+0x280>
 8006850:	4b06      	ldr	r3, [pc, #24]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a05      	ldr	r2, [pc, #20]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 8006856:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800685a:	6013      	str	r3, [r2, #0]
 800685c:	4b03      	ldr	r3, [pc, #12]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a02      	ldr	r2, [pc, #8]	@ (800686c <HAL_RCC_OscConfig+0x270>)
 8006862:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006866:	6013      	str	r3, [r2, #0]
 8006868:	e014      	b.n	8006894 <HAL_RCC_OscConfig+0x298>
 800686a:	bf00      	nop
 800686c:	40021000 	.word	0x40021000
 8006870:	0800d95c 	.word	0x0800d95c
 8006874:	2000000c 	.word	0x2000000c
 8006878:	20000010 	.word	0x20000010
 800687c:	4ba0      	ldr	r3, [pc, #640]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a9f      	ldr	r2, [pc, #636]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	4b9d      	ldr	r3, [pc, #628]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a9c      	ldr	r2, [pc, #624]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 800688e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d013      	beq.n	80068c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800689c:	f7fc fd24 	bl	80032e8 <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068a2:	e008      	b.n	80068b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068a4:	f7fc fd20 	bl	80032e8 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b64      	cmp	r3, #100	@ 0x64
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e276      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068b6:	4b92      	ldr	r3, [pc, #584]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0f0      	beq.n	80068a4 <HAL_RCC_OscConfig+0x2a8>
 80068c2:	e014      	b.n	80068ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c4:	f7fc fd10 	bl	80032e8 <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068ca:	e008      	b.n	80068de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068cc:	f7fc fd0c 	bl	80032e8 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b64      	cmp	r3, #100	@ 0x64
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e262      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068de:	4b88      	ldr	r3, [pc, #544]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1f0      	bne.n	80068cc <HAL_RCC_OscConfig+0x2d0>
 80068ea:	e000      	b.n	80068ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d060      	beq.n	80069bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d005      	beq.n	800690c <HAL_RCC_OscConfig+0x310>
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	2b0c      	cmp	r3, #12
 8006904:	d119      	bne.n	800693a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2b02      	cmp	r3, #2
 800690a:	d116      	bne.n	800693a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800690c:	4b7c      	ldr	r3, [pc, #496]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006914:	2b00      	cmp	r3, #0
 8006916:	d005      	beq.n	8006924 <HAL_RCC_OscConfig+0x328>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e23f      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006924:	4b76      	ldr	r3, [pc, #472]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	061b      	lsls	r3, r3, #24
 8006932:	4973      	ldr	r1, [pc, #460]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006934:	4313      	orrs	r3, r2
 8006936:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006938:	e040      	b.n	80069bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d023      	beq.n	800698a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006942:	4b6f      	ldr	r3, [pc, #444]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a6e      	ldr	r2, [pc, #440]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800694c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694e:	f7fc fccb 	bl	80032e8 <HAL_GetTick>
 8006952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006954:	e008      	b.n	8006968 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006956:	f7fc fcc7 	bl	80032e8 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d901      	bls.n	8006968 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e21d      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006968:	4b65      	ldr	r3, [pc, #404]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0f0      	beq.n	8006956 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006974:	4b62      	ldr	r3, [pc, #392]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	061b      	lsls	r3, r3, #24
 8006982:	495f      	ldr	r1, [pc, #380]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006984:	4313      	orrs	r3, r2
 8006986:	604b      	str	r3, [r1, #4]
 8006988:	e018      	b.n	80069bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800698a:	4b5d      	ldr	r3, [pc, #372]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a5c      	ldr	r2, [pc, #368]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006996:	f7fc fca7 	bl	80032e8 <HAL_GetTick>
 800699a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800699c:	e008      	b.n	80069b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800699e:	f7fc fca3 	bl	80032e8 <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d901      	bls.n	80069b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e1f9      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069b0:	4b53      	ldr	r3, [pc, #332]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1f0      	bne.n	800699e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0308 	and.w	r3, r3, #8
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d03c      	beq.n	8006a42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d01c      	beq.n	8006a0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069d0:	4b4b      	ldr	r3, [pc, #300]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 80069d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069d6:	4a4a      	ldr	r2, [pc, #296]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 80069d8:	f043 0301 	orr.w	r3, r3, #1
 80069dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e0:	f7fc fc82 	bl	80032e8 <HAL_GetTick>
 80069e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069e6:	e008      	b.n	80069fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069e8:	f7fc fc7e 	bl	80032e8 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e1d4      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069fa:	4b41      	ldr	r3, [pc, #260]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 80069fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0ef      	beq.n	80069e8 <HAL_RCC_OscConfig+0x3ec>
 8006a08:	e01b      	b.n	8006a42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a10:	4a3b      	ldr	r2, [pc, #236]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006a12:	f023 0301 	bic.w	r3, r3, #1
 8006a16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a1a:	f7fc fc65 	bl	80032e8 <HAL_GetTick>
 8006a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a20:	e008      	b.n	8006a34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a22:	f7fc fc61 	bl	80032e8 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d901      	bls.n	8006a34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e1b7      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a34:	4b32      	ldr	r3, [pc, #200]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1ef      	bne.n	8006a22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0304 	and.w	r3, r3, #4
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 80a6 	beq.w	8006b9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a50:	2300      	movs	r3, #0
 8006a52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006a54:	4b2a      	ldr	r3, [pc, #168]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10d      	bne.n	8006a7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a60:	4b27      	ldr	r3, [pc, #156]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a64:	4a26      	ldr	r2, [pc, #152]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a6c:	4b24      	ldr	r3, [pc, #144]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a74:	60bb      	str	r3, [r7, #8]
 8006a76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a7c:	4b21      	ldr	r3, [pc, #132]	@ (8006b04 <HAL_RCC_OscConfig+0x508>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d118      	bne.n	8006aba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a88:	4b1e      	ldr	r3, [pc, #120]	@ (8006b04 <HAL_RCC_OscConfig+0x508>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8006b04 <HAL_RCC_OscConfig+0x508>)
 8006a8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a94:	f7fc fc28 	bl	80032e8 <HAL_GetTick>
 8006a98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a9a:	e008      	b.n	8006aae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a9c:	f7fc fc24 	bl	80032e8 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e17a      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006aae:	4b15      	ldr	r3, [pc, #84]	@ (8006b04 <HAL_RCC_OscConfig+0x508>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d0f0      	beq.n	8006a9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d108      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x4d8>
 8006ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006aca:	f043 0301 	orr.w	r3, r3, #1
 8006ace:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ad2:	e029      	b.n	8006b28 <HAL_RCC_OscConfig+0x52c>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	2b05      	cmp	r3, #5
 8006ada:	d115      	bne.n	8006b08 <HAL_RCC_OscConfig+0x50c>
 8006adc:	4b08      	ldr	r3, [pc, #32]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ae2:	4a07      	ldr	r2, [pc, #28]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006ae4:	f043 0304 	orr.w	r3, r3, #4
 8006ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006aec:	4b04      	ldr	r3, [pc, #16]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006af2:	4a03      	ldr	r2, [pc, #12]	@ (8006b00 <HAL_RCC_OscConfig+0x504>)
 8006af4:	f043 0301 	orr.w	r3, r3, #1
 8006af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006afc:	e014      	b.n	8006b28 <HAL_RCC_OscConfig+0x52c>
 8006afe:	bf00      	nop
 8006b00:	40021000 	.word	0x40021000
 8006b04:	40007000 	.word	0x40007000
 8006b08:	4b9c      	ldr	r3, [pc, #624]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b0e:	4a9b      	ldr	r2, [pc, #620]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006b10:	f023 0301 	bic.w	r3, r3, #1
 8006b14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006b18:	4b98      	ldr	r3, [pc, #608]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b1e:	4a97      	ldr	r2, [pc, #604]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006b20:	f023 0304 	bic.w	r3, r3, #4
 8006b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d016      	beq.n	8006b5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b30:	f7fc fbda 	bl	80032e8 <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b36:	e00a      	b.n	8006b4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b38:	f7fc fbd6 	bl	80032e8 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e12a      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b4e:	4b8b      	ldr	r3, [pc, #556]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0ed      	beq.n	8006b38 <HAL_RCC_OscConfig+0x53c>
 8006b5c:	e015      	b.n	8006b8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b5e:	f7fc fbc3 	bl	80032e8 <HAL_GetTick>
 8006b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b64:	e00a      	b.n	8006b7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b66:	f7fc fbbf 	bl	80032e8 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d901      	bls.n	8006b7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e113      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b7c:	4b7f      	ldr	r3, [pc, #508]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1ed      	bne.n	8006b66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b8a:	7ffb      	ldrb	r3, [r7, #31]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d105      	bne.n	8006b9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b90:	4b7a      	ldr	r3, [pc, #488]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b94:	4a79      	ldr	r2, [pc, #484]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006b96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b9a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80fe 	beq.w	8006da2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	f040 80d0 	bne.w	8006d50 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006bb0:	4b72      	ldr	r3, [pc, #456]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f003 0203 	and.w	r2, r3, #3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d130      	bne.n	8006c26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d127      	bne.n	8006c26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006be0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d11f      	bne.n	8006c26 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006bf0:	2a07      	cmp	r2, #7
 8006bf2:	bf14      	ite	ne
 8006bf4:	2201      	movne	r2, #1
 8006bf6:	2200      	moveq	r2, #0
 8006bf8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d113      	bne.n	8006c26 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c08:	085b      	lsrs	r3, r3, #1
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d109      	bne.n	8006c26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1c:	085b      	lsrs	r3, r3, #1
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d06e      	beq.n	8006d04 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	2b0c      	cmp	r3, #12
 8006c2a:	d069      	beq.n	8006d00 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006c2c:	4b53      	ldr	r3, [pc, #332]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d105      	bne.n	8006c44 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006c38:	4b50      	ldr	r3, [pc, #320]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e0ad      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006c48:	4b4c      	ldr	r3, [pc, #304]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a4b      	ldr	r2, [pc, #300]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006c4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c52:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c54:	f7fc fb48 	bl	80032e8 <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c5c:	f7fc fb44 	bl	80032e8 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e09a      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c6e:	4b43      	ldr	r3, [pc, #268]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f0      	bne.n	8006c5c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c7a:	4b40      	ldr	r3, [pc, #256]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	4b40      	ldr	r3, [pc, #256]	@ (8006d80 <HAL_RCC_OscConfig+0x784>)
 8006c80:	4013      	ands	r3, r2
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006c8a:	3a01      	subs	r2, #1
 8006c8c:	0112      	lsls	r2, r2, #4
 8006c8e:	4311      	orrs	r1, r2
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006c94:	0212      	lsls	r2, r2, #8
 8006c96:	4311      	orrs	r1, r2
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006c9c:	0852      	lsrs	r2, r2, #1
 8006c9e:	3a01      	subs	r2, #1
 8006ca0:	0552      	lsls	r2, r2, #21
 8006ca2:	4311      	orrs	r1, r2
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006ca8:	0852      	lsrs	r2, r2, #1
 8006caa:	3a01      	subs	r2, #1
 8006cac:	0652      	lsls	r2, r2, #25
 8006cae:	4311      	orrs	r1, r2
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006cb4:	0912      	lsrs	r2, r2, #4
 8006cb6:	0452      	lsls	r2, r2, #17
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	4930      	ldr	r1, [pc, #192]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006cc0:	4b2e      	ldr	r3, [pc, #184]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a2d      	ldr	r2, [pc, #180]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006cc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	4a2a      	ldr	r2, [pc, #168]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006cd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006cd8:	f7fc fb06 	bl	80032e8 <HAL_GetTick>
 8006cdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cde:	e008      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ce0:	f7fc fb02 	bl	80032e8 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d901      	bls.n	8006cf2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e058      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cf2:	4b22      	ldr	r3, [pc, #136]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0f0      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006cfe:	e050      	b.n	8006da2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e04f      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d04:	4b1d      	ldr	r3, [pc, #116]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d148      	bne.n	8006da2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006d10:	4b1a      	ldr	r3, [pc, #104]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a19      	ldr	r2, [pc, #100]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006d16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d1c:	4b17      	ldr	r3, [pc, #92]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	4a16      	ldr	r2, [pc, #88]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006d22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d28:	f7fc fade 	bl	80032e8 <HAL_GetTick>
 8006d2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d30:	f7fc fada 	bl	80032e8 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e030      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d42:	4b0e      	ldr	r3, [pc, #56]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0f0      	beq.n	8006d30 <HAL_RCC_OscConfig+0x734>
 8006d4e:	e028      	b.n	8006da2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	2b0c      	cmp	r3, #12
 8006d54:	d023      	beq.n	8006d9e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d56:	4b09      	ldr	r3, [pc, #36]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a08      	ldr	r2, [pc, #32]	@ (8006d7c <HAL_RCC_OscConfig+0x780>)
 8006d5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d62:	f7fc fac1 	bl	80032e8 <HAL_GetTick>
 8006d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d68:	e00c      	b.n	8006d84 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d6a:	f7fc fabd 	bl	80032e8 <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d905      	bls.n	8006d84 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e013      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
 8006d7c:	40021000 	.word	0x40021000
 8006d80:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d84:	4b09      	ldr	r3, [pc, #36]	@ (8006dac <HAL_RCC_OscConfig+0x7b0>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1ec      	bne.n	8006d6a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006d90:	4b06      	ldr	r3, [pc, #24]	@ (8006dac <HAL_RCC_OscConfig+0x7b0>)
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	4905      	ldr	r1, [pc, #20]	@ (8006dac <HAL_RCC_OscConfig+0x7b0>)
 8006d96:	4b06      	ldr	r3, [pc, #24]	@ (8006db0 <HAL_RCC_OscConfig+0x7b4>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	60cb      	str	r3, [r1, #12]
 8006d9c:	e001      	b.n	8006da2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e000      	b.n	8006da4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3720      	adds	r7, #32
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	40021000 	.word	0x40021000
 8006db0:	feeefffc 	.word	0xfeeefffc

08006db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e0e7      	b.n	8006f98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006dc8:	4b75      	ldr	r3, [pc, #468]	@ (8006fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0307 	and.w	r3, r3, #7
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d910      	bls.n	8006df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dd6:	4b72      	ldr	r3, [pc, #456]	@ (8006fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f023 0207 	bic.w	r2, r3, #7
 8006dde:	4970      	ldr	r1, [pc, #448]	@ (8006fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006de6:	4b6e      	ldr	r3, [pc, #440]	@ (8006fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d001      	beq.n	8006df8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e0cf      	b.n	8006f98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d010      	beq.n	8006e26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	4b66      	ldr	r3, [pc, #408]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d908      	bls.n	8006e26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e14:	4b63      	ldr	r3, [pc, #396]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	4960      	ldr	r1, [pc, #384]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d04c      	beq.n	8006ecc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d107      	bne.n	8006e4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e3a:	4b5a      	ldr	r3, [pc, #360]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d121      	bne.n	8006e8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e0a6      	b.n	8006f98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d107      	bne.n	8006e62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e52:	4b54      	ldr	r3, [pc, #336]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d115      	bne.n	8006e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e09a      	b.n	8006f98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d107      	bne.n	8006e7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e6a:	4b4e      	ldr	r3, [pc, #312]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d109      	bne.n	8006e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e08e      	b.n	8006f98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e7a:	4b4a      	ldr	r3, [pc, #296]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e086      	b.n	8006f98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e8a:	4b46      	ldr	r3, [pc, #280]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f023 0203 	bic.w	r2, r3, #3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	4943      	ldr	r1, [pc, #268]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e9c:	f7fc fa24 	bl	80032e8 <HAL_GetTick>
 8006ea0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ea2:	e00a      	b.n	8006eba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ea4:	f7fc fa20 	bl	80032e8 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d901      	bls.n	8006eba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e06e      	b.n	8006f98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eba:	4b3a      	ldr	r3, [pc, #232]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f003 020c 	and.w	r2, r3, #12
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d1eb      	bne.n	8006ea4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d010      	beq.n	8006efa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	4b31      	ldr	r3, [pc, #196]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d208      	bcs.n	8006efa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ee8:	4b2e      	ldr	r3, [pc, #184]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	492b      	ldr	r1, [pc, #172]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006efa:	4b29      	ldr	r3, [pc, #164]	@ (8006fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0307 	and.w	r3, r3, #7
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d210      	bcs.n	8006f2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f08:	4b25      	ldr	r3, [pc, #148]	@ (8006fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f023 0207 	bic.w	r2, r3, #7
 8006f10:	4923      	ldr	r1, [pc, #140]	@ (8006fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f18:	4b21      	ldr	r3, [pc, #132]	@ (8006fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0307 	and.w	r3, r3, #7
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d001      	beq.n	8006f2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e036      	b.n	8006f98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0304 	and.w	r3, r3, #4
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d008      	beq.n	8006f48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f36:	4b1b      	ldr	r3, [pc, #108]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	4918      	ldr	r1, [pc, #96]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d009      	beq.n	8006f68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f54:	4b13      	ldr	r3, [pc, #76]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	00db      	lsls	r3, r3, #3
 8006f62:	4910      	ldr	r1, [pc, #64]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f68:	f000 f824 	bl	8006fb4 <HAL_RCC_GetSysClockFreq>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	091b      	lsrs	r3, r3, #4
 8006f74:	f003 030f 	and.w	r3, r3, #15
 8006f78:	490b      	ldr	r1, [pc, #44]	@ (8006fa8 <HAL_RCC_ClockConfig+0x1f4>)
 8006f7a:	5ccb      	ldrb	r3, [r1, r3]
 8006f7c:	f003 031f 	and.w	r3, r3, #31
 8006f80:	fa22 f303 	lsr.w	r3, r2, r3
 8006f84:	4a09      	ldr	r2, [pc, #36]	@ (8006fac <HAL_RCC_ClockConfig+0x1f8>)
 8006f86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006f88:	4b09      	ldr	r3, [pc, #36]	@ (8006fb0 <HAL_RCC_ClockConfig+0x1fc>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fc f95b 	bl	8003248 <HAL_InitTick>
 8006f92:	4603      	mov	r3, r0
 8006f94:	72fb      	strb	r3, [r7, #11]

  return status;
 8006f96:	7afb      	ldrb	r3, [r7, #11]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	40022000 	.word	0x40022000
 8006fa4:	40021000 	.word	0x40021000
 8006fa8:	0800d95c 	.word	0x0800d95c
 8006fac:	2000000c 	.word	0x2000000c
 8006fb0:	20000010 	.word	0x20000010

08006fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b089      	sub	sp, #36	@ 0x24
 8006fb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61fb      	str	r3, [r7, #28]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80070bc <HAL_RCC_GetSysClockFreq+0x108>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f003 030c 	and.w	r3, r3, #12
 8006fca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80070bc <HAL_RCC_GetSysClockFreq+0x108>)
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	f003 0303 	and.w	r3, r3, #3
 8006fd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d005      	beq.n	8006fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	2b0c      	cmp	r3, #12
 8006fe0:	d121      	bne.n	8007026 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d11e      	bne.n	8007026 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006fe8:	4b34      	ldr	r3, [pc, #208]	@ (80070bc <HAL_RCC_GetSysClockFreq+0x108>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0308 	and.w	r3, r3, #8
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d107      	bne.n	8007004 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006ff4:	4b31      	ldr	r3, [pc, #196]	@ (80070bc <HAL_RCC_GetSysClockFreq+0x108>)
 8006ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ffa:	0a1b      	lsrs	r3, r3, #8
 8006ffc:	f003 030f 	and.w	r3, r3, #15
 8007000:	61fb      	str	r3, [r7, #28]
 8007002:	e005      	b.n	8007010 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007004:	4b2d      	ldr	r3, [pc, #180]	@ (80070bc <HAL_RCC_GetSysClockFreq+0x108>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	091b      	lsrs	r3, r3, #4
 800700a:	f003 030f 	and.w	r3, r3, #15
 800700e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007010:	4a2b      	ldr	r2, [pc, #172]	@ (80070c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007018:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10d      	bne.n	800703c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007024:	e00a      	b.n	800703c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	2b04      	cmp	r3, #4
 800702a:	d102      	bne.n	8007032 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800702c:	4b25      	ldr	r3, [pc, #148]	@ (80070c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800702e:	61bb      	str	r3, [r7, #24]
 8007030:	e004      	b.n	800703c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b08      	cmp	r3, #8
 8007036:	d101      	bne.n	800703c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007038:	4b23      	ldr	r3, [pc, #140]	@ (80070c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800703a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	2b0c      	cmp	r3, #12
 8007040:	d134      	bne.n	80070ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007042:	4b1e      	ldr	r3, [pc, #120]	@ (80070bc <HAL_RCC_GetSysClockFreq+0x108>)
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	f003 0303 	and.w	r3, r3, #3
 800704a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2b02      	cmp	r3, #2
 8007050:	d003      	beq.n	800705a <HAL_RCC_GetSysClockFreq+0xa6>
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b03      	cmp	r3, #3
 8007056:	d003      	beq.n	8007060 <HAL_RCC_GetSysClockFreq+0xac>
 8007058:	e005      	b.n	8007066 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800705a:	4b1a      	ldr	r3, [pc, #104]	@ (80070c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800705c:	617b      	str	r3, [r7, #20]
      break;
 800705e:	e005      	b.n	800706c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007060:	4b19      	ldr	r3, [pc, #100]	@ (80070c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007062:	617b      	str	r3, [r7, #20]
      break;
 8007064:	e002      	b.n	800706c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	617b      	str	r3, [r7, #20]
      break;
 800706a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800706c:	4b13      	ldr	r3, [pc, #76]	@ (80070bc <HAL_RCC_GetSysClockFreq+0x108>)
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	091b      	lsrs	r3, r3, #4
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	3301      	adds	r3, #1
 8007078:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800707a:	4b10      	ldr	r3, [pc, #64]	@ (80070bc <HAL_RCC_GetSysClockFreq+0x108>)
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	0a1b      	lsrs	r3, r3, #8
 8007080:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	fb03 f202 	mul.w	r2, r3, r2
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007090:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007092:	4b0a      	ldr	r3, [pc, #40]	@ (80070bc <HAL_RCC_GetSysClockFreq+0x108>)
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	0e5b      	lsrs	r3, r3, #25
 8007098:	f003 0303 	and.w	r3, r3, #3
 800709c:	3301      	adds	r3, #1
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80070ac:	69bb      	ldr	r3, [r7, #24]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3724      	adds	r7, #36	@ 0x24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	40021000 	.word	0x40021000
 80070c0:	0800d974 	.word	0x0800d974
 80070c4:	00f42400 	.word	0x00f42400
 80070c8:	007a1200 	.word	0x007a1200

080070cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070cc:	b480      	push	{r7}
 80070ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070d0:	4b03      	ldr	r3, [pc, #12]	@ (80070e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80070d2:	681b      	ldr	r3, [r3, #0]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	2000000c 	.word	0x2000000c

080070e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80070e8:	f7ff fff0 	bl	80070cc <HAL_RCC_GetHCLKFreq>
 80070ec:	4602      	mov	r2, r0
 80070ee:	4b06      	ldr	r3, [pc, #24]	@ (8007108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	0a1b      	lsrs	r3, r3, #8
 80070f4:	f003 0307 	and.w	r3, r3, #7
 80070f8:	4904      	ldr	r1, [pc, #16]	@ (800710c <HAL_RCC_GetPCLK1Freq+0x28>)
 80070fa:	5ccb      	ldrb	r3, [r1, r3]
 80070fc:	f003 031f 	and.w	r3, r3, #31
 8007100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007104:	4618      	mov	r0, r3
 8007106:	bd80      	pop	{r7, pc}
 8007108:	40021000 	.word	0x40021000
 800710c:	0800d96c 	.word	0x0800d96c

08007110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007114:	f7ff ffda 	bl	80070cc <HAL_RCC_GetHCLKFreq>
 8007118:	4602      	mov	r2, r0
 800711a:	4b06      	ldr	r3, [pc, #24]	@ (8007134 <HAL_RCC_GetPCLK2Freq+0x24>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	0adb      	lsrs	r3, r3, #11
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	4904      	ldr	r1, [pc, #16]	@ (8007138 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007126:	5ccb      	ldrb	r3, [r1, r3]
 8007128:	f003 031f 	and.w	r3, r3, #31
 800712c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007130:	4618      	mov	r0, r3
 8007132:	bd80      	pop	{r7, pc}
 8007134:	40021000 	.word	0x40021000
 8007138:	0800d96c 	.word	0x0800d96c

0800713c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007144:	2300      	movs	r3, #0
 8007146:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007148:	4b2a      	ldr	r3, [pc, #168]	@ (80071f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800714a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800714c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007154:	f7ff f8e2 	bl	800631c <HAL_PWREx_GetVoltageRange>
 8007158:	6178      	str	r0, [r7, #20]
 800715a:	e014      	b.n	8007186 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800715c:	4b25      	ldr	r3, [pc, #148]	@ (80071f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800715e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007160:	4a24      	ldr	r2, [pc, #144]	@ (80071f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007162:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007166:	6593      	str	r3, [r2, #88]	@ 0x58
 8007168:	4b22      	ldr	r3, [pc, #136]	@ (80071f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800716a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800716c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007174:	f7ff f8d2 	bl	800631c <HAL_PWREx_GetVoltageRange>
 8007178:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800717a:	4b1e      	ldr	r3, [pc, #120]	@ (80071f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800717c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800717e:	4a1d      	ldr	r2, [pc, #116]	@ (80071f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007180:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007184:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800718c:	d10b      	bne.n	80071a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b80      	cmp	r3, #128	@ 0x80
 8007192:	d919      	bls.n	80071c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2ba0      	cmp	r3, #160	@ 0xa0
 8007198:	d902      	bls.n	80071a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800719a:	2302      	movs	r3, #2
 800719c:	613b      	str	r3, [r7, #16]
 800719e:	e013      	b.n	80071c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80071a0:	2301      	movs	r3, #1
 80071a2:	613b      	str	r3, [r7, #16]
 80071a4:	e010      	b.n	80071c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b80      	cmp	r3, #128	@ 0x80
 80071aa:	d902      	bls.n	80071b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80071ac:	2303      	movs	r3, #3
 80071ae:	613b      	str	r3, [r7, #16]
 80071b0:	e00a      	b.n	80071c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b80      	cmp	r3, #128	@ 0x80
 80071b6:	d102      	bne.n	80071be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80071b8:	2302      	movs	r3, #2
 80071ba:	613b      	str	r3, [r7, #16]
 80071bc:	e004      	b.n	80071c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2b70      	cmp	r3, #112	@ 0x70
 80071c2:	d101      	bne.n	80071c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80071c4:	2301      	movs	r3, #1
 80071c6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80071c8:	4b0b      	ldr	r3, [pc, #44]	@ (80071f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f023 0207 	bic.w	r2, r3, #7
 80071d0:	4909      	ldr	r1, [pc, #36]	@ (80071f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80071d8:	4b07      	ldr	r3, [pc, #28]	@ (80071f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0307 	and.w	r3, r3, #7
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d001      	beq.n	80071ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e000      	b.n	80071ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	40021000 	.word	0x40021000
 80071f8:	40022000 	.word	0x40022000

080071fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007204:	2300      	movs	r3, #0
 8007206:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007208:	2300      	movs	r3, #0
 800720a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007214:	2b00      	cmp	r3, #0
 8007216:	d041      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800721c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007220:	d02a      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007222:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007226:	d824      	bhi.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007228:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800722c:	d008      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800722e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007232:	d81e      	bhi.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00a      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007238:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800723c:	d010      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800723e:	e018      	b.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007240:	4b86      	ldr	r3, [pc, #536]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	4a85      	ldr	r2, [pc, #532]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800724a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800724c:	e015      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	3304      	adds	r3, #4
 8007252:	2100      	movs	r1, #0
 8007254:	4618      	mov	r0, r3
 8007256:	f000 fabb 	bl	80077d0 <RCCEx_PLLSAI1_Config>
 800725a:	4603      	mov	r3, r0
 800725c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800725e:	e00c      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	3320      	adds	r3, #32
 8007264:	2100      	movs	r1, #0
 8007266:	4618      	mov	r0, r3
 8007268:	f000 fba6 	bl	80079b8 <RCCEx_PLLSAI2_Config>
 800726c:	4603      	mov	r3, r0
 800726e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007270:	e003      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	74fb      	strb	r3, [r7, #19]
      break;
 8007276:	e000      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007278:	bf00      	nop
    }

    if(ret == HAL_OK)
 800727a:	7cfb      	ldrb	r3, [r7, #19]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10b      	bne.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007280:	4b76      	ldr	r3, [pc, #472]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007286:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800728e:	4973      	ldr	r1, [pc, #460]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007290:	4313      	orrs	r3, r2
 8007292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007296:	e001      	b.n	800729c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007298:	7cfb      	ldrb	r3, [r7, #19]
 800729a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d041      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80072b0:	d02a      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80072b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80072b6:	d824      	bhi.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80072b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072bc:	d008      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80072be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072c2:	d81e      	bhi.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00a      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80072c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072cc:	d010      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80072ce:	e018      	b.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80072d0:	4b62      	ldr	r3, [pc, #392]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	4a61      	ldr	r2, [pc, #388]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80072dc:	e015      	b.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	3304      	adds	r3, #4
 80072e2:	2100      	movs	r1, #0
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 fa73 	bl	80077d0 <RCCEx_PLLSAI1_Config>
 80072ea:	4603      	mov	r3, r0
 80072ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80072ee:	e00c      	b.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	3320      	adds	r3, #32
 80072f4:	2100      	movs	r1, #0
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 fb5e 	bl	80079b8 <RCCEx_PLLSAI2_Config>
 80072fc:	4603      	mov	r3, r0
 80072fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007300:	e003      	b.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	74fb      	strb	r3, [r7, #19]
      break;
 8007306:	e000      	b.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007308:	bf00      	nop
    }

    if(ret == HAL_OK)
 800730a:	7cfb      	ldrb	r3, [r7, #19]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10b      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007310:	4b52      	ldr	r3, [pc, #328]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007316:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800731e:	494f      	ldr	r1, [pc, #316]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007320:	4313      	orrs	r3, r2
 8007322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007326:	e001      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007328:	7cfb      	ldrb	r3, [r7, #19]
 800732a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 80a0 	beq.w	800747a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800733a:	2300      	movs	r3, #0
 800733c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800733e:	4b47      	ldr	r3, [pc, #284]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800734a:	2301      	movs	r3, #1
 800734c:	e000      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800734e:	2300      	movs	r3, #0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00d      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007354:	4b41      	ldr	r3, [pc, #260]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007358:	4a40      	ldr	r2, [pc, #256]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800735a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800735e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007360:	4b3e      	ldr	r3, [pc, #248]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007368:	60bb      	str	r3, [r7, #8]
 800736a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800736c:	2301      	movs	r3, #1
 800736e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007370:	4b3b      	ldr	r3, [pc, #236]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a3a      	ldr	r2, [pc, #232]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007376:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800737a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800737c:	f7fb ffb4 	bl	80032e8 <HAL_GetTick>
 8007380:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007382:	e009      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007384:	f7fb ffb0 	bl	80032e8 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d902      	bls.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	74fb      	strb	r3, [r7, #19]
        break;
 8007396:	e005      	b.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007398:	4b31      	ldr	r3, [pc, #196]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d0ef      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80073a4:	7cfb      	ldrb	r3, [r7, #19]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d15c      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80073aa:	4b2c      	ldr	r3, [pc, #176]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d01f      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d019      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073c8:	4b24      	ldr	r3, [pc, #144]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073d4:	4b21      	ldr	r3, [pc, #132]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073da:	4a20      	ldr	r2, [pc, #128]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073e4:	4b1d      	ldr	r3, [pc, #116]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ea:	4a1c      	ldr	r2, [pc, #112]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80073f4:	4a19      	ldr	r2, [pc, #100]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f003 0301 	and.w	r3, r3, #1
 8007402:	2b00      	cmp	r3, #0
 8007404:	d016      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007406:	f7fb ff6f 	bl	80032e8 <HAL_GetTick>
 800740a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800740c:	e00b      	b.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800740e:	f7fb ff6b 	bl	80032e8 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800741c:	4293      	cmp	r3, r2
 800741e:	d902      	bls.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	74fb      	strb	r3, [r7, #19]
            break;
 8007424:	e006      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007426:	4b0d      	ldr	r3, [pc, #52]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d0ec      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007434:	7cfb      	ldrb	r3, [r7, #19]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10c      	bne.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800743a:	4b08      	ldr	r3, [pc, #32]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800743c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007440:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800744a:	4904      	ldr	r1, [pc, #16]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800744c:	4313      	orrs	r3, r2
 800744e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007452:	e009      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007454:	7cfb      	ldrb	r3, [r7, #19]
 8007456:	74bb      	strb	r3, [r7, #18]
 8007458:	e006      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800745a:	bf00      	nop
 800745c:	40021000 	.word	0x40021000
 8007460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007464:	7cfb      	ldrb	r3, [r7, #19]
 8007466:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007468:	7c7b      	ldrb	r3, [r7, #17]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d105      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800746e:	4b9e      	ldr	r3, [pc, #632]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007472:	4a9d      	ldr	r2, [pc, #628]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007474:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007478:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007486:	4b98      	ldr	r3, [pc, #608]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800748c:	f023 0203 	bic.w	r2, r3, #3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007494:	4994      	ldr	r1, [pc, #592]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007496:	4313      	orrs	r3, r2
 8007498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00a      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074a8:	4b8f      	ldr	r3, [pc, #572]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ae:	f023 020c 	bic.w	r2, r3, #12
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074b6:	498c      	ldr	r1, [pc, #560]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0304 	and.w	r3, r3, #4
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074ca:	4b87      	ldr	r3, [pc, #540]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d8:	4983      	ldr	r1, [pc, #524]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0308 	and.w	r3, r3, #8
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00a      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074ec:	4b7e      	ldr	r3, [pc, #504]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074fa:	497b      	ldr	r1, [pc, #492]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0310 	and.w	r3, r3, #16
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800750e:	4b76      	ldr	r3, [pc, #472]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007514:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800751c:	4972      	ldr	r1, [pc, #456]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800751e:	4313      	orrs	r3, r2
 8007520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0320 	and.w	r3, r3, #32
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007530:	4b6d      	ldr	r3, [pc, #436]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007536:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800753e:	496a      	ldr	r1, [pc, #424]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007540:	4313      	orrs	r3, r2
 8007542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007552:	4b65      	ldr	r3, [pc, #404]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007558:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007560:	4961      	ldr	r1, [pc, #388]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007562:	4313      	orrs	r3, r2
 8007564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00a      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007574:	4b5c      	ldr	r3, [pc, #368]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800757a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007582:	4959      	ldr	r1, [pc, #356]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007584:	4313      	orrs	r3, r2
 8007586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00a      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007596:	4b54      	ldr	r3, [pc, #336]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800759c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075a4:	4950      	ldr	r1, [pc, #320]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00a      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075b8:	4b4b      	ldr	r3, [pc, #300]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075be:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075c6:	4948      	ldr	r1, [pc, #288]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075da:	4b43      	ldr	r3, [pc, #268]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075e8:	493f      	ldr	r1, [pc, #252]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d028      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075fc:	4b3a      	ldr	r3, [pc, #232]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007602:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800760a:	4937      	ldr	r1, [pc, #220]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800760c:	4313      	orrs	r3, r2
 800760e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007616:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800761a:	d106      	bne.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800761c:	4b32      	ldr	r3, [pc, #200]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	4a31      	ldr	r2, [pc, #196]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007622:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007626:	60d3      	str	r3, [r2, #12]
 8007628:	e011      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800762e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007632:	d10c      	bne.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	3304      	adds	r3, #4
 8007638:	2101      	movs	r1, #1
 800763a:	4618      	mov	r0, r3
 800763c:	f000 f8c8 	bl	80077d0 <RCCEx_PLLSAI1_Config>
 8007640:	4603      	mov	r3, r0
 8007642:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007644:	7cfb      	ldrb	r3, [r7, #19]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800764a:	7cfb      	ldrb	r3, [r7, #19]
 800764c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d028      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800765a:	4b23      	ldr	r3, [pc, #140]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800765c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007660:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007668:	491f      	ldr	r1, [pc, #124]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800766a:	4313      	orrs	r3, r2
 800766c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007674:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007678:	d106      	bne.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800767a:	4b1b      	ldr	r3, [pc, #108]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	4a1a      	ldr	r2, [pc, #104]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007680:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007684:	60d3      	str	r3, [r2, #12]
 8007686:	e011      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800768c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007690:	d10c      	bne.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	3304      	adds	r3, #4
 8007696:	2101      	movs	r1, #1
 8007698:	4618      	mov	r0, r3
 800769a:	f000 f899 	bl	80077d0 <RCCEx_PLLSAI1_Config>
 800769e:	4603      	mov	r3, r0
 80076a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80076a2:	7cfb      	ldrb	r3, [r7, #19]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80076a8:	7cfb      	ldrb	r3, [r7, #19]
 80076aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d02b      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076b8:	4b0b      	ldr	r3, [pc, #44]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076c6:	4908      	ldr	r1, [pc, #32]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076d6:	d109      	bne.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076d8:	4b03      	ldr	r3, [pc, #12]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	4a02      	ldr	r2, [pc, #8]	@ (80076e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076e2:	60d3      	str	r3, [r2, #12]
 80076e4:	e014      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80076e6:	bf00      	nop
 80076e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076f4:	d10c      	bne.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	3304      	adds	r3, #4
 80076fa:	2101      	movs	r1, #1
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 f867 	bl	80077d0 <RCCEx_PLLSAI1_Config>
 8007702:	4603      	mov	r3, r0
 8007704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007706:	7cfb      	ldrb	r3, [r7, #19]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800770c:	7cfb      	ldrb	r3, [r7, #19]
 800770e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d02f      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800771c:	4b2b      	ldr	r3, [pc, #172]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800771e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007722:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800772a:	4928      	ldr	r1, [pc, #160]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800772c:	4313      	orrs	r3, r2
 800772e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007736:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800773a:	d10d      	bne.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	3304      	adds	r3, #4
 8007740:	2102      	movs	r1, #2
 8007742:	4618      	mov	r0, r3
 8007744:	f000 f844 	bl	80077d0 <RCCEx_PLLSAI1_Config>
 8007748:	4603      	mov	r3, r0
 800774a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800774c:	7cfb      	ldrb	r3, [r7, #19]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d014      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007752:	7cfb      	ldrb	r3, [r7, #19]
 8007754:	74bb      	strb	r3, [r7, #18]
 8007756:	e011      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800775c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007760:	d10c      	bne.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	3320      	adds	r3, #32
 8007766:	2102      	movs	r1, #2
 8007768:	4618      	mov	r0, r3
 800776a:	f000 f925 	bl	80079b8 <RCCEx_PLLSAI2_Config>
 800776e:	4603      	mov	r3, r0
 8007770:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007772:	7cfb      	ldrb	r3, [r7, #19]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007778:	7cfb      	ldrb	r3, [r7, #19]
 800777a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00a      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007788:	4b10      	ldr	r3, [pc, #64]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800778a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800778e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007796:	490d      	ldr	r1, [pc, #52]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007798:	4313      	orrs	r3, r2
 800779a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00b      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80077aa:	4b08      	ldr	r3, [pc, #32]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80077ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077ba:	4904      	ldr	r1, [pc, #16]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80077c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	40021000 	.word	0x40021000

080077d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80077de:	4b75      	ldr	r3, [pc, #468]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f003 0303 	and.w	r3, r3, #3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d018      	beq.n	800781c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80077ea:	4b72      	ldr	r3, [pc, #456]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f003 0203 	and.w	r2, r3, #3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d10d      	bne.n	8007816 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
       ||
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d009      	beq.n	8007816 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007802:	4b6c      	ldr	r3, [pc, #432]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	091b      	lsrs	r3, r3, #4
 8007808:	f003 0307 	and.w	r3, r3, #7
 800780c:	1c5a      	adds	r2, r3, #1
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	685b      	ldr	r3, [r3, #4]
       ||
 8007812:	429a      	cmp	r2, r3
 8007814:	d047      	beq.n	80078a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	73fb      	strb	r3, [r7, #15]
 800781a:	e044      	b.n	80078a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b03      	cmp	r3, #3
 8007822:	d018      	beq.n	8007856 <RCCEx_PLLSAI1_Config+0x86>
 8007824:	2b03      	cmp	r3, #3
 8007826:	d825      	bhi.n	8007874 <RCCEx_PLLSAI1_Config+0xa4>
 8007828:	2b01      	cmp	r3, #1
 800782a:	d002      	beq.n	8007832 <RCCEx_PLLSAI1_Config+0x62>
 800782c:	2b02      	cmp	r3, #2
 800782e:	d009      	beq.n	8007844 <RCCEx_PLLSAI1_Config+0x74>
 8007830:	e020      	b.n	8007874 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007832:	4b60      	ldr	r3, [pc, #384]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d11d      	bne.n	800787a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007842:	e01a      	b.n	800787a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007844:	4b5b      	ldr	r3, [pc, #364]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800784c:	2b00      	cmp	r3, #0
 800784e:	d116      	bne.n	800787e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007854:	e013      	b.n	800787e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007856:	4b57      	ldr	r3, [pc, #348]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10f      	bne.n	8007882 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007862:	4b54      	ldr	r3, [pc, #336]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d109      	bne.n	8007882 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007872:	e006      	b.n	8007882 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	73fb      	strb	r3, [r7, #15]
      break;
 8007878:	e004      	b.n	8007884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800787a:	bf00      	nop
 800787c:	e002      	b.n	8007884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800787e:	bf00      	nop
 8007880:	e000      	b.n	8007884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007882:	bf00      	nop
    }

    if(status == HAL_OK)
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10d      	bne.n	80078a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800788a:	4b4a      	ldr	r3, [pc, #296]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6819      	ldr	r1, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	3b01      	subs	r3, #1
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	430b      	orrs	r3, r1
 80078a0:	4944      	ldr	r1, [pc, #272]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d17d      	bne.n	80079a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80078ac:	4b41      	ldr	r3, [pc, #260]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a40      	ldr	r2, [pc, #256]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80078b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078b8:	f7fb fd16 	bl	80032e8 <HAL_GetTick>
 80078bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80078be:	e009      	b.n	80078d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078c0:	f7fb fd12 	bl	80032e8 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d902      	bls.n	80078d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	73fb      	strb	r3, [r7, #15]
        break;
 80078d2:	e005      	b.n	80078e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80078d4:	4b37      	ldr	r3, [pc, #220]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1ef      	bne.n	80078c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d160      	bne.n	80079a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d111      	bne.n	8007910 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80078ec:	4b31      	ldr	r3, [pc, #196]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80078f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	6892      	ldr	r2, [r2, #8]
 80078fc:	0211      	lsls	r1, r2, #8
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	68d2      	ldr	r2, [r2, #12]
 8007902:	0912      	lsrs	r2, r2, #4
 8007904:	0452      	lsls	r2, r2, #17
 8007906:	430a      	orrs	r2, r1
 8007908:	492a      	ldr	r1, [pc, #168]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800790a:	4313      	orrs	r3, r2
 800790c:	610b      	str	r3, [r1, #16]
 800790e:	e027      	b.n	8007960 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d112      	bne.n	800793c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007916:	4b27      	ldr	r3, [pc, #156]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800791e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	6892      	ldr	r2, [r2, #8]
 8007926:	0211      	lsls	r1, r2, #8
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	6912      	ldr	r2, [r2, #16]
 800792c:	0852      	lsrs	r2, r2, #1
 800792e:	3a01      	subs	r2, #1
 8007930:	0552      	lsls	r2, r2, #21
 8007932:	430a      	orrs	r2, r1
 8007934:	491f      	ldr	r1, [pc, #124]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007936:	4313      	orrs	r3, r2
 8007938:	610b      	str	r3, [r1, #16]
 800793a:	e011      	b.n	8007960 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800793c:	4b1d      	ldr	r3, [pc, #116]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007944:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	6892      	ldr	r2, [r2, #8]
 800794c:	0211      	lsls	r1, r2, #8
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	6952      	ldr	r2, [r2, #20]
 8007952:	0852      	lsrs	r2, r2, #1
 8007954:	3a01      	subs	r2, #1
 8007956:	0652      	lsls	r2, r2, #25
 8007958:	430a      	orrs	r2, r1
 800795a:	4916      	ldr	r1, [pc, #88]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800795c:	4313      	orrs	r3, r2
 800795e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007960:	4b14      	ldr	r3, [pc, #80]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a13      	ldr	r2, [pc, #76]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007966:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800796a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800796c:	f7fb fcbc 	bl	80032e8 <HAL_GetTick>
 8007970:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007972:	e009      	b.n	8007988 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007974:	f7fb fcb8 	bl	80032e8 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	2b02      	cmp	r3, #2
 8007980:	d902      	bls.n	8007988 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	73fb      	strb	r3, [r7, #15]
          break;
 8007986:	e005      	b.n	8007994 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007988:	4b0a      	ldr	r3, [pc, #40]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d0ef      	beq.n	8007974 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d106      	bne.n	80079a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800799a:	4b06      	ldr	r3, [pc, #24]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800799c:	691a      	ldr	r2, [r3, #16]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	4904      	ldr	r1, [pc, #16]	@ (80079b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	40021000 	.word	0x40021000

080079b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80079c6:	4b6a      	ldr	r3, [pc, #424]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f003 0303 	and.w	r3, r3, #3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d018      	beq.n	8007a04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80079d2:	4b67      	ldr	r3, [pc, #412]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	f003 0203 	and.w	r2, r3, #3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d10d      	bne.n	80079fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
       ||
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d009      	beq.n	80079fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80079ea:	4b61      	ldr	r3, [pc, #388]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	091b      	lsrs	r3, r3, #4
 80079f0:	f003 0307 	and.w	r3, r3, #7
 80079f4:	1c5a      	adds	r2, r3, #1
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
       ||
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d047      	beq.n	8007a8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	73fb      	strb	r3, [r7, #15]
 8007a02:	e044      	b.n	8007a8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d018      	beq.n	8007a3e <RCCEx_PLLSAI2_Config+0x86>
 8007a0c:	2b03      	cmp	r3, #3
 8007a0e:	d825      	bhi.n	8007a5c <RCCEx_PLLSAI2_Config+0xa4>
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d002      	beq.n	8007a1a <RCCEx_PLLSAI2_Config+0x62>
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d009      	beq.n	8007a2c <RCCEx_PLLSAI2_Config+0x74>
 8007a18:	e020      	b.n	8007a5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007a1a:	4b55      	ldr	r3, [pc, #340]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d11d      	bne.n	8007a62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a2a:	e01a      	b.n	8007a62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007a2c:	4b50      	ldr	r3, [pc, #320]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d116      	bne.n	8007a66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a3c:	e013      	b.n	8007a66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007a3e:	4b4c      	ldr	r3, [pc, #304]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10f      	bne.n	8007a6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007a4a:	4b49      	ldr	r3, [pc, #292]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d109      	bne.n	8007a6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a5a:	e006      	b.n	8007a6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a60:	e004      	b.n	8007a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007a62:	bf00      	nop
 8007a64:	e002      	b.n	8007a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007a66:	bf00      	nop
 8007a68:	e000      	b.n	8007a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007a6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10d      	bne.n	8007a8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007a72:	4b3f      	ldr	r3, [pc, #252]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6819      	ldr	r1, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	3b01      	subs	r3, #1
 8007a84:	011b      	lsls	r3, r3, #4
 8007a86:	430b      	orrs	r3, r1
 8007a88:	4939      	ldr	r1, [pc, #228]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d167      	bne.n	8007b64 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007a94:	4b36      	ldr	r3, [pc, #216]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a35      	ldr	r2, [pc, #212]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aa0:	f7fb fc22 	bl	80032e8 <HAL_GetTick>
 8007aa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007aa6:	e009      	b.n	8007abc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007aa8:	f7fb fc1e 	bl	80032e8 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d902      	bls.n	8007abc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	73fb      	strb	r3, [r7, #15]
        break;
 8007aba:	e005      	b.n	8007ac8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007abc:	4b2c      	ldr	r3, [pc, #176]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1ef      	bne.n	8007aa8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d14a      	bne.n	8007b64 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d111      	bne.n	8007af8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007ad4:	4b26      	ldr	r3, [pc, #152]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007adc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	6892      	ldr	r2, [r2, #8]
 8007ae4:	0211      	lsls	r1, r2, #8
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	68d2      	ldr	r2, [r2, #12]
 8007aea:	0912      	lsrs	r2, r2, #4
 8007aec:	0452      	lsls	r2, r2, #17
 8007aee:	430a      	orrs	r2, r1
 8007af0:	491f      	ldr	r1, [pc, #124]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	614b      	str	r3, [r1, #20]
 8007af6:	e011      	b.n	8007b1c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007af8:	4b1d      	ldr	r3, [pc, #116]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007b00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	6892      	ldr	r2, [r2, #8]
 8007b08:	0211      	lsls	r1, r2, #8
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	6912      	ldr	r2, [r2, #16]
 8007b0e:	0852      	lsrs	r2, r2, #1
 8007b10:	3a01      	subs	r2, #1
 8007b12:	0652      	lsls	r2, r2, #25
 8007b14:	430a      	orrs	r2, r1
 8007b16:	4916      	ldr	r1, [pc, #88]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007b1c:	4b14      	ldr	r3, [pc, #80]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a13      	ldr	r2, [pc, #76]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b28:	f7fb fbde 	bl	80032e8 <HAL_GetTick>
 8007b2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007b2e:	e009      	b.n	8007b44 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007b30:	f7fb fbda 	bl	80032e8 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d902      	bls.n	8007b44 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	73fb      	strb	r3, [r7, #15]
          break;
 8007b42:	e005      	b.n	8007b50 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007b44:	4b0a      	ldr	r3, [pc, #40]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0ef      	beq.n	8007b30 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d106      	bne.n	8007b64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007b56:	4b06      	ldr	r3, [pc, #24]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b58:	695a      	ldr	r2, [r3, #20]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	4904      	ldr	r1, [pc, #16]	@ (8007b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	40021000 	.word	0x40021000

08007b74 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d079      	beq.n	8007c7a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d106      	bne.n	8007ba0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7fb f958 	bl	8002e50 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	f003 0310 	and.w	r3, r3, #16
 8007bb2:	2b10      	cmp	r3, #16
 8007bb4:	d058      	beq.n	8007c68 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	22ca      	movs	r2, #202	@ 0xca
 8007bbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2253      	movs	r2, #83	@ 0x53
 8007bc4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fa4e 	bl	8008068 <RTC_EnterInitMode>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d127      	bne.n	8007c26 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	6812      	ldr	r2, [r2, #0]
 8007be0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007be4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007be8:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	6899      	ldr	r1, [r3, #8]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	431a      	orrs	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	430a      	orrs	r2, r1
 8007c06:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	68d2      	ldr	r2, [r2, #12]
 8007c10:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6919      	ldr	r1, [r3, #16]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	041a      	lsls	r2, r3, #16
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fa52 	bl	80080d0 <RTC_ExitInitMode>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d113      	bne.n	8007c5e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 0203 	bic.w	r2, r2, #3
 8007c44:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	69da      	ldr	r2, [r3, #28]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	431a      	orrs	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	22ff      	movs	r2, #255	@ 0xff
 8007c64:	625a      	str	r2, [r3, #36]	@ 0x24
 8007c66:	e001      	b.n	8007c6c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d103      	bne.n	8007c7a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007c84:	b590      	push	{r4, r7, lr}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d101      	bne.n	8007c9e <HAL_RTC_SetTime+0x1a>
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	e08b      	b.n	8007db6 <HAL_RTC_SetTime+0x132>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2202      	movs	r2, #2
 8007caa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	22ca      	movs	r2, #202	@ 0xca
 8007cb4:	625a      	str	r2, [r3, #36]	@ 0x24
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2253      	movs	r2, #83	@ 0x53
 8007cbc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 f9d2 	bl	8008068 <RTC_EnterInitMode>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007cc8:	7cfb      	ldrb	r3, [r7, #19]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d163      	bne.n	8007d96 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d126      	bne.n	8007d22 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d102      	bne.n	8007ce8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 fa2d 	bl	800814c <RTC_ByteToBcd2>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	785b      	ldrb	r3, [r3, #1]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 fa26 	bl	800814c <RTC_ByteToBcd2>
 8007d00:	4603      	mov	r3, r0
 8007d02:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007d04:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	789b      	ldrb	r3, [r3, #2]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 fa1e 	bl	800814c <RTC_ByteToBcd2>
 8007d10:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007d12:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	78db      	ldrb	r3, [r3, #3]
 8007d1a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	617b      	str	r3, [r7, #20]
 8007d20:	e018      	b.n	8007d54 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d102      	bne.n	8007d36 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2200      	movs	r2, #0
 8007d34:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	785b      	ldrb	r3, [r3, #1]
 8007d40:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007d42:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007d48:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	78db      	ldrb	r3, [r3, #3]
 8007d4e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007d50:	4313      	orrs	r3, r2
 8007d52:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007d5e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007d62:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689a      	ldr	r2, [r3, #8]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007d72:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6899      	ldr	r1, [r3, #8]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	68da      	ldr	r2, [r3, #12]
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	431a      	orrs	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 f99f 	bl	80080d0 <RTC_ExitInitMode>
 8007d92:	4603      	mov	r3, r0
 8007d94:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	22ff      	movs	r2, #255	@ 0xff
 8007d9c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007d9e:	7cfb      	ldrb	r3, [r7, #19]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d103      	bne.n	8007dac <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007db4:	7cfb      	ldrb	r3, [r7, #19]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	371c      	adds	r7, #28
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd90      	pop	{r4, r7, pc}

08007dbe <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b086      	sub	sp, #24
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	60f8      	str	r0, [r7, #12]
 8007dc6:	60b9      	str	r1, [r7, #8]
 8007dc8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007dec:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007df0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	0c1b      	lsrs	r3, r3, #16
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	0a1b      	lsrs	r3, r3, #8
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	0d9b      	lsrs	r3, r3, #22
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d11a      	bne.n	8007e6c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 f9a6 	bl	800818c <RTC_Bcd2ToByte>
 8007e40:	4603      	mov	r3, r0
 8007e42:	461a      	mov	r2, r3
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	785b      	ldrb	r3, [r3, #1]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 f99d 	bl	800818c <RTC_Bcd2ToByte>
 8007e52:	4603      	mov	r3, r0
 8007e54:	461a      	mov	r2, r3
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	789b      	ldrb	r3, [r3, #2]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 f994 	bl	800818c <RTC_Bcd2ToByte>
 8007e64:	4603      	mov	r3, r0
 8007e66:	461a      	mov	r2, r3
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007e76:	b590      	push	{r4, r7, lr}
 8007e78:	b087      	sub	sp, #28
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d101      	bne.n	8007e90 <HAL_RTC_SetDate+0x1a>
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	e075      	b.n	8007f7c <HAL_RTC_SetDate+0x106>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10e      	bne.n	8007ec4 <HAL_RTC_SetDate+0x4e>
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	785b      	ldrb	r3, [r3, #1]
 8007eaa:	f003 0310 	and.w	r3, r3, #16
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d008      	beq.n	8007ec4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	785b      	ldrb	r3, [r3, #1]
 8007eb6:	f023 0310 	bic.w	r3, r3, #16
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	330a      	adds	r3, #10
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d11c      	bne.n	8007f04 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	78db      	ldrb	r3, [r3, #3]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 f93c 	bl	800814c <RTC_ByteToBcd2>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	785b      	ldrb	r3, [r3, #1]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 f935 	bl	800814c <RTC_ByteToBcd2>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007ee6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	789b      	ldrb	r3, [r3, #2]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 f92d 	bl	800814c <RTC_ByteToBcd2>
 8007ef2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007ef4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007efe:	4313      	orrs	r3, r2
 8007f00:	617b      	str	r3, [r7, #20]
 8007f02:	e00e      	b.n	8007f22 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	78db      	ldrb	r3, [r3, #3]
 8007f08:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	785b      	ldrb	r3, [r3, #1]
 8007f0e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007f10:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007f16:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	22ca      	movs	r2, #202	@ 0xca
 8007f28:	625a      	str	r2, [r3, #36]	@ 0x24
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2253      	movs	r2, #83	@ 0x53
 8007f30:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f000 f898 	bl	8008068 <RTC_EnterInitMode>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007f3c:	7cfb      	ldrb	r3, [r7, #19]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10c      	bne.n	8007f5c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007f4c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007f50:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 f8bc 	bl	80080d0 <RTC_ExitInitMode>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	22ff      	movs	r2, #255	@ 0xff
 8007f62:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007f64:	7cfb      	ldrb	r3, [r7, #19]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d103      	bne.n	8007f72 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007f7a:	7cfb      	ldrb	r3, [r7, #19]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	371c      	adds	r7, #28
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd90      	pop	{r4, r7, pc}

08007f84 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007f9a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007f9e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	0c1b      	lsrs	r3, r3, #16
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	0a1b      	lsrs	r3, r3, #8
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	f003 031f 	and.w	r3, r3, #31
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	0b5b      	lsrs	r3, r3, #13
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	f003 0307 	and.w	r3, r3, #7
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d11a      	bne.n	8008014 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	78db      	ldrb	r3, [r3, #3]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 f8d2 	bl	800818c <RTC_Bcd2ToByte>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	461a      	mov	r2, r3
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	785b      	ldrb	r3, [r3, #1]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 f8c9 	bl	800818c <RTC_Bcd2ToByte>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	789b      	ldrb	r3, [r3, #2]
 8008006:	4618      	mov	r0, r3
 8008008:	f000 f8c0 	bl	800818c <RTC_Bcd2ToByte>
 800800c:	4603      	mov	r3, r0
 800800e:	461a      	mov	r2, r3
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3718      	adds	r7, #24
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
	...

08008020 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a0d      	ldr	r2, [pc, #52]	@ (8008064 <HAL_RTC_WaitForSynchro+0x44>)
 800802e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008030:	f7fb f95a 	bl	80032e8 <HAL_GetTick>
 8008034:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008036:	e009      	b.n	800804c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008038:	f7fb f956 	bl	80032e8 <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008046:	d901      	bls.n	800804c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e007      	b.n	800805c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	f003 0320 	and.w	r3, r3, #32
 8008056:	2b00      	cmp	r3, #0
 8008058:	d0ee      	beq.n	8008038 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	0003ff5f 	.word	0x0003ff5f

08008068 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800807e:	2b00      	cmp	r3, #0
 8008080:	d120      	bne.n	80080c4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800808a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800808c:	f7fb f92c 	bl	80032e8 <HAL_GetTick>
 8008090:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008092:	e00d      	b.n	80080b0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008094:	f7fb f928 	bl	80032e8 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080a2:	d905      	bls.n	80080b0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2203      	movs	r2, #3
 80080ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d102      	bne.n	80080c4 <RTC_EnterInitMode+0x5c>
 80080be:	7bfb      	ldrb	r3, [r7, #15]
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d1e7      	bne.n	8008094 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80080dc:	4b1a      	ldr	r3, [pc, #104]	@ (8008148 <RTC_ExitInitMode+0x78>)
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	4a19      	ldr	r2, [pc, #100]	@ (8008148 <RTC_ExitInitMode+0x78>)
 80080e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080e6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80080e8:	4b17      	ldr	r3, [pc, #92]	@ (8008148 <RTC_ExitInitMode+0x78>)
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f003 0320 	and.w	r3, r3, #32
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10c      	bne.n	800810e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7ff ff93 	bl	8008020 <HAL_RTC_WaitForSynchro>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d01e      	beq.n	800813e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2203      	movs	r2, #3
 8008104:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	73fb      	strb	r3, [r7, #15]
 800810c:	e017      	b.n	800813e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800810e:	4b0e      	ldr	r3, [pc, #56]	@ (8008148 <RTC_ExitInitMode+0x78>)
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	4a0d      	ldr	r2, [pc, #52]	@ (8008148 <RTC_ExitInitMode+0x78>)
 8008114:	f023 0320 	bic.w	r3, r3, #32
 8008118:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff ff80 	bl	8008020 <HAL_RTC_WaitForSynchro>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d005      	beq.n	8008132 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2203      	movs	r2, #3
 800812a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008132:	4b05      	ldr	r3, [pc, #20]	@ (8008148 <RTC_ExitInitMode+0x78>)
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	4a04      	ldr	r2, [pc, #16]	@ (8008148 <RTC_ExitInitMode+0x78>)
 8008138:	f043 0320 	orr.w	r3, r3, #32
 800813c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800813e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	40002800 	.word	0x40002800

0800814c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	4603      	mov	r3, r0
 8008154:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008156:	2300      	movs	r3, #0
 8008158:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800815a:	79fb      	ldrb	r3, [r7, #7]
 800815c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800815e:	e005      	b.n	800816c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3301      	adds	r3, #1
 8008164:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8008166:	7afb      	ldrb	r3, [r7, #11]
 8008168:	3b0a      	subs	r3, #10
 800816a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800816c:	7afb      	ldrb	r3, [r7, #11]
 800816e:	2b09      	cmp	r3, #9
 8008170:	d8f6      	bhi.n	8008160 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	b2db      	uxtb	r3, r3
 8008176:	011b      	lsls	r3, r3, #4
 8008178:	b2da      	uxtb	r2, r3
 800817a:	7afb      	ldrb	r3, [r7, #11]
 800817c:	4313      	orrs	r3, r2
 800817e:	b2db      	uxtb	r3, r3
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8008196:	79fb      	ldrb	r3, [r7, #7]
 8008198:	091b      	lsrs	r3, r3, #4
 800819a:	b2db      	uxtb	r3, r3
 800819c:	461a      	mov	r2, r3
 800819e:	0092      	lsls	r2, r2, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80081a6:	79fb      	ldrb	r3, [r7, #7]
 80081a8:	f003 030f 	and.w	r3, r3, #15
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
 80081b0:	4413      	add	r3, r2
 80081b2:	b2db      	uxtb	r3, r3
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d101      	bne.n	80081da <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80081d6:	2302      	movs	r3, #2
 80081d8:	e07f      	b.n	80082da <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2202      	movs	r2, #2
 80081e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	22ca      	movs	r2, #202	@ 0xca
 80081f0:	625a      	str	r2, [r3, #36]	@ 0x24
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2253      	movs	r2, #83	@ 0x53
 80081f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008208:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	b2da      	uxtb	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800821a:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008226:	2b00      	cmp	r3, #0
 8008228:	d120      	bne.n	800826c <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 800822a:	f7fb f85d 	bl	80032e8 <HAL_GetTick>
 800822e:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8008230:	e015      	b.n	800825e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008232:	f7fb f859 	bl	80032e8 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008240:	d90d      	bls.n	800825e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	22ff      	movs	r2, #255	@ 0xff
 8008248:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2203      	movs	r2, #3
 800824e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e03d      	b.n	80082da <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f003 0304 	and.w	r3, r3, #4
 8008268:	2b00      	cmp	r3, #0
 800826a:	d0e2      	beq.n	8008232 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f023 0107 	bic.w	r1, r3, #7
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	430a      	orrs	r2, r1
 8008286:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008288:	4b16      	ldr	r3, [pc, #88]	@ (80082e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a15      	ldr	r2, [pc, #84]	@ (80082e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800828e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008292:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8008294:	4b13      	ldr	r3, [pc, #76]	@ (80082e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	4a12      	ldr	r2, [pc, #72]	@ (80082e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800829a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800829e:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80082ae:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	689a      	ldr	r2, [r3, #8]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80082be:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	22ff      	movs	r2, #255	@ 0xff
 80082c6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3718      	adds	r7, #24
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	40010400 	.word	0x40010400

080082e8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d101      	bne.n	80082fe <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80082fa:	2302      	movs	r3, #2
 80082fc:	e04d      	b.n	800839a <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2202      	movs	r2, #2
 800830a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	22ca      	movs	r2, #202	@ 0xca
 8008314:	625a      	str	r2, [r3, #36]	@ 0x24
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2253      	movs	r2, #83	@ 0x53
 800831c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	689a      	ldr	r2, [r3, #8]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800832c:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689a      	ldr	r2, [r3, #8]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800833c:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800833e:	f7fa ffd3 	bl	80032e8 <HAL_GetTick>
 8008342:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008344:	e015      	b.n	8008372 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008346:	f7fa ffcf 	bl	80032e8 <HAL_GetTick>
 800834a:	4602      	mov	r2, r0
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008354:	d90d      	bls.n	8008372 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	22ff      	movs	r2, #255	@ 0xff
 800835c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2203      	movs	r2, #3
 8008362:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e013      	b.n	800839a <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68db      	ldr	r3, [r3, #12]
 8008378:	f003 0304 	and.w	r3, r3, #4
 800837c:	2b00      	cmp	r3, #0
 800837e:	d0e2      	beq.n	8008346 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	22ff      	movs	r2, #255	@ 0xff
 8008386:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80083ac:	4b0f      	ldr	r3, [pc, #60]	@ (80083ec <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80083ae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80083b2:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00b      	beq.n	80083da <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	b2da      	uxtb	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80083d2:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7f9 fdcb 	bl	8001f70 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80083e2:	bf00      	nop
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	40010400 	.word	0x40010400

080083f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e040      	b.n	8008484 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008406:	2b00      	cmp	r3, #0
 8008408:	d106      	bne.n	8008418 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7fa fd56 	bl	8002ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2224      	movs	r2, #36	@ 0x24
 800841c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f022 0201 	bic.w	r2, r2, #1
 800842c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008432:	2b00      	cmp	r3, #0
 8008434:	d002      	beq.n	800843c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fb6a 	bl	8008b10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f8af 	bl	80085a0 <UART_SetConfig>
 8008442:	4603      	mov	r3, r0
 8008444:	2b01      	cmp	r3, #1
 8008446:	d101      	bne.n	800844c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e01b      	b.n	8008484 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800845a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689a      	ldr	r2, [r3, #8]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800846a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f042 0201 	orr.w	r2, r2, #1
 800847a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fbe9 	bl	8008c54 <UART_CheckIdleState>
 8008482:	4603      	mov	r3, r0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b08a      	sub	sp, #40	@ 0x28
 8008490:	af02      	add	r7, sp, #8
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	603b      	str	r3, [r7, #0]
 8008498:	4613      	mov	r3, r2
 800849a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084a0:	2b20      	cmp	r3, #32
 80084a2:	d177      	bne.n	8008594 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d002      	beq.n	80084b0 <HAL_UART_Transmit+0x24>
 80084aa:	88fb      	ldrh	r3, [r7, #6]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e070      	b.n	8008596 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2221      	movs	r2, #33	@ 0x21
 80084c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084c2:	f7fa ff11 	bl	80032e8 <HAL_GetTick>
 80084c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	88fa      	ldrh	r2, [r7, #6]
 80084cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	88fa      	ldrh	r2, [r7, #6]
 80084d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084e0:	d108      	bne.n	80084f4 <HAL_UART_Transmit+0x68>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d104      	bne.n	80084f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80084ea:	2300      	movs	r3, #0
 80084ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	61bb      	str	r3, [r7, #24]
 80084f2:	e003      	b.n	80084fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084f8:	2300      	movs	r3, #0
 80084fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80084fc:	e02f      	b.n	800855e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	2200      	movs	r2, #0
 8008506:	2180      	movs	r1, #128	@ 0x80
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f000 fc4b 	bl	8008da4 <UART_WaitOnFlagUntilTimeout>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d004      	beq.n	800851e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2220      	movs	r2, #32
 8008518:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e03b      	b.n	8008596 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10b      	bne.n	800853c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	881a      	ldrh	r2, [r3, #0]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008530:	b292      	uxth	r2, r2
 8008532:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	3302      	adds	r3, #2
 8008538:	61bb      	str	r3, [r7, #24]
 800853a:	e007      	b.n	800854c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	781a      	ldrb	r2, [r3, #0]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	3301      	adds	r3, #1
 800854a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008552:	b29b      	uxth	r3, r3
 8008554:	3b01      	subs	r3, #1
 8008556:	b29a      	uxth	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008564:	b29b      	uxth	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1c9      	bne.n	80084fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2200      	movs	r2, #0
 8008572:	2140      	movs	r1, #64	@ 0x40
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 fc15 	bl	8008da4 <UART_WaitOnFlagUntilTimeout>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d004      	beq.n	800858a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2220      	movs	r2, #32
 8008584:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e005      	b.n	8008596 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2220      	movs	r2, #32
 800858e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	e000      	b.n	8008596 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008594:	2302      	movs	r3, #2
  }
}
 8008596:	4618      	mov	r0, r3
 8008598:	3720      	adds	r7, #32
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
	...

080085a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085a4:	b08a      	sub	sp, #40	@ 0x28
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	689a      	ldr	r2, [r3, #8]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	431a      	orrs	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	431a      	orrs	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	4ba4      	ldr	r3, [pc, #656]	@ (8008860 <UART_SetConfig+0x2c0>)
 80085d0:	4013      	ands	r3, r2
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	6812      	ldr	r2, [r2, #0]
 80085d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80085d8:	430b      	orrs	r3, r1
 80085da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	68da      	ldr	r2, [r3, #12]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	430a      	orrs	r2, r1
 80085f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a99      	ldr	r2, [pc, #612]	@ (8008864 <UART_SetConfig+0x2c4>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d004      	beq.n	800860c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008608:	4313      	orrs	r3, r2
 800860a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800861c:	430a      	orrs	r2, r1
 800861e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a90      	ldr	r2, [pc, #576]	@ (8008868 <UART_SetConfig+0x2c8>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d126      	bne.n	8008678 <UART_SetConfig+0xd8>
 800862a:	4b90      	ldr	r3, [pc, #576]	@ (800886c <UART_SetConfig+0x2cc>)
 800862c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008630:	f003 0303 	and.w	r3, r3, #3
 8008634:	2b03      	cmp	r3, #3
 8008636:	d81b      	bhi.n	8008670 <UART_SetConfig+0xd0>
 8008638:	a201      	add	r2, pc, #4	@ (adr r2, 8008640 <UART_SetConfig+0xa0>)
 800863a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863e:	bf00      	nop
 8008640:	08008651 	.word	0x08008651
 8008644:	08008661 	.word	0x08008661
 8008648:	08008659 	.word	0x08008659
 800864c:	08008669 	.word	0x08008669
 8008650:	2301      	movs	r3, #1
 8008652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008656:	e116      	b.n	8008886 <UART_SetConfig+0x2e6>
 8008658:	2302      	movs	r3, #2
 800865a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800865e:	e112      	b.n	8008886 <UART_SetConfig+0x2e6>
 8008660:	2304      	movs	r3, #4
 8008662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008666:	e10e      	b.n	8008886 <UART_SetConfig+0x2e6>
 8008668:	2308      	movs	r3, #8
 800866a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800866e:	e10a      	b.n	8008886 <UART_SetConfig+0x2e6>
 8008670:	2310      	movs	r3, #16
 8008672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008676:	e106      	b.n	8008886 <UART_SetConfig+0x2e6>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a7c      	ldr	r2, [pc, #496]	@ (8008870 <UART_SetConfig+0x2d0>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d138      	bne.n	80086f4 <UART_SetConfig+0x154>
 8008682:	4b7a      	ldr	r3, [pc, #488]	@ (800886c <UART_SetConfig+0x2cc>)
 8008684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008688:	f003 030c 	and.w	r3, r3, #12
 800868c:	2b0c      	cmp	r3, #12
 800868e:	d82d      	bhi.n	80086ec <UART_SetConfig+0x14c>
 8008690:	a201      	add	r2, pc, #4	@ (adr r2, 8008698 <UART_SetConfig+0xf8>)
 8008692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008696:	bf00      	nop
 8008698:	080086cd 	.word	0x080086cd
 800869c:	080086ed 	.word	0x080086ed
 80086a0:	080086ed 	.word	0x080086ed
 80086a4:	080086ed 	.word	0x080086ed
 80086a8:	080086dd 	.word	0x080086dd
 80086ac:	080086ed 	.word	0x080086ed
 80086b0:	080086ed 	.word	0x080086ed
 80086b4:	080086ed 	.word	0x080086ed
 80086b8:	080086d5 	.word	0x080086d5
 80086bc:	080086ed 	.word	0x080086ed
 80086c0:	080086ed 	.word	0x080086ed
 80086c4:	080086ed 	.word	0x080086ed
 80086c8:	080086e5 	.word	0x080086e5
 80086cc:	2300      	movs	r3, #0
 80086ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086d2:	e0d8      	b.n	8008886 <UART_SetConfig+0x2e6>
 80086d4:	2302      	movs	r3, #2
 80086d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086da:	e0d4      	b.n	8008886 <UART_SetConfig+0x2e6>
 80086dc:	2304      	movs	r3, #4
 80086de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086e2:	e0d0      	b.n	8008886 <UART_SetConfig+0x2e6>
 80086e4:	2308      	movs	r3, #8
 80086e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086ea:	e0cc      	b.n	8008886 <UART_SetConfig+0x2e6>
 80086ec:	2310      	movs	r3, #16
 80086ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086f2:	e0c8      	b.n	8008886 <UART_SetConfig+0x2e6>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a5e      	ldr	r2, [pc, #376]	@ (8008874 <UART_SetConfig+0x2d4>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d125      	bne.n	800874a <UART_SetConfig+0x1aa>
 80086fe:	4b5b      	ldr	r3, [pc, #364]	@ (800886c <UART_SetConfig+0x2cc>)
 8008700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008704:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008708:	2b30      	cmp	r3, #48	@ 0x30
 800870a:	d016      	beq.n	800873a <UART_SetConfig+0x19a>
 800870c:	2b30      	cmp	r3, #48	@ 0x30
 800870e:	d818      	bhi.n	8008742 <UART_SetConfig+0x1a2>
 8008710:	2b20      	cmp	r3, #32
 8008712:	d00a      	beq.n	800872a <UART_SetConfig+0x18a>
 8008714:	2b20      	cmp	r3, #32
 8008716:	d814      	bhi.n	8008742 <UART_SetConfig+0x1a2>
 8008718:	2b00      	cmp	r3, #0
 800871a:	d002      	beq.n	8008722 <UART_SetConfig+0x182>
 800871c:	2b10      	cmp	r3, #16
 800871e:	d008      	beq.n	8008732 <UART_SetConfig+0x192>
 8008720:	e00f      	b.n	8008742 <UART_SetConfig+0x1a2>
 8008722:	2300      	movs	r3, #0
 8008724:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008728:	e0ad      	b.n	8008886 <UART_SetConfig+0x2e6>
 800872a:	2302      	movs	r3, #2
 800872c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008730:	e0a9      	b.n	8008886 <UART_SetConfig+0x2e6>
 8008732:	2304      	movs	r3, #4
 8008734:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008738:	e0a5      	b.n	8008886 <UART_SetConfig+0x2e6>
 800873a:	2308      	movs	r3, #8
 800873c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008740:	e0a1      	b.n	8008886 <UART_SetConfig+0x2e6>
 8008742:	2310      	movs	r3, #16
 8008744:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008748:	e09d      	b.n	8008886 <UART_SetConfig+0x2e6>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a4a      	ldr	r2, [pc, #296]	@ (8008878 <UART_SetConfig+0x2d8>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d125      	bne.n	80087a0 <UART_SetConfig+0x200>
 8008754:	4b45      	ldr	r3, [pc, #276]	@ (800886c <UART_SetConfig+0x2cc>)
 8008756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800875a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800875e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008760:	d016      	beq.n	8008790 <UART_SetConfig+0x1f0>
 8008762:	2bc0      	cmp	r3, #192	@ 0xc0
 8008764:	d818      	bhi.n	8008798 <UART_SetConfig+0x1f8>
 8008766:	2b80      	cmp	r3, #128	@ 0x80
 8008768:	d00a      	beq.n	8008780 <UART_SetConfig+0x1e0>
 800876a:	2b80      	cmp	r3, #128	@ 0x80
 800876c:	d814      	bhi.n	8008798 <UART_SetConfig+0x1f8>
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <UART_SetConfig+0x1d8>
 8008772:	2b40      	cmp	r3, #64	@ 0x40
 8008774:	d008      	beq.n	8008788 <UART_SetConfig+0x1e8>
 8008776:	e00f      	b.n	8008798 <UART_SetConfig+0x1f8>
 8008778:	2300      	movs	r3, #0
 800877a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800877e:	e082      	b.n	8008886 <UART_SetConfig+0x2e6>
 8008780:	2302      	movs	r3, #2
 8008782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008786:	e07e      	b.n	8008886 <UART_SetConfig+0x2e6>
 8008788:	2304      	movs	r3, #4
 800878a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800878e:	e07a      	b.n	8008886 <UART_SetConfig+0x2e6>
 8008790:	2308      	movs	r3, #8
 8008792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008796:	e076      	b.n	8008886 <UART_SetConfig+0x2e6>
 8008798:	2310      	movs	r3, #16
 800879a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800879e:	e072      	b.n	8008886 <UART_SetConfig+0x2e6>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a35      	ldr	r2, [pc, #212]	@ (800887c <UART_SetConfig+0x2dc>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d12a      	bne.n	8008800 <UART_SetConfig+0x260>
 80087aa:	4b30      	ldr	r3, [pc, #192]	@ (800886c <UART_SetConfig+0x2cc>)
 80087ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087b8:	d01a      	beq.n	80087f0 <UART_SetConfig+0x250>
 80087ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087be:	d81b      	bhi.n	80087f8 <UART_SetConfig+0x258>
 80087c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087c4:	d00c      	beq.n	80087e0 <UART_SetConfig+0x240>
 80087c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087ca:	d815      	bhi.n	80087f8 <UART_SetConfig+0x258>
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d003      	beq.n	80087d8 <UART_SetConfig+0x238>
 80087d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087d4:	d008      	beq.n	80087e8 <UART_SetConfig+0x248>
 80087d6:	e00f      	b.n	80087f8 <UART_SetConfig+0x258>
 80087d8:	2300      	movs	r3, #0
 80087da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087de:	e052      	b.n	8008886 <UART_SetConfig+0x2e6>
 80087e0:	2302      	movs	r3, #2
 80087e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087e6:	e04e      	b.n	8008886 <UART_SetConfig+0x2e6>
 80087e8:	2304      	movs	r3, #4
 80087ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087ee:	e04a      	b.n	8008886 <UART_SetConfig+0x2e6>
 80087f0:	2308      	movs	r3, #8
 80087f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087f6:	e046      	b.n	8008886 <UART_SetConfig+0x2e6>
 80087f8:	2310      	movs	r3, #16
 80087fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087fe:	e042      	b.n	8008886 <UART_SetConfig+0x2e6>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a17      	ldr	r2, [pc, #92]	@ (8008864 <UART_SetConfig+0x2c4>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d13a      	bne.n	8008880 <UART_SetConfig+0x2e0>
 800880a:	4b18      	ldr	r3, [pc, #96]	@ (800886c <UART_SetConfig+0x2cc>)
 800880c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008810:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008814:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008818:	d01a      	beq.n	8008850 <UART_SetConfig+0x2b0>
 800881a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800881e:	d81b      	bhi.n	8008858 <UART_SetConfig+0x2b8>
 8008820:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008824:	d00c      	beq.n	8008840 <UART_SetConfig+0x2a0>
 8008826:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800882a:	d815      	bhi.n	8008858 <UART_SetConfig+0x2b8>
 800882c:	2b00      	cmp	r3, #0
 800882e:	d003      	beq.n	8008838 <UART_SetConfig+0x298>
 8008830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008834:	d008      	beq.n	8008848 <UART_SetConfig+0x2a8>
 8008836:	e00f      	b.n	8008858 <UART_SetConfig+0x2b8>
 8008838:	2300      	movs	r3, #0
 800883a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800883e:	e022      	b.n	8008886 <UART_SetConfig+0x2e6>
 8008840:	2302      	movs	r3, #2
 8008842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008846:	e01e      	b.n	8008886 <UART_SetConfig+0x2e6>
 8008848:	2304      	movs	r3, #4
 800884a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800884e:	e01a      	b.n	8008886 <UART_SetConfig+0x2e6>
 8008850:	2308      	movs	r3, #8
 8008852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008856:	e016      	b.n	8008886 <UART_SetConfig+0x2e6>
 8008858:	2310      	movs	r3, #16
 800885a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800885e:	e012      	b.n	8008886 <UART_SetConfig+0x2e6>
 8008860:	efff69f3 	.word	0xefff69f3
 8008864:	40008000 	.word	0x40008000
 8008868:	40013800 	.word	0x40013800
 800886c:	40021000 	.word	0x40021000
 8008870:	40004400 	.word	0x40004400
 8008874:	40004800 	.word	0x40004800
 8008878:	40004c00 	.word	0x40004c00
 800887c:	40005000 	.word	0x40005000
 8008880:	2310      	movs	r3, #16
 8008882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a9f      	ldr	r2, [pc, #636]	@ (8008b08 <UART_SetConfig+0x568>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d17a      	bne.n	8008986 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008890:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008894:	2b08      	cmp	r3, #8
 8008896:	d824      	bhi.n	80088e2 <UART_SetConfig+0x342>
 8008898:	a201      	add	r2, pc, #4	@ (adr r2, 80088a0 <UART_SetConfig+0x300>)
 800889a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889e:	bf00      	nop
 80088a0:	080088c5 	.word	0x080088c5
 80088a4:	080088e3 	.word	0x080088e3
 80088a8:	080088cd 	.word	0x080088cd
 80088ac:	080088e3 	.word	0x080088e3
 80088b0:	080088d3 	.word	0x080088d3
 80088b4:	080088e3 	.word	0x080088e3
 80088b8:	080088e3 	.word	0x080088e3
 80088bc:	080088e3 	.word	0x080088e3
 80088c0:	080088db 	.word	0x080088db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088c4:	f7fe fc0e 	bl	80070e4 <HAL_RCC_GetPCLK1Freq>
 80088c8:	61f8      	str	r0, [r7, #28]
        break;
 80088ca:	e010      	b.n	80088ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088cc:	4b8f      	ldr	r3, [pc, #572]	@ (8008b0c <UART_SetConfig+0x56c>)
 80088ce:	61fb      	str	r3, [r7, #28]
        break;
 80088d0:	e00d      	b.n	80088ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088d2:	f7fe fb6f 	bl	8006fb4 <HAL_RCC_GetSysClockFreq>
 80088d6:	61f8      	str	r0, [r7, #28]
        break;
 80088d8:	e009      	b.n	80088ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088de:	61fb      	str	r3, [r7, #28]
        break;
 80088e0:	e005      	b.n	80088ee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80088ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 80fb 	beq.w	8008aec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	4613      	mov	r3, r2
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	4413      	add	r3, r2
 8008900:	69fa      	ldr	r2, [r7, #28]
 8008902:	429a      	cmp	r2, r3
 8008904:	d305      	bcc.n	8008912 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800890c:	69fa      	ldr	r2, [r7, #28]
 800890e:	429a      	cmp	r2, r3
 8008910:	d903      	bls.n	800891a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008918:	e0e8      	b.n	8008aec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	2200      	movs	r2, #0
 800891e:	461c      	mov	r4, r3
 8008920:	4615      	mov	r5, r2
 8008922:	f04f 0200 	mov.w	r2, #0
 8008926:	f04f 0300 	mov.w	r3, #0
 800892a:	022b      	lsls	r3, r5, #8
 800892c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008930:	0222      	lsls	r2, r4, #8
 8008932:	68f9      	ldr	r1, [r7, #12]
 8008934:	6849      	ldr	r1, [r1, #4]
 8008936:	0849      	lsrs	r1, r1, #1
 8008938:	2000      	movs	r0, #0
 800893a:	4688      	mov	r8, r1
 800893c:	4681      	mov	r9, r0
 800893e:	eb12 0a08 	adds.w	sl, r2, r8
 8008942:	eb43 0b09 	adc.w	fp, r3, r9
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	603b      	str	r3, [r7, #0]
 800894e:	607a      	str	r2, [r7, #4]
 8008950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008954:	4650      	mov	r0, sl
 8008956:	4659      	mov	r1, fp
 8008958:	f7f8 f996 	bl	8000c88 <__aeabi_uldivmod>
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	4613      	mov	r3, r2
 8008962:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800896a:	d308      	bcc.n	800897e <UART_SetConfig+0x3de>
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008972:	d204      	bcs.n	800897e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	69ba      	ldr	r2, [r7, #24]
 800897a:	60da      	str	r2, [r3, #12]
 800897c:	e0b6      	b.n	8008aec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008984:	e0b2      	b.n	8008aec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800898e:	d15e      	bne.n	8008a4e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008990:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008994:	2b08      	cmp	r3, #8
 8008996:	d828      	bhi.n	80089ea <UART_SetConfig+0x44a>
 8008998:	a201      	add	r2, pc, #4	@ (adr r2, 80089a0 <UART_SetConfig+0x400>)
 800899a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899e:	bf00      	nop
 80089a0:	080089c5 	.word	0x080089c5
 80089a4:	080089cd 	.word	0x080089cd
 80089a8:	080089d5 	.word	0x080089d5
 80089ac:	080089eb 	.word	0x080089eb
 80089b0:	080089db 	.word	0x080089db
 80089b4:	080089eb 	.word	0x080089eb
 80089b8:	080089eb 	.word	0x080089eb
 80089bc:	080089eb 	.word	0x080089eb
 80089c0:	080089e3 	.word	0x080089e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089c4:	f7fe fb8e 	bl	80070e4 <HAL_RCC_GetPCLK1Freq>
 80089c8:	61f8      	str	r0, [r7, #28]
        break;
 80089ca:	e014      	b.n	80089f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089cc:	f7fe fba0 	bl	8007110 <HAL_RCC_GetPCLK2Freq>
 80089d0:	61f8      	str	r0, [r7, #28]
        break;
 80089d2:	e010      	b.n	80089f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089d4:	4b4d      	ldr	r3, [pc, #308]	@ (8008b0c <UART_SetConfig+0x56c>)
 80089d6:	61fb      	str	r3, [r7, #28]
        break;
 80089d8:	e00d      	b.n	80089f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089da:	f7fe faeb 	bl	8006fb4 <HAL_RCC_GetSysClockFreq>
 80089de:	61f8      	str	r0, [r7, #28]
        break;
 80089e0:	e009      	b.n	80089f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089e6:	61fb      	str	r3, [r7, #28]
        break;
 80089e8:	e005      	b.n	80089f6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80089ea:	2300      	movs	r3, #0
 80089ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80089f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d077      	beq.n	8008aec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	005a      	lsls	r2, r3, #1
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	085b      	lsrs	r3, r3, #1
 8008a06:	441a      	add	r2, r3
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a10:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	2b0f      	cmp	r3, #15
 8008a16:	d916      	bls.n	8008a46 <UART_SetConfig+0x4a6>
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a1e:	d212      	bcs.n	8008a46 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	f023 030f 	bic.w	r3, r3, #15
 8008a28:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	085b      	lsrs	r3, r3, #1
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	f003 0307 	and.w	r3, r3, #7
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	8afb      	ldrh	r3, [r7, #22]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	8afa      	ldrh	r2, [r7, #22]
 8008a42:	60da      	str	r2, [r3, #12]
 8008a44:	e052      	b.n	8008aec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008a4c:	e04e      	b.n	8008aec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008a52:	2b08      	cmp	r3, #8
 8008a54:	d827      	bhi.n	8008aa6 <UART_SetConfig+0x506>
 8008a56:	a201      	add	r2, pc, #4	@ (adr r2, 8008a5c <UART_SetConfig+0x4bc>)
 8008a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5c:	08008a81 	.word	0x08008a81
 8008a60:	08008a89 	.word	0x08008a89
 8008a64:	08008a91 	.word	0x08008a91
 8008a68:	08008aa7 	.word	0x08008aa7
 8008a6c:	08008a97 	.word	0x08008a97
 8008a70:	08008aa7 	.word	0x08008aa7
 8008a74:	08008aa7 	.word	0x08008aa7
 8008a78:	08008aa7 	.word	0x08008aa7
 8008a7c:	08008a9f 	.word	0x08008a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a80:	f7fe fb30 	bl	80070e4 <HAL_RCC_GetPCLK1Freq>
 8008a84:	61f8      	str	r0, [r7, #28]
        break;
 8008a86:	e014      	b.n	8008ab2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a88:	f7fe fb42 	bl	8007110 <HAL_RCC_GetPCLK2Freq>
 8008a8c:	61f8      	str	r0, [r7, #28]
        break;
 8008a8e:	e010      	b.n	8008ab2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a90:	4b1e      	ldr	r3, [pc, #120]	@ (8008b0c <UART_SetConfig+0x56c>)
 8008a92:	61fb      	str	r3, [r7, #28]
        break;
 8008a94:	e00d      	b.n	8008ab2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a96:	f7fe fa8d 	bl	8006fb4 <HAL_RCC_GetSysClockFreq>
 8008a9a:	61f8      	str	r0, [r7, #28]
        break;
 8008a9c:	e009      	b.n	8008ab2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008aa2:	61fb      	str	r3, [r7, #28]
        break;
 8008aa4:	e005      	b.n	8008ab2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008ab0:	bf00      	nop
    }

    if (pclk != 0U)
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d019      	beq.n	8008aec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	085a      	lsrs	r2, r3, #1
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	441a      	add	r2, r3
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	2b0f      	cmp	r3, #15
 8008ad0:	d909      	bls.n	8008ae6 <UART_SetConfig+0x546>
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ad8:	d205      	bcs.n	8008ae6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	60da      	str	r2, [r3, #12]
 8008ae4:	e002      	b.n	8008aec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2200      	movs	r2, #0
 8008af0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008af8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3728      	adds	r7, #40	@ 0x28
 8008b00:	46bd      	mov	sp, r7
 8008b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b06:	bf00      	nop
 8008b08:	40008000 	.word	0x40008000
 8008b0c:	00f42400 	.word	0x00f42400

08008b10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b1c:	f003 0308 	and.w	r3, r3, #8
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00a      	beq.n	8008b3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00a      	beq.n	8008b5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b60:	f003 0302 	and.w	r3, r3, #2
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00a      	beq.n	8008b7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b82:	f003 0304 	and.w	r3, r3, #4
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00a      	beq.n	8008ba0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	430a      	orrs	r2, r1
 8008b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba4:	f003 0310 	and.w	r3, r3, #16
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00a      	beq.n	8008bc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	430a      	orrs	r2, r1
 8008bc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc6:	f003 0320 	and.w	r3, r3, #32
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00a      	beq.n	8008be4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	430a      	orrs	r2, r1
 8008be2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d01a      	beq.n	8008c26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c0e:	d10a      	bne.n	8008c26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	605a      	str	r2, [r3, #4]
  }
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b098      	sub	sp, #96	@ 0x60
 8008c58:	af02      	add	r7, sp, #8
 8008c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c64:	f7fa fb40 	bl	80032e8 <HAL_GetTick>
 8008c68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0308 	and.w	r3, r3, #8
 8008c74:	2b08      	cmp	r3, #8
 8008c76:	d12e      	bne.n	8008cd6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c80:	2200      	movs	r2, #0
 8008c82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f88c 	bl	8008da4 <UART_WaitOnFlagUntilTimeout>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d021      	beq.n	8008cd6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9a:	e853 3f00 	ldrex	r3, [r3]
 8008c9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ca2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ca6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	461a      	mov	r2, r3
 8008cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cb2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cb8:	e841 2300 	strex	r3, r2, [r1]
 8008cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1e6      	bne.n	8008c92 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2220      	movs	r2, #32
 8008cc8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e062      	b.n	8008d9c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0304 	and.w	r3, r3, #4
 8008ce0:	2b04      	cmp	r3, #4
 8008ce2:	d149      	bne.n	8008d78 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ce4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cec:	2200      	movs	r2, #0
 8008cee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f856 	bl	8008da4 <UART_WaitOnFlagUntilTimeout>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d03c      	beq.n	8008d78 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d06:	e853 3f00 	ldrex	r3, [r3]
 8008d0a:	623b      	str	r3, [r7, #32]
   return(result);
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d24:	e841 2300 	strex	r3, r2, [r1]
 8008d28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1e6      	bne.n	8008cfe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3308      	adds	r3, #8
 8008d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	e853 3f00 	ldrex	r3, [r3]
 8008d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f023 0301 	bic.w	r3, r3, #1
 8008d46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	3308      	adds	r3, #8
 8008d4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d50:	61fa      	str	r2, [r7, #28]
 8008d52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d54:	69b9      	ldr	r1, [r7, #24]
 8008d56:	69fa      	ldr	r2, [r7, #28]
 8008d58:	e841 2300 	strex	r3, r2, [r1]
 8008d5c:	617b      	str	r3, [r7, #20]
   return(result);
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e5      	bne.n	8008d30 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2220      	movs	r2, #32
 8008d68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e011      	b.n	8008d9c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2220      	movs	r2, #32
 8008d7c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2220      	movs	r2, #32
 8008d82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3758      	adds	r7, #88	@ 0x58
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	603b      	str	r3, [r7, #0]
 8008db0:	4613      	mov	r3, r2
 8008db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008db4:	e04f      	b.n	8008e56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008dbc:	d04b      	beq.n	8008e56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dbe:	f7fa fa93 	bl	80032e8 <HAL_GetTick>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	69ba      	ldr	r2, [r7, #24]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d302      	bcc.n	8008dd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d101      	bne.n	8008dd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e04e      	b.n	8008e76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0304 	and.w	r3, r3, #4
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d037      	beq.n	8008e56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	2b80      	cmp	r3, #128	@ 0x80
 8008dea:	d034      	beq.n	8008e56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	2b40      	cmp	r3, #64	@ 0x40
 8008df0:	d031      	beq.n	8008e56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	69db      	ldr	r3, [r3, #28]
 8008df8:	f003 0308 	and.w	r3, r3, #8
 8008dfc:	2b08      	cmp	r3, #8
 8008dfe:	d110      	bne.n	8008e22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2208      	movs	r2, #8
 8008e06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f000 f838 	bl	8008e7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2208      	movs	r2, #8
 8008e12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e029      	b.n	8008e76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	69db      	ldr	r3, [r3, #28]
 8008e28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e30:	d111      	bne.n	8008e56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 f81e 	bl	8008e7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2220      	movs	r2, #32
 8008e46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e00f      	b.n	8008e76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	69da      	ldr	r2, [r3, #28]
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	4013      	ands	r3, r2
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	bf0c      	ite	eq
 8008e66:	2301      	moveq	r3, #1
 8008e68:	2300      	movne	r3, #0
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	79fb      	ldrb	r3, [r7, #7]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d0a0      	beq.n	8008db6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b095      	sub	sp, #84	@ 0x54
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e8e:	e853 3f00 	ldrex	r3, [r3]
 8008e92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ea4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ea6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008eaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008eac:	e841 2300 	strex	r3, r2, [r1]
 8008eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1e6      	bne.n	8008e86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3308      	adds	r3, #8
 8008ebe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	e853 3f00 	ldrex	r3, [r3]
 8008ec6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	f023 0301 	bic.w	r3, r3, #1
 8008ece:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3308      	adds	r3, #8
 8008ed6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ed8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008eda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008edc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ee0:	e841 2300 	strex	r3, r2, [r1]
 8008ee4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1e5      	bne.n	8008eb8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d118      	bne.n	8008f26 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	e853 3f00 	ldrex	r3, [r3]
 8008f00:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	f023 0310 	bic.w	r3, r3, #16
 8008f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f12:	61bb      	str	r3, [r7, #24]
 8008f14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f16:	6979      	ldr	r1, [r7, #20]
 8008f18:	69ba      	ldr	r2, [r7, #24]
 8008f1a:	e841 2300 	strex	r3, r2, [r1]
 8008f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1e6      	bne.n	8008ef4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2220      	movs	r2, #32
 8008f2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008f3a:	bf00      	nop
 8008f3c:	3754      	adds	r7, #84	@ 0x54
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <__cvt>:
 8008f46:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f4a:	ec57 6b10 	vmov	r6, r7, d0
 8008f4e:	2f00      	cmp	r7, #0
 8008f50:	460c      	mov	r4, r1
 8008f52:	4619      	mov	r1, r3
 8008f54:	463b      	mov	r3, r7
 8008f56:	bfbb      	ittet	lt
 8008f58:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008f5c:	461f      	movlt	r7, r3
 8008f5e:	2300      	movge	r3, #0
 8008f60:	232d      	movlt	r3, #45	@ 0x2d
 8008f62:	700b      	strb	r3, [r1, #0]
 8008f64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f66:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008f6a:	4691      	mov	r9, r2
 8008f6c:	f023 0820 	bic.w	r8, r3, #32
 8008f70:	bfbc      	itt	lt
 8008f72:	4632      	movlt	r2, r6
 8008f74:	4616      	movlt	r6, r2
 8008f76:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f7a:	d005      	beq.n	8008f88 <__cvt+0x42>
 8008f7c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008f80:	d100      	bne.n	8008f84 <__cvt+0x3e>
 8008f82:	3401      	adds	r4, #1
 8008f84:	2102      	movs	r1, #2
 8008f86:	e000      	b.n	8008f8a <__cvt+0x44>
 8008f88:	2103      	movs	r1, #3
 8008f8a:	ab03      	add	r3, sp, #12
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	ab02      	add	r3, sp, #8
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	ec47 6b10 	vmov	d0, r6, r7
 8008f96:	4653      	mov	r3, sl
 8008f98:	4622      	mov	r2, r4
 8008f9a:	f001 ff3d 	bl	800ae18 <_dtoa_r>
 8008f9e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	d119      	bne.n	8008fda <__cvt+0x94>
 8008fa6:	f019 0f01 	tst.w	r9, #1
 8008faa:	d00e      	beq.n	8008fca <__cvt+0x84>
 8008fac:	eb00 0904 	add.w	r9, r0, r4
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	4639      	mov	r1, r7
 8008fb8:	f7f7 fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fbc:	b108      	cbz	r0, 8008fc2 <__cvt+0x7c>
 8008fbe:	f8cd 900c 	str.w	r9, [sp, #12]
 8008fc2:	2230      	movs	r2, #48	@ 0x30
 8008fc4:	9b03      	ldr	r3, [sp, #12]
 8008fc6:	454b      	cmp	r3, r9
 8008fc8:	d31e      	bcc.n	8009008 <__cvt+0xc2>
 8008fca:	9b03      	ldr	r3, [sp, #12]
 8008fcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fce:	1b5b      	subs	r3, r3, r5
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	6013      	str	r3, [r2, #0]
 8008fd4:	b004      	add	sp, #16
 8008fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fda:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008fde:	eb00 0904 	add.w	r9, r0, r4
 8008fe2:	d1e5      	bne.n	8008fb0 <__cvt+0x6a>
 8008fe4:	7803      	ldrb	r3, [r0, #0]
 8008fe6:	2b30      	cmp	r3, #48	@ 0x30
 8008fe8:	d10a      	bne.n	8009000 <__cvt+0xba>
 8008fea:	2200      	movs	r2, #0
 8008fec:	2300      	movs	r3, #0
 8008fee:	4630      	mov	r0, r6
 8008ff0:	4639      	mov	r1, r7
 8008ff2:	f7f7 fd69 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ff6:	b918      	cbnz	r0, 8009000 <__cvt+0xba>
 8008ff8:	f1c4 0401 	rsb	r4, r4, #1
 8008ffc:	f8ca 4000 	str.w	r4, [sl]
 8009000:	f8da 3000 	ldr.w	r3, [sl]
 8009004:	4499      	add	r9, r3
 8009006:	e7d3      	b.n	8008fb0 <__cvt+0x6a>
 8009008:	1c59      	adds	r1, r3, #1
 800900a:	9103      	str	r1, [sp, #12]
 800900c:	701a      	strb	r2, [r3, #0]
 800900e:	e7d9      	b.n	8008fc4 <__cvt+0x7e>

08009010 <__exponent>:
 8009010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009012:	2900      	cmp	r1, #0
 8009014:	bfba      	itte	lt
 8009016:	4249      	neglt	r1, r1
 8009018:	232d      	movlt	r3, #45	@ 0x2d
 800901a:	232b      	movge	r3, #43	@ 0x2b
 800901c:	2909      	cmp	r1, #9
 800901e:	7002      	strb	r2, [r0, #0]
 8009020:	7043      	strb	r3, [r0, #1]
 8009022:	dd29      	ble.n	8009078 <__exponent+0x68>
 8009024:	f10d 0307 	add.w	r3, sp, #7
 8009028:	461d      	mov	r5, r3
 800902a:	270a      	movs	r7, #10
 800902c:	461a      	mov	r2, r3
 800902e:	fbb1 f6f7 	udiv	r6, r1, r7
 8009032:	fb07 1416 	mls	r4, r7, r6, r1
 8009036:	3430      	adds	r4, #48	@ 0x30
 8009038:	f802 4c01 	strb.w	r4, [r2, #-1]
 800903c:	460c      	mov	r4, r1
 800903e:	2c63      	cmp	r4, #99	@ 0x63
 8009040:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009044:	4631      	mov	r1, r6
 8009046:	dcf1      	bgt.n	800902c <__exponent+0x1c>
 8009048:	3130      	adds	r1, #48	@ 0x30
 800904a:	1e94      	subs	r4, r2, #2
 800904c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009050:	1c41      	adds	r1, r0, #1
 8009052:	4623      	mov	r3, r4
 8009054:	42ab      	cmp	r3, r5
 8009056:	d30a      	bcc.n	800906e <__exponent+0x5e>
 8009058:	f10d 0309 	add.w	r3, sp, #9
 800905c:	1a9b      	subs	r3, r3, r2
 800905e:	42ac      	cmp	r4, r5
 8009060:	bf88      	it	hi
 8009062:	2300      	movhi	r3, #0
 8009064:	3302      	adds	r3, #2
 8009066:	4403      	add	r3, r0
 8009068:	1a18      	subs	r0, r3, r0
 800906a:	b003      	add	sp, #12
 800906c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800906e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009072:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009076:	e7ed      	b.n	8009054 <__exponent+0x44>
 8009078:	2330      	movs	r3, #48	@ 0x30
 800907a:	3130      	adds	r1, #48	@ 0x30
 800907c:	7083      	strb	r3, [r0, #2]
 800907e:	70c1      	strb	r1, [r0, #3]
 8009080:	1d03      	adds	r3, r0, #4
 8009082:	e7f1      	b.n	8009068 <__exponent+0x58>

08009084 <_printf_float>:
 8009084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009088:	b08d      	sub	sp, #52	@ 0x34
 800908a:	460c      	mov	r4, r1
 800908c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009090:	4616      	mov	r6, r2
 8009092:	461f      	mov	r7, r3
 8009094:	4605      	mov	r5, r0
 8009096:	f001 fde5 	bl	800ac64 <_localeconv_r>
 800909a:	6803      	ldr	r3, [r0, #0]
 800909c:	9304      	str	r3, [sp, #16]
 800909e:	4618      	mov	r0, r3
 80090a0:	f7f7 f8e6 	bl	8000270 <strlen>
 80090a4:	2300      	movs	r3, #0
 80090a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80090a8:	f8d8 3000 	ldr.w	r3, [r8]
 80090ac:	9005      	str	r0, [sp, #20]
 80090ae:	3307      	adds	r3, #7
 80090b0:	f023 0307 	bic.w	r3, r3, #7
 80090b4:	f103 0208 	add.w	r2, r3, #8
 80090b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80090bc:	f8d4 b000 	ldr.w	fp, [r4]
 80090c0:	f8c8 2000 	str.w	r2, [r8]
 80090c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80090cc:	9307      	str	r3, [sp, #28]
 80090ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80090d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80090d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090da:	4b9c      	ldr	r3, [pc, #624]	@ (800934c <_printf_float+0x2c8>)
 80090dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090e0:	f7f7 fd24 	bl	8000b2c <__aeabi_dcmpun>
 80090e4:	bb70      	cbnz	r0, 8009144 <_printf_float+0xc0>
 80090e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090ea:	4b98      	ldr	r3, [pc, #608]	@ (800934c <_printf_float+0x2c8>)
 80090ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090f0:	f7f7 fcfe 	bl	8000af0 <__aeabi_dcmple>
 80090f4:	bb30      	cbnz	r0, 8009144 <_printf_float+0xc0>
 80090f6:	2200      	movs	r2, #0
 80090f8:	2300      	movs	r3, #0
 80090fa:	4640      	mov	r0, r8
 80090fc:	4649      	mov	r1, r9
 80090fe:	f7f7 fced 	bl	8000adc <__aeabi_dcmplt>
 8009102:	b110      	cbz	r0, 800910a <_printf_float+0x86>
 8009104:	232d      	movs	r3, #45	@ 0x2d
 8009106:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800910a:	4a91      	ldr	r2, [pc, #580]	@ (8009350 <_printf_float+0x2cc>)
 800910c:	4b91      	ldr	r3, [pc, #580]	@ (8009354 <_printf_float+0x2d0>)
 800910e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009112:	bf94      	ite	ls
 8009114:	4690      	movls	r8, r2
 8009116:	4698      	movhi	r8, r3
 8009118:	2303      	movs	r3, #3
 800911a:	6123      	str	r3, [r4, #16]
 800911c:	f02b 0304 	bic.w	r3, fp, #4
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	f04f 0900 	mov.w	r9, #0
 8009126:	9700      	str	r7, [sp, #0]
 8009128:	4633      	mov	r3, r6
 800912a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800912c:	4621      	mov	r1, r4
 800912e:	4628      	mov	r0, r5
 8009130:	f000 f9d2 	bl	80094d8 <_printf_common>
 8009134:	3001      	adds	r0, #1
 8009136:	f040 808d 	bne.w	8009254 <_printf_float+0x1d0>
 800913a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800913e:	b00d      	add	sp, #52	@ 0x34
 8009140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009144:	4642      	mov	r2, r8
 8009146:	464b      	mov	r3, r9
 8009148:	4640      	mov	r0, r8
 800914a:	4649      	mov	r1, r9
 800914c:	f7f7 fcee 	bl	8000b2c <__aeabi_dcmpun>
 8009150:	b140      	cbz	r0, 8009164 <_printf_float+0xe0>
 8009152:	464b      	mov	r3, r9
 8009154:	2b00      	cmp	r3, #0
 8009156:	bfbc      	itt	lt
 8009158:	232d      	movlt	r3, #45	@ 0x2d
 800915a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800915e:	4a7e      	ldr	r2, [pc, #504]	@ (8009358 <_printf_float+0x2d4>)
 8009160:	4b7e      	ldr	r3, [pc, #504]	@ (800935c <_printf_float+0x2d8>)
 8009162:	e7d4      	b.n	800910e <_printf_float+0x8a>
 8009164:	6863      	ldr	r3, [r4, #4]
 8009166:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800916a:	9206      	str	r2, [sp, #24]
 800916c:	1c5a      	adds	r2, r3, #1
 800916e:	d13b      	bne.n	80091e8 <_printf_float+0x164>
 8009170:	2306      	movs	r3, #6
 8009172:	6063      	str	r3, [r4, #4]
 8009174:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009178:	2300      	movs	r3, #0
 800917a:	6022      	str	r2, [r4, #0]
 800917c:	9303      	str	r3, [sp, #12]
 800917e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009180:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009184:	ab09      	add	r3, sp, #36	@ 0x24
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	6861      	ldr	r1, [r4, #4]
 800918a:	ec49 8b10 	vmov	d0, r8, r9
 800918e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009192:	4628      	mov	r0, r5
 8009194:	f7ff fed7 	bl	8008f46 <__cvt>
 8009198:	9b06      	ldr	r3, [sp, #24]
 800919a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800919c:	2b47      	cmp	r3, #71	@ 0x47
 800919e:	4680      	mov	r8, r0
 80091a0:	d129      	bne.n	80091f6 <_printf_float+0x172>
 80091a2:	1cc8      	adds	r0, r1, #3
 80091a4:	db02      	blt.n	80091ac <_printf_float+0x128>
 80091a6:	6863      	ldr	r3, [r4, #4]
 80091a8:	4299      	cmp	r1, r3
 80091aa:	dd41      	ble.n	8009230 <_printf_float+0x1ac>
 80091ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80091b0:	fa5f fa8a 	uxtb.w	sl, sl
 80091b4:	3901      	subs	r1, #1
 80091b6:	4652      	mov	r2, sl
 80091b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80091bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80091be:	f7ff ff27 	bl	8009010 <__exponent>
 80091c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091c4:	1813      	adds	r3, r2, r0
 80091c6:	2a01      	cmp	r2, #1
 80091c8:	4681      	mov	r9, r0
 80091ca:	6123      	str	r3, [r4, #16]
 80091cc:	dc02      	bgt.n	80091d4 <_printf_float+0x150>
 80091ce:	6822      	ldr	r2, [r4, #0]
 80091d0:	07d2      	lsls	r2, r2, #31
 80091d2:	d501      	bpl.n	80091d8 <_printf_float+0x154>
 80091d4:	3301      	adds	r3, #1
 80091d6:	6123      	str	r3, [r4, #16]
 80091d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d0a2      	beq.n	8009126 <_printf_float+0xa2>
 80091e0:	232d      	movs	r3, #45	@ 0x2d
 80091e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091e6:	e79e      	b.n	8009126 <_printf_float+0xa2>
 80091e8:	9a06      	ldr	r2, [sp, #24]
 80091ea:	2a47      	cmp	r2, #71	@ 0x47
 80091ec:	d1c2      	bne.n	8009174 <_printf_float+0xf0>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1c0      	bne.n	8009174 <_printf_float+0xf0>
 80091f2:	2301      	movs	r3, #1
 80091f4:	e7bd      	b.n	8009172 <_printf_float+0xee>
 80091f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80091fa:	d9db      	bls.n	80091b4 <_printf_float+0x130>
 80091fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009200:	d118      	bne.n	8009234 <_printf_float+0x1b0>
 8009202:	2900      	cmp	r1, #0
 8009204:	6863      	ldr	r3, [r4, #4]
 8009206:	dd0b      	ble.n	8009220 <_printf_float+0x19c>
 8009208:	6121      	str	r1, [r4, #16]
 800920a:	b913      	cbnz	r3, 8009212 <_printf_float+0x18e>
 800920c:	6822      	ldr	r2, [r4, #0]
 800920e:	07d0      	lsls	r0, r2, #31
 8009210:	d502      	bpl.n	8009218 <_printf_float+0x194>
 8009212:	3301      	adds	r3, #1
 8009214:	440b      	add	r3, r1
 8009216:	6123      	str	r3, [r4, #16]
 8009218:	65a1      	str	r1, [r4, #88]	@ 0x58
 800921a:	f04f 0900 	mov.w	r9, #0
 800921e:	e7db      	b.n	80091d8 <_printf_float+0x154>
 8009220:	b913      	cbnz	r3, 8009228 <_printf_float+0x1a4>
 8009222:	6822      	ldr	r2, [r4, #0]
 8009224:	07d2      	lsls	r2, r2, #31
 8009226:	d501      	bpl.n	800922c <_printf_float+0x1a8>
 8009228:	3302      	adds	r3, #2
 800922a:	e7f4      	b.n	8009216 <_printf_float+0x192>
 800922c:	2301      	movs	r3, #1
 800922e:	e7f2      	b.n	8009216 <_printf_float+0x192>
 8009230:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009236:	4299      	cmp	r1, r3
 8009238:	db05      	blt.n	8009246 <_printf_float+0x1c2>
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	6121      	str	r1, [r4, #16]
 800923e:	07d8      	lsls	r0, r3, #31
 8009240:	d5ea      	bpl.n	8009218 <_printf_float+0x194>
 8009242:	1c4b      	adds	r3, r1, #1
 8009244:	e7e7      	b.n	8009216 <_printf_float+0x192>
 8009246:	2900      	cmp	r1, #0
 8009248:	bfd4      	ite	le
 800924a:	f1c1 0202 	rsble	r2, r1, #2
 800924e:	2201      	movgt	r2, #1
 8009250:	4413      	add	r3, r2
 8009252:	e7e0      	b.n	8009216 <_printf_float+0x192>
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	055a      	lsls	r2, r3, #21
 8009258:	d407      	bmi.n	800926a <_printf_float+0x1e6>
 800925a:	6923      	ldr	r3, [r4, #16]
 800925c:	4642      	mov	r2, r8
 800925e:	4631      	mov	r1, r6
 8009260:	4628      	mov	r0, r5
 8009262:	47b8      	blx	r7
 8009264:	3001      	adds	r0, #1
 8009266:	d12b      	bne.n	80092c0 <_printf_float+0x23c>
 8009268:	e767      	b.n	800913a <_printf_float+0xb6>
 800926a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800926e:	f240 80dd 	bls.w	800942c <_printf_float+0x3a8>
 8009272:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009276:	2200      	movs	r2, #0
 8009278:	2300      	movs	r3, #0
 800927a:	f7f7 fc25 	bl	8000ac8 <__aeabi_dcmpeq>
 800927e:	2800      	cmp	r0, #0
 8009280:	d033      	beq.n	80092ea <_printf_float+0x266>
 8009282:	4a37      	ldr	r2, [pc, #220]	@ (8009360 <_printf_float+0x2dc>)
 8009284:	2301      	movs	r3, #1
 8009286:	4631      	mov	r1, r6
 8009288:	4628      	mov	r0, r5
 800928a:	47b8      	blx	r7
 800928c:	3001      	adds	r0, #1
 800928e:	f43f af54 	beq.w	800913a <_printf_float+0xb6>
 8009292:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009296:	4543      	cmp	r3, r8
 8009298:	db02      	blt.n	80092a0 <_printf_float+0x21c>
 800929a:	6823      	ldr	r3, [r4, #0]
 800929c:	07d8      	lsls	r0, r3, #31
 800929e:	d50f      	bpl.n	80092c0 <_printf_float+0x23c>
 80092a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092a4:	4631      	mov	r1, r6
 80092a6:	4628      	mov	r0, r5
 80092a8:	47b8      	blx	r7
 80092aa:	3001      	adds	r0, #1
 80092ac:	f43f af45 	beq.w	800913a <_printf_float+0xb6>
 80092b0:	f04f 0900 	mov.w	r9, #0
 80092b4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80092b8:	f104 0a1a 	add.w	sl, r4, #26
 80092bc:	45c8      	cmp	r8, r9
 80092be:	dc09      	bgt.n	80092d4 <_printf_float+0x250>
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	079b      	lsls	r3, r3, #30
 80092c4:	f100 8103 	bmi.w	80094ce <_printf_float+0x44a>
 80092c8:	68e0      	ldr	r0, [r4, #12]
 80092ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092cc:	4298      	cmp	r0, r3
 80092ce:	bfb8      	it	lt
 80092d0:	4618      	movlt	r0, r3
 80092d2:	e734      	b.n	800913e <_printf_float+0xba>
 80092d4:	2301      	movs	r3, #1
 80092d6:	4652      	mov	r2, sl
 80092d8:	4631      	mov	r1, r6
 80092da:	4628      	mov	r0, r5
 80092dc:	47b8      	blx	r7
 80092de:	3001      	adds	r0, #1
 80092e0:	f43f af2b 	beq.w	800913a <_printf_float+0xb6>
 80092e4:	f109 0901 	add.w	r9, r9, #1
 80092e8:	e7e8      	b.n	80092bc <_printf_float+0x238>
 80092ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	dc39      	bgt.n	8009364 <_printf_float+0x2e0>
 80092f0:	4a1b      	ldr	r2, [pc, #108]	@ (8009360 <_printf_float+0x2dc>)
 80092f2:	2301      	movs	r3, #1
 80092f4:	4631      	mov	r1, r6
 80092f6:	4628      	mov	r0, r5
 80092f8:	47b8      	blx	r7
 80092fa:	3001      	adds	r0, #1
 80092fc:	f43f af1d 	beq.w	800913a <_printf_float+0xb6>
 8009300:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009304:	ea59 0303 	orrs.w	r3, r9, r3
 8009308:	d102      	bne.n	8009310 <_printf_float+0x28c>
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	07d9      	lsls	r1, r3, #31
 800930e:	d5d7      	bpl.n	80092c0 <_printf_float+0x23c>
 8009310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009314:	4631      	mov	r1, r6
 8009316:	4628      	mov	r0, r5
 8009318:	47b8      	blx	r7
 800931a:	3001      	adds	r0, #1
 800931c:	f43f af0d 	beq.w	800913a <_printf_float+0xb6>
 8009320:	f04f 0a00 	mov.w	sl, #0
 8009324:	f104 0b1a 	add.w	fp, r4, #26
 8009328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800932a:	425b      	negs	r3, r3
 800932c:	4553      	cmp	r3, sl
 800932e:	dc01      	bgt.n	8009334 <_printf_float+0x2b0>
 8009330:	464b      	mov	r3, r9
 8009332:	e793      	b.n	800925c <_printf_float+0x1d8>
 8009334:	2301      	movs	r3, #1
 8009336:	465a      	mov	r2, fp
 8009338:	4631      	mov	r1, r6
 800933a:	4628      	mov	r0, r5
 800933c:	47b8      	blx	r7
 800933e:	3001      	adds	r0, #1
 8009340:	f43f aefb 	beq.w	800913a <_printf_float+0xb6>
 8009344:	f10a 0a01 	add.w	sl, sl, #1
 8009348:	e7ee      	b.n	8009328 <_printf_float+0x2a4>
 800934a:	bf00      	nop
 800934c:	7fefffff 	.word	0x7fefffff
 8009350:	0800d9a4 	.word	0x0800d9a4
 8009354:	0800d9a8 	.word	0x0800d9a8
 8009358:	0800d9ac 	.word	0x0800d9ac
 800935c:	0800d9b0 	.word	0x0800d9b0
 8009360:	0800d9b4 	.word	0x0800d9b4
 8009364:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009366:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800936a:	4553      	cmp	r3, sl
 800936c:	bfa8      	it	ge
 800936e:	4653      	movge	r3, sl
 8009370:	2b00      	cmp	r3, #0
 8009372:	4699      	mov	r9, r3
 8009374:	dc36      	bgt.n	80093e4 <_printf_float+0x360>
 8009376:	f04f 0b00 	mov.w	fp, #0
 800937a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800937e:	f104 021a 	add.w	r2, r4, #26
 8009382:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009384:	9306      	str	r3, [sp, #24]
 8009386:	eba3 0309 	sub.w	r3, r3, r9
 800938a:	455b      	cmp	r3, fp
 800938c:	dc31      	bgt.n	80093f2 <_printf_float+0x36e>
 800938e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009390:	459a      	cmp	sl, r3
 8009392:	dc3a      	bgt.n	800940a <_printf_float+0x386>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	07da      	lsls	r2, r3, #31
 8009398:	d437      	bmi.n	800940a <_printf_float+0x386>
 800939a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800939c:	ebaa 0903 	sub.w	r9, sl, r3
 80093a0:	9b06      	ldr	r3, [sp, #24]
 80093a2:	ebaa 0303 	sub.w	r3, sl, r3
 80093a6:	4599      	cmp	r9, r3
 80093a8:	bfa8      	it	ge
 80093aa:	4699      	movge	r9, r3
 80093ac:	f1b9 0f00 	cmp.w	r9, #0
 80093b0:	dc33      	bgt.n	800941a <_printf_float+0x396>
 80093b2:	f04f 0800 	mov.w	r8, #0
 80093b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093ba:	f104 0b1a 	add.w	fp, r4, #26
 80093be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093c0:	ebaa 0303 	sub.w	r3, sl, r3
 80093c4:	eba3 0309 	sub.w	r3, r3, r9
 80093c8:	4543      	cmp	r3, r8
 80093ca:	f77f af79 	ble.w	80092c0 <_printf_float+0x23c>
 80093ce:	2301      	movs	r3, #1
 80093d0:	465a      	mov	r2, fp
 80093d2:	4631      	mov	r1, r6
 80093d4:	4628      	mov	r0, r5
 80093d6:	47b8      	blx	r7
 80093d8:	3001      	adds	r0, #1
 80093da:	f43f aeae 	beq.w	800913a <_printf_float+0xb6>
 80093de:	f108 0801 	add.w	r8, r8, #1
 80093e2:	e7ec      	b.n	80093be <_printf_float+0x33a>
 80093e4:	4642      	mov	r2, r8
 80093e6:	4631      	mov	r1, r6
 80093e8:	4628      	mov	r0, r5
 80093ea:	47b8      	blx	r7
 80093ec:	3001      	adds	r0, #1
 80093ee:	d1c2      	bne.n	8009376 <_printf_float+0x2f2>
 80093f0:	e6a3      	b.n	800913a <_printf_float+0xb6>
 80093f2:	2301      	movs	r3, #1
 80093f4:	4631      	mov	r1, r6
 80093f6:	4628      	mov	r0, r5
 80093f8:	9206      	str	r2, [sp, #24]
 80093fa:	47b8      	blx	r7
 80093fc:	3001      	adds	r0, #1
 80093fe:	f43f ae9c 	beq.w	800913a <_printf_float+0xb6>
 8009402:	9a06      	ldr	r2, [sp, #24]
 8009404:	f10b 0b01 	add.w	fp, fp, #1
 8009408:	e7bb      	b.n	8009382 <_printf_float+0x2fe>
 800940a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800940e:	4631      	mov	r1, r6
 8009410:	4628      	mov	r0, r5
 8009412:	47b8      	blx	r7
 8009414:	3001      	adds	r0, #1
 8009416:	d1c0      	bne.n	800939a <_printf_float+0x316>
 8009418:	e68f      	b.n	800913a <_printf_float+0xb6>
 800941a:	9a06      	ldr	r2, [sp, #24]
 800941c:	464b      	mov	r3, r9
 800941e:	4442      	add	r2, r8
 8009420:	4631      	mov	r1, r6
 8009422:	4628      	mov	r0, r5
 8009424:	47b8      	blx	r7
 8009426:	3001      	adds	r0, #1
 8009428:	d1c3      	bne.n	80093b2 <_printf_float+0x32e>
 800942a:	e686      	b.n	800913a <_printf_float+0xb6>
 800942c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009430:	f1ba 0f01 	cmp.w	sl, #1
 8009434:	dc01      	bgt.n	800943a <_printf_float+0x3b6>
 8009436:	07db      	lsls	r3, r3, #31
 8009438:	d536      	bpl.n	80094a8 <_printf_float+0x424>
 800943a:	2301      	movs	r3, #1
 800943c:	4642      	mov	r2, r8
 800943e:	4631      	mov	r1, r6
 8009440:	4628      	mov	r0, r5
 8009442:	47b8      	blx	r7
 8009444:	3001      	adds	r0, #1
 8009446:	f43f ae78 	beq.w	800913a <_printf_float+0xb6>
 800944a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800944e:	4631      	mov	r1, r6
 8009450:	4628      	mov	r0, r5
 8009452:	47b8      	blx	r7
 8009454:	3001      	adds	r0, #1
 8009456:	f43f ae70 	beq.w	800913a <_printf_float+0xb6>
 800945a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800945e:	2200      	movs	r2, #0
 8009460:	2300      	movs	r3, #0
 8009462:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009466:	f7f7 fb2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800946a:	b9c0      	cbnz	r0, 800949e <_printf_float+0x41a>
 800946c:	4653      	mov	r3, sl
 800946e:	f108 0201 	add.w	r2, r8, #1
 8009472:	4631      	mov	r1, r6
 8009474:	4628      	mov	r0, r5
 8009476:	47b8      	blx	r7
 8009478:	3001      	adds	r0, #1
 800947a:	d10c      	bne.n	8009496 <_printf_float+0x412>
 800947c:	e65d      	b.n	800913a <_printf_float+0xb6>
 800947e:	2301      	movs	r3, #1
 8009480:	465a      	mov	r2, fp
 8009482:	4631      	mov	r1, r6
 8009484:	4628      	mov	r0, r5
 8009486:	47b8      	blx	r7
 8009488:	3001      	adds	r0, #1
 800948a:	f43f ae56 	beq.w	800913a <_printf_float+0xb6>
 800948e:	f108 0801 	add.w	r8, r8, #1
 8009492:	45d0      	cmp	r8, sl
 8009494:	dbf3      	blt.n	800947e <_printf_float+0x3fa>
 8009496:	464b      	mov	r3, r9
 8009498:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800949c:	e6df      	b.n	800925e <_printf_float+0x1da>
 800949e:	f04f 0800 	mov.w	r8, #0
 80094a2:	f104 0b1a 	add.w	fp, r4, #26
 80094a6:	e7f4      	b.n	8009492 <_printf_float+0x40e>
 80094a8:	2301      	movs	r3, #1
 80094aa:	4642      	mov	r2, r8
 80094ac:	e7e1      	b.n	8009472 <_printf_float+0x3ee>
 80094ae:	2301      	movs	r3, #1
 80094b0:	464a      	mov	r2, r9
 80094b2:	4631      	mov	r1, r6
 80094b4:	4628      	mov	r0, r5
 80094b6:	47b8      	blx	r7
 80094b8:	3001      	adds	r0, #1
 80094ba:	f43f ae3e 	beq.w	800913a <_printf_float+0xb6>
 80094be:	f108 0801 	add.w	r8, r8, #1
 80094c2:	68e3      	ldr	r3, [r4, #12]
 80094c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094c6:	1a5b      	subs	r3, r3, r1
 80094c8:	4543      	cmp	r3, r8
 80094ca:	dcf0      	bgt.n	80094ae <_printf_float+0x42a>
 80094cc:	e6fc      	b.n	80092c8 <_printf_float+0x244>
 80094ce:	f04f 0800 	mov.w	r8, #0
 80094d2:	f104 0919 	add.w	r9, r4, #25
 80094d6:	e7f4      	b.n	80094c2 <_printf_float+0x43e>

080094d8 <_printf_common>:
 80094d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094dc:	4616      	mov	r6, r2
 80094de:	4698      	mov	r8, r3
 80094e0:	688a      	ldr	r2, [r1, #8]
 80094e2:	690b      	ldr	r3, [r1, #16]
 80094e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094e8:	4293      	cmp	r3, r2
 80094ea:	bfb8      	it	lt
 80094ec:	4613      	movlt	r3, r2
 80094ee:	6033      	str	r3, [r6, #0]
 80094f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094f4:	4607      	mov	r7, r0
 80094f6:	460c      	mov	r4, r1
 80094f8:	b10a      	cbz	r2, 80094fe <_printf_common+0x26>
 80094fa:	3301      	adds	r3, #1
 80094fc:	6033      	str	r3, [r6, #0]
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	0699      	lsls	r1, r3, #26
 8009502:	bf42      	ittt	mi
 8009504:	6833      	ldrmi	r3, [r6, #0]
 8009506:	3302      	addmi	r3, #2
 8009508:	6033      	strmi	r3, [r6, #0]
 800950a:	6825      	ldr	r5, [r4, #0]
 800950c:	f015 0506 	ands.w	r5, r5, #6
 8009510:	d106      	bne.n	8009520 <_printf_common+0x48>
 8009512:	f104 0a19 	add.w	sl, r4, #25
 8009516:	68e3      	ldr	r3, [r4, #12]
 8009518:	6832      	ldr	r2, [r6, #0]
 800951a:	1a9b      	subs	r3, r3, r2
 800951c:	42ab      	cmp	r3, r5
 800951e:	dc26      	bgt.n	800956e <_printf_common+0x96>
 8009520:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009524:	6822      	ldr	r2, [r4, #0]
 8009526:	3b00      	subs	r3, #0
 8009528:	bf18      	it	ne
 800952a:	2301      	movne	r3, #1
 800952c:	0692      	lsls	r2, r2, #26
 800952e:	d42b      	bmi.n	8009588 <_printf_common+0xb0>
 8009530:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009534:	4641      	mov	r1, r8
 8009536:	4638      	mov	r0, r7
 8009538:	47c8      	blx	r9
 800953a:	3001      	adds	r0, #1
 800953c:	d01e      	beq.n	800957c <_printf_common+0xa4>
 800953e:	6823      	ldr	r3, [r4, #0]
 8009540:	6922      	ldr	r2, [r4, #16]
 8009542:	f003 0306 	and.w	r3, r3, #6
 8009546:	2b04      	cmp	r3, #4
 8009548:	bf02      	ittt	eq
 800954a:	68e5      	ldreq	r5, [r4, #12]
 800954c:	6833      	ldreq	r3, [r6, #0]
 800954e:	1aed      	subeq	r5, r5, r3
 8009550:	68a3      	ldr	r3, [r4, #8]
 8009552:	bf0c      	ite	eq
 8009554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009558:	2500      	movne	r5, #0
 800955a:	4293      	cmp	r3, r2
 800955c:	bfc4      	itt	gt
 800955e:	1a9b      	subgt	r3, r3, r2
 8009560:	18ed      	addgt	r5, r5, r3
 8009562:	2600      	movs	r6, #0
 8009564:	341a      	adds	r4, #26
 8009566:	42b5      	cmp	r5, r6
 8009568:	d11a      	bne.n	80095a0 <_printf_common+0xc8>
 800956a:	2000      	movs	r0, #0
 800956c:	e008      	b.n	8009580 <_printf_common+0xa8>
 800956e:	2301      	movs	r3, #1
 8009570:	4652      	mov	r2, sl
 8009572:	4641      	mov	r1, r8
 8009574:	4638      	mov	r0, r7
 8009576:	47c8      	blx	r9
 8009578:	3001      	adds	r0, #1
 800957a:	d103      	bne.n	8009584 <_printf_common+0xac>
 800957c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009584:	3501      	adds	r5, #1
 8009586:	e7c6      	b.n	8009516 <_printf_common+0x3e>
 8009588:	18e1      	adds	r1, r4, r3
 800958a:	1c5a      	adds	r2, r3, #1
 800958c:	2030      	movs	r0, #48	@ 0x30
 800958e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009592:	4422      	add	r2, r4
 8009594:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009598:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800959c:	3302      	adds	r3, #2
 800959e:	e7c7      	b.n	8009530 <_printf_common+0x58>
 80095a0:	2301      	movs	r3, #1
 80095a2:	4622      	mov	r2, r4
 80095a4:	4641      	mov	r1, r8
 80095a6:	4638      	mov	r0, r7
 80095a8:	47c8      	blx	r9
 80095aa:	3001      	adds	r0, #1
 80095ac:	d0e6      	beq.n	800957c <_printf_common+0xa4>
 80095ae:	3601      	adds	r6, #1
 80095b0:	e7d9      	b.n	8009566 <_printf_common+0x8e>
	...

080095b4 <_printf_i>:
 80095b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095b8:	7e0f      	ldrb	r7, [r1, #24]
 80095ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095bc:	2f78      	cmp	r7, #120	@ 0x78
 80095be:	4691      	mov	r9, r2
 80095c0:	4680      	mov	r8, r0
 80095c2:	460c      	mov	r4, r1
 80095c4:	469a      	mov	sl, r3
 80095c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80095ca:	d807      	bhi.n	80095dc <_printf_i+0x28>
 80095cc:	2f62      	cmp	r7, #98	@ 0x62
 80095ce:	d80a      	bhi.n	80095e6 <_printf_i+0x32>
 80095d0:	2f00      	cmp	r7, #0
 80095d2:	f000 80d2 	beq.w	800977a <_printf_i+0x1c6>
 80095d6:	2f58      	cmp	r7, #88	@ 0x58
 80095d8:	f000 80b9 	beq.w	800974e <_printf_i+0x19a>
 80095dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80095e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80095e4:	e03a      	b.n	800965c <_printf_i+0xa8>
 80095e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80095ea:	2b15      	cmp	r3, #21
 80095ec:	d8f6      	bhi.n	80095dc <_printf_i+0x28>
 80095ee:	a101      	add	r1, pc, #4	@ (adr r1, 80095f4 <_printf_i+0x40>)
 80095f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095f4:	0800964d 	.word	0x0800964d
 80095f8:	08009661 	.word	0x08009661
 80095fc:	080095dd 	.word	0x080095dd
 8009600:	080095dd 	.word	0x080095dd
 8009604:	080095dd 	.word	0x080095dd
 8009608:	080095dd 	.word	0x080095dd
 800960c:	08009661 	.word	0x08009661
 8009610:	080095dd 	.word	0x080095dd
 8009614:	080095dd 	.word	0x080095dd
 8009618:	080095dd 	.word	0x080095dd
 800961c:	080095dd 	.word	0x080095dd
 8009620:	08009761 	.word	0x08009761
 8009624:	0800968b 	.word	0x0800968b
 8009628:	0800971b 	.word	0x0800971b
 800962c:	080095dd 	.word	0x080095dd
 8009630:	080095dd 	.word	0x080095dd
 8009634:	08009783 	.word	0x08009783
 8009638:	080095dd 	.word	0x080095dd
 800963c:	0800968b 	.word	0x0800968b
 8009640:	080095dd 	.word	0x080095dd
 8009644:	080095dd 	.word	0x080095dd
 8009648:	08009723 	.word	0x08009723
 800964c:	6833      	ldr	r3, [r6, #0]
 800964e:	1d1a      	adds	r2, r3, #4
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6032      	str	r2, [r6, #0]
 8009654:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009658:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800965c:	2301      	movs	r3, #1
 800965e:	e09d      	b.n	800979c <_printf_i+0x1e8>
 8009660:	6833      	ldr	r3, [r6, #0]
 8009662:	6820      	ldr	r0, [r4, #0]
 8009664:	1d19      	adds	r1, r3, #4
 8009666:	6031      	str	r1, [r6, #0]
 8009668:	0606      	lsls	r6, r0, #24
 800966a:	d501      	bpl.n	8009670 <_printf_i+0xbc>
 800966c:	681d      	ldr	r5, [r3, #0]
 800966e:	e003      	b.n	8009678 <_printf_i+0xc4>
 8009670:	0645      	lsls	r5, r0, #25
 8009672:	d5fb      	bpl.n	800966c <_printf_i+0xb8>
 8009674:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009678:	2d00      	cmp	r5, #0
 800967a:	da03      	bge.n	8009684 <_printf_i+0xd0>
 800967c:	232d      	movs	r3, #45	@ 0x2d
 800967e:	426d      	negs	r5, r5
 8009680:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009684:	4859      	ldr	r0, [pc, #356]	@ (80097ec <_printf_i+0x238>)
 8009686:	230a      	movs	r3, #10
 8009688:	e011      	b.n	80096ae <_printf_i+0xfa>
 800968a:	6821      	ldr	r1, [r4, #0]
 800968c:	6833      	ldr	r3, [r6, #0]
 800968e:	0608      	lsls	r0, r1, #24
 8009690:	f853 5b04 	ldr.w	r5, [r3], #4
 8009694:	d402      	bmi.n	800969c <_printf_i+0xe8>
 8009696:	0649      	lsls	r1, r1, #25
 8009698:	bf48      	it	mi
 800969a:	b2ad      	uxthmi	r5, r5
 800969c:	2f6f      	cmp	r7, #111	@ 0x6f
 800969e:	4853      	ldr	r0, [pc, #332]	@ (80097ec <_printf_i+0x238>)
 80096a0:	6033      	str	r3, [r6, #0]
 80096a2:	bf14      	ite	ne
 80096a4:	230a      	movne	r3, #10
 80096a6:	2308      	moveq	r3, #8
 80096a8:	2100      	movs	r1, #0
 80096aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80096ae:	6866      	ldr	r6, [r4, #4]
 80096b0:	60a6      	str	r6, [r4, #8]
 80096b2:	2e00      	cmp	r6, #0
 80096b4:	bfa2      	ittt	ge
 80096b6:	6821      	ldrge	r1, [r4, #0]
 80096b8:	f021 0104 	bicge.w	r1, r1, #4
 80096bc:	6021      	strge	r1, [r4, #0]
 80096be:	b90d      	cbnz	r5, 80096c4 <_printf_i+0x110>
 80096c0:	2e00      	cmp	r6, #0
 80096c2:	d04b      	beq.n	800975c <_printf_i+0x1a8>
 80096c4:	4616      	mov	r6, r2
 80096c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80096ca:	fb03 5711 	mls	r7, r3, r1, r5
 80096ce:	5dc7      	ldrb	r7, [r0, r7]
 80096d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096d4:	462f      	mov	r7, r5
 80096d6:	42bb      	cmp	r3, r7
 80096d8:	460d      	mov	r5, r1
 80096da:	d9f4      	bls.n	80096c6 <_printf_i+0x112>
 80096dc:	2b08      	cmp	r3, #8
 80096de:	d10b      	bne.n	80096f8 <_printf_i+0x144>
 80096e0:	6823      	ldr	r3, [r4, #0]
 80096e2:	07df      	lsls	r7, r3, #31
 80096e4:	d508      	bpl.n	80096f8 <_printf_i+0x144>
 80096e6:	6923      	ldr	r3, [r4, #16]
 80096e8:	6861      	ldr	r1, [r4, #4]
 80096ea:	4299      	cmp	r1, r3
 80096ec:	bfde      	ittt	le
 80096ee:	2330      	movle	r3, #48	@ 0x30
 80096f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096f4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80096f8:	1b92      	subs	r2, r2, r6
 80096fa:	6122      	str	r2, [r4, #16]
 80096fc:	f8cd a000 	str.w	sl, [sp]
 8009700:	464b      	mov	r3, r9
 8009702:	aa03      	add	r2, sp, #12
 8009704:	4621      	mov	r1, r4
 8009706:	4640      	mov	r0, r8
 8009708:	f7ff fee6 	bl	80094d8 <_printf_common>
 800970c:	3001      	adds	r0, #1
 800970e:	d14a      	bne.n	80097a6 <_printf_i+0x1f2>
 8009710:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009714:	b004      	add	sp, #16
 8009716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800971a:	6823      	ldr	r3, [r4, #0]
 800971c:	f043 0320 	orr.w	r3, r3, #32
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	4833      	ldr	r0, [pc, #204]	@ (80097f0 <_printf_i+0x23c>)
 8009724:	2778      	movs	r7, #120	@ 0x78
 8009726:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800972a:	6823      	ldr	r3, [r4, #0]
 800972c:	6831      	ldr	r1, [r6, #0]
 800972e:	061f      	lsls	r7, r3, #24
 8009730:	f851 5b04 	ldr.w	r5, [r1], #4
 8009734:	d402      	bmi.n	800973c <_printf_i+0x188>
 8009736:	065f      	lsls	r7, r3, #25
 8009738:	bf48      	it	mi
 800973a:	b2ad      	uxthmi	r5, r5
 800973c:	6031      	str	r1, [r6, #0]
 800973e:	07d9      	lsls	r1, r3, #31
 8009740:	bf44      	itt	mi
 8009742:	f043 0320 	orrmi.w	r3, r3, #32
 8009746:	6023      	strmi	r3, [r4, #0]
 8009748:	b11d      	cbz	r5, 8009752 <_printf_i+0x19e>
 800974a:	2310      	movs	r3, #16
 800974c:	e7ac      	b.n	80096a8 <_printf_i+0xf4>
 800974e:	4827      	ldr	r0, [pc, #156]	@ (80097ec <_printf_i+0x238>)
 8009750:	e7e9      	b.n	8009726 <_printf_i+0x172>
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	f023 0320 	bic.w	r3, r3, #32
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	e7f6      	b.n	800974a <_printf_i+0x196>
 800975c:	4616      	mov	r6, r2
 800975e:	e7bd      	b.n	80096dc <_printf_i+0x128>
 8009760:	6833      	ldr	r3, [r6, #0]
 8009762:	6825      	ldr	r5, [r4, #0]
 8009764:	6961      	ldr	r1, [r4, #20]
 8009766:	1d18      	adds	r0, r3, #4
 8009768:	6030      	str	r0, [r6, #0]
 800976a:	062e      	lsls	r6, r5, #24
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	d501      	bpl.n	8009774 <_printf_i+0x1c0>
 8009770:	6019      	str	r1, [r3, #0]
 8009772:	e002      	b.n	800977a <_printf_i+0x1c6>
 8009774:	0668      	lsls	r0, r5, #25
 8009776:	d5fb      	bpl.n	8009770 <_printf_i+0x1bc>
 8009778:	8019      	strh	r1, [r3, #0]
 800977a:	2300      	movs	r3, #0
 800977c:	6123      	str	r3, [r4, #16]
 800977e:	4616      	mov	r6, r2
 8009780:	e7bc      	b.n	80096fc <_printf_i+0x148>
 8009782:	6833      	ldr	r3, [r6, #0]
 8009784:	1d1a      	adds	r2, r3, #4
 8009786:	6032      	str	r2, [r6, #0]
 8009788:	681e      	ldr	r6, [r3, #0]
 800978a:	6862      	ldr	r2, [r4, #4]
 800978c:	2100      	movs	r1, #0
 800978e:	4630      	mov	r0, r6
 8009790:	f7f6 fd1e 	bl	80001d0 <memchr>
 8009794:	b108      	cbz	r0, 800979a <_printf_i+0x1e6>
 8009796:	1b80      	subs	r0, r0, r6
 8009798:	6060      	str	r0, [r4, #4]
 800979a:	6863      	ldr	r3, [r4, #4]
 800979c:	6123      	str	r3, [r4, #16]
 800979e:	2300      	movs	r3, #0
 80097a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097a4:	e7aa      	b.n	80096fc <_printf_i+0x148>
 80097a6:	6923      	ldr	r3, [r4, #16]
 80097a8:	4632      	mov	r2, r6
 80097aa:	4649      	mov	r1, r9
 80097ac:	4640      	mov	r0, r8
 80097ae:	47d0      	blx	sl
 80097b0:	3001      	adds	r0, #1
 80097b2:	d0ad      	beq.n	8009710 <_printf_i+0x15c>
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	079b      	lsls	r3, r3, #30
 80097b8:	d413      	bmi.n	80097e2 <_printf_i+0x22e>
 80097ba:	68e0      	ldr	r0, [r4, #12]
 80097bc:	9b03      	ldr	r3, [sp, #12]
 80097be:	4298      	cmp	r0, r3
 80097c0:	bfb8      	it	lt
 80097c2:	4618      	movlt	r0, r3
 80097c4:	e7a6      	b.n	8009714 <_printf_i+0x160>
 80097c6:	2301      	movs	r3, #1
 80097c8:	4632      	mov	r2, r6
 80097ca:	4649      	mov	r1, r9
 80097cc:	4640      	mov	r0, r8
 80097ce:	47d0      	blx	sl
 80097d0:	3001      	adds	r0, #1
 80097d2:	d09d      	beq.n	8009710 <_printf_i+0x15c>
 80097d4:	3501      	adds	r5, #1
 80097d6:	68e3      	ldr	r3, [r4, #12]
 80097d8:	9903      	ldr	r1, [sp, #12]
 80097da:	1a5b      	subs	r3, r3, r1
 80097dc:	42ab      	cmp	r3, r5
 80097de:	dcf2      	bgt.n	80097c6 <_printf_i+0x212>
 80097e0:	e7eb      	b.n	80097ba <_printf_i+0x206>
 80097e2:	2500      	movs	r5, #0
 80097e4:	f104 0619 	add.w	r6, r4, #25
 80097e8:	e7f5      	b.n	80097d6 <_printf_i+0x222>
 80097ea:	bf00      	nop
 80097ec:	0800d9b6 	.word	0x0800d9b6
 80097f0:	0800d9c7 	.word	0x0800d9c7

080097f4 <_scanf_float>:
 80097f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f8:	b087      	sub	sp, #28
 80097fa:	4617      	mov	r7, r2
 80097fc:	9303      	str	r3, [sp, #12]
 80097fe:	688b      	ldr	r3, [r1, #8]
 8009800:	1e5a      	subs	r2, r3, #1
 8009802:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009806:	bf81      	itttt	hi
 8009808:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800980c:	eb03 0b05 	addhi.w	fp, r3, r5
 8009810:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009814:	608b      	strhi	r3, [r1, #8]
 8009816:	680b      	ldr	r3, [r1, #0]
 8009818:	460a      	mov	r2, r1
 800981a:	f04f 0500 	mov.w	r5, #0
 800981e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009822:	f842 3b1c 	str.w	r3, [r2], #28
 8009826:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800982a:	4680      	mov	r8, r0
 800982c:	460c      	mov	r4, r1
 800982e:	bf98      	it	ls
 8009830:	f04f 0b00 	movls.w	fp, #0
 8009834:	9201      	str	r2, [sp, #4]
 8009836:	4616      	mov	r6, r2
 8009838:	46aa      	mov	sl, r5
 800983a:	46a9      	mov	r9, r5
 800983c:	9502      	str	r5, [sp, #8]
 800983e:	68a2      	ldr	r2, [r4, #8]
 8009840:	b152      	cbz	r2, 8009858 <_scanf_float+0x64>
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	2b4e      	cmp	r3, #78	@ 0x4e
 8009848:	d864      	bhi.n	8009914 <_scanf_float+0x120>
 800984a:	2b40      	cmp	r3, #64	@ 0x40
 800984c:	d83c      	bhi.n	80098c8 <_scanf_float+0xd4>
 800984e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009852:	b2c8      	uxtb	r0, r1
 8009854:	280e      	cmp	r0, #14
 8009856:	d93a      	bls.n	80098ce <_scanf_float+0xda>
 8009858:	f1b9 0f00 	cmp.w	r9, #0
 800985c:	d003      	beq.n	8009866 <_scanf_float+0x72>
 800985e:	6823      	ldr	r3, [r4, #0]
 8009860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009864:	6023      	str	r3, [r4, #0]
 8009866:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800986a:	f1ba 0f01 	cmp.w	sl, #1
 800986e:	f200 8117 	bhi.w	8009aa0 <_scanf_float+0x2ac>
 8009872:	9b01      	ldr	r3, [sp, #4]
 8009874:	429e      	cmp	r6, r3
 8009876:	f200 8108 	bhi.w	8009a8a <_scanf_float+0x296>
 800987a:	2001      	movs	r0, #1
 800987c:	b007      	add	sp, #28
 800987e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009882:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009886:	2a0d      	cmp	r2, #13
 8009888:	d8e6      	bhi.n	8009858 <_scanf_float+0x64>
 800988a:	a101      	add	r1, pc, #4	@ (adr r1, 8009890 <_scanf_float+0x9c>)
 800988c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009890:	080099d7 	.word	0x080099d7
 8009894:	08009859 	.word	0x08009859
 8009898:	08009859 	.word	0x08009859
 800989c:	08009859 	.word	0x08009859
 80098a0:	08009a37 	.word	0x08009a37
 80098a4:	08009a0f 	.word	0x08009a0f
 80098a8:	08009859 	.word	0x08009859
 80098ac:	08009859 	.word	0x08009859
 80098b0:	080099e5 	.word	0x080099e5
 80098b4:	08009859 	.word	0x08009859
 80098b8:	08009859 	.word	0x08009859
 80098bc:	08009859 	.word	0x08009859
 80098c0:	08009859 	.word	0x08009859
 80098c4:	0800999d 	.word	0x0800999d
 80098c8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80098cc:	e7db      	b.n	8009886 <_scanf_float+0x92>
 80098ce:	290e      	cmp	r1, #14
 80098d0:	d8c2      	bhi.n	8009858 <_scanf_float+0x64>
 80098d2:	a001      	add	r0, pc, #4	@ (adr r0, 80098d8 <_scanf_float+0xe4>)
 80098d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80098d8:	0800998d 	.word	0x0800998d
 80098dc:	08009859 	.word	0x08009859
 80098e0:	0800998d 	.word	0x0800998d
 80098e4:	08009a23 	.word	0x08009a23
 80098e8:	08009859 	.word	0x08009859
 80098ec:	08009935 	.word	0x08009935
 80098f0:	08009973 	.word	0x08009973
 80098f4:	08009973 	.word	0x08009973
 80098f8:	08009973 	.word	0x08009973
 80098fc:	08009973 	.word	0x08009973
 8009900:	08009973 	.word	0x08009973
 8009904:	08009973 	.word	0x08009973
 8009908:	08009973 	.word	0x08009973
 800990c:	08009973 	.word	0x08009973
 8009910:	08009973 	.word	0x08009973
 8009914:	2b6e      	cmp	r3, #110	@ 0x6e
 8009916:	d809      	bhi.n	800992c <_scanf_float+0x138>
 8009918:	2b60      	cmp	r3, #96	@ 0x60
 800991a:	d8b2      	bhi.n	8009882 <_scanf_float+0x8e>
 800991c:	2b54      	cmp	r3, #84	@ 0x54
 800991e:	d07b      	beq.n	8009a18 <_scanf_float+0x224>
 8009920:	2b59      	cmp	r3, #89	@ 0x59
 8009922:	d199      	bne.n	8009858 <_scanf_float+0x64>
 8009924:	2d07      	cmp	r5, #7
 8009926:	d197      	bne.n	8009858 <_scanf_float+0x64>
 8009928:	2508      	movs	r5, #8
 800992a:	e02c      	b.n	8009986 <_scanf_float+0x192>
 800992c:	2b74      	cmp	r3, #116	@ 0x74
 800992e:	d073      	beq.n	8009a18 <_scanf_float+0x224>
 8009930:	2b79      	cmp	r3, #121	@ 0x79
 8009932:	e7f6      	b.n	8009922 <_scanf_float+0x12e>
 8009934:	6821      	ldr	r1, [r4, #0]
 8009936:	05c8      	lsls	r0, r1, #23
 8009938:	d51b      	bpl.n	8009972 <_scanf_float+0x17e>
 800993a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800993e:	6021      	str	r1, [r4, #0]
 8009940:	f109 0901 	add.w	r9, r9, #1
 8009944:	f1bb 0f00 	cmp.w	fp, #0
 8009948:	d003      	beq.n	8009952 <_scanf_float+0x15e>
 800994a:	3201      	adds	r2, #1
 800994c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8009950:	60a2      	str	r2, [r4, #8]
 8009952:	68a3      	ldr	r3, [r4, #8]
 8009954:	3b01      	subs	r3, #1
 8009956:	60a3      	str	r3, [r4, #8]
 8009958:	6923      	ldr	r3, [r4, #16]
 800995a:	3301      	adds	r3, #1
 800995c:	6123      	str	r3, [r4, #16]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	3b01      	subs	r3, #1
 8009962:	2b00      	cmp	r3, #0
 8009964:	607b      	str	r3, [r7, #4]
 8009966:	f340 8087 	ble.w	8009a78 <_scanf_float+0x284>
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	3301      	adds	r3, #1
 800996e:	603b      	str	r3, [r7, #0]
 8009970:	e765      	b.n	800983e <_scanf_float+0x4a>
 8009972:	eb1a 0105 	adds.w	r1, sl, r5
 8009976:	f47f af6f 	bne.w	8009858 <_scanf_float+0x64>
 800997a:	6822      	ldr	r2, [r4, #0]
 800997c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009980:	6022      	str	r2, [r4, #0]
 8009982:	460d      	mov	r5, r1
 8009984:	468a      	mov	sl, r1
 8009986:	f806 3b01 	strb.w	r3, [r6], #1
 800998a:	e7e2      	b.n	8009952 <_scanf_float+0x15e>
 800998c:	6822      	ldr	r2, [r4, #0]
 800998e:	0610      	lsls	r0, r2, #24
 8009990:	f57f af62 	bpl.w	8009858 <_scanf_float+0x64>
 8009994:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009998:	6022      	str	r2, [r4, #0]
 800999a:	e7f4      	b.n	8009986 <_scanf_float+0x192>
 800999c:	f1ba 0f00 	cmp.w	sl, #0
 80099a0:	d10e      	bne.n	80099c0 <_scanf_float+0x1cc>
 80099a2:	f1b9 0f00 	cmp.w	r9, #0
 80099a6:	d10e      	bne.n	80099c6 <_scanf_float+0x1d2>
 80099a8:	6822      	ldr	r2, [r4, #0]
 80099aa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80099ae:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80099b2:	d108      	bne.n	80099c6 <_scanf_float+0x1d2>
 80099b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80099b8:	6022      	str	r2, [r4, #0]
 80099ba:	f04f 0a01 	mov.w	sl, #1
 80099be:	e7e2      	b.n	8009986 <_scanf_float+0x192>
 80099c0:	f1ba 0f02 	cmp.w	sl, #2
 80099c4:	d055      	beq.n	8009a72 <_scanf_float+0x27e>
 80099c6:	2d01      	cmp	r5, #1
 80099c8:	d002      	beq.n	80099d0 <_scanf_float+0x1dc>
 80099ca:	2d04      	cmp	r5, #4
 80099cc:	f47f af44 	bne.w	8009858 <_scanf_float+0x64>
 80099d0:	3501      	adds	r5, #1
 80099d2:	b2ed      	uxtb	r5, r5
 80099d4:	e7d7      	b.n	8009986 <_scanf_float+0x192>
 80099d6:	f1ba 0f01 	cmp.w	sl, #1
 80099da:	f47f af3d 	bne.w	8009858 <_scanf_float+0x64>
 80099de:	f04f 0a02 	mov.w	sl, #2
 80099e2:	e7d0      	b.n	8009986 <_scanf_float+0x192>
 80099e4:	b97d      	cbnz	r5, 8009a06 <_scanf_float+0x212>
 80099e6:	f1b9 0f00 	cmp.w	r9, #0
 80099ea:	f47f af38 	bne.w	800985e <_scanf_float+0x6a>
 80099ee:	6822      	ldr	r2, [r4, #0]
 80099f0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80099f4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80099f8:	f040 8108 	bne.w	8009c0c <_scanf_float+0x418>
 80099fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a00:	6022      	str	r2, [r4, #0]
 8009a02:	2501      	movs	r5, #1
 8009a04:	e7bf      	b.n	8009986 <_scanf_float+0x192>
 8009a06:	2d03      	cmp	r5, #3
 8009a08:	d0e2      	beq.n	80099d0 <_scanf_float+0x1dc>
 8009a0a:	2d05      	cmp	r5, #5
 8009a0c:	e7de      	b.n	80099cc <_scanf_float+0x1d8>
 8009a0e:	2d02      	cmp	r5, #2
 8009a10:	f47f af22 	bne.w	8009858 <_scanf_float+0x64>
 8009a14:	2503      	movs	r5, #3
 8009a16:	e7b6      	b.n	8009986 <_scanf_float+0x192>
 8009a18:	2d06      	cmp	r5, #6
 8009a1a:	f47f af1d 	bne.w	8009858 <_scanf_float+0x64>
 8009a1e:	2507      	movs	r5, #7
 8009a20:	e7b1      	b.n	8009986 <_scanf_float+0x192>
 8009a22:	6822      	ldr	r2, [r4, #0]
 8009a24:	0591      	lsls	r1, r2, #22
 8009a26:	f57f af17 	bpl.w	8009858 <_scanf_float+0x64>
 8009a2a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009a2e:	6022      	str	r2, [r4, #0]
 8009a30:	f8cd 9008 	str.w	r9, [sp, #8]
 8009a34:	e7a7      	b.n	8009986 <_scanf_float+0x192>
 8009a36:	6822      	ldr	r2, [r4, #0]
 8009a38:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009a3c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009a40:	d006      	beq.n	8009a50 <_scanf_float+0x25c>
 8009a42:	0550      	lsls	r0, r2, #21
 8009a44:	f57f af08 	bpl.w	8009858 <_scanf_float+0x64>
 8009a48:	f1b9 0f00 	cmp.w	r9, #0
 8009a4c:	f000 80de 	beq.w	8009c0c <_scanf_float+0x418>
 8009a50:	0591      	lsls	r1, r2, #22
 8009a52:	bf58      	it	pl
 8009a54:	9902      	ldrpl	r1, [sp, #8]
 8009a56:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a5a:	bf58      	it	pl
 8009a5c:	eba9 0101 	subpl.w	r1, r9, r1
 8009a60:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009a64:	bf58      	it	pl
 8009a66:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009a6a:	6022      	str	r2, [r4, #0]
 8009a6c:	f04f 0900 	mov.w	r9, #0
 8009a70:	e789      	b.n	8009986 <_scanf_float+0x192>
 8009a72:	f04f 0a03 	mov.w	sl, #3
 8009a76:	e786      	b.n	8009986 <_scanf_float+0x192>
 8009a78:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	4640      	mov	r0, r8
 8009a80:	4798      	blx	r3
 8009a82:	2800      	cmp	r0, #0
 8009a84:	f43f aedb 	beq.w	800983e <_scanf_float+0x4a>
 8009a88:	e6e6      	b.n	8009858 <_scanf_float+0x64>
 8009a8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a92:	463a      	mov	r2, r7
 8009a94:	4640      	mov	r0, r8
 8009a96:	4798      	blx	r3
 8009a98:	6923      	ldr	r3, [r4, #16]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	6123      	str	r3, [r4, #16]
 8009a9e:	e6e8      	b.n	8009872 <_scanf_float+0x7e>
 8009aa0:	1e6b      	subs	r3, r5, #1
 8009aa2:	2b06      	cmp	r3, #6
 8009aa4:	d824      	bhi.n	8009af0 <_scanf_float+0x2fc>
 8009aa6:	2d02      	cmp	r5, #2
 8009aa8:	d836      	bhi.n	8009b18 <_scanf_float+0x324>
 8009aaa:	9b01      	ldr	r3, [sp, #4]
 8009aac:	429e      	cmp	r6, r3
 8009aae:	f67f aee4 	bls.w	800987a <_scanf_float+0x86>
 8009ab2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ab6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009aba:	463a      	mov	r2, r7
 8009abc:	4640      	mov	r0, r8
 8009abe:	4798      	blx	r3
 8009ac0:	6923      	ldr	r3, [r4, #16]
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	6123      	str	r3, [r4, #16]
 8009ac6:	e7f0      	b.n	8009aaa <_scanf_float+0x2b6>
 8009ac8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009acc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009ad0:	463a      	mov	r2, r7
 8009ad2:	4640      	mov	r0, r8
 8009ad4:	4798      	blx	r3
 8009ad6:	6923      	ldr	r3, [r4, #16]
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	6123      	str	r3, [r4, #16]
 8009adc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009ae0:	fa5f fa8a 	uxtb.w	sl, sl
 8009ae4:	f1ba 0f02 	cmp.w	sl, #2
 8009ae8:	d1ee      	bne.n	8009ac8 <_scanf_float+0x2d4>
 8009aea:	3d03      	subs	r5, #3
 8009aec:	b2ed      	uxtb	r5, r5
 8009aee:	1b76      	subs	r6, r6, r5
 8009af0:	6823      	ldr	r3, [r4, #0]
 8009af2:	05da      	lsls	r2, r3, #23
 8009af4:	d530      	bpl.n	8009b58 <_scanf_float+0x364>
 8009af6:	055b      	lsls	r3, r3, #21
 8009af8:	d511      	bpl.n	8009b1e <_scanf_float+0x32a>
 8009afa:	9b01      	ldr	r3, [sp, #4]
 8009afc:	429e      	cmp	r6, r3
 8009afe:	f67f aebc 	bls.w	800987a <_scanf_float+0x86>
 8009b02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b0a:	463a      	mov	r2, r7
 8009b0c:	4640      	mov	r0, r8
 8009b0e:	4798      	blx	r3
 8009b10:	6923      	ldr	r3, [r4, #16]
 8009b12:	3b01      	subs	r3, #1
 8009b14:	6123      	str	r3, [r4, #16]
 8009b16:	e7f0      	b.n	8009afa <_scanf_float+0x306>
 8009b18:	46aa      	mov	sl, r5
 8009b1a:	46b3      	mov	fp, r6
 8009b1c:	e7de      	b.n	8009adc <_scanf_float+0x2e8>
 8009b1e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009b22:	6923      	ldr	r3, [r4, #16]
 8009b24:	2965      	cmp	r1, #101	@ 0x65
 8009b26:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009b2a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8009b2e:	6123      	str	r3, [r4, #16]
 8009b30:	d00c      	beq.n	8009b4c <_scanf_float+0x358>
 8009b32:	2945      	cmp	r1, #69	@ 0x45
 8009b34:	d00a      	beq.n	8009b4c <_scanf_float+0x358>
 8009b36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b3a:	463a      	mov	r2, r7
 8009b3c:	4640      	mov	r0, r8
 8009b3e:	4798      	blx	r3
 8009b40:	6923      	ldr	r3, [r4, #16]
 8009b42:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009b46:	3b01      	subs	r3, #1
 8009b48:	1eb5      	subs	r5, r6, #2
 8009b4a:	6123      	str	r3, [r4, #16]
 8009b4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b50:	463a      	mov	r2, r7
 8009b52:	4640      	mov	r0, r8
 8009b54:	4798      	blx	r3
 8009b56:	462e      	mov	r6, r5
 8009b58:	6822      	ldr	r2, [r4, #0]
 8009b5a:	f012 0210 	ands.w	r2, r2, #16
 8009b5e:	d001      	beq.n	8009b64 <_scanf_float+0x370>
 8009b60:	2000      	movs	r0, #0
 8009b62:	e68b      	b.n	800987c <_scanf_float+0x88>
 8009b64:	7032      	strb	r2, [r6, #0]
 8009b66:	6823      	ldr	r3, [r4, #0]
 8009b68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009b6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b70:	d11c      	bne.n	8009bac <_scanf_float+0x3b8>
 8009b72:	9b02      	ldr	r3, [sp, #8]
 8009b74:	454b      	cmp	r3, r9
 8009b76:	eba3 0209 	sub.w	r2, r3, r9
 8009b7a:	d123      	bne.n	8009bc4 <_scanf_float+0x3d0>
 8009b7c:	9901      	ldr	r1, [sp, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	4640      	mov	r0, r8
 8009b82:	f000 ff45 	bl	800aa10 <_strtod_r>
 8009b86:	9b03      	ldr	r3, [sp, #12]
 8009b88:	6821      	ldr	r1, [r4, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f011 0f02 	tst.w	r1, #2
 8009b90:	ec57 6b10 	vmov	r6, r7, d0
 8009b94:	f103 0204 	add.w	r2, r3, #4
 8009b98:	d01f      	beq.n	8009bda <_scanf_float+0x3e6>
 8009b9a:	9903      	ldr	r1, [sp, #12]
 8009b9c:	600a      	str	r2, [r1, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	e9c3 6700 	strd	r6, r7, [r3]
 8009ba4:	68e3      	ldr	r3, [r4, #12]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	60e3      	str	r3, [r4, #12]
 8009baa:	e7d9      	b.n	8009b60 <_scanf_float+0x36c>
 8009bac:	9b04      	ldr	r3, [sp, #16]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d0e4      	beq.n	8009b7c <_scanf_float+0x388>
 8009bb2:	9905      	ldr	r1, [sp, #20]
 8009bb4:	230a      	movs	r3, #10
 8009bb6:	3101      	adds	r1, #1
 8009bb8:	4640      	mov	r0, r8
 8009bba:	f000 ffa9 	bl	800ab10 <_strtol_r>
 8009bbe:	9b04      	ldr	r3, [sp, #16]
 8009bc0:	9e05      	ldr	r6, [sp, #20]
 8009bc2:	1ac2      	subs	r2, r0, r3
 8009bc4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009bc8:	429e      	cmp	r6, r3
 8009bca:	bf28      	it	cs
 8009bcc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009bd0:	4910      	ldr	r1, [pc, #64]	@ (8009c14 <_scanf_float+0x420>)
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f000 f856 	bl	8009c84 <siprintf>
 8009bd8:	e7d0      	b.n	8009b7c <_scanf_float+0x388>
 8009bda:	f011 0f04 	tst.w	r1, #4
 8009bde:	9903      	ldr	r1, [sp, #12]
 8009be0:	600a      	str	r2, [r1, #0]
 8009be2:	d1dc      	bne.n	8009b9e <_scanf_float+0x3aa>
 8009be4:	681d      	ldr	r5, [r3, #0]
 8009be6:	4632      	mov	r2, r6
 8009be8:	463b      	mov	r3, r7
 8009bea:	4630      	mov	r0, r6
 8009bec:	4639      	mov	r1, r7
 8009bee:	f7f6 ff9d 	bl	8000b2c <__aeabi_dcmpun>
 8009bf2:	b128      	cbz	r0, 8009c00 <_scanf_float+0x40c>
 8009bf4:	4808      	ldr	r0, [pc, #32]	@ (8009c18 <_scanf_float+0x424>)
 8009bf6:	f001 f87f 	bl	800acf8 <nanf>
 8009bfa:	ed85 0a00 	vstr	s0, [r5]
 8009bfe:	e7d1      	b.n	8009ba4 <_scanf_float+0x3b0>
 8009c00:	4630      	mov	r0, r6
 8009c02:	4639      	mov	r1, r7
 8009c04:	f7f6 fff0 	bl	8000be8 <__aeabi_d2f>
 8009c08:	6028      	str	r0, [r5, #0]
 8009c0a:	e7cb      	b.n	8009ba4 <_scanf_float+0x3b0>
 8009c0c:	f04f 0900 	mov.w	r9, #0
 8009c10:	e629      	b.n	8009866 <_scanf_float+0x72>
 8009c12:	bf00      	nop
 8009c14:	0800d9d8 	.word	0x0800d9d8
 8009c18:	0800ddcb 	.word	0x0800ddcb

08009c1c <sniprintf>:
 8009c1c:	b40c      	push	{r2, r3}
 8009c1e:	b530      	push	{r4, r5, lr}
 8009c20:	4b17      	ldr	r3, [pc, #92]	@ (8009c80 <sniprintf+0x64>)
 8009c22:	1e0c      	subs	r4, r1, #0
 8009c24:	681d      	ldr	r5, [r3, #0]
 8009c26:	b09d      	sub	sp, #116	@ 0x74
 8009c28:	da08      	bge.n	8009c3c <sniprintf+0x20>
 8009c2a:	238b      	movs	r3, #139	@ 0x8b
 8009c2c:	602b      	str	r3, [r5, #0]
 8009c2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c32:	b01d      	add	sp, #116	@ 0x74
 8009c34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c38:	b002      	add	sp, #8
 8009c3a:	4770      	bx	lr
 8009c3c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009c40:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009c44:	bf14      	ite	ne
 8009c46:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009c4a:	4623      	moveq	r3, r4
 8009c4c:	9304      	str	r3, [sp, #16]
 8009c4e:	9307      	str	r3, [sp, #28]
 8009c50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009c54:	9002      	str	r0, [sp, #8]
 8009c56:	9006      	str	r0, [sp, #24]
 8009c58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c5c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009c5e:	ab21      	add	r3, sp, #132	@ 0x84
 8009c60:	a902      	add	r1, sp, #8
 8009c62:	4628      	mov	r0, r5
 8009c64:	9301      	str	r3, [sp, #4]
 8009c66:	f002 fa2f 	bl	800c0c8 <_svfiprintf_r>
 8009c6a:	1c43      	adds	r3, r0, #1
 8009c6c:	bfbc      	itt	lt
 8009c6e:	238b      	movlt	r3, #139	@ 0x8b
 8009c70:	602b      	strlt	r3, [r5, #0]
 8009c72:	2c00      	cmp	r4, #0
 8009c74:	d0dd      	beq.n	8009c32 <sniprintf+0x16>
 8009c76:	9b02      	ldr	r3, [sp, #8]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	701a      	strb	r2, [r3, #0]
 8009c7c:	e7d9      	b.n	8009c32 <sniprintf+0x16>
 8009c7e:	bf00      	nop
 8009c80:	20000190 	.word	0x20000190

08009c84 <siprintf>:
 8009c84:	b40e      	push	{r1, r2, r3}
 8009c86:	b500      	push	{lr}
 8009c88:	b09c      	sub	sp, #112	@ 0x70
 8009c8a:	ab1d      	add	r3, sp, #116	@ 0x74
 8009c8c:	9002      	str	r0, [sp, #8]
 8009c8e:	9006      	str	r0, [sp, #24]
 8009c90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009c94:	4809      	ldr	r0, [pc, #36]	@ (8009cbc <siprintf+0x38>)
 8009c96:	9107      	str	r1, [sp, #28]
 8009c98:	9104      	str	r1, [sp, #16]
 8009c9a:	4909      	ldr	r1, [pc, #36]	@ (8009cc0 <siprintf+0x3c>)
 8009c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ca0:	9105      	str	r1, [sp, #20]
 8009ca2:	6800      	ldr	r0, [r0, #0]
 8009ca4:	9301      	str	r3, [sp, #4]
 8009ca6:	a902      	add	r1, sp, #8
 8009ca8:	f002 fa0e 	bl	800c0c8 <_svfiprintf_r>
 8009cac:	9b02      	ldr	r3, [sp, #8]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	701a      	strb	r2, [r3, #0]
 8009cb2:	b01c      	add	sp, #112	@ 0x70
 8009cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cb8:	b003      	add	sp, #12
 8009cba:	4770      	bx	lr
 8009cbc:	20000190 	.word	0x20000190
 8009cc0:	ffff0208 	.word	0xffff0208

08009cc4 <std>:
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	b510      	push	{r4, lr}
 8009cc8:	4604      	mov	r4, r0
 8009cca:	e9c0 3300 	strd	r3, r3, [r0]
 8009cce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cd2:	6083      	str	r3, [r0, #8]
 8009cd4:	8181      	strh	r1, [r0, #12]
 8009cd6:	6643      	str	r3, [r0, #100]	@ 0x64
 8009cd8:	81c2      	strh	r2, [r0, #14]
 8009cda:	6183      	str	r3, [r0, #24]
 8009cdc:	4619      	mov	r1, r3
 8009cde:	2208      	movs	r2, #8
 8009ce0:	305c      	adds	r0, #92	@ 0x5c
 8009ce2:	f000 ffb7 	bl	800ac54 <memset>
 8009ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d1c <std+0x58>)
 8009ce8:	6263      	str	r3, [r4, #36]	@ 0x24
 8009cea:	4b0d      	ldr	r3, [pc, #52]	@ (8009d20 <std+0x5c>)
 8009cec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009cee:	4b0d      	ldr	r3, [pc, #52]	@ (8009d24 <std+0x60>)
 8009cf0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8009d28 <std+0x64>)
 8009cf4:	6323      	str	r3, [r4, #48]	@ 0x30
 8009cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d2c <std+0x68>)
 8009cf8:	6224      	str	r4, [r4, #32]
 8009cfa:	429c      	cmp	r4, r3
 8009cfc:	d006      	beq.n	8009d0c <std+0x48>
 8009cfe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009d02:	4294      	cmp	r4, r2
 8009d04:	d002      	beq.n	8009d0c <std+0x48>
 8009d06:	33d0      	adds	r3, #208	@ 0xd0
 8009d08:	429c      	cmp	r4, r3
 8009d0a:	d105      	bne.n	8009d18 <std+0x54>
 8009d0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d14:	f000 bfd4 	b.w	800acc0 <__retarget_lock_init_recursive>
 8009d18:	bd10      	pop	{r4, pc}
 8009d1a:	bf00      	nop
 8009d1c:	0800d191 	.word	0x0800d191
 8009d20:	0800d1b3 	.word	0x0800d1b3
 8009d24:	0800d1eb 	.word	0x0800d1eb
 8009d28:	0800d20f 	.word	0x0800d20f
 8009d2c:	200003b8 	.word	0x200003b8

08009d30 <stdio_exit_handler>:
 8009d30:	4a02      	ldr	r2, [pc, #8]	@ (8009d3c <stdio_exit_handler+0xc>)
 8009d32:	4903      	ldr	r1, [pc, #12]	@ (8009d40 <stdio_exit_handler+0x10>)
 8009d34:	4803      	ldr	r0, [pc, #12]	@ (8009d44 <stdio_exit_handler+0x14>)
 8009d36:	f000 beed 	b.w	800ab14 <_fwalk_sglue>
 8009d3a:	bf00      	nop
 8009d3c:	20000018 	.word	0x20000018
 8009d40:	0800c7c5 	.word	0x0800c7c5
 8009d44:	20000194 	.word	0x20000194

08009d48 <cleanup_stdio>:
 8009d48:	6841      	ldr	r1, [r0, #4]
 8009d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8009d7c <cleanup_stdio+0x34>)
 8009d4c:	4299      	cmp	r1, r3
 8009d4e:	b510      	push	{r4, lr}
 8009d50:	4604      	mov	r4, r0
 8009d52:	d001      	beq.n	8009d58 <cleanup_stdio+0x10>
 8009d54:	f002 fd36 	bl	800c7c4 <_fflush_r>
 8009d58:	68a1      	ldr	r1, [r4, #8]
 8009d5a:	4b09      	ldr	r3, [pc, #36]	@ (8009d80 <cleanup_stdio+0x38>)
 8009d5c:	4299      	cmp	r1, r3
 8009d5e:	d002      	beq.n	8009d66 <cleanup_stdio+0x1e>
 8009d60:	4620      	mov	r0, r4
 8009d62:	f002 fd2f 	bl	800c7c4 <_fflush_r>
 8009d66:	68e1      	ldr	r1, [r4, #12]
 8009d68:	4b06      	ldr	r3, [pc, #24]	@ (8009d84 <cleanup_stdio+0x3c>)
 8009d6a:	4299      	cmp	r1, r3
 8009d6c:	d004      	beq.n	8009d78 <cleanup_stdio+0x30>
 8009d6e:	4620      	mov	r0, r4
 8009d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d74:	f002 bd26 	b.w	800c7c4 <_fflush_r>
 8009d78:	bd10      	pop	{r4, pc}
 8009d7a:	bf00      	nop
 8009d7c:	200003b8 	.word	0x200003b8
 8009d80:	20000420 	.word	0x20000420
 8009d84:	20000488 	.word	0x20000488

08009d88 <global_stdio_init.part.0>:
 8009d88:	b510      	push	{r4, lr}
 8009d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8009db8 <global_stdio_init.part.0+0x30>)
 8009d8c:	4c0b      	ldr	r4, [pc, #44]	@ (8009dbc <global_stdio_init.part.0+0x34>)
 8009d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8009dc0 <global_stdio_init.part.0+0x38>)
 8009d90:	601a      	str	r2, [r3, #0]
 8009d92:	4620      	mov	r0, r4
 8009d94:	2200      	movs	r2, #0
 8009d96:	2104      	movs	r1, #4
 8009d98:	f7ff ff94 	bl	8009cc4 <std>
 8009d9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009da0:	2201      	movs	r2, #1
 8009da2:	2109      	movs	r1, #9
 8009da4:	f7ff ff8e 	bl	8009cc4 <std>
 8009da8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009dac:	2202      	movs	r2, #2
 8009dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009db2:	2112      	movs	r1, #18
 8009db4:	f7ff bf86 	b.w	8009cc4 <std>
 8009db8:	200004f0 	.word	0x200004f0
 8009dbc:	200003b8 	.word	0x200003b8
 8009dc0:	08009d31 	.word	0x08009d31

08009dc4 <__sfp_lock_acquire>:
 8009dc4:	4801      	ldr	r0, [pc, #4]	@ (8009dcc <__sfp_lock_acquire+0x8>)
 8009dc6:	f000 bf7c 	b.w	800acc2 <__retarget_lock_acquire_recursive>
 8009dca:	bf00      	nop
 8009dcc:	200004f5 	.word	0x200004f5

08009dd0 <__sfp_lock_release>:
 8009dd0:	4801      	ldr	r0, [pc, #4]	@ (8009dd8 <__sfp_lock_release+0x8>)
 8009dd2:	f000 bf77 	b.w	800acc4 <__retarget_lock_release_recursive>
 8009dd6:	bf00      	nop
 8009dd8:	200004f5 	.word	0x200004f5

08009ddc <__sinit>:
 8009ddc:	b510      	push	{r4, lr}
 8009dde:	4604      	mov	r4, r0
 8009de0:	f7ff fff0 	bl	8009dc4 <__sfp_lock_acquire>
 8009de4:	6a23      	ldr	r3, [r4, #32]
 8009de6:	b11b      	cbz	r3, 8009df0 <__sinit+0x14>
 8009de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dec:	f7ff bff0 	b.w	8009dd0 <__sfp_lock_release>
 8009df0:	4b04      	ldr	r3, [pc, #16]	@ (8009e04 <__sinit+0x28>)
 8009df2:	6223      	str	r3, [r4, #32]
 8009df4:	4b04      	ldr	r3, [pc, #16]	@ (8009e08 <__sinit+0x2c>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1f5      	bne.n	8009de8 <__sinit+0xc>
 8009dfc:	f7ff ffc4 	bl	8009d88 <global_stdio_init.part.0>
 8009e00:	e7f2      	b.n	8009de8 <__sinit+0xc>
 8009e02:	bf00      	nop
 8009e04:	08009d49 	.word	0x08009d49
 8009e08:	200004f0 	.word	0x200004f0

08009e0c <sulp>:
 8009e0c:	b570      	push	{r4, r5, r6, lr}
 8009e0e:	4604      	mov	r4, r0
 8009e10:	460d      	mov	r5, r1
 8009e12:	ec45 4b10 	vmov	d0, r4, r5
 8009e16:	4616      	mov	r6, r2
 8009e18:	f003 f87c 	bl	800cf14 <__ulp>
 8009e1c:	ec51 0b10 	vmov	r0, r1, d0
 8009e20:	b17e      	cbz	r6, 8009e42 <sulp+0x36>
 8009e22:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009e26:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	dd09      	ble.n	8009e42 <sulp+0x36>
 8009e2e:	051b      	lsls	r3, r3, #20
 8009e30:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009e34:	2400      	movs	r4, #0
 8009e36:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009e3a:	4622      	mov	r2, r4
 8009e3c:	462b      	mov	r3, r5
 8009e3e:	f7f6 fbdb 	bl	80005f8 <__aeabi_dmul>
 8009e42:	ec41 0b10 	vmov	d0, r0, r1
 8009e46:	bd70      	pop	{r4, r5, r6, pc}

08009e48 <_strtod_l>:
 8009e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4c:	b09f      	sub	sp, #124	@ 0x7c
 8009e4e:	460c      	mov	r4, r1
 8009e50:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009e52:	2200      	movs	r2, #0
 8009e54:	921a      	str	r2, [sp, #104]	@ 0x68
 8009e56:	9005      	str	r0, [sp, #20]
 8009e58:	f04f 0a00 	mov.w	sl, #0
 8009e5c:	f04f 0b00 	mov.w	fp, #0
 8009e60:	460a      	mov	r2, r1
 8009e62:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e64:	7811      	ldrb	r1, [r2, #0]
 8009e66:	292b      	cmp	r1, #43	@ 0x2b
 8009e68:	d04a      	beq.n	8009f00 <_strtod_l+0xb8>
 8009e6a:	d838      	bhi.n	8009ede <_strtod_l+0x96>
 8009e6c:	290d      	cmp	r1, #13
 8009e6e:	d832      	bhi.n	8009ed6 <_strtod_l+0x8e>
 8009e70:	2908      	cmp	r1, #8
 8009e72:	d832      	bhi.n	8009eda <_strtod_l+0x92>
 8009e74:	2900      	cmp	r1, #0
 8009e76:	d03b      	beq.n	8009ef0 <_strtod_l+0xa8>
 8009e78:	2200      	movs	r2, #0
 8009e7a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009e7c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009e7e:	782a      	ldrb	r2, [r5, #0]
 8009e80:	2a30      	cmp	r2, #48	@ 0x30
 8009e82:	f040 80b3 	bne.w	8009fec <_strtod_l+0x1a4>
 8009e86:	786a      	ldrb	r2, [r5, #1]
 8009e88:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e8c:	2a58      	cmp	r2, #88	@ 0x58
 8009e8e:	d16e      	bne.n	8009f6e <_strtod_l+0x126>
 8009e90:	9302      	str	r3, [sp, #8]
 8009e92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e94:	9301      	str	r3, [sp, #4]
 8009e96:	ab1a      	add	r3, sp, #104	@ 0x68
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	4a8e      	ldr	r2, [pc, #568]	@ (800a0d4 <_strtod_l+0x28c>)
 8009e9c:	9805      	ldr	r0, [sp, #20]
 8009e9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009ea0:	a919      	add	r1, sp, #100	@ 0x64
 8009ea2:	f001 fde5 	bl	800ba70 <__gethex>
 8009ea6:	f010 060f 	ands.w	r6, r0, #15
 8009eaa:	4604      	mov	r4, r0
 8009eac:	d005      	beq.n	8009eba <_strtod_l+0x72>
 8009eae:	2e06      	cmp	r6, #6
 8009eb0:	d128      	bne.n	8009f04 <_strtod_l+0xbc>
 8009eb2:	3501      	adds	r5, #1
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	9519      	str	r5, [sp, #100]	@ 0x64
 8009eb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009eba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f040 858e 	bne.w	800a9de <_strtod_l+0xb96>
 8009ec2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ec4:	b1cb      	cbz	r3, 8009efa <_strtod_l+0xb2>
 8009ec6:	4652      	mov	r2, sl
 8009ec8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009ecc:	ec43 2b10 	vmov	d0, r2, r3
 8009ed0:	b01f      	add	sp, #124	@ 0x7c
 8009ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed6:	2920      	cmp	r1, #32
 8009ed8:	d1ce      	bne.n	8009e78 <_strtod_l+0x30>
 8009eda:	3201      	adds	r2, #1
 8009edc:	e7c1      	b.n	8009e62 <_strtod_l+0x1a>
 8009ede:	292d      	cmp	r1, #45	@ 0x2d
 8009ee0:	d1ca      	bne.n	8009e78 <_strtod_l+0x30>
 8009ee2:	2101      	movs	r1, #1
 8009ee4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009ee6:	1c51      	adds	r1, r2, #1
 8009ee8:	9119      	str	r1, [sp, #100]	@ 0x64
 8009eea:	7852      	ldrb	r2, [r2, #1]
 8009eec:	2a00      	cmp	r2, #0
 8009eee:	d1c5      	bne.n	8009e7c <_strtod_l+0x34>
 8009ef0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009ef2:	9419      	str	r4, [sp, #100]	@ 0x64
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f040 8570 	bne.w	800a9da <_strtod_l+0xb92>
 8009efa:	4652      	mov	r2, sl
 8009efc:	465b      	mov	r3, fp
 8009efe:	e7e5      	b.n	8009ecc <_strtod_l+0x84>
 8009f00:	2100      	movs	r1, #0
 8009f02:	e7ef      	b.n	8009ee4 <_strtod_l+0x9c>
 8009f04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009f06:	b13a      	cbz	r2, 8009f18 <_strtod_l+0xd0>
 8009f08:	2135      	movs	r1, #53	@ 0x35
 8009f0a:	a81c      	add	r0, sp, #112	@ 0x70
 8009f0c:	f003 f8fc 	bl	800d108 <__copybits>
 8009f10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f12:	9805      	ldr	r0, [sp, #20]
 8009f14:	f002 fcca 	bl	800c8ac <_Bfree>
 8009f18:	3e01      	subs	r6, #1
 8009f1a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009f1c:	2e04      	cmp	r6, #4
 8009f1e:	d806      	bhi.n	8009f2e <_strtod_l+0xe6>
 8009f20:	e8df f006 	tbb	[pc, r6]
 8009f24:	201d0314 	.word	0x201d0314
 8009f28:	14          	.byte	0x14
 8009f29:	00          	.byte	0x00
 8009f2a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009f2e:	05e1      	lsls	r1, r4, #23
 8009f30:	bf48      	it	mi
 8009f32:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009f36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f3a:	0d1b      	lsrs	r3, r3, #20
 8009f3c:	051b      	lsls	r3, r3, #20
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1bb      	bne.n	8009eba <_strtod_l+0x72>
 8009f42:	f000 fe93 	bl	800ac6c <__errno>
 8009f46:	2322      	movs	r3, #34	@ 0x22
 8009f48:	6003      	str	r3, [r0, #0]
 8009f4a:	e7b6      	b.n	8009eba <_strtod_l+0x72>
 8009f4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009f50:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009f54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009f58:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009f5c:	e7e7      	b.n	8009f2e <_strtod_l+0xe6>
 8009f5e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a0dc <_strtod_l+0x294>
 8009f62:	e7e4      	b.n	8009f2e <_strtod_l+0xe6>
 8009f64:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009f68:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009f6c:	e7df      	b.n	8009f2e <_strtod_l+0xe6>
 8009f6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f70:	1c5a      	adds	r2, r3, #1
 8009f72:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f74:	785b      	ldrb	r3, [r3, #1]
 8009f76:	2b30      	cmp	r3, #48	@ 0x30
 8009f78:	d0f9      	beq.n	8009f6e <_strtod_l+0x126>
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d09d      	beq.n	8009eba <_strtod_l+0x72>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f84:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f86:	2300      	movs	r3, #0
 8009f88:	9308      	str	r3, [sp, #32]
 8009f8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f8c:	461f      	mov	r7, r3
 8009f8e:	220a      	movs	r2, #10
 8009f90:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009f92:	7805      	ldrb	r5, [r0, #0]
 8009f94:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009f98:	b2d9      	uxtb	r1, r3
 8009f9a:	2909      	cmp	r1, #9
 8009f9c:	d928      	bls.n	8009ff0 <_strtod_l+0x1a8>
 8009f9e:	494e      	ldr	r1, [pc, #312]	@ (800a0d8 <_strtod_l+0x290>)
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f000 fe45 	bl	800ac30 <strncmp>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d032      	beq.n	800a010 <_strtod_l+0x1c8>
 8009faa:	2000      	movs	r0, #0
 8009fac:	462a      	mov	r2, r5
 8009fae:	4681      	mov	r9, r0
 8009fb0:	463d      	mov	r5, r7
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2a65      	cmp	r2, #101	@ 0x65
 8009fb6:	d001      	beq.n	8009fbc <_strtod_l+0x174>
 8009fb8:	2a45      	cmp	r2, #69	@ 0x45
 8009fba:	d114      	bne.n	8009fe6 <_strtod_l+0x19e>
 8009fbc:	b91d      	cbnz	r5, 8009fc6 <_strtod_l+0x17e>
 8009fbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fc0:	4302      	orrs	r2, r0
 8009fc2:	d095      	beq.n	8009ef0 <_strtod_l+0xa8>
 8009fc4:	2500      	movs	r5, #0
 8009fc6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009fc8:	1c62      	adds	r2, r4, #1
 8009fca:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fcc:	7862      	ldrb	r2, [r4, #1]
 8009fce:	2a2b      	cmp	r2, #43	@ 0x2b
 8009fd0:	d077      	beq.n	800a0c2 <_strtod_l+0x27a>
 8009fd2:	2a2d      	cmp	r2, #45	@ 0x2d
 8009fd4:	d07b      	beq.n	800a0ce <_strtod_l+0x286>
 8009fd6:	f04f 0c00 	mov.w	ip, #0
 8009fda:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009fde:	2909      	cmp	r1, #9
 8009fe0:	f240 8082 	bls.w	800a0e8 <_strtod_l+0x2a0>
 8009fe4:	9419      	str	r4, [sp, #100]	@ 0x64
 8009fe6:	f04f 0800 	mov.w	r8, #0
 8009fea:	e0a2      	b.n	800a132 <_strtod_l+0x2ea>
 8009fec:	2300      	movs	r3, #0
 8009fee:	e7c7      	b.n	8009f80 <_strtod_l+0x138>
 8009ff0:	2f08      	cmp	r7, #8
 8009ff2:	bfd5      	itete	le
 8009ff4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009ff6:	9908      	ldrgt	r1, [sp, #32]
 8009ff8:	fb02 3301 	mlale	r3, r2, r1, r3
 8009ffc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a000:	f100 0001 	add.w	r0, r0, #1
 800a004:	bfd4      	ite	le
 800a006:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a008:	9308      	strgt	r3, [sp, #32]
 800a00a:	3701      	adds	r7, #1
 800a00c:	9019      	str	r0, [sp, #100]	@ 0x64
 800a00e:	e7bf      	b.n	8009f90 <_strtod_l+0x148>
 800a010:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a012:	1c5a      	adds	r2, r3, #1
 800a014:	9219      	str	r2, [sp, #100]	@ 0x64
 800a016:	785a      	ldrb	r2, [r3, #1]
 800a018:	b37f      	cbz	r7, 800a07a <_strtod_l+0x232>
 800a01a:	4681      	mov	r9, r0
 800a01c:	463d      	mov	r5, r7
 800a01e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a022:	2b09      	cmp	r3, #9
 800a024:	d912      	bls.n	800a04c <_strtod_l+0x204>
 800a026:	2301      	movs	r3, #1
 800a028:	e7c4      	b.n	8009fb4 <_strtod_l+0x16c>
 800a02a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a02c:	1c5a      	adds	r2, r3, #1
 800a02e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a030:	785a      	ldrb	r2, [r3, #1]
 800a032:	3001      	adds	r0, #1
 800a034:	2a30      	cmp	r2, #48	@ 0x30
 800a036:	d0f8      	beq.n	800a02a <_strtod_l+0x1e2>
 800a038:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a03c:	2b08      	cmp	r3, #8
 800a03e:	f200 84d3 	bhi.w	800a9e8 <_strtod_l+0xba0>
 800a042:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a044:	930c      	str	r3, [sp, #48]	@ 0x30
 800a046:	4681      	mov	r9, r0
 800a048:	2000      	movs	r0, #0
 800a04a:	4605      	mov	r5, r0
 800a04c:	3a30      	subs	r2, #48	@ 0x30
 800a04e:	f100 0301 	add.w	r3, r0, #1
 800a052:	d02a      	beq.n	800a0aa <_strtod_l+0x262>
 800a054:	4499      	add	r9, r3
 800a056:	eb00 0c05 	add.w	ip, r0, r5
 800a05a:	462b      	mov	r3, r5
 800a05c:	210a      	movs	r1, #10
 800a05e:	4563      	cmp	r3, ip
 800a060:	d10d      	bne.n	800a07e <_strtod_l+0x236>
 800a062:	1c69      	adds	r1, r5, #1
 800a064:	4401      	add	r1, r0
 800a066:	4428      	add	r0, r5
 800a068:	2808      	cmp	r0, #8
 800a06a:	dc16      	bgt.n	800a09a <_strtod_l+0x252>
 800a06c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a06e:	230a      	movs	r3, #10
 800a070:	fb03 2300 	mla	r3, r3, r0, r2
 800a074:	930a      	str	r3, [sp, #40]	@ 0x28
 800a076:	2300      	movs	r3, #0
 800a078:	e018      	b.n	800a0ac <_strtod_l+0x264>
 800a07a:	4638      	mov	r0, r7
 800a07c:	e7da      	b.n	800a034 <_strtod_l+0x1ec>
 800a07e:	2b08      	cmp	r3, #8
 800a080:	f103 0301 	add.w	r3, r3, #1
 800a084:	dc03      	bgt.n	800a08e <_strtod_l+0x246>
 800a086:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a088:	434e      	muls	r6, r1
 800a08a:	960a      	str	r6, [sp, #40]	@ 0x28
 800a08c:	e7e7      	b.n	800a05e <_strtod_l+0x216>
 800a08e:	2b10      	cmp	r3, #16
 800a090:	bfde      	ittt	le
 800a092:	9e08      	ldrle	r6, [sp, #32]
 800a094:	434e      	mulle	r6, r1
 800a096:	9608      	strle	r6, [sp, #32]
 800a098:	e7e1      	b.n	800a05e <_strtod_l+0x216>
 800a09a:	280f      	cmp	r0, #15
 800a09c:	dceb      	bgt.n	800a076 <_strtod_l+0x22e>
 800a09e:	9808      	ldr	r0, [sp, #32]
 800a0a0:	230a      	movs	r3, #10
 800a0a2:	fb03 2300 	mla	r3, r3, r0, r2
 800a0a6:	9308      	str	r3, [sp, #32]
 800a0a8:	e7e5      	b.n	800a076 <_strtod_l+0x22e>
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a0ae:	1c50      	adds	r0, r2, #1
 800a0b0:	9019      	str	r0, [sp, #100]	@ 0x64
 800a0b2:	7852      	ldrb	r2, [r2, #1]
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	460d      	mov	r5, r1
 800a0b8:	e7b1      	b.n	800a01e <_strtod_l+0x1d6>
 800a0ba:	f04f 0900 	mov.w	r9, #0
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e77d      	b.n	8009fbe <_strtod_l+0x176>
 800a0c2:	f04f 0c00 	mov.w	ip, #0
 800a0c6:	1ca2      	adds	r2, r4, #2
 800a0c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0ca:	78a2      	ldrb	r2, [r4, #2]
 800a0cc:	e785      	b.n	8009fda <_strtod_l+0x192>
 800a0ce:	f04f 0c01 	mov.w	ip, #1
 800a0d2:	e7f8      	b.n	800a0c6 <_strtod_l+0x27e>
 800a0d4:	0800d9f4 	.word	0x0800d9f4
 800a0d8:	0800d9dd 	.word	0x0800d9dd
 800a0dc:	7ff00000 	.word	0x7ff00000
 800a0e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a0e2:	1c51      	adds	r1, r2, #1
 800a0e4:	9119      	str	r1, [sp, #100]	@ 0x64
 800a0e6:	7852      	ldrb	r2, [r2, #1]
 800a0e8:	2a30      	cmp	r2, #48	@ 0x30
 800a0ea:	d0f9      	beq.n	800a0e0 <_strtod_l+0x298>
 800a0ec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a0f0:	2908      	cmp	r1, #8
 800a0f2:	f63f af78 	bhi.w	8009fe6 <_strtod_l+0x19e>
 800a0f6:	3a30      	subs	r2, #48	@ 0x30
 800a0f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a0fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a0fe:	f04f 080a 	mov.w	r8, #10
 800a102:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a104:	1c56      	adds	r6, r2, #1
 800a106:	9619      	str	r6, [sp, #100]	@ 0x64
 800a108:	7852      	ldrb	r2, [r2, #1]
 800a10a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a10e:	f1be 0f09 	cmp.w	lr, #9
 800a112:	d939      	bls.n	800a188 <_strtod_l+0x340>
 800a114:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a116:	1a76      	subs	r6, r6, r1
 800a118:	2e08      	cmp	r6, #8
 800a11a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a11e:	dc03      	bgt.n	800a128 <_strtod_l+0x2e0>
 800a120:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a122:	4588      	cmp	r8, r1
 800a124:	bfa8      	it	ge
 800a126:	4688      	movge	r8, r1
 800a128:	f1bc 0f00 	cmp.w	ip, #0
 800a12c:	d001      	beq.n	800a132 <_strtod_l+0x2ea>
 800a12e:	f1c8 0800 	rsb	r8, r8, #0
 800a132:	2d00      	cmp	r5, #0
 800a134:	d14e      	bne.n	800a1d4 <_strtod_l+0x38c>
 800a136:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a138:	4308      	orrs	r0, r1
 800a13a:	f47f aebe 	bne.w	8009eba <_strtod_l+0x72>
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f47f aed6 	bne.w	8009ef0 <_strtod_l+0xa8>
 800a144:	2a69      	cmp	r2, #105	@ 0x69
 800a146:	d028      	beq.n	800a19a <_strtod_l+0x352>
 800a148:	dc25      	bgt.n	800a196 <_strtod_l+0x34e>
 800a14a:	2a49      	cmp	r2, #73	@ 0x49
 800a14c:	d025      	beq.n	800a19a <_strtod_l+0x352>
 800a14e:	2a4e      	cmp	r2, #78	@ 0x4e
 800a150:	f47f aece 	bne.w	8009ef0 <_strtod_l+0xa8>
 800a154:	499b      	ldr	r1, [pc, #620]	@ (800a3c4 <_strtod_l+0x57c>)
 800a156:	a819      	add	r0, sp, #100	@ 0x64
 800a158:	f001 feac 	bl	800beb4 <__match>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	f43f aec7 	beq.w	8009ef0 <_strtod_l+0xa8>
 800a162:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	2b28      	cmp	r3, #40	@ 0x28
 800a168:	d12e      	bne.n	800a1c8 <_strtod_l+0x380>
 800a16a:	4997      	ldr	r1, [pc, #604]	@ (800a3c8 <_strtod_l+0x580>)
 800a16c:	aa1c      	add	r2, sp, #112	@ 0x70
 800a16e:	a819      	add	r0, sp, #100	@ 0x64
 800a170:	f001 feb4 	bl	800bedc <__hexnan>
 800a174:	2805      	cmp	r0, #5
 800a176:	d127      	bne.n	800a1c8 <_strtod_l+0x380>
 800a178:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a17a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a17e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a182:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a186:	e698      	b.n	8009eba <_strtod_l+0x72>
 800a188:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a18a:	fb08 2101 	mla	r1, r8, r1, r2
 800a18e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a192:	920e      	str	r2, [sp, #56]	@ 0x38
 800a194:	e7b5      	b.n	800a102 <_strtod_l+0x2ba>
 800a196:	2a6e      	cmp	r2, #110	@ 0x6e
 800a198:	e7da      	b.n	800a150 <_strtod_l+0x308>
 800a19a:	498c      	ldr	r1, [pc, #560]	@ (800a3cc <_strtod_l+0x584>)
 800a19c:	a819      	add	r0, sp, #100	@ 0x64
 800a19e:	f001 fe89 	bl	800beb4 <__match>
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	f43f aea4 	beq.w	8009ef0 <_strtod_l+0xa8>
 800a1a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1aa:	4989      	ldr	r1, [pc, #548]	@ (800a3d0 <_strtod_l+0x588>)
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	a819      	add	r0, sp, #100	@ 0x64
 800a1b0:	9319      	str	r3, [sp, #100]	@ 0x64
 800a1b2:	f001 fe7f 	bl	800beb4 <__match>
 800a1b6:	b910      	cbnz	r0, 800a1be <_strtod_l+0x376>
 800a1b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	9319      	str	r3, [sp, #100]	@ 0x64
 800a1be:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a3e0 <_strtod_l+0x598>
 800a1c2:	f04f 0a00 	mov.w	sl, #0
 800a1c6:	e678      	b.n	8009eba <_strtod_l+0x72>
 800a1c8:	4882      	ldr	r0, [pc, #520]	@ (800a3d4 <_strtod_l+0x58c>)
 800a1ca:	f000 fd8d 	bl	800ace8 <nan>
 800a1ce:	ec5b ab10 	vmov	sl, fp, d0
 800a1d2:	e672      	b.n	8009eba <_strtod_l+0x72>
 800a1d4:	eba8 0309 	sub.w	r3, r8, r9
 800a1d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a1da:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1dc:	2f00      	cmp	r7, #0
 800a1de:	bf08      	it	eq
 800a1e0:	462f      	moveq	r7, r5
 800a1e2:	2d10      	cmp	r5, #16
 800a1e4:	462c      	mov	r4, r5
 800a1e6:	bfa8      	it	ge
 800a1e8:	2410      	movge	r4, #16
 800a1ea:	f7f6 f98b 	bl	8000504 <__aeabi_ui2d>
 800a1ee:	2d09      	cmp	r5, #9
 800a1f0:	4682      	mov	sl, r0
 800a1f2:	468b      	mov	fp, r1
 800a1f4:	dc13      	bgt.n	800a21e <_strtod_l+0x3d6>
 800a1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f43f ae5e 	beq.w	8009eba <_strtod_l+0x72>
 800a1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a200:	dd78      	ble.n	800a2f4 <_strtod_l+0x4ac>
 800a202:	2b16      	cmp	r3, #22
 800a204:	dc5f      	bgt.n	800a2c6 <_strtod_l+0x47e>
 800a206:	4974      	ldr	r1, [pc, #464]	@ (800a3d8 <_strtod_l+0x590>)
 800a208:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a20c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a210:	4652      	mov	r2, sl
 800a212:	465b      	mov	r3, fp
 800a214:	f7f6 f9f0 	bl	80005f8 <__aeabi_dmul>
 800a218:	4682      	mov	sl, r0
 800a21a:	468b      	mov	fp, r1
 800a21c:	e64d      	b.n	8009eba <_strtod_l+0x72>
 800a21e:	4b6e      	ldr	r3, [pc, #440]	@ (800a3d8 <_strtod_l+0x590>)
 800a220:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a224:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a228:	f7f6 f9e6 	bl	80005f8 <__aeabi_dmul>
 800a22c:	4682      	mov	sl, r0
 800a22e:	9808      	ldr	r0, [sp, #32]
 800a230:	468b      	mov	fp, r1
 800a232:	f7f6 f967 	bl	8000504 <__aeabi_ui2d>
 800a236:	4602      	mov	r2, r0
 800a238:	460b      	mov	r3, r1
 800a23a:	4650      	mov	r0, sl
 800a23c:	4659      	mov	r1, fp
 800a23e:	f7f6 f825 	bl	800028c <__adddf3>
 800a242:	2d0f      	cmp	r5, #15
 800a244:	4682      	mov	sl, r0
 800a246:	468b      	mov	fp, r1
 800a248:	ddd5      	ble.n	800a1f6 <_strtod_l+0x3ae>
 800a24a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a24c:	1b2c      	subs	r4, r5, r4
 800a24e:	441c      	add	r4, r3
 800a250:	2c00      	cmp	r4, #0
 800a252:	f340 8096 	ble.w	800a382 <_strtod_l+0x53a>
 800a256:	f014 030f 	ands.w	r3, r4, #15
 800a25a:	d00a      	beq.n	800a272 <_strtod_l+0x42a>
 800a25c:	495e      	ldr	r1, [pc, #376]	@ (800a3d8 <_strtod_l+0x590>)
 800a25e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a262:	4652      	mov	r2, sl
 800a264:	465b      	mov	r3, fp
 800a266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a26a:	f7f6 f9c5 	bl	80005f8 <__aeabi_dmul>
 800a26e:	4682      	mov	sl, r0
 800a270:	468b      	mov	fp, r1
 800a272:	f034 040f 	bics.w	r4, r4, #15
 800a276:	d073      	beq.n	800a360 <_strtod_l+0x518>
 800a278:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a27c:	dd48      	ble.n	800a310 <_strtod_l+0x4c8>
 800a27e:	2400      	movs	r4, #0
 800a280:	46a0      	mov	r8, r4
 800a282:	940a      	str	r4, [sp, #40]	@ 0x28
 800a284:	46a1      	mov	r9, r4
 800a286:	9a05      	ldr	r2, [sp, #20]
 800a288:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a3e0 <_strtod_l+0x598>
 800a28c:	2322      	movs	r3, #34	@ 0x22
 800a28e:	6013      	str	r3, [r2, #0]
 800a290:	f04f 0a00 	mov.w	sl, #0
 800a294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a296:	2b00      	cmp	r3, #0
 800a298:	f43f ae0f 	beq.w	8009eba <_strtod_l+0x72>
 800a29c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a29e:	9805      	ldr	r0, [sp, #20]
 800a2a0:	f002 fb04 	bl	800c8ac <_Bfree>
 800a2a4:	9805      	ldr	r0, [sp, #20]
 800a2a6:	4649      	mov	r1, r9
 800a2a8:	f002 fb00 	bl	800c8ac <_Bfree>
 800a2ac:	9805      	ldr	r0, [sp, #20]
 800a2ae:	4641      	mov	r1, r8
 800a2b0:	f002 fafc 	bl	800c8ac <_Bfree>
 800a2b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a2b6:	9805      	ldr	r0, [sp, #20]
 800a2b8:	f002 faf8 	bl	800c8ac <_Bfree>
 800a2bc:	9805      	ldr	r0, [sp, #20]
 800a2be:	4621      	mov	r1, r4
 800a2c0:	f002 faf4 	bl	800c8ac <_Bfree>
 800a2c4:	e5f9      	b.n	8009eba <_strtod_l+0x72>
 800a2c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	dbbc      	blt.n	800a24a <_strtod_l+0x402>
 800a2d0:	4c41      	ldr	r4, [pc, #260]	@ (800a3d8 <_strtod_l+0x590>)
 800a2d2:	f1c5 050f 	rsb	r5, r5, #15
 800a2d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a2da:	4652      	mov	r2, sl
 800a2dc:	465b      	mov	r3, fp
 800a2de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2e2:	f7f6 f989 	bl	80005f8 <__aeabi_dmul>
 800a2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2e8:	1b5d      	subs	r5, r3, r5
 800a2ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a2ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a2f2:	e78f      	b.n	800a214 <_strtod_l+0x3cc>
 800a2f4:	3316      	adds	r3, #22
 800a2f6:	dba8      	blt.n	800a24a <_strtod_l+0x402>
 800a2f8:	4b37      	ldr	r3, [pc, #220]	@ (800a3d8 <_strtod_l+0x590>)
 800a2fa:	eba9 0808 	sub.w	r8, r9, r8
 800a2fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a302:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a306:	4650      	mov	r0, sl
 800a308:	4659      	mov	r1, fp
 800a30a:	f7f6 fa9f 	bl	800084c <__aeabi_ddiv>
 800a30e:	e783      	b.n	800a218 <_strtod_l+0x3d0>
 800a310:	4b32      	ldr	r3, [pc, #200]	@ (800a3dc <_strtod_l+0x594>)
 800a312:	9308      	str	r3, [sp, #32]
 800a314:	2300      	movs	r3, #0
 800a316:	1124      	asrs	r4, r4, #4
 800a318:	4650      	mov	r0, sl
 800a31a:	4659      	mov	r1, fp
 800a31c:	461e      	mov	r6, r3
 800a31e:	2c01      	cmp	r4, #1
 800a320:	dc21      	bgt.n	800a366 <_strtod_l+0x51e>
 800a322:	b10b      	cbz	r3, 800a328 <_strtod_l+0x4e0>
 800a324:	4682      	mov	sl, r0
 800a326:	468b      	mov	fp, r1
 800a328:	492c      	ldr	r1, [pc, #176]	@ (800a3dc <_strtod_l+0x594>)
 800a32a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a32e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a332:	4652      	mov	r2, sl
 800a334:	465b      	mov	r3, fp
 800a336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a33a:	f7f6 f95d 	bl	80005f8 <__aeabi_dmul>
 800a33e:	4b28      	ldr	r3, [pc, #160]	@ (800a3e0 <_strtod_l+0x598>)
 800a340:	460a      	mov	r2, r1
 800a342:	400b      	ands	r3, r1
 800a344:	4927      	ldr	r1, [pc, #156]	@ (800a3e4 <_strtod_l+0x59c>)
 800a346:	428b      	cmp	r3, r1
 800a348:	4682      	mov	sl, r0
 800a34a:	d898      	bhi.n	800a27e <_strtod_l+0x436>
 800a34c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a350:	428b      	cmp	r3, r1
 800a352:	bf86      	itte	hi
 800a354:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a3e8 <_strtod_l+0x5a0>
 800a358:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a35c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a360:	2300      	movs	r3, #0
 800a362:	9308      	str	r3, [sp, #32]
 800a364:	e07a      	b.n	800a45c <_strtod_l+0x614>
 800a366:	07e2      	lsls	r2, r4, #31
 800a368:	d505      	bpl.n	800a376 <_strtod_l+0x52e>
 800a36a:	9b08      	ldr	r3, [sp, #32]
 800a36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a370:	f7f6 f942 	bl	80005f8 <__aeabi_dmul>
 800a374:	2301      	movs	r3, #1
 800a376:	9a08      	ldr	r2, [sp, #32]
 800a378:	3208      	adds	r2, #8
 800a37a:	3601      	adds	r6, #1
 800a37c:	1064      	asrs	r4, r4, #1
 800a37e:	9208      	str	r2, [sp, #32]
 800a380:	e7cd      	b.n	800a31e <_strtod_l+0x4d6>
 800a382:	d0ed      	beq.n	800a360 <_strtod_l+0x518>
 800a384:	4264      	negs	r4, r4
 800a386:	f014 020f 	ands.w	r2, r4, #15
 800a38a:	d00a      	beq.n	800a3a2 <_strtod_l+0x55a>
 800a38c:	4b12      	ldr	r3, [pc, #72]	@ (800a3d8 <_strtod_l+0x590>)
 800a38e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a392:	4650      	mov	r0, sl
 800a394:	4659      	mov	r1, fp
 800a396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39a:	f7f6 fa57 	bl	800084c <__aeabi_ddiv>
 800a39e:	4682      	mov	sl, r0
 800a3a0:	468b      	mov	fp, r1
 800a3a2:	1124      	asrs	r4, r4, #4
 800a3a4:	d0dc      	beq.n	800a360 <_strtod_l+0x518>
 800a3a6:	2c1f      	cmp	r4, #31
 800a3a8:	dd20      	ble.n	800a3ec <_strtod_l+0x5a4>
 800a3aa:	2400      	movs	r4, #0
 800a3ac:	46a0      	mov	r8, r4
 800a3ae:	940a      	str	r4, [sp, #40]	@ 0x28
 800a3b0:	46a1      	mov	r9, r4
 800a3b2:	9a05      	ldr	r2, [sp, #20]
 800a3b4:	2322      	movs	r3, #34	@ 0x22
 800a3b6:	f04f 0a00 	mov.w	sl, #0
 800a3ba:	f04f 0b00 	mov.w	fp, #0
 800a3be:	6013      	str	r3, [r2, #0]
 800a3c0:	e768      	b.n	800a294 <_strtod_l+0x44c>
 800a3c2:	bf00      	nop
 800a3c4:	0800d9b1 	.word	0x0800d9b1
 800a3c8:	0800d9e0 	.word	0x0800d9e0
 800a3cc:	0800d9a9 	.word	0x0800d9a9
 800a3d0:	0800db3c 	.word	0x0800db3c
 800a3d4:	0800ddcb 	.word	0x0800ddcb
 800a3d8:	0800dcc8 	.word	0x0800dcc8
 800a3dc:	0800dca0 	.word	0x0800dca0
 800a3e0:	7ff00000 	.word	0x7ff00000
 800a3e4:	7ca00000 	.word	0x7ca00000
 800a3e8:	7fefffff 	.word	0x7fefffff
 800a3ec:	f014 0310 	ands.w	r3, r4, #16
 800a3f0:	bf18      	it	ne
 800a3f2:	236a      	movne	r3, #106	@ 0x6a
 800a3f4:	4ea9      	ldr	r6, [pc, #676]	@ (800a69c <_strtod_l+0x854>)
 800a3f6:	9308      	str	r3, [sp, #32]
 800a3f8:	4650      	mov	r0, sl
 800a3fa:	4659      	mov	r1, fp
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	07e2      	lsls	r2, r4, #31
 800a400:	d504      	bpl.n	800a40c <_strtod_l+0x5c4>
 800a402:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a406:	f7f6 f8f7 	bl	80005f8 <__aeabi_dmul>
 800a40a:	2301      	movs	r3, #1
 800a40c:	1064      	asrs	r4, r4, #1
 800a40e:	f106 0608 	add.w	r6, r6, #8
 800a412:	d1f4      	bne.n	800a3fe <_strtod_l+0x5b6>
 800a414:	b10b      	cbz	r3, 800a41a <_strtod_l+0x5d2>
 800a416:	4682      	mov	sl, r0
 800a418:	468b      	mov	fp, r1
 800a41a:	9b08      	ldr	r3, [sp, #32]
 800a41c:	b1b3      	cbz	r3, 800a44c <_strtod_l+0x604>
 800a41e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a422:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a426:	2b00      	cmp	r3, #0
 800a428:	4659      	mov	r1, fp
 800a42a:	dd0f      	ble.n	800a44c <_strtod_l+0x604>
 800a42c:	2b1f      	cmp	r3, #31
 800a42e:	dd55      	ble.n	800a4dc <_strtod_l+0x694>
 800a430:	2b34      	cmp	r3, #52	@ 0x34
 800a432:	bfde      	ittt	le
 800a434:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a438:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a43c:	4093      	lslle	r3, r2
 800a43e:	f04f 0a00 	mov.w	sl, #0
 800a442:	bfcc      	ite	gt
 800a444:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a448:	ea03 0b01 	andle.w	fp, r3, r1
 800a44c:	2200      	movs	r2, #0
 800a44e:	2300      	movs	r3, #0
 800a450:	4650      	mov	r0, sl
 800a452:	4659      	mov	r1, fp
 800a454:	f7f6 fb38 	bl	8000ac8 <__aeabi_dcmpeq>
 800a458:	2800      	cmp	r0, #0
 800a45a:	d1a6      	bne.n	800a3aa <_strtod_l+0x562>
 800a45c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a462:	9805      	ldr	r0, [sp, #20]
 800a464:	462b      	mov	r3, r5
 800a466:	463a      	mov	r2, r7
 800a468:	f002 fa88 	bl	800c97c <__s2b>
 800a46c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a46e:	2800      	cmp	r0, #0
 800a470:	f43f af05 	beq.w	800a27e <_strtod_l+0x436>
 800a474:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a476:	2a00      	cmp	r2, #0
 800a478:	eba9 0308 	sub.w	r3, r9, r8
 800a47c:	bfa8      	it	ge
 800a47e:	2300      	movge	r3, #0
 800a480:	9312      	str	r3, [sp, #72]	@ 0x48
 800a482:	2400      	movs	r4, #0
 800a484:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a488:	9316      	str	r3, [sp, #88]	@ 0x58
 800a48a:	46a0      	mov	r8, r4
 800a48c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a48e:	9805      	ldr	r0, [sp, #20]
 800a490:	6859      	ldr	r1, [r3, #4]
 800a492:	f002 f9cb 	bl	800c82c <_Balloc>
 800a496:	4681      	mov	r9, r0
 800a498:	2800      	cmp	r0, #0
 800a49a:	f43f aef4 	beq.w	800a286 <_strtod_l+0x43e>
 800a49e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4a0:	691a      	ldr	r2, [r3, #16]
 800a4a2:	3202      	adds	r2, #2
 800a4a4:	f103 010c 	add.w	r1, r3, #12
 800a4a8:	0092      	lsls	r2, r2, #2
 800a4aa:	300c      	adds	r0, #12
 800a4ac:	f000 fc0b 	bl	800acc6 <memcpy>
 800a4b0:	ec4b ab10 	vmov	d0, sl, fp
 800a4b4:	9805      	ldr	r0, [sp, #20]
 800a4b6:	aa1c      	add	r2, sp, #112	@ 0x70
 800a4b8:	a91b      	add	r1, sp, #108	@ 0x6c
 800a4ba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a4be:	f002 fd99 	bl	800cff4 <__d2b>
 800a4c2:	901a      	str	r0, [sp, #104]	@ 0x68
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	f43f aede 	beq.w	800a286 <_strtod_l+0x43e>
 800a4ca:	9805      	ldr	r0, [sp, #20]
 800a4cc:	2101      	movs	r1, #1
 800a4ce:	f002 faeb 	bl	800caa8 <__i2b>
 800a4d2:	4680      	mov	r8, r0
 800a4d4:	b948      	cbnz	r0, 800a4ea <_strtod_l+0x6a2>
 800a4d6:	f04f 0800 	mov.w	r8, #0
 800a4da:	e6d4      	b.n	800a286 <_strtod_l+0x43e>
 800a4dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a4e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e4:	ea03 0a0a 	and.w	sl, r3, sl
 800a4e8:	e7b0      	b.n	800a44c <_strtod_l+0x604>
 800a4ea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a4ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a4ee:	2d00      	cmp	r5, #0
 800a4f0:	bfab      	itete	ge
 800a4f2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a4f4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a4f6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a4f8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a4fa:	bfac      	ite	ge
 800a4fc:	18ef      	addge	r7, r5, r3
 800a4fe:	1b5e      	sublt	r6, r3, r5
 800a500:	9b08      	ldr	r3, [sp, #32]
 800a502:	1aed      	subs	r5, r5, r3
 800a504:	4415      	add	r5, r2
 800a506:	4b66      	ldr	r3, [pc, #408]	@ (800a6a0 <_strtod_l+0x858>)
 800a508:	3d01      	subs	r5, #1
 800a50a:	429d      	cmp	r5, r3
 800a50c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a510:	da50      	bge.n	800a5b4 <_strtod_l+0x76c>
 800a512:	1b5b      	subs	r3, r3, r5
 800a514:	2b1f      	cmp	r3, #31
 800a516:	eba2 0203 	sub.w	r2, r2, r3
 800a51a:	f04f 0101 	mov.w	r1, #1
 800a51e:	dc3d      	bgt.n	800a59c <_strtod_l+0x754>
 800a520:	fa01 f303 	lsl.w	r3, r1, r3
 800a524:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a526:	2300      	movs	r3, #0
 800a528:	9310      	str	r3, [sp, #64]	@ 0x40
 800a52a:	18bd      	adds	r5, r7, r2
 800a52c:	9b08      	ldr	r3, [sp, #32]
 800a52e:	42af      	cmp	r7, r5
 800a530:	4416      	add	r6, r2
 800a532:	441e      	add	r6, r3
 800a534:	463b      	mov	r3, r7
 800a536:	bfa8      	it	ge
 800a538:	462b      	movge	r3, r5
 800a53a:	42b3      	cmp	r3, r6
 800a53c:	bfa8      	it	ge
 800a53e:	4633      	movge	r3, r6
 800a540:	2b00      	cmp	r3, #0
 800a542:	bfc2      	ittt	gt
 800a544:	1aed      	subgt	r5, r5, r3
 800a546:	1af6      	subgt	r6, r6, r3
 800a548:	1aff      	subgt	r7, r7, r3
 800a54a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	dd16      	ble.n	800a57e <_strtod_l+0x736>
 800a550:	4641      	mov	r1, r8
 800a552:	9805      	ldr	r0, [sp, #20]
 800a554:	461a      	mov	r2, r3
 800a556:	f002 fb67 	bl	800cc28 <__pow5mult>
 800a55a:	4680      	mov	r8, r0
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d0ba      	beq.n	800a4d6 <_strtod_l+0x68e>
 800a560:	4601      	mov	r1, r0
 800a562:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a564:	9805      	ldr	r0, [sp, #20]
 800a566:	f002 fab5 	bl	800cad4 <__multiply>
 800a56a:	900e      	str	r0, [sp, #56]	@ 0x38
 800a56c:	2800      	cmp	r0, #0
 800a56e:	f43f ae8a 	beq.w	800a286 <_strtod_l+0x43e>
 800a572:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a574:	9805      	ldr	r0, [sp, #20]
 800a576:	f002 f999 	bl	800c8ac <_Bfree>
 800a57a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a57c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a57e:	2d00      	cmp	r5, #0
 800a580:	dc1d      	bgt.n	800a5be <_strtod_l+0x776>
 800a582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a584:	2b00      	cmp	r3, #0
 800a586:	dd23      	ble.n	800a5d0 <_strtod_l+0x788>
 800a588:	4649      	mov	r1, r9
 800a58a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a58c:	9805      	ldr	r0, [sp, #20]
 800a58e:	f002 fb4b 	bl	800cc28 <__pow5mult>
 800a592:	4681      	mov	r9, r0
 800a594:	b9e0      	cbnz	r0, 800a5d0 <_strtod_l+0x788>
 800a596:	f04f 0900 	mov.w	r9, #0
 800a59a:	e674      	b.n	800a286 <_strtod_l+0x43e>
 800a59c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a5a0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a5a4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a5a8:	35e2      	adds	r5, #226	@ 0xe2
 800a5aa:	fa01 f305 	lsl.w	r3, r1, r5
 800a5ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800a5b0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a5b2:	e7ba      	b.n	800a52a <_strtod_l+0x6e2>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a5bc:	e7b5      	b.n	800a52a <_strtod_l+0x6e2>
 800a5be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5c0:	9805      	ldr	r0, [sp, #20]
 800a5c2:	462a      	mov	r2, r5
 800a5c4:	f002 fb8a 	bl	800ccdc <__lshift>
 800a5c8:	901a      	str	r0, [sp, #104]	@ 0x68
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	d1d9      	bne.n	800a582 <_strtod_l+0x73a>
 800a5ce:	e65a      	b.n	800a286 <_strtod_l+0x43e>
 800a5d0:	2e00      	cmp	r6, #0
 800a5d2:	dd07      	ble.n	800a5e4 <_strtod_l+0x79c>
 800a5d4:	4649      	mov	r1, r9
 800a5d6:	9805      	ldr	r0, [sp, #20]
 800a5d8:	4632      	mov	r2, r6
 800a5da:	f002 fb7f 	bl	800ccdc <__lshift>
 800a5de:	4681      	mov	r9, r0
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	d0d8      	beq.n	800a596 <_strtod_l+0x74e>
 800a5e4:	2f00      	cmp	r7, #0
 800a5e6:	dd08      	ble.n	800a5fa <_strtod_l+0x7b2>
 800a5e8:	4641      	mov	r1, r8
 800a5ea:	9805      	ldr	r0, [sp, #20]
 800a5ec:	463a      	mov	r2, r7
 800a5ee:	f002 fb75 	bl	800ccdc <__lshift>
 800a5f2:	4680      	mov	r8, r0
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	f43f ae46 	beq.w	800a286 <_strtod_l+0x43e>
 800a5fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5fc:	9805      	ldr	r0, [sp, #20]
 800a5fe:	464a      	mov	r2, r9
 800a600:	f002 fbf4 	bl	800cdec <__mdiff>
 800a604:	4604      	mov	r4, r0
 800a606:	2800      	cmp	r0, #0
 800a608:	f43f ae3d 	beq.w	800a286 <_strtod_l+0x43e>
 800a60c:	68c3      	ldr	r3, [r0, #12]
 800a60e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a610:	2300      	movs	r3, #0
 800a612:	60c3      	str	r3, [r0, #12]
 800a614:	4641      	mov	r1, r8
 800a616:	f002 fbcd 	bl	800cdb4 <__mcmp>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	da46      	bge.n	800a6ac <_strtod_l+0x864>
 800a61e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a620:	ea53 030a 	orrs.w	r3, r3, sl
 800a624:	d16c      	bne.n	800a700 <_strtod_l+0x8b8>
 800a626:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d168      	bne.n	800a700 <_strtod_l+0x8b8>
 800a62e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a632:	0d1b      	lsrs	r3, r3, #20
 800a634:	051b      	lsls	r3, r3, #20
 800a636:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a63a:	d961      	bls.n	800a700 <_strtod_l+0x8b8>
 800a63c:	6963      	ldr	r3, [r4, #20]
 800a63e:	b913      	cbnz	r3, 800a646 <_strtod_l+0x7fe>
 800a640:	6923      	ldr	r3, [r4, #16]
 800a642:	2b01      	cmp	r3, #1
 800a644:	dd5c      	ble.n	800a700 <_strtod_l+0x8b8>
 800a646:	4621      	mov	r1, r4
 800a648:	2201      	movs	r2, #1
 800a64a:	9805      	ldr	r0, [sp, #20]
 800a64c:	f002 fb46 	bl	800ccdc <__lshift>
 800a650:	4641      	mov	r1, r8
 800a652:	4604      	mov	r4, r0
 800a654:	f002 fbae 	bl	800cdb4 <__mcmp>
 800a658:	2800      	cmp	r0, #0
 800a65a:	dd51      	ble.n	800a700 <_strtod_l+0x8b8>
 800a65c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a660:	9a08      	ldr	r2, [sp, #32]
 800a662:	0d1b      	lsrs	r3, r3, #20
 800a664:	051b      	lsls	r3, r3, #20
 800a666:	2a00      	cmp	r2, #0
 800a668:	d06b      	beq.n	800a742 <_strtod_l+0x8fa>
 800a66a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a66e:	d868      	bhi.n	800a742 <_strtod_l+0x8fa>
 800a670:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a674:	f67f ae9d 	bls.w	800a3b2 <_strtod_l+0x56a>
 800a678:	4b0a      	ldr	r3, [pc, #40]	@ (800a6a4 <_strtod_l+0x85c>)
 800a67a:	4650      	mov	r0, sl
 800a67c:	4659      	mov	r1, fp
 800a67e:	2200      	movs	r2, #0
 800a680:	f7f5 ffba 	bl	80005f8 <__aeabi_dmul>
 800a684:	4b08      	ldr	r3, [pc, #32]	@ (800a6a8 <_strtod_l+0x860>)
 800a686:	400b      	ands	r3, r1
 800a688:	4682      	mov	sl, r0
 800a68a:	468b      	mov	fp, r1
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f47f ae05 	bne.w	800a29c <_strtod_l+0x454>
 800a692:	9a05      	ldr	r2, [sp, #20]
 800a694:	2322      	movs	r3, #34	@ 0x22
 800a696:	6013      	str	r3, [r2, #0]
 800a698:	e600      	b.n	800a29c <_strtod_l+0x454>
 800a69a:	bf00      	nop
 800a69c:	0800da08 	.word	0x0800da08
 800a6a0:	fffffc02 	.word	0xfffffc02
 800a6a4:	39500000 	.word	0x39500000
 800a6a8:	7ff00000 	.word	0x7ff00000
 800a6ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a6b0:	d165      	bne.n	800a77e <_strtod_l+0x936>
 800a6b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a6b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6b8:	b35a      	cbz	r2, 800a712 <_strtod_l+0x8ca>
 800a6ba:	4a9f      	ldr	r2, [pc, #636]	@ (800a938 <_strtod_l+0xaf0>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d12b      	bne.n	800a718 <_strtod_l+0x8d0>
 800a6c0:	9b08      	ldr	r3, [sp, #32]
 800a6c2:	4651      	mov	r1, sl
 800a6c4:	b303      	cbz	r3, 800a708 <_strtod_l+0x8c0>
 800a6c6:	4b9d      	ldr	r3, [pc, #628]	@ (800a93c <_strtod_l+0xaf4>)
 800a6c8:	465a      	mov	r2, fp
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a6d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a6d4:	d81b      	bhi.n	800a70e <_strtod_l+0x8c6>
 800a6d6:	0d1b      	lsrs	r3, r3, #20
 800a6d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e0:	4299      	cmp	r1, r3
 800a6e2:	d119      	bne.n	800a718 <_strtod_l+0x8d0>
 800a6e4:	4b96      	ldr	r3, [pc, #600]	@ (800a940 <_strtod_l+0xaf8>)
 800a6e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d102      	bne.n	800a6f2 <_strtod_l+0x8aa>
 800a6ec:	3101      	adds	r1, #1
 800a6ee:	f43f adca 	beq.w	800a286 <_strtod_l+0x43e>
 800a6f2:	4b92      	ldr	r3, [pc, #584]	@ (800a93c <_strtod_l+0xaf4>)
 800a6f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6f6:	401a      	ands	r2, r3
 800a6f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a6fc:	f04f 0a00 	mov.w	sl, #0
 800a700:	9b08      	ldr	r3, [sp, #32]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d1b8      	bne.n	800a678 <_strtod_l+0x830>
 800a706:	e5c9      	b.n	800a29c <_strtod_l+0x454>
 800a708:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a70c:	e7e8      	b.n	800a6e0 <_strtod_l+0x898>
 800a70e:	4613      	mov	r3, r2
 800a710:	e7e6      	b.n	800a6e0 <_strtod_l+0x898>
 800a712:	ea53 030a 	orrs.w	r3, r3, sl
 800a716:	d0a1      	beq.n	800a65c <_strtod_l+0x814>
 800a718:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a71a:	b1db      	cbz	r3, 800a754 <_strtod_l+0x90c>
 800a71c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a71e:	4213      	tst	r3, r2
 800a720:	d0ee      	beq.n	800a700 <_strtod_l+0x8b8>
 800a722:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a724:	9a08      	ldr	r2, [sp, #32]
 800a726:	4650      	mov	r0, sl
 800a728:	4659      	mov	r1, fp
 800a72a:	b1bb      	cbz	r3, 800a75c <_strtod_l+0x914>
 800a72c:	f7ff fb6e 	bl	8009e0c <sulp>
 800a730:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a734:	ec53 2b10 	vmov	r2, r3, d0
 800a738:	f7f5 fda8 	bl	800028c <__adddf3>
 800a73c:	4682      	mov	sl, r0
 800a73e:	468b      	mov	fp, r1
 800a740:	e7de      	b.n	800a700 <_strtod_l+0x8b8>
 800a742:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a746:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a74a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a74e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a752:	e7d5      	b.n	800a700 <_strtod_l+0x8b8>
 800a754:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a756:	ea13 0f0a 	tst.w	r3, sl
 800a75a:	e7e1      	b.n	800a720 <_strtod_l+0x8d8>
 800a75c:	f7ff fb56 	bl	8009e0c <sulp>
 800a760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a764:	ec53 2b10 	vmov	r2, r3, d0
 800a768:	f7f5 fd8e 	bl	8000288 <__aeabi_dsub>
 800a76c:	2200      	movs	r2, #0
 800a76e:	2300      	movs	r3, #0
 800a770:	4682      	mov	sl, r0
 800a772:	468b      	mov	fp, r1
 800a774:	f7f6 f9a8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a778:	2800      	cmp	r0, #0
 800a77a:	d0c1      	beq.n	800a700 <_strtod_l+0x8b8>
 800a77c:	e619      	b.n	800a3b2 <_strtod_l+0x56a>
 800a77e:	4641      	mov	r1, r8
 800a780:	4620      	mov	r0, r4
 800a782:	f002 fc8f 	bl	800d0a4 <__ratio>
 800a786:	ec57 6b10 	vmov	r6, r7, d0
 800a78a:	2200      	movs	r2, #0
 800a78c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a790:	4630      	mov	r0, r6
 800a792:	4639      	mov	r1, r7
 800a794:	f7f6 f9ac 	bl	8000af0 <__aeabi_dcmple>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d06f      	beq.n	800a87c <_strtod_l+0xa34>
 800a79c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d17a      	bne.n	800a898 <_strtod_l+0xa50>
 800a7a2:	f1ba 0f00 	cmp.w	sl, #0
 800a7a6:	d158      	bne.n	800a85a <_strtod_l+0xa12>
 800a7a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d15a      	bne.n	800a868 <_strtod_l+0xa20>
 800a7b2:	4b64      	ldr	r3, [pc, #400]	@ (800a944 <_strtod_l+0xafc>)
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	4639      	mov	r1, r7
 800a7ba:	f7f6 f98f 	bl	8000adc <__aeabi_dcmplt>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d159      	bne.n	800a876 <_strtod_l+0xa2e>
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	4639      	mov	r1, r7
 800a7c6:	4b60      	ldr	r3, [pc, #384]	@ (800a948 <_strtod_l+0xb00>)
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f7f5 ff15 	bl	80005f8 <__aeabi_dmul>
 800a7ce:	4606      	mov	r6, r0
 800a7d0:	460f      	mov	r7, r1
 800a7d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a7d6:	9606      	str	r6, [sp, #24]
 800a7d8:	9307      	str	r3, [sp, #28]
 800a7da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7de:	4d57      	ldr	r5, [pc, #348]	@ (800a93c <_strtod_l+0xaf4>)
 800a7e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a7e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7e6:	401d      	ands	r5, r3
 800a7e8:	4b58      	ldr	r3, [pc, #352]	@ (800a94c <_strtod_l+0xb04>)
 800a7ea:	429d      	cmp	r5, r3
 800a7ec:	f040 80b2 	bne.w	800a954 <_strtod_l+0xb0c>
 800a7f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a7f6:	ec4b ab10 	vmov	d0, sl, fp
 800a7fa:	f002 fb8b 	bl	800cf14 <__ulp>
 800a7fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a802:	ec51 0b10 	vmov	r0, r1, d0
 800a806:	f7f5 fef7 	bl	80005f8 <__aeabi_dmul>
 800a80a:	4652      	mov	r2, sl
 800a80c:	465b      	mov	r3, fp
 800a80e:	f7f5 fd3d 	bl	800028c <__adddf3>
 800a812:	460b      	mov	r3, r1
 800a814:	4949      	ldr	r1, [pc, #292]	@ (800a93c <_strtod_l+0xaf4>)
 800a816:	4a4e      	ldr	r2, [pc, #312]	@ (800a950 <_strtod_l+0xb08>)
 800a818:	4019      	ands	r1, r3
 800a81a:	4291      	cmp	r1, r2
 800a81c:	4682      	mov	sl, r0
 800a81e:	d942      	bls.n	800a8a6 <_strtod_l+0xa5e>
 800a820:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a822:	4b47      	ldr	r3, [pc, #284]	@ (800a940 <_strtod_l+0xaf8>)
 800a824:	429a      	cmp	r2, r3
 800a826:	d103      	bne.n	800a830 <_strtod_l+0x9e8>
 800a828:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a82a:	3301      	adds	r3, #1
 800a82c:	f43f ad2b 	beq.w	800a286 <_strtod_l+0x43e>
 800a830:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a940 <_strtod_l+0xaf8>
 800a834:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a838:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a83a:	9805      	ldr	r0, [sp, #20]
 800a83c:	f002 f836 	bl	800c8ac <_Bfree>
 800a840:	9805      	ldr	r0, [sp, #20]
 800a842:	4649      	mov	r1, r9
 800a844:	f002 f832 	bl	800c8ac <_Bfree>
 800a848:	9805      	ldr	r0, [sp, #20]
 800a84a:	4641      	mov	r1, r8
 800a84c:	f002 f82e 	bl	800c8ac <_Bfree>
 800a850:	9805      	ldr	r0, [sp, #20]
 800a852:	4621      	mov	r1, r4
 800a854:	f002 f82a 	bl	800c8ac <_Bfree>
 800a858:	e618      	b.n	800a48c <_strtod_l+0x644>
 800a85a:	f1ba 0f01 	cmp.w	sl, #1
 800a85e:	d103      	bne.n	800a868 <_strtod_l+0xa20>
 800a860:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a862:	2b00      	cmp	r3, #0
 800a864:	f43f ada5 	beq.w	800a3b2 <_strtod_l+0x56a>
 800a868:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a918 <_strtod_l+0xad0>
 800a86c:	4f35      	ldr	r7, [pc, #212]	@ (800a944 <_strtod_l+0xafc>)
 800a86e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a872:	2600      	movs	r6, #0
 800a874:	e7b1      	b.n	800a7da <_strtod_l+0x992>
 800a876:	4f34      	ldr	r7, [pc, #208]	@ (800a948 <_strtod_l+0xb00>)
 800a878:	2600      	movs	r6, #0
 800a87a:	e7aa      	b.n	800a7d2 <_strtod_l+0x98a>
 800a87c:	4b32      	ldr	r3, [pc, #200]	@ (800a948 <_strtod_l+0xb00>)
 800a87e:	4630      	mov	r0, r6
 800a880:	4639      	mov	r1, r7
 800a882:	2200      	movs	r2, #0
 800a884:	f7f5 feb8 	bl	80005f8 <__aeabi_dmul>
 800a888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a88a:	4606      	mov	r6, r0
 800a88c:	460f      	mov	r7, r1
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d09f      	beq.n	800a7d2 <_strtod_l+0x98a>
 800a892:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a896:	e7a0      	b.n	800a7da <_strtod_l+0x992>
 800a898:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a920 <_strtod_l+0xad8>
 800a89c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a8a0:	ec57 6b17 	vmov	r6, r7, d7
 800a8a4:	e799      	b.n	800a7da <_strtod_l+0x992>
 800a8a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a8aa:	9b08      	ldr	r3, [sp, #32]
 800a8ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1c1      	bne.n	800a838 <_strtod_l+0x9f0>
 800a8b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8b8:	0d1b      	lsrs	r3, r3, #20
 800a8ba:	051b      	lsls	r3, r3, #20
 800a8bc:	429d      	cmp	r5, r3
 800a8be:	d1bb      	bne.n	800a838 <_strtod_l+0x9f0>
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	4639      	mov	r1, r7
 800a8c4:	f7f6 f9f8 	bl	8000cb8 <__aeabi_d2lz>
 800a8c8:	f7f5 fe68 	bl	800059c <__aeabi_l2d>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	f7f5 fcd8 	bl	8000288 <__aeabi_dsub>
 800a8d8:	460b      	mov	r3, r1
 800a8da:	4602      	mov	r2, r0
 800a8dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a8e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a8e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8e6:	ea46 060a 	orr.w	r6, r6, sl
 800a8ea:	431e      	orrs	r6, r3
 800a8ec:	d06f      	beq.n	800a9ce <_strtod_l+0xb86>
 800a8ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800a928 <_strtod_l+0xae0>)
 800a8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f4:	f7f6 f8f2 	bl	8000adc <__aeabi_dcmplt>
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	f47f accf 	bne.w	800a29c <_strtod_l+0x454>
 800a8fe:	a30c      	add	r3, pc, #48	@ (adr r3, 800a930 <_strtod_l+0xae8>)
 800a900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a904:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a908:	f7f6 f906 	bl	8000b18 <__aeabi_dcmpgt>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d093      	beq.n	800a838 <_strtod_l+0x9f0>
 800a910:	e4c4      	b.n	800a29c <_strtod_l+0x454>
 800a912:	bf00      	nop
 800a914:	f3af 8000 	nop.w
 800a918:	00000000 	.word	0x00000000
 800a91c:	bff00000 	.word	0xbff00000
 800a920:	00000000 	.word	0x00000000
 800a924:	3ff00000 	.word	0x3ff00000
 800a928:	94a03595 	.word	0x94a03595
 800a92c:	3fdfffff 	.word	0x3fdfffff
 800a930:	35afe535 	.word	0x35afe535
 800a934:	3fe00000 	.word	0x3fe00000
 800a938:	000fffff 	.word	0x000fffff
 800a93c:	7ff00000 	.word	0x7ff00000
 800a940:	7fefffff 	.word	0x7fefffff
 800a944:	3ff00000 	.word	0x3ff00000
 800a948:	3fe00000 	.word	0x3fe00000
 800a94c:	7fe00000 	.word	0x7fe00000
 800a950:	7c9fffff 	.word	0x7c9fffff
 800a954:	9b08      	ldr	r3, [sp, #32]
 800a956:	b323      	cbz	r3, 800a9a2 <_strtod_l+0xb5a>
 800a958:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a95c:	d821      	bhi.n	800a9a2 <_strtod_l+0xb5a>
 800a95e:	a328      	add	r3, pc, #160	@ (adr r3, 800aa00 <_strtod_l+0xbb8>)
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	4630      	mov	r0, r6
 800a966:	4639      	mov	r1, r7
 800a968:	f7f6 f8c2 	bl	8000af0 <__aeabi_dcmple>
 800a96c:	b1a0      	cbz	r0, 800a998 <_strtod_l+0xb50>
 800a96e:	4639      	mov	r1, r7
 800a970:	4630      	mov	r0, r6
 800a972:	f7f6 f919 	bl	8000ba8 <__aeabi_d2uiz>
 800a976:	2801      	cmp	r0, #1
 800a978:	bf38      	it	cc
 800a97a:	2001      	movcc	r0, #1
 800a97c:	f7f5 fdc2 	bl	8000504 <__aeabi_ui2d>
 800a980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a982:	4606      	mov	r6, r0
 800a984:	460f      	mov	r7, r1
 800a986:	b9fb      	cbnz	r3, 800a9c8 <_strtod_l+0xb80>
 800a988:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a98c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a98e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a990:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a994:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a998:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a99a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a99e:	1b5b      	subs	r3, r3, r5
 800a9a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a9a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a9a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a9aa:	f002 fab3 	bl	800cf14 <__ulp>
 800a9ae:	4650      	mov	r0, sl
 800a9b0:	ec53 2b10 	vmov	r2, r3, d0
 800a9b4:	4659      	mov	r1, fp
 800a9b6:	f7f5 fe1f 	bl	80005f8 <__aeabi_dmul>
 800a9ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a9be:	f7f5 fc65 	bl	800028c <__adddf3>
 800a9c2:	4682      	mov	sl, r0
 800a9c4:	468b      	mov	fp, r1
 800a9c6:	e770      	b.n	800a8aa <_strtod_l+0xa62>
 800a9c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a9cc:	e7e0      	b.n	800a990 <_strtod_l+0xb48>
 800a9ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800aa08 <_strtod_l+0xbc0>)
 800a9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d4:	f7f6 f882 	bl	8000adc <__aeabi_dcmplt>
 800a9d8:	e798      	b.n	800a90c <_strtod_l+0xac4>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a9e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9e2:	6013      	str	r3, [r2, #0]
 800a9e4:	f7ff ba6d 	b.w	8009ec2 <_strtod_l+0x7a>
 800a9e8:	2a65      	cmp	r2, #101	@ 0x65
 800a9ea:	f43f ab66 	beq.w	800a0ba <_strtod_l+0x272>
 800a9ee:	2a45      	cmp	r2, #69	@ 0x45
 800a9f0:	f43f ab63 	beq.w	800a0ba <_strtod_l+0x272>
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	f7ff bb9e 	b.w	800a136 <_strtod_l+0x2ee>
 800a9fa:	bf00      	nop
 800a9fc:	f3af 8000 	nop.w
 800aa00:	ffc00000 	.word	0xffc00000
 800aa04:	41dfffff 	.word	0x41dfffff
 800aa08:	94a03595 	.word	0x94a03595
 800aa0c:	3fcfffff 	.word	0x3fcfffff

0800aa10 <_strtod_r>:
 800aa10:	4b01      	ldr	r3, [pc, #4]	@ (800aa18 <_strtod_r+0x8>)
 800aa12:	f7ff ba19 	b.w	8009e48 <_strtod_l>
 800aa16:	bf00      	nop
 800aa18:	20000024 	.word	0x20000024

0800aa1c <_strtol_l.constprop.0>:
 800aa1c:	2b24      	cmp	r3, #36	@ 0x24
 800aa1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa22:	4686      	mov	lr, r0
 800aa24:	4690      	mov	r8, r2
 800aa26:	d801      	bhi.n	800aa2c <_strtol_l.constprop.0+0x10>
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d106      	bne.n	800aa3a <_strtol_l.constprop.0+0x1e>
 800aa2c:	f000 f91e 	bl	800ac6c <__errno>
 800aa30:	2316      	movs	r3, #22
 800aa32:	6003      	str	r3, [r0, #0]
 800aa34:	2000      	movs	r0, #0
 800aa36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa3a:	4834      	ldr	r0, [pc, #208]	@ (800ab0c <_strtol_l.constprop.0+0xf0>)
 800aa3c:	460d      	mov	r5, r1
 800aa3e:	462a      	mov	r2, r5
 800aa40:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa44:	5d06      	ldrb	r6, [r0, r4]
 800aa46:	f016 0608 	ands.w	r6, r6, #8
 800aa4a:	d1f8      	bne.n	800aa3e <_strtol_l.constprop.0+0x22>
 800aa4c:	2c2d      	cmp	r4, #45	@ 0x2d
 800aa4e:	d12d      	bne.n	800aaac <_strtol_l.constprop.0+0x90>
 800aa50:	782c      	ldrb	r4, [r5, #0]
 800aa52:	2601      	movs	r6, #1
 800aa54:	1c95      	adds	r5, r2, #2
 800aa56:	f033 0210 	bics.w	r2, r3, #16
 800aa5a:	d109      	bne.n	800aa70 <_strtol_l.constprop.0+0x54>
 800aa5c:	2c30      	cmp	r4, #48	@ 0x30
 800aa5e:	d12a      	bne.n	800aab6 <_strtol_l.constprop.0+0x9a>
 800aa60:	782a      	ldrb	r2, [r5, #0]
 800aa62:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aa66:	2a58      	cmp	r2, #88	@ 0x58
 800aa68:	d125      	bne.n	800aab6 <_strtol_l.constprop.0+0x9a>
 800aa6a:	786c      	ldrb	r4, [r5, #1]
 800aa6c:	2310      	movs	r3, #16
 800aa6e:	3502      	adds	r5, #2
 800aa70:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aa74:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800aa78:	2200      	movs	r2, #0
 800aa7a:	fbbc f9f3 	udiv	r9, ip, r3
 800aa7e:	4610      	mov	r0, r2
 800aa80:	fb03 ca19 	mls	sl, r3, r9, ip
 800aa84:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aa88:	2f09      	cmp	r7, #9
 800aa8a:	d81b      	bhi.n	800aac4 <_strtol_l.constprop.0+0xa8>
 800aa8c:	463c      	mov	r4, r7
 800aa8e:	42a3      	cmp	r3, r4
 800aa90:	dd27      	ble.n	800aae2 <_strtol_l.constprop.0+0xc6>
 800aa92:	1c57      	adds	r7, r2, #1
 800aa94:	d007      	beq.n	800aaa6 <_strtol_l.constprop.0+0x8a>
 800aa96:	4581      	cmp	r9, r0
 800aa98:	d320      	bcc.n	800aadc <_strtol_l.constprop.0+0xc0>
 800aa9a:	d101      	bne.n	800aaa0 <_strtol_l.constprop.0+0x84>
 800aa9c:	45a2      	cmp	sl, r4
 800aa9e:	db1d      	blt.n	800aadc <_strtol_l.constprop.0+0xc0>
 800aaa0:	fb00 4003 	mla	r0, r0, r3, r4
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aaaa:	e7eb      	b.n	800aa84 <_strtol_l.constprop.0+0x68>
 800aaac:	2c2b      	cmp	r4, #43	@ 0x2b
 800aaae:	bf04      	itt	eq
 800aab0:	782c      	ldrbeq	r4, [r5, #0]
 800aab2:	1c95      	addeq	r5, r2, #2
 800aab4:	e7cf      	b.n	800aa56 <_strtol_l.constprop.0+0x3a>
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1da      	bne.n	800aa70 <_strtol_l.constprop.0+0x54>
 800aaba:	2c30      	cmp	r4, #48	@ 0x30
 800aabc:	bf0c      	ite	eq
 800aabe:	2308      	moveq	r3, #8
 800aac0:	230a      	movne	r3, #10
 800aac2:	e7d5      	b.n	800aa70 <_strtol_l.constprop.0+0x54>
 800aac4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aac8:	2f19      	cmp	r7, #25
 800aaca:	d801      	bhi.n	800aad0 <_strtol_l.constprop.0+0xb4>
 800aacc:	3c37      	subs	r4, #55	@ 0x37
 800aace:	e7de      	b.n	800aa8e <_strtol_l.constprop.0+0x72>
 800aad0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aad4:	2f19      	cmp	r7, #25
 800aad6:	d804      	bhi.n	800aae2 <_strtol_l.constprop.0+0xc6>
 800aad8:	3c57      	subs	r4, #87	@ 0x57
 800aada:	e7d8      	b.n	800aa8e <_strtol_l.constprop.0+0x72>
 800aadc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aae0:	e7e1      	b.n	800aaa6 <_strtol_l.constprop.0+0x8a>
 800aae2:	1c53      	adds	r3, r2, #1
 800aae4:	d108      	bne.n	800aaf8 <_strtol_l.constprop.0+0xdc>
 800aae6:	2322      	movs	r3, #34	@ 0x22
 800aae8:	f8ce 3000 	str.w	r3, [lr]
 800aaec:	4660      	mov	r0, ip
 800aaee:	f1b8 0f00 	cmp.w	r8, #0
 800aaf2:	d0a0      	beq.n	800aa36 <_strtol_l.constprop.0+0x1a>
 800aaf4:	1e69      	subs	r1, r5, #1
 800aaf6:	e006      	b.n	800ab06 <_strtol_l.constprop.0+0xea>
 800aaf8:	b106      	cbz	r6, 800aafc <_strtol_l.constprop.0+0xe0>
 800aafa:	4240      	negs	r0, r0
 800aafc:	f1b8 0f00 	cmp.w	r8, #0
 800ab00:	d099      	beq.n	800aa36 <_strtol_l.constprop.0+0x1a>
 800ab02:	2a00      	cmp	r2, #0
 800ab04:	d1f6      	bne.n	800aaf4 <_strtol_l.constprop.0+0xd8>
 800ab06:	f8c8 1000 	str.w	r1, [r8]
 800ab0a:	e794      	b.n	800aa36 <_strtol_l.constprop.0+0x1a>
 800ab0c:	0800da39 	.word	0x0800da39

0800ab10 <_strtol_r>:
 800ab10:	f7ff bf84 	b.w	800aa1c <_strtol_l.constprop.0>

0800ab14 <_fwalk_sglue>:
 800ab14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab18:	4607      	mov	r7, r0
 800ab1a:	4688      	mov	r8, r1
 800ab1c:	4614      	mov	r4, r2
 800ab1e:	2600      	movs	r6, #0
 800ab20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab24:	f1b9 0901 	subs.w	r9, r9, #1
 800ab28:	d505      	bpl.n	800ab36 <_fwalk_sglue+0x22>
 800ab2a:	6824      	ldr	r4, [r4, #0]
 800ab2c:	2c00      	cmp	r4, #0
 800ab2e:	d1f7      	bne.n	800ab20 <_fwalk_sglue+0xc>
 800ab30:	4630      	mov	r0, r6
 800ab32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab36:	89ab      	ldrh	r3, [r5, #12]
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d907      	bls.n	800ab4c <_fwalk_sglue+0x38>
 800ab3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab40:	3301      	adds	r3, #1
 800ab42:	d003      	beq.n	800ab4c <_fwalk_sglue+0x38>
 800ab44:	4629      	mov	r1, r5
 800ab46:	4638      	mov	r0, r7
 800ab48:	47c0      	blx	r8
 800ab4a:	4306      	orrs	r6, r0
 800ab4c:	3568      	adds	r5, #104	@ 0x68
 800ab4e:	e7e9      	b.n	800ab24 <_fwalk_sglue+0x10>

0800ab50 <iprintf>:
 800ab50:	b40f      	push	{r0, r1, r2, r3}
 800ab52:	b507      	push	{r0, r1, r2, lr}
 800ab54:	4906      	ldr	r1, [pc, #24]	@ (800ab70 <iprintf+0x20>)
 800ab56:	ab04      	add	r3, sp, #16
 800ab58:	6808      	ldr	r0, [r1, #0]
 800ab5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab5e:	6881      	ldr	r1, [r0, #8]
 800ab60:	9301      	str	r3, [sp, #4]
 800ab62:	f001 fbd7 	bl	800c314 <_vfiprintf_r>
 800ab66:	b003      	add	sp, #12
 800ab68:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab6c:	b004      	add	sp, #16
 800ab6e:	4770      	bx	lr
 800ab70:	20000190 	.word	0x20000190

0800ab74 <_puts_r>:
 800ab74:	6a03      	ldr	r3, [r0, #32]
 800ab76:	b570      	push	{r4, r5, r6, lr}
 800ab78:	6884      	ldr	r4, [r0, #8]
 800ab7a:	4605      	mov	r5, r0
 800ab7c:	460e      	mov	r6, r1
 800ab7e:	b90b      	cbnz	r3, 800ab84 <_puts_r+0x10>
 800ab80:	f7ff f92c 	bl	8009ddc <__sinit>
 800ab84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab86:	07db      	lsls	r3, r3, #31
 800ab88:	d405      	bmi.n	800ab96 <_puts_r+0x22>
 800ab8a:	89a3      	ldrh	r3, [r4, #12]
 800ab8c:	0598      	lsls	r0, r3, #22
 800ab8e:	d402      	bmi.n	800ab96 <_puts_r+0x22>
 800ab90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab92:	f000 f896 	bl	800acc2 <__retarget_lock_acquire_recursive>
 800ab96:	89a3      	ldrh	r3, [r4, #12]
 800ab98:	0719      	lsls	r1, r3, #28
 800ab9a:	d502      	bpl.n	800aba2 <_puts_r+0x2e>
 800ab9c:	6923      	ldr	r3, [r4, #16]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d135      	bne.n	800ac0e <_puts_r+0x9a>
 800aba2:	4621      	mov	r1, r4
 800aba4:	4628      	mov	r0, r5
 800aba6:	f002 fba3 	bl	800d2f0 <__swsetup_r>
 800abaa:	b380      	cbz	r0, 800ac0e <_puts_r+0x9a>
 800abac:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800abb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abb2:	07da      	lsls	r2, r3, #31
 800abb4:	d405      	bmi.n	800abc2 <_puts_r+0x4e>
 800abb6:	89a3      	ldrh	r3, [r4, #12]
 800abb8:	059b      	lsls	r3, r3, #22
 800abba:	d402      	bmi.n	800abc2 <_puts_r+0x4e>
 800abbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abbe:	f000 f881 	bl	800acc4 <__retarget_lock_release_recursive>
 800abc2:	4628      	mov	r0, r5
 800abc4:	bd70      	pop	{r4, r5, r6, pc}
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	da04      	bge.n	800abd4 <_puts_r+0x60>
 800abca:	69a2      	ldr	r2, [r4, #24]
 800abcc:	429a      	cmp	r2, r3
 800abce:	dc17      	bgt.n	800ac00 <_puts_r+0x8c>
 800abd0:	290a      	cmp	r1, #10
 800abd2:	d015      	beq.n	800ac00 <_puts_r+0x8c>
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	1c5a      	adds	r2, r3, #1
 800abd8:	6022      	str	r2, [r4, #0]
 800abda:	7019      	strb	r1, [r3, #0]
 800abdc:	68a3      	ldr	r3, [r4, #8]
 800abde:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800abe2:	3b01      	subs	r3, #1
 800abe4:	60a3      	str	r3, [r4, #8]
 800abe6:	2900      	cmp	r1, #0
 800abe8:	d1ed      	bne.n	800abc6 <_puts_r+0x52>
 800abea:	2b00      	cmp	r3, #0
 800abec:	da11      	bge.n	800ac12 <_puts_r+0x9e>
 800abee:	4622      	mov	r2, r4
 800abf0:	210a      	movs	r1, #10
 800abf2:	4628      	mov	r0, r5
 800abf4:	f002 fb3d 	bl	800d272 <__swbuf_r>
 800abf8:	3001      	adds	r0, #1
 800abfa:	d0d7      	beq.n	800abac <_puts_r+0x38>
 800abfc:	250a      	movs	r5, #10
 800abfe:	e7d7      	b.n	800abb0 <_puts_r+0x3c>
 800ac00:	4622      	mov	r2, r4
 800ac02:	4628      	mov	r0, r5
 800ac04:	f002 fb35 	bl	800d272 <__swbuf_r>
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d1e7      	bne.n	800abdc <_puts_r+0x68>
 800ac0c:	e7ce      	b.n	800abac <_puts_r+0x38>
 800ac0e:	3e01      	subs	r6, #1
 800ac10:	e7e4      	b.n	800abdc <_puts_r+0x68>
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	1c5a      	adds	r2, r3, #1
 800ac16:	6022      	str	r2, [r4, #0]
 800ac18:	220a      	movs	r2, #10
 800ac1a:	701a      	strb	r2, [r3, #0]
 800ac1c:	e7ee      	b.n	800abfc <_puts_r+0x88>
	...

0800ac20 <puts>:
 800ac20:	4b02      	ldr	r3, [pc, #8]	@ (800ac2c <puts+0xc>)
 800ac22:	4601      	mov	r1, r0
 800ac24:	6818      	ldr	r0, [r3, #0]
 800ac26:	f7ff bfa5 	b.w	800ab74 <_puts_r>
 800ac2a:	bf00      	nop
 800ac2c:	20000190 	.word	0x20000190

0800ac30 <strncmp>:
 800ac30:	b510      	push	{r4, lr}
 800ac32:	b16a      	cbz	r2, 800ac50 <strncmp+0x20>
 800ac34:	3901      	subs	r1, #1
 800ac36:	1884      	adds	r4, r0, r2
 800ac38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d103      	bne.n	800ac4c <strncmp+0x1c>
 800ac44:	42a0      	cmp	r0, r4
 800ac46:	d001      	beq.n	800ac4c <strncmp+0x1c>
 800ac48:	2a00      	cmp	r2, #0
 800ac4a:	d1f5      	bne.n	800ac38 <strncmp+0x8>
 800ac4c:	1ad0      	subs	r0, r2, r3
 800ac4e:	bd10      	pop	{r4, pc}
 800ac50:	4610      	mov	r0, r2
 800ac52:	e7fc      	b.n	800ac4e <strncmp+0x1e>

0800ac54 <memset>:
 800ac54:	4402      	add	r2, r0
 800ac56:	4603      	mov	r3, r0
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d100      	bne.n	800ac5e <memset+0xa>
 800ac5c:	4770      	bx	lr
 800ac5e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac62:	e7f9      	b.n	800ac58 <memset+0x4>

0800ac64 <_localeconv_r>:
 800ac64:	4800      	ldr	r0, [pc, #0]	@ (800ac68 <_localeconv_r+0x4>)
 800ac66:	4770      	bx	lr
 800ac68:	20000114 	.word	0x20000114

0800ac6c <__errno>:
 800ac6c:	4b01      	ldr	r3, [pc, #4]	@ (800ac74 <__errno+0x8>)
 800ac6e:	6818      	ldr	r0, [r3, #0]
 800ac70:	4770      	bx	lr
 800ac72:	bf00      	nop
 800ac74:	20000190 	.word	0x20000190

0800ac78 <__libc_init_array>:
 800ac78:	b570      	push	{r4, r5, r6, lr}
 800ac7a:	4d0d      	ldr	r5, [pc, #52]	@ (800acb0 <__libc_init_array+0x38>)
 800ac7c:	4c0d      	ldr	r4, [pc, #52]	@ (800acb4 <__libc_init_array+0x3c>)
 800ac7e:	1b64      	subs	r4, r4, r5
 800ac80:	10a4      	asrs	r4, r4, #2
 800ac82:	2600      	movs	r6, #0
 800ac84:	42a6      	cmp	r6, r4
 800ac86:	d109      	bne.n	800ac9c <__libc_init_array+0x24>
 800ac88:	4d0b      	ldr	r5, [pc, #44]	@ (800acb8 <__libc_init_array+0x40>)
 800ac8a:	4c0c      	ldr	r4, [pc, #48]	@ (800acbc <__libc_init_array+0x44>)
 800ac8c:	f002 fd6a 	bl	800d764 <_init>
 800ac90:	1b64      	subs	r4, r4, r5
 800ac92:	10a4      	asrs	r4, r4, #2
 800ac94:	2600      	movs	r6, #0
 800ac96:	42a6      	cmp	r6, r4
 800ac98:	d105      	bne.n	800aca6 <__libc_init_array+0x2e>
 800ac9a:	bd70      	pop	{r4, r5, r6, pc}
 800ac9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aca0:	4798      	blx	r3
 800aca2:	3601      	adds	r6, #1
 800aca4:	e7ee      	b.n	800ac84 <__libc_init_array+0xc>
 800aca6:	f855 3b04 	ldr.w	r3, [r5], #4
 800acaa:	4798      	blx	r3
 800acac:	3601      	adds	r6, #1
 800acae:	e7f2      	b.n	800ac96 <__libc_init_array+0x1e>
 800acb0:	0800ddd4 	.word	0x0800ddd4
 800acb4:	0800ddd4 	.word	0x0800ddd4
 800acb8:	0800ddd4 	.word	0x0800ddd4
 800acbc:	0800ddd8 	.word	0x0800ddd8

0800acc0 <__retarget_lock_init_recursive>:
 800acc0:	4770      	bx	lr

0800acc2 <__retarget_lock_acquire_recursive>:
 800acc2:	4770      	bx	lr

0800acc4 <__retarget_lock_release_recursive>:
 800acc4:	4770      	bx	lr

0800acc6 <memcpy>:
 800acc6:	440a      	add	r2, r1
 800acc8:	4291      	cmp	r1, r2
 800acca:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800acce:	d100      	bne.n	800acd2 <memcpy+0xc>
 800acd0:	4770      	bx	lr
 800acd2:	b510      	push	{r4, lr}
 800acd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acdc:	4291      	cmp	r1, r2
 800acde:	d1f9      	bne.n	800acd4 <memcpy+0xe>
 800ace0:	bd10      	pop	{r4, pc}
 800ace2:	0000      	movs	r0, r0
 800ace4:	0000      	movs	r0, r0
	...

0800ace8 <nan>:
 800ace8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800acf0 <nan+0x8>
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	00000000 	.word	0x00000000
 800acf4:	7ff80000 	.word	0x7ff80000

0800acf8 <nanf>:
 800acf8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ad00 <nanf+0x8>
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	7fc00000 	.word	0x7fc00000

0800ad04 <quorem>:
 800ad04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad08:	6903      	ldr	r3, [r0, #16]
 800ad0a:	690c      	ldr	r4, [r1, #16]
 800ad0c:	42a3      	cmp	r3, r4
 800ad0e:	4607      	mov	r7, r0
 800ad10:	db7e      	blt.n	800ae10 <quorem+0x10c>
 800ad12:	3c01      	subs	r4, #1
 800ad14:	f101 0814 	add.w	r8, r1, #20
 800ad18:	00a3      	lsls	r3, r4, #2
 800ad1a:	f100 0514 	add.w	r5, r0, #20
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad24:	9301      	str	r3, [sp, #4]
 800ad26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	429a      	cmp	r2, r3
 800ad32:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad36:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad3a:	d32e      	bcc.n	800ad9a <quorem+0x96>
 800ad3c:	f04f 0a00 	mov.w	sl, #0
 800ad40:	46c4      	mov	ip, r8
 800ad42:	46ae      	mov	lr, r5
 800ad44:	46d3      	mov	fp, sl
 800ad46:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad4a:	b298      	uxth	r0, r3
 800ad4c:	fb06 a000 	mla	r0, r6, r0, sl
 800ad50:	0c02      	lsrs	r2, r0, #16
 800ad52:	0c1b      	lsrs	r3, r3, #16
 800ad54:	fb06 2303 	mla	r3, r6, r3, r2
 800ad58:	f8de 2000 	ldr.w	r2, [lr]
 800ad5c:	b280      	uxth	r0, r0
 800ad5e:	b292      	uxth	r2, r2
 800ad60:	1a12      	subs	r2, r2, r0
 800ad62:	445a      	add	r2, fp
 800ad64:	f8de 0000 	ldr.w	r0, [lr]
 800ad68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ad72:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ad76:	b292      	uxth	r2, r2
 800ad78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ad7c:	45e1      	cmp	r9, ip
 800ad7e:	f84e 2b04 	str.w	r2, [lr], #4
 800ad82:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ad86:	d2de      	bcs.n	800ad46 <quorem+0x42>
 800ad88:	9b00      	ldr	r3, [sp, #0]
 800ad8a:	58eb      	ldr	r3, [r5, r3]
 800ad8c:	b92b      	cbnz	r3, 800ad9a <quorem+0x96>
 800ad8e:	9b01      	ldr	r3, [sp, #4]
 800ad90:	3b04      	subs	r3, #4
 800ad92:	429d      	cmp	r5, r3
 800ad94:	461a      	mov	r2, r3
 800ad96:	d32f      	bcc.n	800adf8 <quorem+0xf4>
 800ad98:	613c      	str	r4, [r7, #16]
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	f002 f80a 	bl	800cdb4 <__mcmp>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	db25      	blt.n	800adf0 <quorem+0xec>
 800ada4:	4629      	mov	r1, r5
 800ada6:	2000      	movs	r0, #0
 800ada8:	f858 2b04 	ldr.w	r2, [r8], #4
 800adac:	f8d1 c000 	ldr.w	ip, [r1]
 800adb0:	fa1f fe82 	uxth.w	lr, r2
 800adb4:	fa1f f38c 	uxth.w	r3, ip
 800adb8:	eba3 030e 	sub.w	r3, r3, lr
 800adbc:	4403      	add	r3, r0
 800adbe:	0c12      	lsrs	r2, r2, #16
 800adc0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800adc4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800adc8:	b29b      	uxth	r3, r3
 800adca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adce:	45c1      	cmp	r9, r8
 800add0:	f841 3b04 	str.w	r3, [r1], #4
 800add4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800add8:	d2e6      	bcs.n	800ada8 <quorem+0xa4>
 800adda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800adde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ade2:	b922      	cbnz	r2, 800adee <quorem+0xea>
 800ade4:	3b04      	subs	r3, #4
 800ade6:	429d      	cmp	r5, r3
 800ade8:	461a      	mov	r2, r3
 800adea:	d30b      	bcc.n	800ae04 <quorem+0x100>
 800adec:	613c      	str	r4, [r7, #16]
 800adee:	3601      	adds	r6, #1
 800adf0:	4630      	mov	r0, r6
 800adf2:	b003      	add	sp, #12
 800adf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf8:	6812      	ldr	r2, [r2, #0]
 800adfa:	3b04      	subs	r3, #4
 800adfc:	2a00      	cmp	r2, #0
 800adfe:	d1cb      	bne.n	800ad98 <quorem+0x94>
 800ae00:	3c01      	subs	r4, #1
 800ae02:	e7c6      	b.n	800ad92 <quorem+0x8e>
 800ae04:	6812      	ldr	r2, [r2, #0]
 800ae06:	3b04      	subs	r3, #4
 800ae08:	2a00      	cmp	r2, #0
 800ae0a:	d1ef      	bne.n	800adec <quorem+0xe8>
 800ae0c:	3c01      	subs	r4, #1
 800ae0e:	e7ea      	b.n	800ade6 <quorem+0xe2>
 800ae10:	2000      	movs	r0, #0
 800ae12:	e7ee      	b.n	800adf2 <quorem+0xee>
 800ae14:	0000      	movs	r0, r0
	...

0800ae18 <_dtoa_r>:
 800ae18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae1c:	69c7      	ldr	r7, [r0, #28]
 800ae1e:	b099      	sub	sp, #100	@ 0x64
 800ae20:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ae24:	ec55 4b10 	vmov	r4, r5, d0
 800ae28:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ae2a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae2c:	4683      	mov	fp, r0
 800ae2e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae30:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae32:	b97f      	cbnz	r7, 800ae54 <_dtoa_r+0x3c>
 800ae34:	2010      	movs	r0, #16
 800ae36:	f001 fb85 	bl	800c544 <malloc>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	f8cb 001c 	str.w	r0, [fp, #28]
 800ae40:	b920      	cbnz	r0, 800ae4c <_dtoa_r+0x34>
 800ae42:	4ba7      	ldr	r3, [pc, #668]	@ (800b0e0 <_dtoa_r+0x2c8>)
 800ae44:	21ef      	movs	r1, #239	@ 0xef
 800ae46:	48a7      	ldr	r0, [pc, #668]	@ (800b0e4 <_dtoa_r+0x2cc>)
 800ae48:	f002 fbaa 	bl	800d5a0 <__assert_func>
 800ae4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ae50:	6007      	str	r7, [r0, #0]
 800ae52:	60c7      	str	r7, [r0, #12]
 800ae54:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ae58:	6819      	ldr	r1, [r3, #0]
 800ae5a:	b159      	cbz	r1, 800ae74 <_dtoa_r+0x5c>
 800ae5c:	685a      	ldr	r2, [r3, #4]
 800ae5e:	604a      	str	r2, [r1, #4]
 800ae60:	2301      	movs	r3, #1
 800ae62:	4093      	lsls	r3, r2
 800ae64:	608b      	str	r3, [r1, #8]
 800ae66:	4658      	mov	r0, fp
 800ae68:	f001 fd20 	bl	800c8ac <_Bfree>
 800ae6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ae70:	2200      	movs	r2, #0
 800ae72:	601a      	str	r2, [r3, #0]
 800ae74:	1e2b      	subs	r3, r5, #0
 800ae76:	bfb9      	ittee	lt
 800ae78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ae7c:	9303      	strlt	r3, [sp, #12]
 800ae7e:	2300      	movge	r3, #0
 800ae80:	6033      	strge	r3, [r6, #0]
 800ae82:	9f03      	ldr	r7, [sp, #12]
 800ae84:	4b98      	ldr	r3, [pc, #608]	@ (800b0e8 <_dtoa_r+0x2d0>)
 800ae86:	bfbc      	itt	lt
 800ae88:	2201      	movlt	r2, #1
 800ae8a:	6032      	strlt	r2, [r6, #0]
 800ae8c:	43bb      	bics	r3, r7
 800ae8e:	d112      	bne.n	800aeb6 <_dtoa_r+0x9e>
 800ae90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ae92:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ae96:	6013      	str	r3, [r2, #0]
 800ae98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae9c:	4323      	orrs	r3, r4
 800ae9e:	f000 854d 	beq.w	800b93c <_dtoa_r+0xb24>
 800aea2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aea4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b0fc <_dtoa_r+0x2e4>
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f000 854f 	beq.w	800b94c <_dtoa_r+0xb34>
 800aeae:	f10a 0303 	add.w	r3, sl, #3
 800aeb2:	f000 bd49 	b.w	800b948 <_dtoa_r+0xb30>
 800aeb6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aeba:	2200      	movs	r2, #0
 800aebc:	ec51 0b17 	vmov	r0, r1, d7
 800aec0:	2300      	movs	r3, #0
 800aec2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800aec6:	f7f5 fdff 	bl	8000ac8 <__aeabi_dcmpeq>
 800aeca:	4680      	mov	r8, r0
 800aecc:	b158      	cbz	r0, 800aee6 <_dtoa_r+0xce>
 800aece:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aed0:	2301      	movs	r3, #1
 800aed2:	6013      	str	r3, [r2, #0]
 800aed4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aed6:	b113      	cbz	r3, 800aede <_dtoa_r+0xc6>
 800aed8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aeda:	4b84      	ldr	r3, [pc, #528]	@ (800b0ec <_dtoa_r+0x2d4>)
 800aedc:	6013      	str	r3, [r2, #0]
 800aede:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b100 <_dtoa_r+0x2e8>
 800aee2:	f000 bd33 	b.w	800b94c <_dtoa_r+0xb34>
 800aee6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aeea:	aa16      	add	r2, sp, #88	@ 0x58
 800aeec:	a917      	add	r1, sp, #92	@ 0x5c
 800aeee:	4658      	mov	r0, fp
 800aef0:	f002 f880 	bl	800cff4 <__d2b>
 800aef4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aef8:	4681      	mov	r9, r0
 800aefa:	2e00      	cmp	r6, #0
 800aefc:	d077      	beq.n	800afee <_dtoa_r+0x1d6>
 800aefe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af00:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800af04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800af10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800af14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800af18:	4619      	mov	r1, r3
 800af1a:	2200      	movs	r2, #0
 800af1c:	4b74      	ldr	r3, [pc, #464]	@ (800b0f0 <_dtoa_r+0x2d8>)
 800af1e:	f7f5 f9b3 	bl	8000288 <__aeabi_dsub>
 800af22:	a369      	add	r3, pc, #420	@ (adr r3, 800b0c8 <_dtoa_r+0x2b0>)
 800af24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af28:	f7f5 fb66 	bl	80005f8 <__aeabi_dmul>
 800af2c:	a368      	add	r3, pc, #416	@ (adr r3, 800b0d0 <_dtoa_r+0x2b8>)
 800af2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af32:	f7f5 f9ab 	bl	800028c <__adddf3>
 800af36:	4604      	mov	r4, r0
 800af38:	4630      	mov	r0, r6
 800af3a:	460d      	mov	r5, r1
 800af3c:	f7f5 faf2 	bl	8000524 <__aeabi_i2d>
 800af40:	a365      	add	r3, pc, #404	@ (adr r3, 800b0d8 <_dtoa_r+0x2c0>)
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	f7f5 fb57 	bl	80005f8 <__aeabi_dmul>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	4620      	mov	r0, r4
 800af50:	4629      	mov	r1, r5
 800af52:	f7f5 f99b 	bl	800028c <__adddf3>
 800af56:	4604      	mov	r4, r0
 800af58:	460d      	mov	r5, r1
 800af5a:	f7f5 fdfd 	bl	8000b58 <__aeabi_d2iz>
 800af5e:	2200      	movs	r2, #0
 800af60:	4607      	mov	r7, r0
 800af62:	2300      	movs	r3, #0
 800af64:	4620      	mov	r0, r4
 800af66:	4629      	mov	r1, r5
 800af68:	f7f5 fdb8 	bl	8000adc <__aeabi_dcmplt>
 800af6c:	b140      	cbz	r0, 800af80 <_dtoa_r+0x168>
 800af6e:	4638      	mov	r0, r7
 800af70:	f7f5 fad8 	bl	8000524 <__aeabi_i2d>
 800af74:	4622      	mov	r2, r4
 800af76:	462b      	mov	r3, r5
 800af78:	f7f5 fda6 	bl	8000ac8 <__aeabi_dcmpeq>
 800af7c:	b900      	cbnz	r0, 800af80 <_dtoa_r+0x168>
 800af7e:	3f01      	subs	r7, #1
 800af80:	2f16      	cmp	r7, #22
 800af82:	d851      	bhi.n	800b028 <_dtoa_r+0x210>
 800af84:	4b5b      	ldr	r3, [pc, #364]	@ (800b0f4 <_dtoa_r+0x2dc>)
 800af86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af92:	f7f5 fda3 	bl	8000adc <__aeabi_dcmplt>
 800af96:	2800      	cmp	r0, #0
 800af98:	d048      	beq.n	800b02c <_dtoa_r+0x214>
 800af9a:	3f01      	subs	r7, #1
 800af9c:	2300      	movs	r3, #0
 800af9e:	9312      	str	r3, [sp, #72]	@ 0x48
 800afa0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800afa2:	1b9b      	subs	r3, r3, r6
 800afa4:	1e5a      	subs	r2, r3, #1
 800afa6:	bf44      	itt	mi
 800afa8:	f1c3 0801 	rsbmi	r8, r3, #1
 800afac:	2300      	movmi	r3, #0
 800afae:	9208      	str	r2, [sp, #32]
 800afb0:	bf54      	ite	pl
 800afb2:	f04f 0800 	movpl.w	r8, #0
 800afb6:	9308      	strmi	r3, [sp, #32]
 800afb8:	2f00      	cmp	r7, #0
 800afba:	db39      	blt.n	800b030 <_dtoa_r+0x218>
 800afbc:	9b08      	ldr	r3, [sp, #32]
 800afbe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800afc0:	443b      	add	r3, r7
 800afc2:	9308      	str	r3, [sp, #32]
 800afc4:	2300      	movs	r3, #0
 800afc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800afc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afca:	2b09      	cmp	r3, #9
 800afcc:	d864      	bhi.n	800b098 <_dtoa_r+0x280>
 800afce:	2b05      	cmp	r3, #5
 800afd0:	bfc4      	itt	gt
 800afd2:	3b04      	subgt	r3, #4
 800afd4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800afd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afd8:	f1a3 0302 	sub.w	r3, r3, #2
 800afdc:	bfcc      	ite	gt
 800afde:	2400      	movgt	r4, #0
 800afe0:	2401      	movle	r4, #1
 800afe2:	2b03      	cmp	r3, #3
 800afe4:	d863      	bhi.n	800b0ae <_dtoa_r+0x296>
 800afe6:	e8df f003 	tbb	[pc, r3]
 800afea:	372a      	.short	0x372a
 800afec:	5535      	.short	0x5535
 800afee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800aff2:	441e      	add	r6, r3
 800aff4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aff8:	2b20      	cmp	r3, #32
 800affa:	bfc1      	itttt	gt
 800affc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b000:	409f      	lslgt	r7, r3
 800b002:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b006:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b00a:	bfd6      	itet	le
 800b00c:	f1c3 0320 	rsble	r3, r3, #32
 800b010:	ea47 0003 	orrgt.w	r0, r7, r3
 800b014:	fa04 f003 	lslle.w	r0, r4, r3
 800b018:	f7f5 fa74 	bl	8000504 <__aeabi_ui2d>
 800b01c:	2201      	movs	r2, #1
 800b01e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b022:	3e01      	subs	r6, #1
 800b024:	9214      	str	r2, [sp, #80]	@ 0x50
 800b026:	e777      	b.n	800af18 <_dtoa_r+0x100>
 800b028:	2301      	movs	r3, #1
 800b02a:	e7b8      	b.n	800af9e <_dtoa_r+0x186>
 800b02c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b02e:	e7b7      	b.n	800afa0 <_dtoa_r+0x188>
 800b030:	427b      	negs	r3, r7
 800b032:	930a      	str	r3, [sp, #40]	@ 0x28
 800b034:	2300      	movs	r3, #0
 800b036:	eba8 0807 	sub.w	r8, r8, r7
 800b03a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b03c:	e7c4      	b.n	800afc8 <_dtoa_r+0x1b0>
 800b03e:	2300      	movs	r3, #0
 800b040:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b042:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b044:	2b00      	cmp	r3, #0
 800b046:	dc35      	bgt.n	800b0b4 <_dtoa_r+0x29c>
 800b048:	2301      	movs	r3, #1
 800b04a:	9300      	str	r3, [sp, #0]
 800b04c:	9307      	str	r3, [sp, #28]
 800b04e:	461a      	mov	r2, r3
 800b050:	920e      	str	r2, [sp, #56]	@ 0x38
 800b052:	e00b      	b.n	800b06c <_dtoa_r+0x254>
 800b054:	2301      	movs	r3, #1
 800b056:	e7f3      	b.n	800b040 <_dtoa_r+0x228>
 800b058:	2300      	movs	r3, #0
 800b05a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b05c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b05e:	18fb      	adds	r3, r7, r3
 800b060:	9300      	str	r3, [sp, #0]
 800b062:	3301      	adds	r3, #1
 800b064:	2b01      	cmp	r3, #1
 800b066:	9307      	str	r3, [sp, #28]
 800b068:	bfb8      	it	lt
 800b06a:	2301      	movlt	r3, #1
 800b06c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b070:	2100      	movs	r1, #0
 800b072:	2204      	movs	r2, #4
 800b074:	f102 0514 	add.w	r5, r2, #20
 800b078:	429d      	cmp	r5, r3
 800b07a:	d91f      	bls.n	800b0bc <_dtoa_r+0x2a4>
 800b07c:	6041      	str	r1, [r0, #4]
 800b07e:	4658      	mov	r0, fp
 800b080:	f001 fbd4 	bl	800c82c <_Balloc>
 800b084:	4682      	mov	sl, r0
 800b086:	2800      	cmp	r0, #0
 800b088:	d13c      	bne.n	800b104 <_dtoa_r+0x2ec>
 800b08a:	4b1b      	ldr	r3, [pc, #108]	@ (800b0f8 <_dtoa_r+0x2e0>)
 800b08c:	4602      	mov	r2, r0
 800b08e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b092:	e6d8      	b.n	800ae46 <_dtoa_r+0x2e>
 800b094:	2301      	movs	r3, #1
 800b096:	e7e0      	b.n	800b05a <_dtoa_r+0x242>
 800b098:	2401      	movs	r4, #1
 800b09a:	2300      	movs	r3, #0
 800b09c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b09e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b0a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b0a4:	9300      	str	r3, [sp, #0]
 800b0a6:	9307      	str	r3, [sp, #28]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	2312      	movs	r3, #18
 800b0ac:	e7d0      	b.n	800b050 <_dtoa_r+0x238>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0b2:	e7f5      	b.n	800b0a0 <_dtoa_r+0x288>
 800b0b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0b6:	9300      	str	r3, [sp, #0]
 800b0b8:	9307      	str	r3, [sp, #28]
 800b0ba:	e7d7      	b.n	800b06c <_dtoa_r+0x254>
 800b0bc:	3101      	adds	r1, #1
 800b0be:	0052      	lsls	r2, r2, #1
 800b0c0:	e7d8      	b.n	800b074 <_dtoa_r+0x25c>
 800b0c2:	bf00      	nop
 800b0c4:	f3af 8000 	nop.w
 800b0c8:	636f4361 	.word	0x636f4361
 800b0cc:	3fd287a7 	.word	0x3fd287a7
 800b0d0:	8b60c8b3 	.word	0x8b60c8b3
 800b0d4:	3fc68a28 	.word	0x3fc68a28
 800b0d8:	509f79fb 	.word	0x509f79fb
 800b0dc:	3fd34413 	.word	0x3fd34413
 800b0e0:	0800db46 	.word	0x0800db46
 800b0e4:	0800db5d 	.word	0x0800db5d
 800b0e8:	7ff00000 	.word	0x7ff00000
 800b0ec:	0800d9b5 	.word	0x0800d9b5
 800b0f0:	3ff80000 	.word	0x3ff80000
 800b0f4:	0800dcc8 	.word	0x0800dcc8
 800b0f8:	0800dbb5 	.word	0x0800dbb5
 800b0fc:	0800db42 	.word	0x0800db42
 800b100:	0800d9b4 	.word	0x0800d9b4
 800b104:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b108:	6018      	str	r0, [r3, #0]
 800b10a:	9b07      	ldr	r3, [sp, #28]
 800b10c:	2b0e      	cmp	r3, #14
 800b10e:	f200 80a4 	bhi.w	800b25a <_dtoa_r+0x442>
 800b112:	2c00      	cmp	r4, #0
 800b114:	f000 80a1 	beq.w	800b25a <_dtoa_r+0x442>
 800b118:	2f00      	cmp	r7, #0
 800b11a:	dd33      	ble.n	800b184 <_dtoa_r+0x36c>
 800b11c:	4bad      	ldr	r3, [pc, #692]	@ (800b3d4 <_dtoa_r+0x5bc>)
 800b11e:	f007 020f 	and.w	r2, r7, #15
 800b122:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b126:	ed93 7b00 	vldr	d7, [r3]
 800b12a:	05f8      	lsls	r0, r7, #23
 800b12c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b130:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b134:	d516      	bpl.n	800b164 <_dtoa_r+0x34c>
 800b136:	4ba8      	ldr	r3, [pc, #672]	@ (800b3d8 <_dtoa_r+0x5c0>)
 800b138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b13c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b140:	f7f5 fb84 	bl	800084c <__aeabi_ddiv>
 800b144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b148:	f004 040f 	and.w	r4, r4, #15
 800b14c:	2603      	movs	r6, #3
 800b14e:	4da2      	ldr	r5, [pc, #648]	@ (800b3d8 <_dtoa_r+0x5c0>)
 800b150:	b954      	cbnz	r4, 800b168 <_dtoa_r+0x350>
 800b152:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b15a:	f7f5 fb77 	bl	800084c <__aeabi_ddiv>
 800b15e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b162:	e028      	b.n	800b1b6 <_dtoa_r+0x39e>
 800b164:	2602      	movs	r6, #2
 800b166:	e7f2      	b.n	800b14e <_dtoa_r+0x336>
 800b168:	07e1      	lsls	r1, r4, #31
 800b16a:	d508      	bpl.n	800b17e <_dtoa_r+0x366>
 800b16c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b170:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b174:	f7f5 fa40 	bl	80005f8 <__aeabi_dmul>
 800b178:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b17c:	3601      	adds	r6, #1
 800b17e:	1064      	asrs	r4, r4, #1
 800b180:	3508      	adds	r5, #8
 800b182:	e7e5      	b.n	800b150 <_dtoa_r+0x338>
 800b184:	f000 80d2 	beq.w	800b32c <_dtoa_r+0x514>
 800b188:	427c      	negs	r4, r7
 800b18a:	4b92      	ldr	r3, [pc, #584]	@ (800b3d4 <_dtoa_r+0x5bc>)
 800b18c:	4d92      	ldr	r5, [pc, #584]	@ (800b3d8 <_dtoa_r+0x5c0>)
 800b18e:	f004 020f 	and.w	r2, r4, #15
 800b192:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b19e:	f7f5 fa2b 	bl	80005f8 <__aeabi_dmul>
 800b1a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1a6:	1124      	asrs	r4, r4, #4
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	2602      	movs	r6, #2
 800b1ac:	2c00      	cmp	r4, #0
 800b1ae:	f040 80b2 	bne.w	800b316 <_dtoa_r+0x4fe>
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1d3      	bne.n	800b15e <_dtoa_r+0x346>
 800b1b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b1b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f000 80b7 	beq.w	800b330 <_dtoa_r+0x518>
 800b1c2:	4b86      	ldr	r3, [pc, #536]	@ (800b3dc <_dtoa_r+0x5c4>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	f7f5 fc87 	bl	8000adc <__aeabi_dcmplt>
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	f000 80ae 	beq.w	800b330 <_dtoa_r+0x518>
 800b1d4:	9b07      	ldr	r3, [sp, #28]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	f000 80aa 	beq.w	800b330 <_dtoa_r+0x518>
 800b1dc:	9b00      	ldr	r3, [sp, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	dd37      	ble.n	800b252 <_dtoa_r+0x43a>
 800b1e2:	1e7b      	subs	r3, r7, #1
 800b1e4:	9304      	str	r3, [sp, #16]
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	4b7d      	ldr	r3, [pc, #500]	@ (800b3e0 <_dtoa_r+0x5c8>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	f7f5 fa03 	bl	80005f8 <__aeabi_dmul>
 800b1f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1f6:	9c00      	ldr	r4, [sp, #0]
 800b1f8:	3601      	adds	r6, #1
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f7f5 f992 	bl	8000524 <__aeabi_i2d>
 800b200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b204:	f7f5 f9f8 	bl	80005f8 <__aeabi_dmul>
 800b208:	4b76      	ldr	r3, [pc, #472]	@ (800b3e4 <_dtoa_r+0x5cc>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	f7f5 f83e 	bl	800028c <__adddf3>
 800b210:	4605      	mov	r5, r0
 800b212:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b216:	2c00      	cmp	r4, #0
 800b218:	f040 808d 	bne.w	800b336 <_dtoa_r+0x51e>
 800b21c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b220:	4b71      	ldr	r3, [pc, #452]	@ (800b3e8 <_dtoa_r+0x5d0>)
 800b222:	2200      	movs	r2, #0
 800b224:	f7f5 f830 	bl	8000288 <__aeabi_dsub>
 800b228:	4602      	mov	r2, r0
 800b22a:	460b      	mov	r3, r1
 800b22c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b230:	462a      	mov	r2, r5
 800b232:	4633      	mov	r3, r6
 800b234:	f7f5 fc70 	bl	8000b18 <__aeabi_dcmpgt>
 800b238:	2800      	cmp	r0, #0
 800b23a:	f040 828b 	bne.w	800b754 <_dtoa_r+0x93c>
 800b23e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b242:	462a      	mov	r2, r5
 800b244:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b248:	f7f5 fc48 	bl	8000adc <__aeabi_dcmplt>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	f040 8128 	bne.w	800b4a2 <_dtoa_r+0x68a>
 800b252:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b256:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b25a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f2c0 815a 	blt.w	800b516 <_dtoa_r+0x6fe>
 800b262:	2f0e      	cmp	r7, #14
 800b264:	f300 8157 	bgt.w	800b516 <_dtoa_r+0x6fe>
 800b268:	4b5a      	ldr	r3, [pc, #360]	@ (800b3d4 <_dtoa_r+0x5bc>)
 800b26a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b26e:	ed93 7b00 	vldr	d7, [r3]
 800b272:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b274:	2b00      	cmp	r3, #0
 800b276:	ed8d 7b00 	vstr	d7, [sp]
 800b27a:	da03      	bge.n	800b284 <_dtoa_r+0x46c>
 800b27c:	9b07      	ldr	r3, [sp, #28]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f340 8101 	ble.w	800b486 <_dtoa_r+0x66e>
 800b284:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b288:	4656      	mov	r6, sl
 800b28a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b28e:	4620      	mov	r0, r4
 800b290:	4629      	mov	r1, r5
 800b292:	f7f5 fadb 	bl	800084c <__aeabi_ddiv>
 800b296:	f7f5 fc5f 	bl	8000b58 <__aeabi_d2iz>
 800b29a:	4680      	mov	r8, r0
 800b29c:	f7f5 f942 	bl	8000524 <__aeabi_i2d>
 800b2a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2a4:	f7f5 f9a8 	bl	80005f8 <__aeabi_dmul>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	4629      	mov	r1, r5
 800b2b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b2b4:	f7f4 ffe8 	bl	8000288 <__aeabi_dsub>
 800b2b8:	f806 4b01 	strb.w	r4, [r6], #1
 800b2bc:	9d07      	ldr	r5, [sp, #28]
 800b2be:	eba6 040a 	sub.w	r4, r6, sl
 800b2c2:	42a5      	cmp	r5, r4
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	f040 8117 	bne.w	800b4fa <_dtoa_r+0x6e2>
 800b2cc:	f7f4 ffde 	bl	800028c <__adddf3>
 800b2d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2d4:	4604      	mov	r4, r0
 800b2d6:	460d      	mov	r5, r1
 800b2d8:	f7f5 fc1e 	bl	8000b18 <__aeabi_dcmpgt>
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	f040 80f9 	bne.w	800b4d4 <_dtoa_r+0x6bc>
 800b2e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	f7f5 fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ee:	b118      	cbz	r0, 800b2f8 <_dtoa_r+0x4e0>
 800b2f0:	f018 0f01 	tst.w	r8, #1
 800b2f4:	f040 80ee 	bne.w	800b4d4 <_dtoa_r+0x6bc>
 800b2f8:	4649      	mov	r1, r9
 800b2fa:	4658      	mov	r0, fp
 800b2fc:	f001 fad6 	bl	800c8ac <_Bfree>
 800b300:	2300      	movs	r3, #0
 800b302:	7033      	strb	r3, [r6, #0]
 800b304:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b306:	3701      	adds	r7, #1
 800b308:	601f      	str	r7, [r3, #0]
 800b30a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f000 831d 	beq.w	800b94c <_dtoa_r+0xb34>
 800b312:	601e      	str	r6, [r3, #0]
 800b314:	e31a      	b.n	800b94c <_dtoa_r+0xb34>
 800b316:	07e2      	lsls	r2, r4, #31
 800b318:	d505      	bpl.n	800b326 <_dtoa_r+0x50e>
 800b31a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b31e:	f7f5 f96b 	bl	80005f8 <__aeabi_dmul>
 800b322:	3601      	adds	r6, #1
 800b324:	2301      	movs	r3, #1
 800b326:	1064      	asrs	r4, r4, #1
 800b328:	3508      	adds	r5, #8
 800b32a:	e73f      	b.n	800b1ac <_dtoa_r+0x394>
 800b32c:	2602      	movs	r6, #2
 800b32e:	e742      	b.n	800b1b6 <_dtoa_r+0x39e>
 800b330:	9c07      	ldr	r4, [sp, #28]
 800b332:	9704      	str	r7, [sp, #16]
 800b334:	e761      	b.n	800b1fa <_dtoa_r+0x3e2>
 800b336:	4b27      	ldr	r3, [pc, #156]	@ (800b3d4 <_dtoa_r+0x5bc>)
 800b338:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b33a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b33e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b342:	4454      	add	r4, sl
 800b344:	2900      	cmp	r1, #0
 800b346:	d053      	beq.n	800b3f0 <_dtoa_r+0x5d8>
 800b348:	4928      	ldr	r1, [pc, #160]	@ (800b3ec <_dtoa_r+0x5d4>)
 800b34a:	2000      	movs	r0, #0
 800b34c:	f7f5 fa7e 	bl	800084c <__aeabi_ddiv>
 800b350:	4633      	mov	r3, r6
 800b352:	462a      	mov	r2, r5
 800b354:	f7f4 ff98 	bl	8000288 <__aeabi_dsub>
 800b358:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b35c:	4656      	mov	r6, sl
 800b35e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b362:	f7f5 fbf9 	bl	8000b58 <__aeabi_d2iz>
 800b366:	4605      	mov	r5, r0
 800b368:	f7f5 f8dc 	bl	8000524 <__aeabi_i2d>
 800b36c:	4602      	mov	r2, r0
 800b36e:	460b      	mov	r3, r1
 800b370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b374:	f7f4 ff88 	bl	8000288 <__aeabi_dsub>
 800b378:	3530      	adds	r5, #48	@ 0x30
 800b37a:	4602      	mov	r2, r0
 800b37c:	460b      	mov	r3, r1
 800b37e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b382:	f806 5b01 	strb.w	r5, [r6], #1
 800b386:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b38a:	f7f5 fba7 	bl	8000adc <__aeabi_dcmplt>
 800b38e:	2800      	cmp	r0, #0
 800b390:	d171      	bne.n	800b476 <_dtoa_r+0x65e>
 800b392:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b396:	4911      	ldr	r1, [pc, #68]	@ (800b3dc <_dtoa_r+0x5c4>)
 800b398:	2000      	movs	r0, #0
 800b39a:	f7f4 ff75 	bl	8000288 <__aeabi_dsub>
 800b39e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b3a2:	f7f5 fb9b 	bl	8000adc <__aeabi_dcmplt>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	f040 8095 	bne.w	800b4d6 <_dtoa_r+0x6be>
 800b3ac:	42a6      	cmp	r6, r4
 800b3ae:	f43f af50 	beq.w	800b252 <_dtoa_r+0x43a>
 800b3b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b3b6:	4b0a      	ldr	r3, [pc, #40]	@ (800b3e0 <_dtoa_r+0x5c8>)
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f7f5 f91d 	bl	80005f8 <__aeabi_dmul>
 800b3be:	4b08      	ldr	r3, [pc, #32]	@ (800b3e0 <_dtoa_r+0x5c8>)
 800b3c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3ca:	f7f5 f915 	bl	80005f8 <__aeabi_dmul>
 800b3ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3d2:	e7c4      	b.n	800b35e <_dtoa_r+0x546>
 800b3d4:	0800dcc8 	.word	0x0800dcc8
 800b3d8:	0800dca0 	.word	0x0800dca0
 800b3dc:	3ff00000 	.word	0x3ff00000
 800b3e0:	40240000 	.word	0x40240000
 800b3e4:	401c0000 	.word	0x401c0000
 800b3e8:	40140000 	.word	0x40140000
 800b3ec:	3fe00000 	.word	0x3fe00000
 800b3f0:	4631      	mov	r1, r6
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	f7f5 f900 	bl	80005f8 <__aeabi_dmul>
 800b3f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b3fc:	9415      	str	r4, [sp, #84]	@ 0x54
 800b3fe:	4656      	mov	r6, sl
 800b400:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b404:	f7f5 fba8 	bl	8000b58 <__aeabi_d2iz>
 800b408:	4605      	mov	r5, r0
 800b40a:	f7f5 f88b 	bl	8000524 <__aeabi_i2d>
 800b40e:	4602      	mov	r2, r0
 800b410:	460b      	mov	r3, r1
 800b412:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b416:	f7f4 ff37 	bl	8000288 <__aeabi_dsub>
 800b41a:	3530      	adds	r5, #48	@ 0x30
 800b41c:	f806 5b01 	strb.w	r5, [r6], #1
 800b420:	4602      	mov	r2, r0
 800b422:	460b      	mov	r3, r1
 800b424:	42a6      	cmp	r6, r4
 800b426:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b42a:	f04f 0200 	mov.w	r2, #0
 800b42e:	d124      	bne.n	800b47a <_dtoa_r+0x662>
 800b430:	4bac      	ldr	r3, [pc, #688]	@ (800b6e4 <_dtoa_r+0x8cc>)
 800b432:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b436:	f7f4 ff29 	bl	800028c <__adddf3>
 800b43a:	4602      	mov	r2, r0
 800b43c:	460b      	mov	r3, r1
 800b43e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b442:	f7f5 fb69 	bl	8000b18 <__aeabi_dcmpgt>
 800b446:	2800      	cmp	r0, #0
 800b448:	d145      	bne.n	800b4d6 <_dtoa_r+0x6be>
 800b44a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b44e:	49a5      	ldr	r1, [pc, #660]	@ (800b6e4 <_dtoa_r+0x8cc>)
 800b450:	2000      	movs	r0, #0
 800b452:	f7f4 ff19 	bl	8000288 <__aeabi_dsub>
 800b456:	4602      	mov	r2, r0
 800b458:	460b      	mov	r3, r1
 800b45a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b45e:	f7f5 fb3d 	bl	8000adc <__aeabi_dcmplt>
 800b462:	2800      	cmp	r0, #0
 800b464:	f43f aef5 	beq.w	800b252 <_dtoa_r+0x43a>
 800b468:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b46a:	1e73      	subs	r3, r6, #1
 800b46c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b46e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b472:	2b30      	cmp	r3, #48	@ 0x30
 800b474:	d0f8      	beq.n	800b468 <_dtoa_r+0x650>
 800b476:	9f04      	ldr	r7, [sp, #16]
 800b478:	e73e      	b.n	800b2f8 <_dtoa_r+0x4e0>
 800b47a:	4b9b      	ldr	r3, [pc, #620]	@ (800b6e8 <_dtoa_r+0x8d0>)
 800b47c:	f7f5 f8bc 	bl	80005f8 <__aeabi_dmul>
 800b480:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b484:	e7bc      	b.n	800b400 <_dtoa_r+0x5e8>
 800b486:	d10c      	bne.n	800b4a2 <_dtoa_r+0x68a>
 800b488:	4b98      	ldr	r3, [pc, #608]	@ (800b6ec <_dtoa_r+0x8d4>)
 800b48a:	2200      	movs	r2, #0
 800b48c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b490:	f7f5 f8b2 	bl	80005f8 <__aeabi_dmul>
 800b494:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b498:	f7f5 fb34 	bl	8000b04 <__aeabi_dcmpge>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	f000 8157 	beq.w	800b750 <_dtoa_r+0x938>
 800b4a2:	2400      	movs	r4, #0
 800b4a4:	4625      	mov	r5, r4
 800b4a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4a8:	43db      	mvns	r3, r3
 800b4aa:	9304      	str	r3, [sp, #16]
 800b4ac:	4656      	mov	r6, sl
 800b4ae:	2700      	movs	r7, #0
 800b4b0:	4621      	mov	r1, r4
 800b4b2:	4658      	mov	r0, fp
 800b4b4:	f001 f9fa 	bl	800c8ac <_Bfree>
 800b4b8:	2d00      	cmp	r5, #0
 800b4ba:	d0dc      	beq.n	800b476 <_dtoa_r+0x65e>
 800b4bc:	b12f      	cbz	r7, 800b4ca <_dtoa_r+0x6b2>
 800b4be:	42af      	cmp	r7, r5
 800b4c0:	d003      	beq.n	800b4ca <_dtoa_r+0x6b2>
 800b4c2:	4639      	mov	r1, r7
 800b4c4:	4658      	mov	r0, fp
 800b4c6:	f001 f9f1 	bl	800c8ac <_Bfree>
 800b4ca:	4629      	mov	r1, r5
 800b4cc:	4658      	mov	r0, fp
 800b4ce:	f001 f9ed 	bl	800c8ac <_Bfree>
 800b4d2:	e7d0      	b.n	800b476 <_dtoa_r+0x65e>
 800b4d4:	9704      	str	r7, [sp, #16]
 800b4d6:	4633      	mov	r3, r6
 800b4d8:	461e      	mov	r6, r3
 800b4da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4de:	2a39      	cmp	r2, #57	@ 0x39
 800b4e0:	d107      	bne.n	800b4f2 <_dtoa_r+0x6da>
 800b4e2:	459a      	cmp	sl, r3
 800b4e4:	d1f8      	bne.n	800b4d8 <_dtoa_r+0x6c0>
 800b4e6:	9a04      	ldr	r2, [sp, #16]
 800b4e8:	3201      	adds	r2, #1
 800b4ea:	9204      	str	r2, [sp, #16]
 800b4ec:	2230      	movs	r2, #48	@ 0x30
 800b4ee:	f88a 2000 	strb.w	r2, [sl]
 800b4f2:	781a      	ldrb	r2, [r3, #0]
 800b4f4:	3201      	adds	r2, #1
 800b4f6:	701a      	strb	r2, [r3, #0]
 800b4f8:	e7bd      	b.n	800b476 <_dtoa_r+0x65e>
 800b4fa:	4b7b      	ldr	r3, [pc, #492]	@ (800b6e8 <_dtoa_r+0x8d0>)
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	f7f5 f87b 	bl	80005f8 <__aeabi_dmul>
 800b502:	2200      	movs	r2, #0
 800b504:	2300      	movs	r3, #0
 800b506:	4604      	mov	r4, r0
 800b508:	460d      	mov	r5, r1
 800b50a:	f7f5 fadd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b50e:	2800      	cmp	r0, #0
 800b510:	f43f aebb 	beq.w	800b28a <_dtoa_r+0x472>
 800b514:	e6f0      	b.n	800b2f8 <_dtoa_r+0x4e0>
 800b516:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b518:	2a00      	cmp	r2, #0
 800b51a:	f000 80db 	beq.w	800b6d4 <_dtoa_r+0x8bc>
 800b51e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b520:	2a01      	cmp	r2, #1
 800b522:	f300 80bf 	bgt.w	800b6a4 <_dtoa_r+0x88c>
 800b526:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b528:	2a00      	cmp	r2, #0
 800b52a:	f000 80b7 	beq.w	800b69c <_dtoa_r+0x884>
 800b52e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b532:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b534:	4646      	mov	r6, r8
 800b536:	9a08      	ldr	r2, [sp, #32]
 800b538:	2101      	movs	r1, #1
 800b53a:	441a      	add	r2, r3
 800b53c:	4658      	mov	r0, fp
 800b53e:	4498      	add	r8, r3
 800b540:	9208      	str	r2, [sp, #32]
 800b542:	f001 fab1 	bl	800caa8 <__i2b>
 800b546:	4605      	mov	r5, r0
 800b548:	b15e      	cbz	r6, 800b562 <_dtoa_r+0x74a>
 800b54a:	9b08      	ldr	r3, [sp, #32]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	dd08      	ble.n	800b562 <_dtoa_r+0x74a>
 800b550:	42b3      	cmp	r3, r6
 800b552:	9a08      	ldr	r2, [sp, #32]
 800b554:	bfa8      	it	ge
 800b556:	4633      	movge	r3, r6
 800b558:	eba8 0803 	sub.w	r8, r8, r3
 800b55c:	1af6      	subs	r6, r6, r3
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	9308      	str	r3, [sp, #32]
 800b562:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b564:	b1f3      	cbz	r3, 800b5a4 <_dtoa_r+0x78c>
 800b566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f000 80b7 	beq.w	800b6dc <_dtoa_r+0x8c4>
 800b56e:	b18c      	cbz	r4, 800b594 <_dtoa_r+0x77c>
 800b570:	4629      	mov	r1, r5
 800b572:	4622      	mov	r2, r4
 800b574:	4658      	mov	r0, fp
 800b576:	f001 fb57 	bl	800cc28 <__pow5mult>
 800b57a:	464a      	mov	r2, r9
 800b57c:	4601      	mov	r1, r0
 800b57e:	4605      	mov	r5, r0
 800b580:	4658      	mov	r0, fp
 800b582:	f001 faa7 	bl	800cad4 <__multiply>
 800b586:	4649      	mov	r1, r9
 800b588:	9004      	str	r0, [sp, #16]
 800b58a:	4658      	mov	r0, fp
 800b58c:	f001 f98e 	bl	800c8ac <_Bfree>
 800b590:	9b04      	ldr	r3, [sp, #16]
 800b592:	4699      	mov	r9, r3
 800b594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b596:	1b1a      	subs	r2, r3, r4
 800b598:	d004      	beq.n	800b5a4 <_dtoa_r+0x78c>
 800b59a:	4649      	mov	r1, r9
 800b59c:	4658      	mov	r0, fp
 800b59e:	f001 fb43 	bl	800cc28 <__pow5mult>
 800b5a2:	4681      	mov	r9, r0
 800b5a4:	2101      	movs	r1, #1
 800b5a6:	4658      	mov	r0, fp
 800b5a8:	f001 fa7e 	bl	800caa8 <__i2b>
 800b5ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f000 81cf 	beq.w	800b954 <_dtoa_r+0xb3c>
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	4601      	mov	r1, r0
 800b5ba:	4658      	mov	r0, fp
 800b5bc:	f001 fb34 	bl	800cc28 <__pow5mult>
 800b5c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	f300 8095 	bgt.w	800b6f4 <_dtoa_r+0x8dc>
 800b5ca:	9b02      	ldr	r3, [sp, #8]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f040 8087 	bne.w	800b6e0 <_dtoa_r+0x8c8>
 800b5d2:	9b03      	ldr	r3, [sp, #12]
 800b5d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f040 8089 	bne.w	800b6f0 <_dtoa_r+0x8d8>
 800b5de:	9b03      	ldr	r3, [sp, #12]
 800b5e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b5e4:	0d1b      	lsrs	r3, r3, #20
 800b5e6:	051b      	lsls	r3, r3, #20
 800b5e8:	b12b      	cbz	r3, 800b5f6 <_dtoa_r+0x7de>
 800b5ea:	9b08      	ldr	r3, [sp, #32]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	9308      	str	r3, [sp, #32]
 800b5f0:	f108 0801 	add.w	r8, r8, #1
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	f000 81b0 	beq.w	800b960 <_dtoa_r+0xb48>
 800b600:	6923      	ldr	r3, [r4, #16]
 800b602:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b606:	6918      	ldr	r0, [r3, #16]
 800b608:	f001 fa02 	bl	800ca10 <__hi0bits>
 800b60c:	f1c0 0020 	rsb	r0, r0, #32
 800b610:	9b08      	ldr	r3, [sp, #32]
 800b612:	4418      	add	r0, r3
 800b614:	f010 001f 	ands.w	r0, r0, #31
 800b618:	d077      	beq.n	800b70a <_dtoa_r+0x8f2>
 800b61a:	f1c0 0320 	rsb	r3, r0, #32
 800b61e:	2b04      	cmp	r3, #4
 800b620:	dd6b      	ble.n	800b6fa <_dtoa_r+0x8e2>
 800b622:	9b08      	ldr	r3, [sp, #32]
 800b624:	f1c0 001c 	rsb	r0, r0, #28
 800b628:	4403      	add	r3, r0
 800b62a:	4480      	add	r8, r0
 800b62c:	4406      	add	r6, r0
 800b62e:	9308      	str	r3, [sp, #32]
 800b630:	f1b8 0f00 	cmp.w	r8, #0
 800b634:	dd05      	ble.n	800b642 <_dtoa_r+0x82a>
 800b636:	4649      	mov	r1, r9
 800b638:	4642      	mov	r2, r8
 800b63a:	4658      	mov	r0, fp
 800b63c:	f001 fb4e 	bl	800ccdc <__lshift>
 800b640:	4681      	mov	r9, r0
 800b642:	9b08      	ldr	r3, [sp, #32]
 800b644:	2b00      	cmp	r3, #0
 800b646:	dd05      	ble.n	800b654 <_dtoa_r+0x83c>
 800b648:	4621      	mov	r1, r4
 800b64a:	461a      	mov	r2, r3
 800b64c:	4658      	mov	r0, fp
 800b64e:	f001 fb45 	bl	800ccdc <__lshift>
 800b652:	4604      	mov	r4, r0
 800b654:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b656:	2b00      	cmp	r3, #0
 800b658:	d059      	beq.n	800b70e <_dtoa_r+0x8f6>
 800b65a:	4621      	mov	r1, r4
 800b65c:	4648      	mov	r0, r9
 800b65e:	f001 fba9 	bl	800cdb4 <__mcmp>
 800b662:	2800      	cmp	r0, #0
 800b664:	da53      	bge.n	800b70e <_dtoa_r+0x8f6>
 800b666:	1e7b      	subs	r3, r7, #1
 800b668:	9304      	str	r3, [sp, #16]
 800b66a:	4649      	mov	r1, r9
 800b66c:	2300      	movs	r3, #0
 800b66e:	220a      	movs	r2, #10
 800b670:	4658      	mov	r0, fp
 800b672:	f001 f93d 	bl	800c8f0 <__multadd>
 800b676:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b678:	4681      	mov	r9, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f000 8172 	beq.w	800b964 <_dtoa_r+0xb4c>
 800b680:	2300      	movs	r3, #0
 800b682:	4629      	mov	r1, r5
 800b684:	220a      	movs	r2, #10
 800b686:	4658      	mov	r0, fp
 800b688:	f001 f932 	bl	800c8f0 <__multadd>
 800b68c:	9b00      	ldr	r3, [sp, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	4605      	mov	r5, r0
 800b692:	dc67      	bgt.n	800b764 <_dtoa_r+0x94c>
 800b694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b696:	2b02      	cmp	r3, #2
 800b698:	dc41      	bgt.n	800b71e <_dtoa_r+0x906>
 800b69a:	e063      	b.n	800b764 <_dtoa_r+0x94c>
 800b69c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b69e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b6a2:	e746      	b.n	800b532 <_dtoa_r+0x71a>
 800b6a4:	9b07      	ldr	r3, [sp, #28]
 800b6a6:	1e5c      	subs	r4, r3, #1
 800b6a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6aa:	42a3      	cmp	r3, r4
 800b6ac:	bfbf      	itttt	lt
 800b6ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b6b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b6b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b6b4:	1ae3      	sublt	r3, r4, r3
 800b6b6:	bfb4      	ite	lt
 800b6b8:	18d2      	addlt	r2, r2, r3
 800b6ba:	1b1c      	subge	r4, r3, r4
 800b6bc:	9b07      	ldr	r3, [sp, #28]
 800b6be:	bfbc      	itt	lt
 800b6c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b6c2:	2400      	movlt	r4, #0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	bfb5      	itete	lt
 800b6c8:	eba8 0603 	sublt.w	r6, r8, r3
 800b6cc:	9b07      	ldrge	r3, [sp, #28]
 800b6ce:	2300      	movlt	r3, #0
 800b6d0:	4646      	movge	r6, r8
 800b6d2:	e730      	b.n	800b536 <_dtoa_r+0x71e>
 800b6d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b6d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b6d8:	4646      	mov	r6, r8
 800b6da:	e735      	b.n	800b548 <_dtoa_r+0x730>
 800b6dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b6de:	e75c      	b.n	800b59a <_dtoa_r+0x782>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	e788      	b.n	800b5f6 <_dtoa_r+0x7de>
 800b6e4:	3fe00000 	.word	0x3fe00000
 800b6e8:	40240000 	.word	0x40240000
 800b6ec:	40140000 	.word	0x40140000
 800b6f0:	9b02      	ldr	r3, [sp, #8]
 800b6f2:	e780      	b.n	800b5f6 <_dtoa_r+0x7de>
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6f8:	e782      	b.n	800b600 <_dtoa_r+0x7e8>
 800b6fa:	d099      	beq.n	800b630 <_dtoa_r+0x818>
 800b6fc:	9a08      	ldr	r2, [sp, #32]
 800b6fe:	331c      	adds	r3, #28
 800b700:	441a      	add	r2, r3
 800b702:	4498      	add	r8, r3
 800b704:	441e      	add	r6, r3
 800b706:	9208      	str	r2, [sp, #32]
 800b708:	e792      	b.n	800b630 <_dtoa_r+0x818>
 800b70a:	4603      	mov	r3, r0
 800b70c:	e7f6      	b.n	800b6fc <_dtoa_r+0x8e4>
 800b70e:	9b07      	ldr	r3, [sp, #28]
 800b710:	9704      	str	r7, [sp, #16]
 800b712:	2b00      	cmp	r3, #0
 800b714:	dc20      	bgt.n	800b758 <_dtoa_r+0x940>
 800b716:	9300      	str	r3, [sp, #0]
 800b718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b71a:	2b02      	cmp	r3, #2
 800b71c:	dd1e      	ble.n	800b75c <_dtoa_r+0x944>
 800b71e:	9b00      	ldr	r3, [sp, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	f47f aec0 	bne.w	800b4a6 <_dtoa_r+0x68e>
 800b726:	4621      	mov	r1, r4
 800b728:	2205      	movs	r2, #5
 800b72a:	4658      	mov	r0, fp
 800b72c:	f001 f8e0 	bl	800c8f0 <__multadd>
 800b730:	4601      	mov	r1, r0
 800b732:	4604      	mov	r4, r0
 800b734:	4648      	mov	r0, r9
 800b736:	f001 fb3d 	bl	800cdb4 <__mcmp>
 800b73a:	2800      	cmp	r0, #0
 800b73c:	f77f aeb3 	ble.w	800b4a6 <_dtoa_r+0x68e>
 800b740:	4656      	mov	r6, sl
 800b742:	2331      	movs	r3, #49	@ 0x31
 800b744:	f806 3b01 	strb.w	r3, [r6], #1
 800b748:	9b04      	ldr	r3, [sp, #16]
 800b74a:	3301      	adds	r3, #1
 800b74c:	9304      	str	r3, [sp, #16]
 800b74e:	e6ae      	b.n	800b4ae <_dtoa_r+0x696>
 800b750:	9c07      	ldr	r4, [sp, #28]
 800b752:	9704      	str	r7, [sp, #16]
 800b754:	4625      	mov	r5, r4
 800b756:	e7f3      	b.n	800b740 <_dtoa_r+0x928>
 800b758:	9b07      	ldr	r3, [sp, #28]
 800b75a:	9300      	str	r3, [sp, #0]
 800b75c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f000 8104 	beq.w	800b96c <_dtoa_r+0xb54>
 800b764:	2e00      	cmp	r6, #0
 800b766:	dd05      	ble.n	800b774 <_dtoa_r+0x95c>
 800b768:	4629      	mov	r1, r5
 800b76a:	4632      	mov	r2, r6
 800b76c:	4658      	mov	r0, fp
 800b76e:	f001 fab5 	bl	800ccdc <__lshift>
 800b772:	4605      	mov	r5, r0
 800b774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b776:	2b00      	cmp	r3, #0
 800b778:	d05a      	beq.n	800b830 <_dtoa_r+0xa18>
 800b77a:	6869      	ldr	r1, [r5, #4]
 800b77c:	4658      	mov	r0, fp
 800b77e:	f001 f855 	bl	800c82c <_Balloc>
 800b782:	4606      	mov	r6, r0
 800b784:	b928      	cbnz	r0, 800b792 <_dtoa_r+0x97a>
 800b786:	4b84      	ldr	r3, [pc, #528]	@ (800b998 <_dtoa_r+0xb80>)
 800b788:	4602      	mov	r2, r0
 800b78a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b78e:	f7ff bb5a 	b.w	800ae46 <_dtoa_r+0x2e>
 800b792:	692a      	ldr	r2, [r5, #16]
 800b794:	3202      	adds	r2, #2
 800b796:	0092      	lsls	r2, r2, #2
 800b798:	f105 010c 	add.w	r1, r5, #12
 800b79c:	300c      	adds	r0, #12
 800b79e:	f7ff fa92 	bl	800acc6 <memcpy>
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	4631      	mov	r1, r6
 800b7a6:	4658      	mov	r0, fp
 800b7a8:	f001 fa98 	bl	800ccdc <__lshift>
 800b7ac:	f10a 0301 	add.w	r3, sl, #1
 800b7b0:	9307      	str	r3, [sp, #28]
 800b7b2:	9b00      	ldr	r3, [sp, #0]
 800b7b4:	4453      	add	r3, sl
 800b7b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7b8:	9b02      	ldr	r3, [sp, #8]
 800b7ba:	f003 0301 	and.w	r3, r3, #1
 800b7be:	462f      	mov	r7, r5
 800b7c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7c2:	4605      	mov	r5, r0
 800b7c4:	9b07      	ldr	r3, [sp, #28]
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	4648      	mov	r0, r9
 800b7cc:	9300      	str	r3, [sp, #0]
 800b7ce:	f7ff fa99 	bl	800ad04 <quorem>
 800b7d2:	4639      	mov	r1, r7
 800b7d4:	9002      	str	r0, [sp, #8]
 800b7d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b7da:	4648      	mov	r0, r9
 800b7dc:	f001 faea 	bl	800cdb4 <__mcmp>
 800b7e0:	462a      	mov	r2, r5
 800b7e2:	9008      	str	r0, [sp, #32]
 800b7e4:	4621      	mov	r1, r4
 800b7e6:	4658      	mov	r0, fp
 800b7e8:	f001 fb00 	bl	800cdec <__mdiff>
 800b7ec:	68c2      	ldr	r2, [r0, #12]
 800b7ee:	4606      	mov	r6, r0
 800b7f0:	bb02      	cbnz	r2, 800b834 <_dtoa_r+0xa1c>
 800b7f2:	4601      	mov	r1, r0
 800b7f4:	4648      	mov	r0, r9
 800b7f6:	f001 fadd 	bl	800cdb4 <__mcmp>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	4631      	mov	r1, r6
 800b7fe:	4658      	mov	r0, fp
 800b800:	920e      	str	r2, [sp, #56]	@ 0x38
 800b802:	f001 f853 	bl	800c8ac <_Bfree>
 800b806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b808:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b80a:	9e07      	ldr	r6, [sp, #28]
 800b80c:	ea43 0102 	orr.w	r1, r3, r2
 800b810:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b812:	4319      	orrs	r1, r3
 800b814:	d110      	bne.n	800b838 <_dtoa_r+0xa20>
 800b816:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b81a:	d029      	beq.n	800b870 <_dtoa_r+0xa58>
 800b81c:	9b08      	ldr	r3, [sp, #32]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	dd02      	ble.n	800b828 <_dtoa_r+0xa10>
 800b822:	9b02      	ldr	r3, [sp, #8]
 800b824:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b828:	9b00      	ldr	r3, [sp, #0]
 800b82a:	f883 8000 	strb.w	r8, [r3]
 800b82e:	e63f      	b.n	800b4b0 <_dtoa_r+0x698>
 800b830:	4628      	mov	r0, r5
 800b832:	e7bb      	b.n	800b7ac <_dtoa_r+0x994>
 800b834:	2201      	movs	r2, #1
 800b836:	e7e1      	b.n	800b7fc <_dtoa_r+0x9e4>
 800b838:	9b08      	ldr	r3, [sp, #32]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	db04      	blt.n	800b848 <_dtoa_r+0xa30>
 800b83e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b840:	430b      	orrs	r3, r1
 800b842:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b844:	430b      	orrs	r3, r1
 800b846:	d120      	bne.n	800b88a <_dtoa_r+0xa72>
 800b848:	2a00      	cmp	r2, #0
 800b84a:	dded      	ble.n	800b828 <_dtoa_r+0xa10>
 800b84c:	4649      	mov	r1, r9
 800b84e:	2201      	movs	r2, #1
 800b850:	4658      	mov	r0, fp
 800b852:	f001 fa43 	bl	800ccdc <__lshift>
 800b856:	4621      	mov	r1, r4
 800b858:	4681      	mov	r9, r0
 800b85a:	f001 faab 	bl	800cdb4 <__mcmp>
 800b85e:	2800      	cmp	r0, #0
 800b860:	dc03      	bgt.n	800b86a <_dtoa_r+0xa52>
 800b862:	d1e1      	bne.n	800b828 <_dtoa_r+0xa10>
 800b864:	f018 0f01 	tst.w	r8, #1
 800b868:	d0de      	beq.n	800b828 <_dtoa_r+0xa10>
 800b86a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b86e:	d1d8      	bne.n	800b822 <_dtoa_r+0xa0a>
 800b870:	9a00      	ldr	r2, [sp, #0]
 800b872:	2339      	movs	r3, #57	@ 0x39
 800b874:	7013      	strb	r3, [r2, #0]
 800b876:	4633      	mov	r3, r6
 800b878:	461e      	mov	r6, r3
 800b87a:	3b01      	subs	r3, #1
 800b87c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b880:	2a39      	cmp	r2, #57	@ 0x39
 800b882:	d052      	beq.n	800b92a <_dtoa_r+0xb12>
 800b884:	3201      	adds	r2, #1
 800b886:	701a      	strb	r2, [r3, #0]
 800b888:	e612      	b.n	800b4b0 <_dtoa_r+0x698>
 800b88a:	2a00      	cmp	r2, #0
 800b88c:	dd07      	ble.n	800b89e <_dtoa_r+0xa86>
 800b88e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b892:	d0ed      	beq.n	800b870 <_dtoa_r+0xa58>
 800b894:	9a00      	ldr	r2, [sp, #0]
 800b896:	f108 0301 	add.w	r3, r8, #1
 800b89a:	7013      	strb	r3, [r2, #0]
 800b89c:	e608      	b.n	800b4b0 <_dtoa_r+0x698>
 800b89e:	9b07      	ldr	r3, [sp, #28]
 800b8a0:	9a07      	ldr	r2, [sp, #28]
 800b8a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b8a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d028      	beq.n	800b8fe <_dtoa_r+0xae6>
 800b8ac:	4649      	mov	r1, r9
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	220a      	movs	r2, #10
 800b8b2:	4658      	mov	r0, fp
 800b8b4:	f001 f81c 	bl	800c8f0 <__multadd>
 800b8b8:	42af      	cmp	r7, r5
 800b8ba:	4681      	mov	r9, r0
 800b8bc:	f04f 0300 	mov.w	r3, #0
 800b8c0:	f04f 020a 	mov.w	r2, #10
 800b8c4:	4639      	mov	r1, r7
 800b8c6:	4658      	mov	r0, fp
 800b8c8:	d107      	bne.n	800b8da <_dtoa_r+0xac2>
 800b8ca:	f001 f811 	bl	800c8f0 <__multadd>
 800b8ce:	4607      	mov	r7, r0
 800b8d0:	4605      	mov	r5, r0
 800b8d2:	9b07      	ldr	r3, [sp, #28]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	9307      	str	r3, [sp, #28]
 800b8d8:	e774      	b.n	800b7c4 <_dtoa_r+0x9ac>
 800b8da:	f001 f809 	bl	800c8f0 <__multadd>
 800b8de:	4629      	mov	r1, r5
 800b8e0:	4607      	mov	r7, r0
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	220a      	movs	r2, #10
 800b8e6:	4658      	mov	r0, fp
 800b8e8:	f001 f802 	bl	800c8f0 <__multadd>
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	e7f0      	b.n	800b8d2 <_dtoa_r+0xaba>
 800b8f0:	9b00      	ldr	r3, [sp, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	bfcc      	ite	gt
 800b8f6:	461e      	movgt	r6, r3
 800b8f8:	2601      	movle	r6, #1
 800b8fa:	4456      	add	r6, sl
 800b8fc:	2700      	movs	r7, #0
 800b8fe:	4649      	mov	r1, r9
 800b900:	2201      	movs	r2, #1
 800b902:	4658      	mov	r0, fp
 800b904:	f001 f9ea 	bl	800ccdc <__lshift>
 800b908:	4621      	mov	r1, r4
 800b90a:	4681      	mov	r9, r0
 800b90c:	f001 fa52 	bl	800cdb4 <__mcmp>
 800b910:	2800      	cmp	r0, #0
 800b912:	dcb0      	bgt.n	800b876 <_dtoa_r+0xa5e>
 800b914:	d102      	bne.n	800b91c <_dtoa_r+0xb04>
 800b916:	f018 0f01 	tst.w	r8, #1
 800b91a:	d1ac      	bne.n	800b876 <_dtoa_r+0xa5e>
 800b91c:	4633      	mov	r3, r6
 800b91e:	461e      	mov	r6, r3
 800b920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b924:	2a30      	cmp	r2, #48	@ 0x30
 800b926:	d0fa      	beq.n	800b91e <_dtoa_r+0xb06>
 800b928:	e5c2      	b.n	800b4b0 <_dtoa_r+0x698>
 800b92a:	459a      	cmp	sl, r3
 800b92c:	d1a4      	bne.n	800b878 <_dtoa_r+0xa60>
 800b92e:	9b04      	ldr	r3, [sp, #16]
 800b930:	3301      	adds	r3, #1
 800b932:	9304      	str	r3, [sp, #16]
 800b934:	2331      	movs	r3, #49	@ 0x31
 800b936:	f88a 3000 	strb.w	r3, [sl]
 800b93a:	e5b9      	b.n	800b4b0 <_dtoa_r+0x698>
 800b93c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b93e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b99c <_dtoa_r+0xb84>
 800b942:	b11b      	cbz	r3, 800b94c <_dtoa_r+0xb34>
 800b944:	f10a 0308 	add.w	r3, sl, #8
 800b948:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b94a:	6013      	str	r3, [r2, #0]
 800b94c:	4650      	mov	r0, sl
 800b94e:	b019      	add	sp, #100	@ 0x64
 800b950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b956:	2b01      	cmp	r3, #1
 800b958:	f77f ae37 	ble.w	800b5ca <_dtoa_r+0x7b2>
 800b95c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b95e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b960:	2001      	movs	r0, #1
 800b962:	e655      	b.n	800b610 <_dtoa_r+0x7f8>
 800b964:	9b00      	ldr	r3, [sp, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	f77f aed6 	ble.w	800b718 <_dtoa_r+0x900>
 800b96c:	4656      	mov	r6, sl
 800b96e:	4621      	mov	r1, r4
 800b970:	4648      	mov	r0, r9
 800b972:	f7ff f9c7 	bl	800ad04 <quorem>
 800b976:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b97a:	f806 8b01 	strb.w	r8, [r6], #1
 800b97e:	9b00      	ldr	r3, [sp, #0]
 800b980:	eba6 020a 	sub.w	r2, r6, sl
 800b984:	4293      	cmp	r3, r2
 800b986:	ddb3      	ble.n	800b8f0 <_dtoa_r+0xad8>
 800b988:	4649      	mov	r1, r9
 800b98a:	2300      	movs	r3, #0
 800b98c:	220a      	movs	r2, #10
 800b98e:	4658      	mov	r0, fp
 800b990:	f000 ffae 	bl	800c8f0 <__multadd>
 800b994:	4681      	mov	r9, r0
 800b996:	e7ea      	b.n	800b96e <_dtoa_r+0xb56>
 800b998:	0800dbb5 	.word	0x0800dbb5
 800b99c:	0800db39 	.word	0x0800db39

0800b9a0 <rshift>:
 800b9a0:	6903      	ldr	r3, [r0, #16]
 800b9a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b9a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b9ae:	f100 0414 	add.w	r4, r0, #20
 800b9b2:	dd45      	ble.n	800ba40 <rshift+0xa0>
 800b9b4:	f011 011f 	ands.w	r1, r1, #31
 800b9b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b9bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b9c0:	d10c      	bne.n	800b9dc <rshift+0x3c>
 800b9c2:	f100 0710 	add.w	r7, r0, #16
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	42b1      	cmp	r1, r6
 800b9ca:	d334      	bcc.n	800ba36 <rshift+0x96>
 800b9cc:	1a9b      	subs	r3, r3, r2
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	1eea      	subs	r2, r5, #3
 800b9d2:	4296      	cmp	r6, r2
 800b9d4:	bf38      	it	cc
 800b9d6:	2300      	movcc	r3, #0
 800b9d8:	4423      	add	r3, r4
 800b9da:	e015      	b.n	800ba08 <rshift+0x68>
 800b9dc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b9e0:	f1c1 0820 	rsb	r8, r1, #32
 800b9e4:	40cf      	lsrs	r7, r1
 800b9e6:	f105 0e04 	add.w	lr, r5, #4
 800b9ea:	46a1      	mov	r9, r4
 800b9ec:	4576      	cmp	r6, lr
 800b9ee:	46f4      	mov	ip, lr
 800b9f0:	d815      	bhi.n	800ba1e <rshift+0x7e>
 800b9f2:	1a9a      	subs	r2, r3, r2
 800b9f4:	0092      	lsls	r2, r2, #2
 800b9f6:	3a04      	subs	r2, #4
 800b9f8:	3501      	adds	r5, #1
 800b9fa:	42ae      	cmp	r6, r5
 800b9fc:	bf38      	it	cc
 800b9fe:	2200      	movcc	r2, #0
 800ba00:	18a3      	adds	r3, r4, r2
 800ba02:	50a7      	str	r7, [r4, r2]
 800ba04:	b107      	cbz	r7, 800ba08 <rshift+0x68>
 800ba06:	3304      	adds	r3, #4
 800ba08:	1b1a      	subs	r2, r3, r4
 800ba0a:	42a3      	cmp	r3, r4
 800ba0c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ba10:	bf08      	it	eq
 800ba12:	2300      	moveq	r3, #0
 800ba14:	6102      	str	r2, [r0, #16]
 800ba16:	bf08      	it	eq
 800ba18:	6143      	streq	r3, [r0, #20]
 800ba1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba1e:	f8dc c000 	ldr.w	ip, [ip]
 800ba22:	fa0c fc08 	lsl.w	ip, ip, r8
 800ba26:	ea4c 0707 	orr.w	r7, ip, r7
 800ba2a:	f849 7b04 	str.w	r7, [r9], #4
 800ba2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ba32:	40cf      	lsrs	r7, r1
 800ba34:	e7da      	b.n	800b9ec <rshift+0x4c>
 800ba36:	f851 cb04 	ldr.w	ip, [r1], #4
 800ba3a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ba3e:	e7c3      	b.n	800b9c8 <rshift+0x28>
 800ba40:	4623      	mov	r3, r4
 800ba42:	e7e1      	b.n	800ba08 <rshift+0x68>

0800ba44 <__hexdig_fun>:
 800ba44:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ba48:	2b09      	cmp	r3, #9
 800ba4a:	d802      	bhi.n	800ba52 <__hexdig_fun+0xe>
 800ba4c:	3820      	subs	r0, #32
 800ba4e:	b2c0      	uxtb	r0, r0
 800ba50:	4770      	bx	lr
 800ba52:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ba56:	2b05      	cmp	r3, #5
 800ba58:	d801      	bhi.n	800ba5e <__hexdig_fun+0x1a>
 800ba5a:	3847      	subs	r0, #71	@ 0x47
 800ba5c:	e7f7      	b.n	800ba4e <__hexdig_fun+0xa>
 800ba5e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ba62:	2b05      	cmp	r3, #5
 800ba64:	d801      	bhi.n	800ba6a <__hexdig_fun+0x26>
 800ba66:	3827      	subs	r0, #39	@ 0x27
 800ba68:	e7f1      	b.n	800ba4e <__hexdig_fun+0xa>
 800ba6a:	2000      	movs	r0, #0
 800ba6c:	4770      	bx	lr
	...

0800ba70 <__gethex>:
 800ba70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba74:	b085      	sub	sp, #20
 800ba76:	468a      	mov	sl, r1
 800ba78:	9302      	str	r3, [sp, #8]
 800ba7a:	680b      	ldr	r3, [r1, #0]
 800ba7c:	9001      	str	r0, [sp, #4]
 800ba7e:	4690      	mov	r8, r2
 800ba80:	1c9c      	adds	r4, r3, #2
 800ba82:	46a1      	mov	r9, r4
 800ba84:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ba88:	2830      	cmp	r0, #48	@ 0x30
 800ba8a:	d0fa      	beq.n	800ba82 <__gethex+0x12>
 800ba8c:	eba9 0303 	sub.w	r3, r9, r3
 800ba90:	f1a3 0b02 	sub.w	fp, r3, #2
 800ba94:	f7ff ffd6 	bl	800ba44 <__hexdig_fun>
 800ba98:	4605      	mov	r5, r0
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	d168      	bne.n	800bb70 <__gethex+0x100>
 800ba9e:	49a0      	ldr	r1, [pc, #640]	@ (800bd20 <__gethex+0x2b0>)
 800baa0:	2201      	movs	r2, #1
 800baa2:	4648      	mov	r0, r9
 800baa4:	f7ff f8c4 	bl	800ac30 <strncmp>
 800baa8:	4607      	mov	r7, r0
 800baaa:	2800      	cmp	r0, #0
 800baac:	d167      	bne.n	800bb7e <__gethex+0x10e>
 800baae:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bab2:	4626      	mov	r6, r4
 800bab4:	f7ff ffc6 	bl	800ba44 <__hexdig_fun>
 800bab8:	2800      	cmp	r0, #0
 800baba:	d062      	beq.n	800bb82 <__gethex+0x112>
 800babc:	4623      	mov	r3, r4
 800babe:	7818      	ldrb	r0, [r3, #0]
 800bac0:	2830      	cmp	r0, #48	@ 0x30
 800bac2:	4699      	mov	r9, r3
 800bac4:	f103 0301 	add.w	r3, r3, #1
 800bac8:	d0f9      	beq.n	800babe <__gethex+0x4e>
 800baca:	f7ff ffbb 	bl	800ba44 <__hexdig_fun>
 800bace:	fab0 f580 	clz	r5, r0
 800bad2:	096d      	lsrs	r5, r5, #5
 800bad4:	f04f 0b01 	mov.w	fp, #1
 800bad8:	464a      	mov	r2, r9
 800bada:	4616      	mov	r6, r2
 800badc:	3201      	adds	r2, #1
 800bade:	7830      	ldrb	r0, [r6, #0]
 800bae0:	f7ff ffb0 	bl	800ba44 <__hexdig_fun>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d1f8      	bne.n	800bada <__gethex+0x6a>
 800bae8:	498d      	ldr	r1, [pc, #564]	@ (800bd20 <__gethex+0x2b0>)
 800baea:	2201      	movs	r2, #1
 800baec:	4630      	mov	r0, r6
 800baee:	f7ff f89f 	bl	800ac30 <strncmp>
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d13f      	bne.n	800bb76 <__gethex+0x106>
 800baf6:	b944      	cbnz	r4, 800bb0a <__gethex+0x9a>
 800baf8:	1c74      	adds	r4, r6, #1
 800bafa:	4622      	mov	r2, r4
 800bafc:	4616      	mov	r6, r2
 800bafe:	3201      	adds	r2, #1
 800bb00:	7830      	ldrb	r0, [r6, #0]
 800bb02:	f7ff ff9f 	bl	800ba44 <__hexdig_fun>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d1f8      	bne.n	800bafc <__gethex+0x8c>
 800bb0a:	1ba4      	subs	r4, r4, r6
 800bb0c:	00a7      	lsls	r7, r4, #2
 800bb0e:	7833      	ldrb	r3, [r6, #0]
 800bb10:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bb14:	2b50      	cmp	r3, #80	@ 0x50
 800bb16:	d13e      	bne.n	800bb96 <__gethex+0x126>
 800bb18:	7873      	ldrb	r3, [r6, #1]
 800bb1a:	2b2b      	cmp	r3, #43	@ 0x2b
 800bb1c:	d033      	beq.n	800bb86 <__gethex+0x116>
 800bb1e:	2b2d      	cmp	r3, #45	@ 0x2d
 800bb20:	d034      	beq.n	800bb8c <__gethex+0x11c>
 800bb22:	1c71      	adds	r1, r6, #1
 800bb24:	2400      	movs	r4, #0
 800bb26:	7808      	ldrb	r0, [r1, #0]
 800bb28:	f7ff ff8c 	bl	800ba44 <__hexdig_fun>
 800bb2c:	1e43      	subs	r3, r0, #1
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	2b18      	cmp	r3, #24
 800bb32:	d830      	bhi.n	800bb96 <__gethex+0x126>
 800bb34:	f1a0 0210 	sub.w	r2, r0, #16
 800bb38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bb3c:	f7ff ff82 	bl	800ba44 <__hexdig_fun>
 800bb40:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800bb44:	fa5f fc8c 	uxtb.w	ip, ip
 800bb48:	f1bc 0f18 	cmp.w	ip, #24
 800bb4c:	f04f 030a 	mov.w	r3, #10
 800bb50:	d91e      	bls.n	800bb90 <__gethex+0x120>
 800bb52:	b104      	cbz	r4, 800bb56 <__gethex+0xe6>
 800bb54:	4252      	negs	r2, r2
 800bb56:	4417      	add	r7, r2
 800bb58:	f8ca 1000 	str.w	r1, [sl]
 800bb5c:	b1ed      	cbz	r5, 800bb9a <__gethex+0x12a>
 800bb5e:	f1bb 0f00 	cmp.w	fp, #0
 800bb62:	bf0c      	ite	eq
 800bb64:	2506      	moveq	r5, #6
 800bb66:	2500      	movne	r5, #0
 800bb68:	4628      	mov	r0, r5
 800bb6a:	b005      	add	sp, #20
 800bb6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb70:	2500      	movs	r5, #0
 800bb72:	462c      	mov	r4, r5
 800bb74:	e7b0      	b.n	800bad8 <__gethex+0x68>
 800bb76:	2c00      	cmp	r4, #0
 800bb78:	d1c7      	bne.n	800bb0a <__gethex+0x9a>
 800bb7a:	4627      	mov	r7, r4
 800bb7c:	e7c7      	b.n	800bb0e <__gethex+0x9e>
 800bb7e:	464e      	mov	r6, r9
 800bb80:	462f      	mov	r7, r5
 800bb82:	2501      	movs	r5, #1
 800bb84:	e7c3      	b.n	800bb0e <__gethex+0x9e>
 800bb86:	2400      	movs	r4, #0
 800bb88:	1cb1      	adds	r1, r6, #2
 800bb8a:	e7cc      	b.n	800bb26 <__gethex+0xb6>
 800bb8c:	2401      	movs	r4, #1
 800bb8e:	e7fb      	b.n	800bb88 <__gethex+0x118>
 800bb90:	fb03 0002 	mla	r0, r3, r2, r0
 800bb94:	e7ce      	b.n	800bb34 <__gethex+0xc4>
 800bb96:	4631      	mov	r1, r6
 800bb98:	e7de      	b.n	800bb58 <__gethex+0xe8>
 800bb9a:	eba6 0309 	sub.w	r3, r6, r9
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	4629      	mov	r1, r5
 800bba2:	2b07      	cmp	r3, #7
 800bba4:	dc0a      	bgt.n	800bbbc <__gethex+0x14c>
 800bba6:	9801      	ldr	r0, [sp, #4]
 800bba8:	f000 fe40 	bl	800c82c <_Balloc>
 800bbac:	4604      	mov	r4, r0
 800bbae:	b940      	cbnz	r0, 800bbc2 <__gethex+0x152>
 800bbb0:	4b5c      	ldr	r3, [pc, #368]	@ (800bd24 <__gethex+0x2b4>)
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	21e4      	movs	r1, #228	@ 0xe4
 800bbb6:	485c      	ldr	r0, [pc, #368]	@ (800bd28 <__gethex+0x2b8>)
 800bbb8:	f001 fcf2 	bl	800d5a0 <__assert_func>
 800bbbc:	3101      	adds	r1, #1
 800bbbe:	105b      	asrs	r3, r3, #1
 800bbc0:	e7ef      	b.n	800bba2 <__gethex+0x132>
 800bbc2:	f100 0a14 	add.w	sl, r0, #20
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	4655      	mov	r5, sl
 800bbca:	469b      	mov	fp, r3
 800bbcc:	45b1      	cmp	r9, r6
 800bbce:	d337      	bcc.n	800bc40 <__gethex+0x1d0>
 800bbd0:	f845 bb04 	str.w	fp, [r5], #4
 800bbd4:	eba5 050a 	sub.w	r5, r5, sl
 800bbd8:	10ad      	asrs	r5, r5, #2
 800bbda:	6125      	str	r5, [r4, #16]
 800bbdc:	4658      	mov	r0, fp
 800bbde:	f000 ff17 	bl	800ca10 <__hi0bits>
 800bbe2:	016d      	lsls	r5, r5, #5
 800bbe4:	f8d8 6000 	ldr.w	r6, [r8]
 800bbe8:	1a2d      	subs	r5, r5, r0
 800bbea:	42b5      	cmp	r5, r6
 800bbec:	dd54      	ble.n	800bc98 <__gethex+0x228>
 800bbee:	1bad      	subs	r5, r5, r6
 800bbf0:	4629      	mov	r1, r5
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f001 faab 	bl	800d14e <__any_on>
 800bbf8:	4681      	mov	r9, r0
 800bbfa:	b178      	cbz	r0, 800bc1c <__gethex+0x1ac>
 800bbfc:	1e6b      	subs	r3, r5, #1
 800bbfe:	1159      	asrs	r1, r3, #5
 800bc00:	f003 021f 	and.w	r2, r3, #31
 800bc04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bc08:	f04f 0901 	mov.w	r9, #1
 800bc0c:	fa09 f202 	lsl.w	r2, r9, r2
 800bc10:	420a      	tst	r2, r1
 800bc12:	d003      	beq.n	800bc1c <__gethex+0x1ac>
 800bc14:	454b      	cmp	r3, r9
 800bc16:	dc36      	bgt.n	800bc86 <__gethex+0x216>
 800bc18:	f04f 0902 	mov.w	r9, #2
 800bc1c:	4629      	mov	r1, r5
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f7ff febe 	bl	800b9a0 <rshift>
 800bc24:	442f      	add	r7, r5
 800bc26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc2a:	42bb      	cmp	r3, r7
 800bc2c:	da42      	bge.n	800bcb4 <__gethex+0x244>
 800bc2e:	9801      	ldr	r0, [sp, #4]
 800bc30:	4621      	mov	r1, r4
 800bc32:	f000 fe3b 	bl	800c8ac <_Bfree>
 800bc36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc38:	2300      	movs	r3, #0
 800bc3a:	6013      	str	r3, [r2, #0]
 800bc3c:	25a3      	movs	r5, #163	@ 0xa3
 800bc3e:	e793      	b.n	800bb68 <__gethex+0xf8>
 800bc40:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bc44:	2a2e      	cmp	r2, #46	@ 0x2e
 800bc46:	d012      	beq.n	800bc6e <__gethex+0x1fe>
 800bc48:	2b20      	cmp	r3, #32
 800bc4a:	d104      	bne.n	800bc56 <__gethex+0x1e6>
 800bc4c:	f845 bb04 	str.w	fp, [r5], #4
 800bc50:	f04f 0b00 	mov.w	fp, #0
 800bc54:	465b      	mov	r3, fp
 800bc56:	7830      	ldrb	r0, [r6, #0]
 800bc58:	9303      	str	r3, [sp, #12]
 800bc5a:	f7ff fef3 	bl	800ba44 <__hexdig_fun>
 800bc5e:	9b03      	ldr	r3, [sp, #12]
 800bc60:	f000 000f 	and.w	r0, r0, #15
 800bc64:	4098      	lsls	r0, r3
 800bc66:	ea4b 0b00 	orr.w	fp, fp, r0
 800bc6a:	3304      	adds	r3, #4
 800bc6c:	e7ae      	b.n	800bbcc <__gethex+0x15c>
 800bc6e:	45b1      	cmp	r9, r6
 800bc70:	d8ea      	bhi.n	800bc48 <__gethex+0x1d8>
 800bc72:	492b      	ldr	r1, [pc, #172]	@ (800bd20 <__gethex+0x2b0>)
 800bc74:	9303      	str	r3, [sp, #12]
 800bc76:	2201      	movs	r2, #1
 800bc78:	4630      	mov	r0, r6
 800bc7a:	f7fe ffd9 	bl	800ac30 <strncmp>
 800bc7e:	9b03      	ldr	r3, [sp, #12]
 800bc80:	2800      	cmp	r0, #0
 800bc82:	d1e1      	bne.n	800bc48 <__gethex+0x1d8>
 800bc84:	e7a2      	b.n	800bbcc <__gethex+0x15c>
 800bc86:	1ea9      	subs	r1, r5, #2
 800bc88:	4620      	mov	r0, r4
 800bc8a:	f001 fa60 	bl	800d14e <__any_on>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d0c2      	beq.n	800bc18 <__gethex+0x1a8>
 800bc92:	f04f 0903 	mov.w	r9, #3
 800bc96:	e7c1      	b.n	800bc1c <__gethex+0x1ac>
 800bc98:	da09      	bge.n	800bcae <__gethex+0x23e>
 800bc9a:	1b75      	subs	r5, r6, r5
 800bc9c:	4621      	mov	r1, r4
 800bc9e:	9801      	ldr	r0, [sp, #4]
 800bca0:	462a      	mov	r2, r5
 800bca2:	f001 f81b 	bl	800ccdc <__lshift>
 800bca6:	1b7f      	subs	r7, r7, r5
 800bca8:	4604      	mov	r4, r0
 800bcaa:	f100 0a14 	add.w	sl, r0, #20
 800bcae:	f04f 0900 	mov.w	r9, #0
 800bcb2:	e7b8      	b.n	800bc26 <__gethex+0x1b6>
 800bcb4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bcb8:	42bd      	cmp	r5, r7
 800bcba:	dd6f      	ble.n	800bd9c <__gethex+0x32c>
 800bcbc:	1bed      	subs	r5, r5, r7
 800bcbe:	42ae      	cmp	r6, r5
 800bcc0:	dc34      	bgt.n	800bd2c <__gethex+0x2bc>
 800bcc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d022      	beq.n	800bd10 <__gethex+0x2a0>
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d024      	beq.n	800bd18 <__gethex+0x2a8>
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d115      	bne.n	800bcfe <__gethex+0x28e>
 800bcd2:	42ae      	cmp	r6, r5
 800bcd4:	d113      	bne.n	800bcfe <__gethex+0x28e>
 800bcd6:	2e01      	cmp	r6, #1
 800bcd8:	d10b      	bne.n	800bcf2 <__gethex+0x282>
 800bcda:	9a02      	ldr	r2, [sp, #8]
 800bcdc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bce0:	6013      	str	r3, [r2, #0]
 800bce2:	2301      	movs	r3, #1
 800bce4:	6123      	str	r3, [r4, #16]
 800bce6:	f8ca 3000 	str.w	r3, [sl]
 800bcea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcec:	2562      	movs	r5, #98	@ 0x62
 800bcee:	601c      	str	r4, [r3, #0]
 800bcf0:	e73a      	b.n	800bb68 <__gethex+0xf8>
 800bcf2:	1e71      	subs	r1, r6, #1
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	f001 fa2a 	bl	800d14e <__any_on>
 800bcfa:	2800      	cmp	r0, #0
 800bcfc:	d1ed      	bne.n	800bcda <__gethex+0x26a>
 800bcfe:	9801      	ldr	r0, [sp, #4]
 800bd00:	4621      	mov	r1, r4
 800bd02:	f000 fdd3 	bl	800c8ac <_Bfree>
 800bd06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd08:	2300      	movs	r3, #0
 800bd0a:	6013      	str	r3, [r2, #0]
 800bd0c:	2550      	movs	r5, #80	@ 0x50
 800bd0e:	e72b      	b.n	800bb68 <__gethex+0xf8>
 800bd10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d1f3      	bne.n	800bcfe <__gethex+0x28e>
 800bd16:	e7e0      	b.n	800bcda <__gethex+0x26a>
 800bd18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1dd      	bne.n	800bcda <__gethex+0x26a>
 800bd1e:	e7ee      	b.n	800bcfe <__gethex+0x28e>
 800bd20:	0800d9dd 	.word	0x0800d9dd
 800bd24:	0800dbb5 	.word	0x0800dbb5
 800bd28:	0800dbc6 	.word	0x0800dbc6
 800bd2c:	1e6f      	subs	r7, r5, #1
 800bd2e:	f1b9 0f00 	cmp.w	r9, #0
 800bd32:	d130      	bne.n	800bd96 <__gethex+0x326>
 800bd34:	b127      	cbz	r7, 800bd40 <__gethex+0x2d0>
 800bd36:	4639      	mov	r1, r7
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f001 fa08 	bl	800d14e <__any_on>
 800bd3e:	4681      	mov	r9, r0
 800bd40:	117a      	asrs	r2, r7, #5
 800bd42:	2301      	movs	r3, #1
 800bd44:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bd48:	f007 071f 	and.w	r7, r7, #31
 800bd4c:	40bb      	lsls	r3, r7
 800bd4e:	4213      	tst	r3, r2
 800bd50:	4629      	mov	r1, r5
 800bd52:	4620      	mov	r0, r4
 800bd54:	bf18      	it	ne
 800bd56:	f049 0902 	orrne.w	r9, r9, #2
 800bd5a:	f7ff fe21 	bl	800b9a0 <rshift>
 800bd5e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bd62:	1b76      	subs	r6, r6, r5
 800bd64:	2502      	movs	r5, #2
 800bd66:	f1b9 0f00 	cmp.w	r9, #0
 800bd6a:	d047      	beq.n	800bdfc <__gethex+0x38c>
 800bd6c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	d015      	beq.n	800bda0 <__gethex+0x330>
 800bd74:	2b03      	cmp	r3, #3
 800bd76:	d017      	beq.n	800bda8 <__gethex+0x338>
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d109      	bne.n	800bd90 <__gethex+0x320>
 800bd7c:	f019 0f02 	tst.w	r9, #2
 800bd80:	d006      	beq.n	800bd90 <__gethex+0x320>
 800bd82:	f8da 3000 	ldr.w	r3, [sl]
 800bd86:	ea49 0903 	orr.w	r9, r9, r3
 800bd8a:	f019 0f01 	tst.w	r9, #1
 800bd8e:	d10e      	bne.n	800bdae <__gethex+0x33e>
 800bd90:	f045 0510 	orr.w	r5, r5, #16
 800bd94:	e032      	b.n	800bdfc <__gethex+0x38c>
 800bd96:	f04f 0901 	mov.w	r9, #1
 800bd9a:	e7d1      	b.n	800bd40 <__gethex+0x2d0>
 800bd9c:	2501      	movs	r5, #1
 800bd9e:	e7e2      	b.n	800bd66 <__gethex+0x2f6>
 800bda0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bda2:	f1c3 0301 	rsb	r3, r3, #1
 800bda6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bda8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d0f0      	beq.n	800bd90 <__gethex+0x320>
 800bdae:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bdb2:	f104 0314 	add.w	r3, r4, #20
 800bdb6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bdba:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bdbe:	f04f 0c00 	mov.w	ip, #0
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdc8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800bdcc:	d01b      	beq.n	800be06 <__gethex+0x396>
 800bdce:	3201      	adds	r2, #1
 800bdd0:	6002      	str	r2, [r0, #0]
 800bdd2:	2d02      	cmp	r5, #2
 800bdd4:	f104 0314 	add.w	r3, r4, #20
 800bdd8:	d13c      	bne.n	800be54 <__gethex+0x3e4>
 800bdda:	f8d8 2000 	ldr.w	r2, [r8]
 800bdde:	3a01      	subs	r2, #1
 800bde0:	42b2      	cmp	r2, r6
 800bde2:	d109      	bne.n	800bdf8 <__gethex+0x388>
 800bde4:	1171      	asrs	r1, r6, #5
 800bde6:	2201      	movs	r2, #1
 800bde8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bdec:	f006 061f 	and.w	r6, r6, #31
 800bdf0:	fa02 f606 	lsl.w	r6, r2, r6
 800bdf4:	421e      	tst	r6, r3
 800bdf6:	d13a      	bne.n	800be6e <__gethex+0x3fe>
 800bdf8:	f045 0520 	orr.w	r5, r5, #32
 800bdfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdfe:	601c      	str	r4, [r3, #0]
 800be00:	9b02      	ldr	r3, [sp, #8]
 800be02:	601f      	str	r7, [r3, #0]
 800be04:	e6b0      	b.n	800bb68 <__gethex+0xf8>
 800be06:	4299      	cmp	r1, r3
 800be08:	f843 cc04 	str.w	ip, [r3, #-4]
 800be0c:	d8d9      	bhi.n	800bdc2 <__gethex+0x352>
 800be0e:	68a3      	ldr	r3, [r4, #8]
 800be10:	459b      	cmp	fp, r3
 800be12:	db17      	blt.n	800be44 <__gethex+0x3d4>
 800be14:	6861      	ldr	r1, [r4, #4]
 800be16:	9801      	ldr	r0, [sp, #4]
 800be18:	3101      	adds	r1, #1
 800be1a:	f000 fd07 	bl	800c82c <_Balloc>
 800be1e:	4681      	mov	r9, r0
 800be20:	b918      	cbnz	r0, 800be2a <__gethex+0x3ba>
 800be22:	4b1a      	ldr	r3, [pc, #104]	@ (800be8c <__gethex+0x41c>)
 800be24:	4602      	mov	r2, r0
 800be26:	2184      	movs	r1, #132	@ 0x84
 800be28:	e6c5      	b.n	800bbb6 <__gethex+0x146>
 800be2a:	6922      	ldr	r2, [r4, #16]
 800be2c:	3202      	adds	r2, #2
 800be2e:	f104 010c 	add.w	r1, r4, #12
 800be32:	0092      	lsls	r2, r2, #2
 800be34:	300c      	adds	r0, #12
 800be36:	f7fe ff46 	bl	800acc6 <memcpy>
 800be3a:	4621      	mov	r1, r4
 800be3c:	9801      	ldr	r0, [sp, #4]
 800be3e:	f000 fd35 	bl	800c8ac <_Bfree>
 800be42:	464c      	mov	r4, r9
 800be44:	6923      	ldr	r3, [r4, #16]
 800be46:	1c5a      	adds	r2, r3, #1
 800be48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be4c:	6122      	str	r2, [r4, #16]
 800be4e:	2201      	movs	r2, #1
 800be50:	615a      	str	r2, [r3, #20]
 800be52:	e7be      	b.n	800bdd2 <__gethex+0x362>
 800be54:	6922      	ldr	r2, [r4, #16]
 800be56:	455a      	cmp	r2, fp
 800be58:	dd0b      	ble.n	800be72 <__gethex+0x402>
 800be5a:	2101      	movs	r1, #1
 800be5c:	4620      	mov	r0, r4
 800be5e:	f7ff fd9f 	bl	800b9a0 <rshift>
 800be62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be66:	3701      	adds	r7, #1
 800be68:	42bb      	cmp	r3, r7
 800be6a:	f6ff aee0 	blt.w	800bc2e <__gethex+0x1be>
 800be6e:	2501      	movs	r5, #1
 800be70:	e7c2      	b.n	800bdf8 <__gethex+0x388>
 800be72:	f016 061f 	ands.w	r6, r6, #31
 800be76:	d0fa      	beq.n	800be6e <__gethex+0x3fe>
 800be78:	4453      	add	r3, sl
 800be7a:	f1c6 0620 	rsb	r6, r6, #32
 800be7e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800be82:	f000 fdc5 	bl	800ca10 <__hi0bits>
 800be86:	42b0      	cmp	r0, r6
 800be88:	dbe7      	blt.n	800be5a <__gethex+0x3ea>
 800be8a:	e7f0      	b.n	800be6e <__gethex+0x3fe>
 800be8c:	0800dbb5 	.word	0x0800dbb5

0800be90 <L_shift>:
 800be90:	f1c2 0208 	rsb	r2, r2, #8
 800be94:	0092      	lsls	r2, r2, #2
 800be96:	b570      	push	{r4, r5, r6, lr}
 800be98:	f1c2 0620 	rsb	r6, r2, #32
 800be9c:	6843      	ldr	r3, [r0, #4]
 800be9e:	6804      	ldr	r4, [r0, #0]
 800bea0:	fa03 f506 	lsl.w	r5, r3, r6
 800bea4:	432c      	orrs	r4, r5
 800bea6:	40d3      	lsrs	r3, r2
 800bea8:	6004      	str	r4, [r0, #0]
 800beaa:	f840 3f04 	str.w	r3, [r0, #4]!
 800beae:	4288      	cmp	r0, r1
 800beb0:	d3f4      	bcc.n	800be9c <L_shift+0xc>
 800beb2:	bd70      	pop	{r4, r5, r6, pc}

0800beb4 <__match>:
 800beb4:	b530      	push	{r4, r5, lr}
 800beb6:	6803      	ldr	r3, [r0, #0]
 800beb8:	3301      	adds	r3, #1
 800beba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bebe:	b914      	cbnz	r4, 800bec6 <__match+0x12>
 800bec0:	6003      	str	r3, [r0, #0]
 800bec2:	2001      	movs	r0, #1
 800bec4:	bd30      	pop	{r4, r5, pc}
 800bec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800beca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bece:	2d19      	cmp	r5, #25
 800bed0:	bf98      	it	ls
 800bed2:	3220      	addls	r2, #32
 800bed4:	42a2      	cmp	r2, r4
 800bed6:	d0f0      	beq.n	800beba <__match+0x6>
 800bed8:	2000      	movs	r0, #0
 800beda:	e7f3      	b.n	800bec4 <__match+0x10>

0800bedc <__hexnan>:
 800bedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee0:	680b      	ldr	r3, [r1, #0]
 800bee2:	6801      	ldr	r1, [r0, #0]
 800bee4:	115e      	asrs	r6, r3, #5
 800bee6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800beea:	f013 031f 	ands.w	r3, r3, #31
 800beee:	b087      	sub	sp, #28
 800bef0:	bf18      	it	ne
 800bef2:	3604      	addne	r6, #4
 800bef4:	2500      	movs	r5, #0
 800bef6:	1f37      	subs	r7, r6, #4
 800bef8:	4682      	mov	sl, r0
 800befa:	4690      	mov	r8, r2
 800befc:	9301      	str	r3, [sp, #4]
 800befe:	f846 5c04 	str.w	r5, [r6, #-4]
 800bf02:	46b9      	mov	r9, r7
 800bf04:	463c      	mov	r4, r7
 800bf06:	9502      	str	r5, [sp, #8]
 800bf08:	46ab      	mov	fp, r5
 800bf0a:	784a      	ldrb	r2, [r1, #1]
 800bf0c:	1c4b      	adds	r3, r1, #1
 800bf0e:	9303      	str	r3, [sp, #12]
 800bf10:	b342      	cbz	r2, 800bf64 <__hexnan+0x88>
 800bf12:	4610      	mov	r0, r2
 800bf14:	9105      	str	r1, [sp, #20]
 800bf16:	9204      	str	r2, [sp, #16]
 800bf18:	f7ff fd94 	bl	800ba44 <__hexdig_fun>
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	d151      	bne.n	800bfc4 <__hexnan+0xe8>
 800bf20:	9a04      	ldr	r2, [sp, #16]
 800bf22:	9905      	ldr	r1, [sp, #20]
 800bf24:	2a20      	cmp	r2, #32
 800bf26:	d818      	bhi.n	800bf5a <__hexnan+0x7e>
 800bf28:	9b02      	ldr	r3, [sp, #8]
 800bf2a:	459b      	cmp	fp, r3
 800bf2c:	dd13      	ble.n	800bf56 <__hexnan+0x7a>
 800bf2e:	454c      	cmp	r4, r9
 800bf30:	d206      	bcs.n	800bf40 <__hexnan+0x64>
 800bf32:	2d07      	cmp	r5, #7
 800bf34:	dc04      	bgt.n	800bf40 <__hexnan+0x64>
 800bf36:	462a      	mov	r2, r5
 800bf38:	4649      	mov	r1, r9
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f7ff ffa8 	bl	800be90 <L_shift>
 800bf40:	4544      	cmp	r4, r8
 800bf42:	d952      	bls.n	800bfea <__hexnan+0x10e>
 800bf44:	2300      	movs	r3, #0
 800bf46:	f1a4 0904 	sub.w	r9, r4, #4
 800bf4a:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf4e:	f8cd b008 	str.w	fp, [sp, #8]
 800bf52:	464c      	mov	r4, r9
 800bf54:	461d      	mov	r5, r3
 800bf56:	9903      	ldr	r1, [sp, #12]
 800bf58:	e7d7      	b.n	800bf0a <__hexnan+0x2e>
 800bf5a:	2a29      	cmp	r2, #41	@ 0x29
 800bf5c:	d157      	bne.n	800c00e <__hexnan+0x132>
 800bf5e:	3102      	adds	r1, #2
 800bf60:	f8ca 1000 	str.w	r1, [sl]
 800bf64:	f1bb 0f00 	cmp.w	fp, #0
 800bf68:	d051      	beq.n	800c00e <__hexnan+0x132>
 800bf6a:	454c      	cmp	r4, r9
 800bf6c:	d206      	bcs.n	800bf7c <__hexnan+0xa0>
 800bf6e:	2d07      	cmp	r5, #7
 800bf70:	dc04      	bgt.n	800bf7c <__hexnan+0xa0>
 800bf72:	462a      	mov	r2, r5
 800bf74:	4649      	mov	r1, r9
 800bf76:	4620      	mov	r0, r4
 800bf78:	f7ff ff8a 	bl	800be90 <L_shift>
 800bf7c:	4544      	cmp	r4, r8
 800bf7e:	d936      	bls.n	800bfee <__hexnan+0x112>
 800bf80:	f1a8 0204 	sub.w	r2, r8, #4
 800bf84:	4623      	mov	r3, r4
 800bf86:	f853 1b04 	ldr.w	r1, [r3], #4
 800bf8a:	f842 1f04 	str.w	r1, [r2, #4]!
 800bf8e:	429f      	cmp	r7, r3
 800bf90:	d2f9      	bcs.n	800bf86 <__hexnan+0xaa>
 800bf92:	1b3b      	subs	r3, r7, r4
 800bf94:	f023 0303 	bic.w	r3, r3, #3
 800bf98:	3304      	adds	r3, #4
 800bf9a:	3401      	adds	r4, #1
 800bf9c:	3e03      	subs	r6, #3
 800bf9e:	42b4      	cmp	r4, r6
 800bfa0:	bf88      	it	hi
 800bfa2:	2304      	movhi	r3, #4
 800bfa4:	4443      	add	r3, r8
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f843 2b04 	str.w	r2, [r3], #4
 800bfac:	429f      	cmp	r7, r3
 800bfae:	d2fb      	bcs.n	800bfa8 <__hexnan+0xcc>
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	b91b      	cbnz	r3, 800bfbc <__hexnan+0xe0>
 800bfb4:	4547      	cmp	r7, r8
 800bfb6:	d128      	bne.n	800c00a <__hexnan+0x12e>
 800bfb8:	2301      	movs	r3, #1
 800bfba:	603b      	str	r3, [r7, #0]
 800bfbc:	2005      	movs	r0, #5
 800bfbe:	b007      	add	sp, #28
 800bfc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfc4:	3501      	adds	r5, #1
 800bfc6:	2d08      	cmp	r5, #8
 800bfc8:	f10b 0b01 	add.w	fp, fp, #1
 800bfcc:	dd06      	ble.n	800bfdc <__hexnan+0x100>
 800bfce:	4544      	cmp	r4, r8
 800bfd0:	d9c1      	bls.n	800bf56 <__hexnan+0x7a>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	f844 3c04 	str.w	r3, [r4, #-4]
 800bfd8:	2501      	movs	r5, #1
 800bfda:	3c04      	subs	r4, #4
 800bfdc:	6822      	ldr	r2, [r4, #0]
 800bfde:	f000 000f 	and.w	r0, r0, #15
 800bfe2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bfe6:	6020      	str	r0, [r4, #0]
 800bfe8:	e7b5      	b.n	800bf56 <__hexnan+0x7a>
 800bfea:	2508      	movs	r5, #8
 800bfec:	e7b3      	b.n	800bf56 <__hexnan+0x7a>
 800bfee:	9b01      	ldr	r3, [sp, #4]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d0dd      	beq.n	800bfb0 <__hexnan+0xd4>
 800bff4:	f1c3 0320 	rsb	r3, r3, #32
 800bff8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bffc:	40da      	lsrs	r2, r3
 800bffe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c002:	4013      	ands	r3, r2
 800c004:	f846 3c04 	str.w	r3, [r6, #-4]
 800c008:	e7d2      	b.n	800bfb0 <__hexnan+0xd4>
 800c00a:	3f04      	subs	r7, #4
 800c00c:	e7d0      	b.n	800bfb0 <__hexnan+0xd4>
 800c00e:	2004      	movs	r0, #4
 800c010:	e7d5      	b.n	800bfbe <__hexnan+0xe2>

0800c012 <__ssputs_r>:
 800c012:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c016:	688e      	ldr	r6, [r1, #8]
 800c018:	461f      	mov	r7, r3
 800c01a:	42be      	cmp	r6, r7
 800c01c:	680b      	ldr	r3, [r1, #0]
 800c01e:	4682      	mov	sl, r0
 800c020:	460c      	mov	r4, r1
 800c022:	4690      	mov	r8, r2
 800c024:	d82d      	bhi.n	800c082 <__ssputs_r+0x70>
 800c026:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c02a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c02e:	d026      	beq.n	800c07e <__ssputs_r+0x6c>
 800c030:	6965      	ldr	r5, [r4, #20]
 800c032:	6909      	ldr	r1, [r1, #16]
 800c034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c038:	eba3 0901 	sub.w	r9, r3, r1
 800c03c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c040:	1c7b      	adds	r3, r7, #1
 800c042:	444b      	add	r3, r9
 800c044:	106d      	asrs	r5, r5, #1
 800c046:	429d      	cmp	r5, r3
 800c048:	bf38      	it	cc
 800c04a:	461d      	movcc	r5, r3
 800c04c:	0553      	lsls	r3, r2, #21
 800c04e:	d527      	bpl.n	800c0a0 <__ssputs_r+0x8e>
 800c050:	4629      	mov	r1, r5
 800c052:	f000 faa1 	bl	800c598 <_malloc_r>
 800c056:	4606      	mov	r6, r0
 800c058:	b360      	cbz	r0, 800c0b4 <__ssputs_r+0xa2>
 800c05a:	6921      	ldr	r1, [r4, #16]
 800c05c:	464a      	mov	r2, r9
 800c05e:	f7fe fe32 	bl	800acc6 <memcpy>
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c06c:	81a3      	strh	r3, [r4, #12]
 800c06e:	6126      	str	r6, [r4, #16]
 800c070:	6165      	str	r5, [r4, #20]
 800c072:	444e      	add	r6, r9
 800c074:	eba5 0509 	sub.w	r5, r5, r9
 800c078:	6026      	str	r6, [r4, #0]
 800c07a:	60a5      	str	r5, [r4, #8]
 800c07c:	463e      	mov	r6, r7
 800c07e:	42be      	cmp	r6, r7
 800c080:	d900      	bls.n	800c084 <__ssputs_r+0x72>
 800c082:	463e      	mov	r6, r7
 800c084:	6820      	ldr	r0, [r4, #0]
 800c086:	4632      	mov	r2, r6
 800c088:	4641      	mov	r1, r8
 800c08a:	f001 f9f6 	bl	800d47a <memmove>
 800c08e:	68a3      	ldr	r3, [r4, #8]
 800c090:	1b9b      	subs	r3, r3, r6
 800c092:	60a3      	str	r3, [r4, #8]
 800c094:	6823      	ldr	r3, [r4, #0]
 800c096:	4433      	add	r3, r6
 800c098:	6023      	str	r3, [r4, #0]
 800c09a:	2000      	movs	r0, #0
 800c09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0a0:	462a      	mov	r2, r5
 800c0a2:	f001 f8b8 	bl	800d216 <_realloc_r>
 800c0a6:	4606      	mov	r6, r0
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d1e0      	bne.n	800c06e <__ssputs_r+0x5c>
 800c0ac:	6921      	ldr	r1, [r4, #16]
 800c0ae:	4650      	mov	r0, sl
 800c0b0:	f001 faa8 	bl	800d604 <_free_r>
 800c0b4:	230c      	movs	r3, #12
 800c0b6:	f8ca 3000 	str.w	r3, [sl]
 800c0ba:	89a3      	ldrh	r3, [r4, #12]
 800c0bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0c0:	81a3      	strh	r3, [r4, #12]
 800c0c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c0c6:	e7e9      	b.n	800c09c <__ssputs_r+0x8a>

0800c0c8 <_svfiprintf_r>:
 800c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0cc:	4698      	mov	r8, r3
 800c0ce:	898b      	ldrh	r3, [r1, #12]
 800c0d0:	061b      	lsls	r3, r3, #24
 800c0d2:	b09d      	sub	sp, #116	@ 0x74
 800c0d4:	4607      	mov	r7, r0
 800c0d6:	460d      	mov	r5, r1
 800c0d8:	4614      	mov	r4, r2
 800c0da:	d510      	bpl.n	800c0fe <_svfiprintf_r+0x36>
 800c0dc:	690b      	ldr	r3, [r1, #16]
 800c0de:	b973      	cbnz	r3, 800c0fe <_svfiprintf_r+0x36>
 800c0e0:	2140      	movs	r1, #64	@ 0x40
 800c0e2:	f000 fa59 	bl	800c598 <_malloc_r>
 800c0e6:	6028      	str	r0, [r5, #0]
 800c0e8:	6128      	str	r0, [r5, #16]
 800c0ea:	b930      	cbnz	r0, 800c0fa <_svfiprintf_r+0x32>
 800c0ec:	230c      	movs	r3, #12
 800c0ee:	603b      	str	r3, [r7, #0]
 800c0f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c0f4:	b01d      	add	sp, #116	@ 0x74
 800c0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fa:	2340      	movs	r3, #64	@ 0x40
 800c0fc:	616b      	str	r3, [r5, #20]
 800c0fe:	2300      	movs	r3, #0
 800c100:	9309      	str	r3, [sp, #36]	@ 0x24
 800c102:	2320      	movs	r3, #32
 800c104:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c108:	f8cd 800c 	str.w	r8, [sp, #12]
 800c10c:	2330      	movs	r3, #48	@ 0x30
 800c10e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c2ac <_svfiprintf_r+0x1e4>
 800c112:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c116:	f04f 0901 	mov.w	r9, #1
 800c11a:	4623      	mov	r3, r4
 800c11c:	469a      	mov	sl, r3
 800c11e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c122:	b10a      	cbz	r2, 800c128 <_svfiprintf_r+0x60>
 800c124:	2a25      	cmp	r2, #37	@ 0x25
 800c126:	d1f9      	bne.n	800c11c <_svfiprintf_r+0x54>
 800c128:	ebba 0b04 	subs.w	fp, sl, r4
 800c12c:	d00b      	beq.n	800c146 <_svfiprintf_r+0x7e>
 800c12e:	465b      	mov	r3, fp
 800c130:	4622      	mov	r2, r4
 800c132:	4629      	mov	r1, r5
 800c134:	4638      	mov	r0, r7
 800c136:	f7ff ff6c 	bl	800c012 <__ssputs_r>
 800c13a:	3001      	adds	r0, #1
 800c13c:	f000 80a7 	beq.w	800c28e <_svfiprintf_r+0x1c6>
 800c140:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c142:	445a      	add	r2, fp
 800c144:	9209      	str	r2, [sp, #36]	@ 0x24
 800c146:	f89a 3000 	ldrb.w	r3, [sl]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f000 809f 	beq.w	800c28e <_svfiprintf_r+0x1c6>
 800c150:	2300      	movs	r3, #0
 800c152:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c15a:	f10a 0a01 	add.w	sl, sl, #1
 800c15e:	9304      	str	r3, [sp, #16]
 800c160:	9307      	str	r3, [sp, #28]
 800c162:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c166:	931a      	str	r3, [sp, #104]	@ 0x68
 800c168:	4654      	mov	r4, sl
 800c16a:	2205      	movs	r2, #5
 800c16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c170:	484e      	ldr	r0, [pc, #312]	@ (800c2ac <_svfiprintf_r+0x1e4>)
 800c172:	f7f4 f82d 	bl	80001d0 <memchr>
 800c176:	9a04      	ldr	r2, [sp, #16]
 800c178:	b9d8      	cbnz	r0, 800c1b2 <_svfiprintf_r+0xea>
 800c17a:	06d0      	lsls	r0, r2, #27
 800c17c:	bf44      	itt	mi
 800c17e:	2320      	movmi	r3, #32
 800c180:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c184:	0711      	lsls	r1, r2, #28
 800c186:	bf44      	itt	mi
 800c188:	232b      	movmi	r3, #43	@ 0x2b
 800c18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c18e:	f89a 3000 	ldrb.w	r3, [sl]
 800c192:	2b2a      	cmp	r3, #42	@ 0x2a
 800c194:	d015      	beq.n	800c1c2 <_svfiprintf_r+0xfa>
 800c196:	9a07      	ldr	r2, [sp, #28]
 800c198:	4654      	mov	r4, sl
 800c19a:	2000      	movs	r0, #0
 800c19c:	f04f 0c0a 	mov.w	ip, #10
 800c1a0:	4621      	mov	r1, r4
 800c1a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1a6:	3b30      	subs	r3, #48	@ 0x30
 800c1a8:	2b09      	cmp	r3, #9
 800c1aa:	d94b      	bls.n	800c244 <_svfiprintf_r+0x17c>
 800c1ac:	b1b0      	cbz	r0, 800c1dc <_svfiprintf_r+0x114>
 800c1ae:	9207      	str	r2, [sp, #28]
 800c1b0:	e014      	b.n	800c1dc <_svfiprintf_r+0x114>
 800c1b2:	eba0 0308 	sub.w	r3, r0, r8
 800c1b6:	fa09 f303 	lsl.w	r3, r9, r3
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	9304      	str	r3, [sp, #16]
 800c1be:	46a2      	mov	sl, r4
 800c1c0:	e7d2      	b.n	800c168 <_svfiprintf_r+0xa0>
 800c1c2:	9b03      	ldr	r3, [sp, #12]
 800c1c4:	1d19      	adds	r1, r3, #4
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	9103      	str	r1, [sp, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	bfbb      	ittet	lt
 800c1ce:	425b      	neglt	r3, r3
 800c1d0:	f042 0202 	orrlt.w	r2, r2, #2
 800c1d4:	9307      	strge	r3, [sp, #28]
 800c1d6:	9307      	strlt	r3, [sp, #28]
 800c1d8:	bfb8      	it	lt
 800c1da:	9204      	strlt	r2, [sp, #16]
 800c1dc:	7823      	ldrb	r3, [r4, #0]
 800c1de:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1e0:	d10a      	bne.n	800c1f8 <_svfiprintf_r+0x130>
 800c1e2:	7863      	ldrb	r3, [r4, #1]
 800c1e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1e6:	d132      	bne.n	800c24e <_svfiprintf_r+0x186>
 800c1e8:	9b03      	ldr	r3, [sp, #12]
 800c1ea:	1d1a      	adds	r2, r3, #4
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	9203      	str	r2, [sp, #12]
 800c1f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c1f4:	3402      	adds	r4, #2
 800c1f6:	9305      	str	r3, [sp, #20]
 800c1f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c2bc <_svfiprintf_r+0x1f4>
 800c1fc:	7821      	ldrb	r1, [r4, #0]
 800c1fe:	2203      	movs	r2, #3
 800c200:	4650      	mov	r0, sl
 800c202:	f7f3 ffe5 	bl	80001d0 <memchr>
 800c206:	b138      	cbz	r0, 800c218 <_svfiprintf_r+0x150>
 800c208:	9b04      	ldr	r3, [sp, #16]
 800c20a:	eba0 000a 	sub.w	r0, r0, sl
 800c20e:	2240      	movs	r2, #64	@ 0x40
 800c210:	4082      	lsls	r2, r0
 800c212:	4313      	orrs	r3, r2
 800c214:	3401      	adds	r4, #1
 800c216:	9304      	str	r3, [sp, #16]
 800c218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c21c:	4824      	ldr	r0, [pc, #144]	@ (800c2b0 <_svfiprintf_r+0x1e8>)
 800c21e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c222:	2206      	movs	r2, #6
 800c224:	f7f3 ffd4 	bl	80001d0 <memchr>
 800c228:	2800      	cmp	r0, #0
 800c22a:	d036      	beq.n	800c29a <_svfiprintf_r+0x1d2>
 800c22c:	4b21      	ldr	r3, [pc, #132]	@ (800c2b4 <_svfiprintf_r+0x1ec>)
 800c22e:	bb1b      	cbnz	r3, 800c278 <_svfiprintf_r+0x1b0>
 800c230:	9b03      	ldr	r3, [sp, #12]
 800c232:	3307      	adds	r3, #7
 800c234:	f023 0307 	bic.w	r3, r3, #7
 800c238:	3308      	adds	r3, #8
 800c23a:	9303      	str	r3, [sp, #12]
 800c23c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c23e:	4433      	add	r3, r6
 800c240:	9309      	str	r3, [sp, #36]	@ 0x24
 800c242:	e76a      	b.n	800c11a <_svfiprintf_r+0x52>
 800c244:	fb0c 3202 	mla	r2, ip, r2, r3
 800c248:	460c      	mov	r4, r1
 800c24a:	2001      	movs	r0, #1
 800c24c:	e7a8      	b.n	800c1a0 <_svfiprintf_r+0xd8>
 800c24e:	2300      	movs	r3, #0
 800c250:	3401      	adds	r4, #1
 800c252:	9305      	str	r3, [sp, #20]
 800c254:	4619      	mov	r1, r3
 800c256:	f04f 0c0a 	mov.w	ip, #10
 800c25a:	4620      	mov	r0, r4
 800c25c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c260:	3a30      	subs	r2, #48	@ 0x30
 800c262:	2a09      	cmp	r2, #9
 800c264:	d903      	bls.n	800c26e <_svfiprintf_r+0x1a6>
 800c266:	2b00      	cmp	r3, #0
 800c268:	d0c6      	beq.n	800c1f8 <_svfiprintf_r+0x130>
 800c26a:	9105      	str	r1, [sp, #20]
 800c26c:	e7c4      	b.n	800c1f8 <_svfiprintf_r+0x130>
 800c26e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c272:	4604      	mov	r4, r0
 800c274:	2301      	movs	r3, #1
 800c276:	e7f0      	b.n	800c25a <_svfiprintf_r+0x192>
 800c278:	ab03      	add	r3, sp, #12
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	462a      	mov	r2, r5
 800c27e:	4b0e      	ldr	r3, [pc, #56]	@ (800c2b8 <_svfiprintf_r+0x1f0>)
 800c280:	a904      	add	r1, sp, #16
 800c282:	4638      	mov	r0, r7
 800c284:	f7fc fefe 	bl	8009084 <_printf_float>
 800c288:	1c42      	adds	r2, r0, #1
 800c28a:	4606      	mov	r6, r0
 800c28c:	d1d6      	bne.n	800c23c <_svfiprintf_r+0x174>
 800c28e:	89ab      	ldrh	r3, [r5, #12]
 800c290:	065b      	lsls	r3, r3, #25
 800c292:	f53f af2d 	bmi.w	800c0f0 <_svfiprintf_r+0x28>
 800c296:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c298:	e72c      	b.n	800c0f4 <_svfiprintf_r+0x2c>
 800c29a:	ab03      	add	r3, sp, #12
 800c29c:	9300      	str	r3, [sp, #0]
 800c29e:	462a      	mov	r2, r5
 800c2a0:	4b05      	ldr	r3, [pc, #20]	@ (800c2b8 <_svfiprintf_r+0x1f0>)
 800c2a2:	a904      	add	r1, sp, #16
 800c2a4:	4638      	mov	r0, r7
 800c2a6:	f7fd f985 	bl	80095b4 <_printf_i>
 800c2aa:	e7ed      	b.n	800c288 <_svfiprintf_r+0x1c0>
 800c2ac:	0800dc26 	.word	0x0800dc26
 800c2b0:	0800dc30 	.word	0x0800dc30
 800c2b4:	08009085 	.word	0x08009085
 800c2b8:	0800c013 	.word	0x0800c013
 800c2bc:	0800dc2c 	.word	0x0800dc2c

0800c2c0 <__sfputc_r>:
 800c2c0:	6893      	ldr	r3, [r2, #8]
 800c2c2:	3b01      	subs	r3, #1
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	b410      	push	{r4}
 800c2c8:	6093      	str	r3, [r2, #8]
 800c2ca:	da08      	bge.n	800c2de <__sfputc_r+0x1e>
 800c2cc:	6994      	ldr	r4, [r2, #24]
 800c2ce:	42a3      	cmp	r3, r4
 800c2d0:	db01      	blt.n	800c2d6 <__sfputc_r+0x16>
 800c2d2:	290a      	cmp	r1, #10
 800c2d4:	d103      	bne.n	800c2de <__sfputc_r+0x1e>
 800c2d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2da:	f000 bfca 	b.w	800d272 <__swbuf_r>
 800c2de:	6813      	ldr	r3, [r2, #0]
 800c2e0:	1c58      	adds	r0, r3, #1
 800c2e2:	6010      	str	r0, [r2, #0]
 800c2e4:	7019      	strb	r1, [r3, #0]
 800c2e6:	4608      	mov	r0, r1
 800c2e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <__sfputs_r>:
 800c2ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f0:	4606      	mov	r6, r0
 800c2f2:	460f      	mov	r7, r1
 800c2f4:	4614      	mov	r4, r2
 800c2f6:	18d5      	adds	r5, r2, r3
 800c2f8:	42ac      	cmp	r4, r5
 800c2fa:	d101      	bne.n	800c300 <__sfputs_r+0x12>
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	e007      	b.n	800c310 <__sfputs_r+0x22>
 800c300:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c304:	463a      	mov	r2, r7
 800c306:	4630      	mov	r0, r6
 800c308:	f7ff ffda 	bl	800c2c0 <__sfputc_r>
 800c30c:	1c43      	adds	r3, r0, #1
 800c30e:	d1f3      	bne.n	800c2f8 <__sfputs_r+0xa>
 800c310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c314 <_vfiprintf_r>:
 800c314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c318:	460d      	mov	r5, r1
 800c31a:	b09d      	sub	sp, #116	@ 0x74
 800c31c:	4614      	mov	r4, r2
 800c31e:	4698      	mov	r8, r3
 800c320:	4606      	mov	r6, r0
 800c322:	b118      	cbz	r0, 800c32c <_vfiprintf_r+0x18>
 800c324:	6a03      	ldr	r3, [r0, #32]
 800c326:	b90b      	cbnz	r3, 800c32c <_vfiprintf_r+0x18>
 800c328:	f7fd fd58 	bl	8009ddc <__sinit>
 800c32c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c32e:	07d9      	lsls	r1, r3, #31
 800c330:	d405      	bmi.n	800c33e <_vfiprintf_r+0x2a>
 800c332:	89ab      	ldrh	r3, [r5, #12]
 800c334:	059a      	lsls	r2, r3, #22
 800c336:	d402      	bmi.n	800c33e <_vfiprintf_r+0x2a>
 800c338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c33a:	f7fe fcc2 	bl	800acc2 <__retarget_lock_acquire_recursive>
 800c33e:	89ab      	ldrh	r3, [r5, #12]
 800c340:	071b      	lsls	r3, r3, #28
 800c342:	d501      	bpl.n	800c348 <_vfiprintf_r+0x34>
 800c344:	692b      	ldr	r3, [r5, #16]
 800c346:	b99b      	cbnz	r3, 800c370 <_vfiprintf_r+0x5c>
 800c348:	4629      	mov	r1, r5
 800c34a:	4630      	mov	r0, r6
 800c34c:	f000 ffd0 	bl	800d2f0 <__swsetup_r>
 800c350:	b170      	cbz	r0, 800c370 <_vfiprintf_r+0x5c>
 800c352:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c354:	07dc      	lsls	r4, r3, #31
 800c356:	d504      	bpl.n	800c362 <_vfiprintf_r+0x4e>
 800c358:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c35c:	b01d      	add	sp, #116	@ 0x74
 800c35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c362:	89ab      	ldrh	r3, [r5, #12]
 800c364:	0598      	lsls	r0, r3, #22
 800c366:	d4f7      	bmi.n	800c358 <_vfiprintf_r+0x44>
 800c368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c36a:	f7fe fcab 	bl	800acc4 <__retarget_lock_release_recursive>
 800c36e:	e7f3      	b.n	800c358 <_vfiprintf_r+0x44>
 800c370:	2300      	movs	r3, #0
 800c372:	9309      	str	r3, [sp, #36]	@ 0x24
 800c374:	2320      	movs	r3, #32
 800c376:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c37a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c37e:	2330      	movs	r3, #48	@ 0x30
 800c380:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c530 <_vfiprintf_r+0x21c>
 800c384:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c388:	f04f 0901 	mov.w	r9, #1
 800c38c:	4623      	mov	r3, r4
 800c38e:	469a      	mov	sl, r3
 800c390:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c394:	b10a      	cbz	r2, 800c39a <_vfiprintf_r+0x86>
 800c396:	2a25      	cmp	r2, #37	@ 0x25
 800c398:	d1f9      	bne.n	800c38e <_vfiprintf_r+0x7a>
 800c39a:	ebba 0b04 	subs.w	fp, sl, r4
 800c39e:	d00b      	beq.n	800c3b8 <_vfiprintf_r+0xa4>
 800c3a0:	465b      	mov	r3, fp
 800c3a2:	4622      	mov	r2, r4
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	f7ff ffa1 	bl	800c2ee <__sfputs_r>
 800c3ac:	3001      	adds	r0, #1
 800c3ae:	f000 80a7 	beq.w	800c500 <_vfiprintf_r+0x1ec>
 800c3b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3b4:	445a      	add	r2, fp
 800c3b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f000 809f 	beq.w	800c500 <_vfiprintf_r+0x1ec>
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c3c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3cc:	f10a 0a01 	add.w	sl, sl, #1
 800c3d0:	9304      	str	r3, [sp, #16]
 800c3d2:	9307      	str	r3, [sp, #28]
 800c3d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3da:	4654      	mov	r4, sl
 800c3dc:	2205      	movs	r2, #5
 800c3de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3e2:	4853      	ldr	r0, [pc, #332]	@ (800c530 <_vfiprintf_r+0x21c>)
 800c3e4:	f7f3 fef4 	bl	80001d0 <memchr>
 800c3e8:	9a04      	ldr	r2, [sp, #16]
 800c3ea:	b9d8      	cbnz	r0, 800c424 <_vfiprintf_r+0x110>
 800c3ec:	06d1      	lsls	r1, r2, #27
 800c3ee:	bf44      	itt	mi
 800c3f0:	2320      	movmi	r3, #32
 800c3f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3f6:	0713      	lsls	r3, r2, #28
 800c3f8:	bf44      	itt	mi
 800c3fa:	232b      	movmi	r3, #43	@ 0x2b
 800c3fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c400:	f89a 3000 	ldrb.w	r3, [sl]
 800c404:	2b2a      	cmp	r3, #42	@ 0x2a
 800c406:	d015      	beq.n	800c434 <_vfiprintf_r+0x120>
 800c408:	9a07      	ldr	r2, [sp, #28]
 800c40a:	4654      	mov	r4, sl
 800c40c:	2000      	movs	r0, #0
 800c40e:	f04f 0c0a 	mov.w	ip, #10
 800c412:	4621      	mov	r1, r4
 800c414:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c418:	3b30      	subs	r3, #48	@ 0x30
 800c41a:	2b09      	cmp	r3, #9
 800c41c:	d94b      	bls.n	800c4b6 <_vfiprintf_r+0x1a2>
 800c41e:	b1b0      	cbz	r0, 800c44e <_vfiprintf_r+0x13a>
 800c420:	9207      	str	r2, [sp, #28]
 800c422:	e014      	b.n	800c44e <_vfiprintf_r+0x13a>
 800c424:	eba0 0308 	sub.w	r3, r0, r8
 800c428:	fa09 f303 	lsl.w	r3, r9, r3
 800c42c:	4313      	orrs	r3, r2
 800c42e:	9304      	str	r3, [sp, #16]
 800c430:	46a2      	mov	sl, r4
 800c432:	e7d2      	b.n	800c3da <_vfiprintf_r+0xc6>
 800c434:	9b03      	ldr	r3, [sp, #12]
 800c436:	1d19      	adds	r1, r3, #4
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	9103      	str	r1, [sp, #12]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	bfbb      	ittet	lt
 800c440:	425b      	neglt	r3, r3
 800c442:	f042 0202 	orrlt.w	r2, r2, #2
 800c446:	9307      	strge	r3, [sp, #28]
 800c448:	9307      	strlt	r3, [sp, #28]
 800c44a:	bfb8      	it	lt
 800c44c:	9204      	strlt	r2, [sp, #16]
 800c44e:	7823      	ldrb	r3, [r4, #0]
 800c450:	2b2e      	cmp	r3, #46	@ 0x2e
 800c452:	d10a      	bne.n	800c46a <_vfiprintf_r+0x156>
 800c454:	7863      	ldrb	r3, [r4, #1]
 800c456:	2b2a      	cmp	r3, #42	@ 0x2a
 800c458:	d132      	bne.n	800c4c0 <_vfiprintf_r+0x1ac>
 800c45a:	9b03      	ldr	r3, [sp, #12]
 800c45c:	1d1a      	adds	r2, r3, #4
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	9203      	str	r2, [sp, #12]
 800c462:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c466:	3402      	adds	r4, #2
 800c468:	9305      	str	r3, [sp, #20]
 800c46a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c540 <_vfiprintf_r+0x22c>
 800c46e:	7821      	ldrb	r1, [r4, #0]
 800c470:	2203      	movs	r2, #3
 800c472:	4650      	mov	r0, sl
 800c474:	f7f3 feac 	bl	80001d0 <memchr>
 800c478:	b138      	cbz	r0, 800c48a <_vfiprintf_r+0x176>
 800c47a:	9b04      	ldr	r3, [sp, #16]
 800c47c:	eba0 000a 	sub.w	r0, r0, sl
 800c480:	2240      	movs	r2, #64	@ 0x40
 800c482:	4082      	lsls	r2, r0
 800c484:	4313      	orrs	r3, r2
 800c486:	3401      	adds	r4, #1
 800c488:	9304      	str	r3, [sp, #16]
 800c48a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c48e:	4829      	ldr	r0, [pc, #164]	@ (800c534 <_vfiprintf_r+0x220>)
 800c490:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c494:	2206      	movs	r2, #6
 800c496:	f7f3 fe9b 	bl	80001d0 <memchr>
 800c49a:	2800      	cmp	r0, #0
 800c49c:	d03f      	beq.n	800c51e <_vfiprintf_r+0x20a>
 800c49e:	4b26      	ldr	r3, [pc, #152]	@ (800c538 <_vfiprintf_r+0x224>)
 800c4a0:	bb1b      	cbnz	r3, 800c4ea <_vfiprintf_r+0x1d6>
 800c4a2:	9b03      	ldr	r3, [sp, #12]
 800c4a4:	3307      	adds	r3, #7
 800c4a6:	f023 0307 	bic.w	r3, r3, #7
 800c4aa:	3308      	adds	r3, #8
 800c4ac:	9303      	str	r3, [sp, #12]
 800c4ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4b0:	443b      	add	r3, r7
 800c4b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4b4:	e76a      	b.n	800c38c <_vfiprintf_r+0x78>
 800c4b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4ba:	460c      	mov	r4, r1
 800c4bc:	2001      	movs	r0, #1
 800c4be:	e7a8      	b.n	800c412 <_vfiprintf_r+0xfe>
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	3401      	adds	r4, #1
 800c4c4:	9305      	str	r3, [sp, #20]
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	f04f 0c0a 	mov.w	ip, #10
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4d2:	3a30      	subs	r2, #48	@ 0x30
 800c4d4:	2a09      	cmp	r2, #9
 800c4d6:	d903      	bls.n	800c4e0 <_vfiprintf_r+0x1cc>
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d0c6      	beq.n	800c46a <_vfiprintf_r+0x156>
 800c4dc:	9105      	str	r1, [sp, #20]
 800c4de:	e7c4      	b.n	800c46a <_vfiprintf_r+0x156>
 800c4e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e7f0      	b.n	800c4cc <_vfiprintf_r+0x1b8>
 800c4ea:	ab03      	add	r3, sp, #12
 800c4ec:	9300      	str	r3, [sp, #0]
 800c4ee:	462a      	mov	r2, r5
 800c4f0:	4b12      	ldr	r3, [pc, #72]	@ (800c53c <_vfiprintf_r+0x228>)
 800c4f2:	a904      	add	r1, sp, #16
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	f7fc fdc5 	bl	8009084 <_printf_float>
 800c4fa:	4607      	mov	r7, r0
 800c4fc:	1c78      	adds	r0, r7, #1
 800c4fe:	d1d6      	bne.n	800c4ae <_vfiprintf_r+0x19a>
 800c500:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c502:	07d9      	lsls	r1, r3, #31
 800c504:	d405      	bmi.n	800c512 <_vfiprintf_r+0x1fe>
 800c506:	89ab      	ldrh	r3, [r5, #12]
 800c508:	059a      	lsls	r2, r3, #22
 800c50a:	d402      	bmi.n	800c512 <_vfiprintf_r+0x1fe>
 800c50c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c50e:	f7fe fbd9 	bl	800acc4 <__retarget_lock_release_recursive>
 800c512:	89ab      	ldrh	r3, [r5, #12]
 800c514:	065b      	lsls	r3, r3, #25
 800c516:	f53f af1f 	bmi.w	800c358 <_vfiprintf_r+0x44>
 800c51a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c51c:	e71e      	b.n	800c35c <_vfiprintf_r+0x48>
 800c51e:	ab03      	add	r3, sp, #12
 800c520:	9300      	str	r3, [sp, #0]
 800c522:	462a      	mov	r2, r5
 800c524:	4b05      	ldr	r3, [pc, #20]	@ (800c53c <_vfiprintf_r+0x228>)
 800c526:	a904      	add	r1, sp, #16
 800c528:	4630      	mov	r0, r6
 800c52a:	f7fd f843 	bl	80095b4 <_printf_i>
 800c52e:	e7e4      	b.n	800c4fa <_vfiprintf_r+0x1e6>
 800c530:	0800dc26 	.word	0x0800dc26
 800c534:	0800dc30 	.word	0x0800dc30
 800c538:	08009085 	.word	0x08009085
 800c53c:	0800c2ef 	.word	0x0800c2ef
 800c540:	0800dc2c 	.word	0x0800dc2c

0800c544 <malloc>:
 800c544:	4b02      	ldr	r3, [pc, #8]	@ (800c550 <malloc+0xc>)
 800c546:	4601      	mov	r1, r0
 800c548:	6818      	ldr	r0, [r3, #0]
 800c54a:	f000 b825 	b.w	800c598 <_malloc_r>
 800c54e:	bf00      	nop
 800c550:	20000190 	.word	0x20000190

0800c554 <sbrk_aligned>:
 800c554:	b570      	push	{r4, r5, r6, lr}
 800c556:	4e0f      	ldr	r6, [pc, #60]	@ (800c594 <sbrk_aligned+0x40>)
 800c558:	460c      	mov	r4, r1
 800c55a:	6831      	ldr	r1, [r6, #0]
 800c55c:	4605      	mov	r5, r0
 800c55e:	b911      	cbnz	r1, 800c566 <sbrk_aligned+0x12>
 800c560:	f000 fffc 	bl	800d55c <_sbrk_r>
 800c564:	6030      	str	r0, [r6, #0]
 800c566:	4621      	mov	r1, r4
 800c568:	4628      	mov	r0, r5
 800c56a:	f000 fff7 	bl	800d55c <_sbrk_r>
 800c56e:	1c43      	adds	r3, r0, #1
 800c570:	d103      	bne.n	800c57a <sbrk_aligned+0x26>
 800c572:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c576:	4620      	mov	r0, r4
 800c578:	bd70      	pop	{r4, r5, r6, pc}
 800c57a:	1cc4      	adds	r4, r0, #3
 800c57c:	f024 0403 	bic.w	r4, r4, #3
 800c580:	42a0      	cmp	r0, r4
 800c582:	d0f8      	beq.n	800c576 <sbrk_aligned+0x22>
 800c584:	1a21      	subs	r1, r4, r0
 800c586:	4628      	mov	r0, r5
 800c588:	f000 ffe8 	bl	800d55c <_sbrk_r>
 800c58c:	3001      	adds	r0, #1
 800c58e:	d1f2      	bne.n	800c576 <sbrk_aligned+0x22>
 800c590:	e7ef      	b.n	800c572 <sbrk_aligned+0x1e>
 800c592:	bf00      	nop
 800c594:	200004f8 	.word	0x200004f8

0800c598 <_malloc_r>:
 800c598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c59c:	1ccd      	adds	r5, r1, #3
 800c59e:	f025 0503 	bic.w	r5, r5, #3
 800c5a2:	3508      	adds	r5, #8
 800c5a4:	2d0c      	cmp	r5, #12
 800c5a6:	bf38      	it	cc
 800c5a8:	250c      	movcc	r5, #12
 800c5aa:	2d00      	cmp	r5, #0
 800c5ac:	4606      	mov	r6, r0
 800c5ae:	db01      	blt.n	800c5b4 <_malloc_r+0x1c>
 800c5b0:	42a9      	cmp	r1, r5
 800c5b2:	d904      	bls.n	800c5be <_malloc_r+0x26>
 800c5b4:	230c      	movs	r3, #12
 800c5b6:	6033      	str	r3, [r6, #0]
 800c5b8:	2000      	movs	r0, #0
 800c5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c694 <_malloc_r+0xfc>
 800c5c2:	f000 f927 	bl	800c814 <__malloc_lock>
 800c5c6:	f8d8 3000 	ldr.w	r3, [r8]
 800c5ca:	461c      	mov	r4, r3
 800c5cc:	bb44      	cbnz	r4, 800c620 <_malloc_r+0x88>
 800c5ce:	4629      	mov	r1, r5
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	f7ff ffbf 	bl	800c554 <sbrk_aligned>
 800c5d6:	1c43      	adds	r3, r0, #1
 800c5d8:	4604      	mov	r4, r0
 800c5da:	d158      	bne.n	800c68e <_malloc_r+0xf6>
 800c5dc:	f8d8 4000 	ldr.w	r4, [r8]
 800c5e0:	4627      	mov	r7, r4
 800c5e2:	2f00      	cmp	r7, #0
 800c5e4:	d143      	bne.n	800c66e <_malloc_r+0xd6>
 800c5e6:	2c00      	cmp	r4, #0
 800c5e8:	d04b      	beq.n	800c682 <_malloc_r+0xea>
 800c5ea:	6823      	ldr	r3, [r4, #0]
 800c5ec:	4639      	mov	r1, r7
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	eb04 0903 	add.w	r9, r4, r3
 800c5f4:	f000 ffb2 	bl	800d55c <_sbrk_r>
 800c5f8:	4581      	cmp	r9, r0
 800c5fa:	d142      	bne.n	800c682 <_malloc_r+0xea>
 800c5fc:	6821      	ldr	r1, [r4, #0]
 800c5fe:	1a6d      	subs	r5, r5, r1
 800c600:	4629      	mov	r1, r5
 800c602:	4630      	mov	r0, r6
 800c604:	f7ff ffa6 	bl	800c554 <sbrk_aligned>
 800c608:	3001      	adds	r0, #1
 800c60a:	d03a      	beq.n	800c682 <_malloc_r+0xea>
 800c60c:	6823      	ldr	r3, [r4, #0]
 800c60e:	442b      	add	r3, r5
 800c610:	6023      	str	r3, [r4, #0]
 800c612:	f8d8 3000 	ldr.w	r3, [r8]
 800c616:	685a      	ldr	r2, [r3, #4]
 800c618:	bb62      	cbnz	r2, 800c674 <_malloc_r+0xdc>
 800c61a:	f8c8 7000 	str.w	r7, [r8]
 800c61e:	e00f      	b.n	800c640 <_malloc_r+0xa8>
 800c620:	6822      	ldr	r2, [r4, #0]
 800c622:	1b52      	subs	r2, r2, r5
 800c624:	d420      	bmi.n	800c668 <_malloc_r+0xd0>
 800c626:	2a0b      	cmp	r2, #11
 800c628:	d917      	bls.n	800c65a <_malloc_r+0xc2>
 800c62a:	1961      	adds	r1, r4, r5
 800c62c:	42a3      	cmp	r3, r4
 800c62e:	6025      	str	r5, [r4, #0]
 800c630:	bf18      	it	ne
 800c632:	6059      	strne	r1, [r3, #4]
 800c634:	6863      	ldr	r3, [r4, #4]
 800c636:	bf08      	it	eq
 800c638:	f8c8 1000 	streq.w	r1, [r8]
 800c63c:	5162      	str	r2, [r4, r5]
 800c63e:	604b      	str	r3, [r1, #4]
 800c640:	4630      	mov	r0, r6
 800c642:	f000 f8ed 	bl	800c820 <__malloc_unlock>
 800c646:	f104 000b 	add.w	r0, r4, #11
 800c64a:	1d23      	adds	r3, r4, #4
 800c64c:	f020 0007 	bic.w	r0, r0, #7
 800c650:	1ac2      	subs	r2, r0, r3
 800c652:	bf1c      	itt	ne
 800c654:	1a1b      	subne	r3, r3, r0
 800c656:	50a3      	strne	r3, [r4, r2]
 800c658:	e7af      	b.n	800c5ba <_malloc_r+0x22>
 800c65a:	6862      	ldr	r2, [r4, #4]
 800c65c:	42a3      	cmp	r3, r4
 800c65e:	bf0c      	ite	eq
 800c660:	f8c8 2000 	streq.w	r2, [r8]
 800c664:	605a      	strne	r2, [r3, #4]
 800c666:	e7eb      	b.n	800c640 <_malloc_r+0xa8>
 800c668:	4623      	mov	r3, r4
 800c66a:	6864      	ldr	r4, [r4, #4]
 800c66c:	e7ae      	b.n	800c5cc <_malloc_r+0x34>
 800c66e:	463c      	mov	r4, r7
 800c670:	687f      	ldr	r7, [r7, #4]
 800c672:	e7b6      	b.n	800c5e2 <_malloc_r+0x4a>
 800c674:	461a      	mov	r2, r3
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	42a3      	cmp	r3, r4
 800c67a:	d1fb      	bne.n	800c674 <_malloc_r+0xdc>
 800c67c:	2300      	movs	r3, #0
 800c67e:	6053      	str	r3, [r2, #4]
 800c680:	e7de      	b.n	800c640 <_malloc_r+0xa8>
 800c682:	230c      	movs	r3, #12
 800c684:	6033      	str	r3, [r6, #0]
 800c686:	4630      	mov	r0, r6
 800c688:	f000 f8ca 	bl	800c820 <__malloc_unlock>
 800c68c:	e794      	b.n	800c5b8 <_malloc_r+0x20>
 800c68e:	6005      	str	r5, [r0, #0]
 800c690:	e7d6      	b.n	800c640 <_malloc_r+0xa8>
 800c692:	bf00      	nop
 800c694:	200004fc 	.word	0x200004fc

0800c698 <__ascii_mbtowc>:
 800c698:	b082      	sub	sp, #8
 800c69a:	b901      	cbnz	r1, 800c69e <__ascii_mbtowc+0x6>
 800c69c:	a901      	add	r1, sp, #4
 800c69e:	b142      	cbz	r2, 800c6b2 <__ascii_mbtowc+0x1a>
 800c6a0:	b14b      	cbz	r3, 800c6b6 <__ascii_mbtowc+0x1e>
 800c6a2:	7813      	ldrb	r3, [r2, #0]
 800c6a4:	600b      	str	r3, [r1, #0]
 800c6a6:	7812      	ldrb	r2, [r2, #0]
 800c6a8:	1e10      	subs	r0, r2, #0
 800c6aa:	bf18      	it	ne
 800c6ac:	2001      	movne	r0, #1
 800c6ae:	b002      	add	sp, #8
 800c6b0:	4770      	bx	lr
 800c6b2:	4610      	mov	r0, r2
 800c6b4:	e7fb      	b.n	800c6ae <__ascii_mbtowc+0x16>
 800c6b6:	f06f 0001 	mvn.w	r0, #1
 800c6ba:	e7f8      	b.n	800c6ae <__ascii_mbtowc+0x16>

0800c6bc <__sflush_r>:
 800c6bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c4:	0716      	lsls	r6, r2, #28
 800c6c6:	4605      	mov	r5, r0
 800c6c8:	460c      	mov	r4, r1
 800c6ca:	d454      	bmi.n	800c776 <__sflush_r+0xba>
 800c6cc:	684b      	ldr	r3, [r1, #4]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	dc02      	bgt.n	800c6d8 <__sflush_r+0x1c>
 800c6d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	dd48      	ble.n	800c76a <__sflush_r+0xae>
 800c6d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c6da:	2e00      	cmp	r6, #0
 800c6dc:	d045      	beq.n	800c76a <__sflush_r+0xae>
 800c6de:	2300      	movs	r3, #0
 800c6e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c6e4:	682f      	ldr	r7, [r5, #0]
 800c6e6:	6a21      	ldr	r1, [r4, #32]
 800c6e8:	602b      	str	r3, [r5, #0]
 800c6ea:	d030      	beq.n	800c74e <__sflush_r+0x92>
 800c6ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c6ee:	89a3      	ldrh	r3, [r4, #12]
 800c6f0:	0759      	lsls	r1, r3, #29
 800c6f2:	d505      	bpl.n	800c700 <__sflush_r+0x44>
 800c6f4:	6863      	ldr	r3, [r4, #4]
 800c6f6:	1ad2      	subs	r2, r2, r3
 800c6f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c6fa:	b10b      	cbz	r3, 800c700 <__sflush_r+0x44>
 800c6fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c6fe:	1ad2      	subs	r2, r2, r3
 800c700:	2300      	movs	r3, #0
 800c702:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c704:	6a21      	ldr	r1, [r4, #32]
 800c706:	4628      	mov	r0, r5
 800c708:	47b0      	blx	r6
 800c70a:	1c43      	adds	r3, r0, #1
 800c70c:	89a3      	ldrh	r3, [r4, #12]
 800c70e:	d106      	bne.n	800c71e <__sflush_r+0x62>
 800c710:	6829      	ldr	r1, [r5, #0]
 800c712:	291d      	cmp	r1, #29
 800c714:	d82b      	bhi.n	800c76e <__sflush_r+0xb2>
 800c716:	4a2a      	ldr	r2, [pc, #168]	@ (800c7c0 <__sflush_r+0x104>)
 800c718:	410a      	asrs	r2, r1
 800c71a:	07d6      	lsls	r6, r2, #31
 800c71c:	d427      	bmi.n	800c76e <__sflush_r+0xb2>
 800c71e:	2200      	movs	r2, #0
 800c720:	6062      	str	r2, [r4, #4]
 800c722:	04d9      	lsls	r1, r3, #19
 800c724:	6922      	ldr	r2, [r4, #16]
 800c726:	6022      	str	r2, [r4, #0]
 800c728:	d504      	bpl.n	800c734 <__sflush_r+0x78>
 800c72a:	1c42      	adds	r2, r0, #1
 800c72c:	d101      	bne.n	800c732 <__sflush_r+0x76>
 800c72e:	682b      	ldr	r3, [r5, #0]
 800c730:	b903      	cbnz	r3, 800c734 <__sflush_r+0x78>
 800c732:	6560      	str	r0, [r4, #84]	@ 0x54
 800c734:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c736:	602f      	str	r7, [r5, #0]
 800c738:	b1b9      	cbz	r1, 800c76a <__sflush_r+0xae>
 800c73a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c73e:	4299      	cmp	r1, r3
 800c740:	d002      	beq.n	800c748 <__sflush_r+0x8c>
 800c742:	4628      	mov	r0, r5
 800c744:	f000 ff5e 	bl	800d604 <_free_r>
 800c748:	2300      	movs	r3, #0
 800c74a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c74c:	e00d      	b.n	800c76a <__sflush_r+0xae>
 800c74e:	2301      	movs	r3, #1
 800c750:	4628      	mov	r0, r5
 800c752:	47b0      	blx	r6
 800c754:	4602      	mov	r2, r0
 800c756:	1c50      	adds	r0, r2, #1
 800c758:	d1c9      	bne.n	800c6ee <__sflush_r+0x32>
 800c75a:	682b      	ldr	r3, [r5, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d0c6      	beq.n	800c6ee <__sflush_r+0x32>
 800c760:	2b1d      	cmp	r3, #29
 800c762:	d001      	beq.n	800c768 <__sflush_r+0xac>
 800c764:	2b16      	cmp	r3, #22
 800c766:	d11e      	bne.n	800c7a6 <__sflush_r+0xea>
 800c768:	602f      	str	r7, [r5, #0]
 800c76a:	2000      	movs	r0, #0
 800c76c:	e022      	b.n	800c7b4 <__sflush_r+0xf8>
 800c76e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c772:	b21b      	sxth	r3, r3
 800c774:	e01b      	b.n	800c7ae <__sflush_r+0xf2>
 800c776:	690f      	ldr	r7, [r1, #16]
 800c778:	2f00      	cmp	r7, #0
 800c77a:	d0f6      	beq.n	800c76a <__sflush_r+0xae>
 800c77c:	0793      	lsls	r3, r2, #30
 800c77e:	680e      	ldr	r6, [r1, #0]
 800c780:	bf08      	it	eq
 800c782:	694b      	ldreq	r3, [r1, #20]
 800c784:	600f      	str	r7, [r1, #0]
 800c786:	bf18      	it	ne
 800c788:	2300      	movne	r3, #0
 800c78a:	eba6 0807 	sub.w	r8, r6, r7
 800c78e:	608b      	str	r3, [r1, #8]
 800c790:	f1b8 0f00 	cmp.w	r8, #0
 800c794:	dde9      	ble.n	800c76a <__sflush_r+0xae>
 800c796:	6a21      	ldr	r1, [r4, #32]
 800c798:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c79a:	4643      	mov	r3, r8
 800c79c:	463a      	mov	r2, r7
 800c79e:	4628      	mov	r0, r5
 800c7a0:	47b0      	blx	r6
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	dc08      	bgt.n	800c7b8 <__sflush_r+0xfc>
 800c7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7ae:	81a3      	strh	r3, [r4, #12]
 800c7b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b8:	4407      	add	r7, r0
 800c7ba:	eba8 0800 	sub.w	r8, r8, r0
 800c7be:	e7e7      	b.n	800c790 <__sflush_r+0xd4>
 800c7c0:	dfbffffe 	.word	0xdfbffffe

0800c7c4 <_fflush_r>:
 800c7c4:	b538      	push	{r3, r4, r5, lr}
 800c7c6:	690b      	ldr	r3, [r1, #16]
 800c7c8:	4605      	mov	r5, r0
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	b913      	cbnz	r3, 800c7d4 <_fflush_r+0x10>
 800c7ce:	2500      	movs	r5, #0
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	bd38      	pop	{r3, r4, r5, pc}
 800c7d4:	b118      	cbz	r0, 800c7de <_fflush_r+0x1a>
 800c7d6:	6a03      	ldr	r3, [r0, #32]
 800c7d8:	b90b      	cbnz	r3, 800c7de <_fflush_r+0x1a>
 800c7da:	f7fd faff 	bl	8009ddc <__sinit>
 800c7de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d0f3      	beq.n	800c7ce <_fflush_r+0xa>
 800c7e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c7e8:	07d0      	lsls	r0, r2, #31
 800c7ea:	d404      	bmi.n	800c7f6 <_fflush_r+0x32>
 800c7ec:	0599      	lsls	r1, r3, #22
 800c7ee:	d402      	bmi.n	800c7f6 <_fflush_r+0x32>
 800c7f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7f2:	f7fe fa66 	bl	800acc2 <__retarget_lock_acquire_recursive>
 800c7f6:	4628      	mov	r0, r5
 800c7f8:	4621      	mov	r1, r4
 800c7fa:	f7ff ff5f 	bl	800c6bc <__sflush_r>
 800c7fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c800:	07da      	lsls	r2, r3, #31
 800c802:	4605      	mov	r5, r0
 800c804:	d4e4      	bmi.n	800c7d0 <_fflush_r+0xc>
 800c806:	89a3      	ldrh	r3, [r4, #12]
 800c808:	059b      	lsls	r3, r3, #22
 800c80a:	d4e1      	bmi.n	800c7d0 <_fflush_r+0xc>
 800c80c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c80e:	f7fe fa59 	bl	800acc4 <__retarget_lock_release_recursive>
 800c812:	e7dd      	b.n	800c7d0 <_fflush_r+0xc>

0800c814 <__malloc_lock>:
 800c814:	4801      	ldr	r0, [pc, #4]	@ (800c81c <__malloc_lock+0x8>)
 800c816:	f7fe ba54 	b.w	800acc2 <__retarget_lock_acquire_recursive>
 800c81a:	bf00      	nop
 800c81c:	200004f4 	.word	0x200004f4

0800c820 <__malloc_unlock>:
 800c820:	4801      	ldr	r0, [pc, #4]	@ (800c828 <__malloc_unlock+0x8>)
 800c822:	f7fe ba4f 	b.w	800acc4 <__retarget_lock_release_recursive>
 800c826:	bf00      	nop
 800c828:	200004f4 	.word	0x200004f4

0800c82c <_Balloc>:
 800c82c:	b570      	push	{r4, r5, r6, lr}
 800c82e:	69c6      	ldr	r6, [r0, #28]
 800c830:	4604      	mov	r4, r0
 800c832:	460d      	mov	r5, r1
 800c834:	b976      	cbnz	r6, 800c854 <_Balloc+0x28>
 800c836:	2010      	movs	r0, #16
 800c838:	f7ff fe84 	bl	800c544 <malloc>
 800c83c:	4602      	mov	r2, r0
 800c83e:	61e0      	str	r0, [r4, #28]
 800c840:	b920      	cbnz	r0, 800c84c <_Balloc+0x20>
 800c842:	4b18      	ldr	r3, [pc, #96]	@ (800c8a4 <_Balloc+0x78>)
 800c844:	4818      	ldr	r0, [pc, #96]	@ (800c8a8 <_Balloc+0x7c>)
 800c846:	216b      	movs	r1, #107	@ 0x6b
 800c848:	f000 feaa 	bl	800d5a0 <__assert_func>
 800c84c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c850:	6006      	str	r6, [r0, #0]
 800c852:	60c6      	str	r6, [r0, #12]
 800c854:	69e6      	ldr	r6, [r4, #28]
 800c856:	68f3      	ldr	r3, [r6, #12]
 800c858:	b183      	cbz	r3, 800c87c <_Balloc+0x50>
 800c85a:	69e3      	ldr	r3, [r4, #28]
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c862:	b9b8      	cbnz	r0, 800c894 <_Balloc+0x68>
 800c864:	2101      	movs	r1, #1
 800c866:	fa01 f605 	lsl.w	r6, r1, r5
 800c86a:	1d72      	adds	r2, r6, #5
 800c86c:	0092      	lsls	r2, r2, #2
 800c86e:	4620      	mov	r0, r4
 800c870:	f000 feb4 	bl	800d5dc <_calloc_r>
 800c874:	b160      	cbz	r0, 800c890 <_Balloc+0x64>
 800c876:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c87a:	e00e      	b.n	800c89a <_Balloc+0x6e>
 800c87c:	2221      	movs	r2, #33	@ 0x21
 800c87e:	2104      	movs	r1, #4
 800c880:	4620      	mov	r0, r4
 800c882:	f000 feab 	bl	800d5dc <_calloc_r>
 800c886:	69e3      	ldr	r3, [r4, #28]
 800c888:	60f0      	str	r0, [r6, #12]
 800c88a:	68db      	ldr	r3, [r3, #12]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d1e4      	bne.n	800c85a <_Balloc+0x2e>
 800c890:	2000      	movs	r0, #0
 800c892:	bd70      	pop	{r4, r5, r6, pc}
 800c894:	6802      	ldr	r2, [r0, #0]
 800c896:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c89a:	2300      	movs	r3, #0
 800c89c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c8a0:	e7f7      	b.n	800c892 <_Balloc+0x66>
 800c8a2:	bf00      	nop
 800c8a4:	0800db46 	.word	0x0800db46
 800c8a8:	0800dc37 	.word	0x0800dc37

0800c8ac <_Bfree>:
 800c8ac:	b570      	push	{r4, r5, r6, lr}
 800c8ae:	69c6      	ldr	r6, [r0, #28]
 800c8b0:	4605      	mov	r5, r0
 800c8b2:	460c      	mov	r4, r1
 800c8b4:	b976      	cbnz	r6, 800c8d4 <_Bfree+0x28>
 800c8b6:	2010      	movs	r0, #16
 800c8b8:	f7ff fe44 	bl	800c544 <malloc>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	61e8      	str	r0, [r5, #28]
 800c8c0:	b920      	cbnz	r0, 800c8cc <_Bfree+0x20>
 800c8c2:	4b09      	ldr	r3, [pc, #36]	@ (800c8e8 <_Bfree+0x3c>)
 800c8c4:	4809      	ldr	r0, [pc, #36]	@ (800c8ec <_Bfree+0x40>)
 800c8c6:	218f      	movs	r1, #143	@ 0x8f
 800c8c8:	f000 fe6a 	bl	800d5a0 <__assert_func>
 800c8cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8d0:	6006      	str	r6, [r0, #0]
 800c8d2:	60c6      	str	r6, [r0, #12]
 800c8d4:	b13c      	cbz	r4, 800c8e6 <_Bfree+0x3a>
 800c8d6:	69eb      	ldr	r3, [r5, #28]
 800c8d8:	6862      	ldr	r2, [r4, #4]
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8e0:	6021      	str	r1, [r4, #0]
 800c8e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c8e6:	bd70      	pop	{r4, r5, r6, pc}
 800c8e8:	0800db46 	.word	0x0800db46
 800c8ec:	0800dc37 	.word	0x0800dc37

0800c8f0 <__multadd>:
 800c8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8f4:	690d      	ldr	r5, [r1, #16]
 800c8f6:	4607      	mov	r7, r0
 800c8f8:	460c      	mov	r4, r1
 800c8fa:	461e      	mov	r6, r3
 800c8fc:	f101 0c14 	add.w	ip, r1, #20
 800c900:	2000      	movs	r0, #0
 800c902:	f8dc 3000 	ldr.w	r3, [ip]
 800c906:	b299      	uxth	r1, r3
 800c908:	fb02 6101 	mla	r1, r2, r1, r6
 800c90c:	0c1e      	lsrs	r6, r3, #16
 800c90e:	0c0b      	lsrs	r3, r1, #16
 800c910:	fb02 3306 	mla	r3, r2, r6, r3
 800c914:	b289      	uxth	r1, r1
 800c916:	3001      	adds	r0, #1
 800c918:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c91c:	4285      	cmp	r5, r0
 800c91e:	f84c 1b04 	str.w	r1, [ip], #4
 800c922:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c926:	dcec      	bgt.n	800c902 <__multadd+0x12>
 800c928:	b30e      	cbz	r6, 800c96e <__multadd+0x7e>
 800c92a:	68a3      	ldr	r3, [r4, #8]
 800c92c:	42ab      	cmp	r3, r5
 800c92e:	dc19      	bgt.n	800c964 <__multadd+0x74>
 800c930:	6861      	ldr	r1, [r4, #4]
 800c932:	4638      	mov	r0, r7
 800c934:	3101      	adds	r1, #1
 800c936:	f7ff ff79 	bl	800c82c <_Balloc>
 800c93a:	4680      	mov	r8, r0
 800c93c:	b928      	cbnz	r0, 800c94a <__multadd+0x5a>
 800c93e:	4602      	mov	r2, r0
 800c940:	4b0c      	ldr	r3, [pc, #48]	@ (800c974 <__multadd+0x84>)
 800c942:	480d      	ldr	r0, [pc, #52]	@ (800c978 <__multadd+0x88>)
 800c944:	21ba      	movs	r1, #186	@ 0xba
 800c946:	f000 fe2b 	bl	800d5a0 <__assert_func>
 800c94a:	6922      	ldr	r2, [r4, #16]
 800c94c:	3202      	adds	r2, #2
 800c94e:	f104 010c 	add.w	r1, r4, #12
 800c952:	0092      	lsls	r2, r2, #2
 800c954:	300c      	adds	r0, #12
 800c956:	f7fe f9b6 	bl	800acc6 <memcpy>
 800c95a:	4621      	mov	r1, r4
 800c95c:	4638      	mov	r0, r7
 800c95e:	f7ff ffa5 	bl	800c8ac <_Bfree>
 800c962:	4644      	mov	r4, r8
 800c964:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c968:	3501      	adds	r5, #1
 800c96a:	615e      	str	r6, [r3, #20]
 800c96c:	6125      	str	r5, [r4, #16]
 800c96e:	4620      	mov	r0, r4
 800c970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c974:	0800dbb5 	.word	0x0800dbb5
 800c978:	0800dc37 	.word	0x0800dc37

0800c97c <__s2b>:
 800c97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c980:	460c      	mov	r4, r1
 800c982:	4615      	mov	r5, r2
 800c984:	461f      	mov	r7, r3
 800c986:	2209      	movs	r2, #9
 800c988:	3308      	adds	r3, #8
 800c98a:	4606      	mov	r6, r0
 800c98c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c990:	2100      	movs	r1, #0
 800c992:	2201      	movs	r2, #1
 800c994:	429a      	cmp	r2, r3
 800c996:	db09      	blt.n	800c9ac <__s2b+0x30>
 800c998:	4630      	mov	r0, r6
 800c99a:	f7ff ff47 	bl	800c82c <_Balloc>
 800c99e:	b940      	cbnz	r0, 800c9b2 <__s2b+0x36>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	4b19      	ldr	r3, [pc, #100]	@ (800ca08 <__s2b+0x8c>)
 800c9a4:	4819      	ldr	r0, [pc, #100]	@ (800ca0c <__s2b+0x90>)
 800c9a6:	21d3      	movs	r1, #211	@ 0xd3
 800c9a8:	f000 fdfa 	bl	800d5a0 <__assert_func>
 800c9ac:	0052      	lsls	r2, r2, #1
 800c9ae:	3101      	adds	r1, #1
 800c9b0:	e7f0      	b.n	800c994 <__s2b+0x18>
 800c9b2:	9b08      	ldr	r3, [sp, #32]
 800c9b4:	6143      	str	r3, [r0, #20]
 800c9b6:	2d09      	cmp	r5, #9
 800c9b8:	f04f 0301 	mov.w	r3, #1
 800c9bc:	6103      	str	r3, [r0, #16]
 800c9be:	dd16      	ble.n	800c9ee <__s2b+0x72>
 800c9c0:	f104 0909 	add.w	r9, r4, #9
 800c9c4:	46c8      	mov	r8, r9
 800c9c6:	442c      	add	r4, r5
 800c9c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c9cc:	4601      	mov	r1, r0
 800c9ce:	3b30      	subs	r3, #48	@ 0x30
 800c9d0:	220a      	movs	r2, #10
 800c9d2:	4630      	mov	r0, r6
 800c9d4:	f7ff ff8c 	bl	800c8f0 <__multadd>
 800c9d8:	45a0      	cmp	r8, r4
 800c9da:	d1f5      	bne.n	800c9c8 <__s2b+0x4c>
 800c9dc:	f1a5 0408 	sub.w	r4, r5, #8
 800c9e0:	444c      	add	r4, r9
 800c9e2:	1b2d      	subs	r5, r5, r4
 800c9e4:	1963      	adds	r3, r4, r5
 800c9e6:	42bb      	cmp	r3, r7
 800c9e8:	db04      	blt.n	800c9f4 <__s2b+0x78>
 800c9ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9ee:	340a      	adds	r4, #10
 800c9f0:	2509      	movs	r5, #9
 800c9f2:	e7f6      	b.n	800c9e2 <__s2b+0x66>
 800c9f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c9f8:	4601      	mov	r1, r0
 800c9fa:	3b30      	subs	r3, #48	@ 0x30
 800c9fc:	220a      	movs	r2, #10
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f7ff ff76 	bl	800c8f0 <__multadd>
 800ca04:	e7ee      	b.n	800c9e4 <__s2b+0x68>
 800ca06:	bf00      	nop
 800ca08:	0800dbb5 	.word	0x0800dbb5
 800ca0c:	0800dc37 	.word	0x0800dc37

0800ca10 <__hi0bits>:
 800ca10:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ca14:	4603      	mov	r3, r0
 800ca16:	bf36      	itet	cc
 800ca18:	0403      	lslcc	r3, r0, #16
 800ca1a:	2000      	movcs	r0, #0
 800ca1c:	2010      	movcc	r0, #16
 800ca1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ca22:	bf3c      	itt	cc
 800ca24:	021b      	lslcc	r3, r3, #8
 800ca26:	3008      	addcc	r0, #8
 800ca28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ca2c:	bf3c      	itt	cc
 800ca2e:	011b      	lslcc	r3, r3, #4
 800ca30:	3004      	addcc	r0, #4
 800ca32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca36:	bf3c      	itt	cc
 800ca38:	009b      	lslcc	r3, r3, #2
 800ca3a:	3002      	addcc	r0, #2
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	db05      	blt.n	800ca4c <__hi0bits+0x3c>
 800ca40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ca44:	f100 0001 	add.w	r0, r0, #1
 800ca48:	bf08      	it	eq
 800ca4a:	2020      	moveq	r0, #32
 800ca4c:	4770      	bx	lr

0800ca4e <__lo0bits>:
 800ca4e:	6803      	ldr	r3, [r0, #0]
 800ca50:	4602      	mov	r2, r0
 800ca52:	f013 0007 	ands.w	r0, r3, #7
 800ca56:	d00b      	beq.n	800ca70 <__lo0bits+0x22>
 800ca58:	07d9      	lsls	r1, r3, #31
 800ca5a:	d421      	bmi.n	800caa0 <__lo0bits+0x52>
 800ca5c:	0798      	lsls	r0, r3, #30
 800ca5e:	bf49      	itett	mi
 800ca60:	085b      	lsrmi	r3, r3, #1
 800ca62:	089b      	lsrpl	r3, r3, #2
 800ca64:	2001      	movmi	r0, #1
 800ca66:	6013      	strmi	r3, [r2, #0]
 800ca68:	bf5c      	itt	pl
 800ca6a:	6013      	strpl	r3, [r2, #0]
 800ca6c:	2002      	movpl	r0, #2
 800ca6e:	4770      	bx	lr
 800ca70:	b299      	uxth	r1, r3
 800ca72:	b909      	cbnz	r1, 800ca78 <__lo0bits+0x2a>
 800ca74:	0c1b      	lsrs	r3, r3, #16
 800ca76:	2010      	movs	r0, #16
 800ca78:	b2d9      	uxtb	r1, r3
 800ca7a:	b909      	cbnz	r1, 800ca80 <__lo0bits+0x32>
 800ca7c:	3008      	adds	r0, #8
 800ca7e:	0a1b      	lsrs	r3, r3, #8
 800ca80:	0719      	lsls	r1, r3, #28
 800ca82:	bf04      	itt	eq
 800ca84:	091b      	lsreq	r3, r3, #4
 800ca86:	3004      	addeq	r0, #4
 800ca88:	0799      	lsls	r1, r3, #30
 800ca8a:	bf04      	itt	eq
 800ca8c:	089b      	lsreq	r3, r3, #2
 800ca8e:	3002      	addeq	r0, #2
 800ca90:	07d9      	lsls	r1, r3, #31
 800ca92:	d403      	bmi.n	800ca9c <__lo0bits+0x4e>
 800ca94:	085b      	lsrs	r3, r3, #1
 800ca96:	f100 0001 	add.w	r0, r0, #1
 800ca9a:	d003      	beq.n	800caa4 <__lo0bits+0x56>
 800ca9c:	6013      	str	r3, [r2, #0]
 800ca9e:	4770      	bx	lr
 800caa0:	2000      	movs	r0, #0
 800caa2:	4770      	bx	lr
 800caa4:	2020      	movs	r0, #32
 800caa6:	4770      	bx	lr

0800caa8 <__i2b>:
 800caa8:	b510      	push	{r4, lr}
 800caaa:	460c      	mov	r4, r1
 800caac:	2101      	movs	r1, #1
 800caae:	f7ff febd 	bl	800c82c <_Balloc>
 800cab2:	4602      	mov	r2, r0
 800cab4:	b928      	cbnz	r0, 800cac2 <__i2b+0x1a>
 800cab6:	4b05      	ldr	r3, [pc, #20]	@ (800cacc <__i2b+0x24>)
 800cab8:	4805      	ldr	r0, [pc, #20]	@ (800cad0 <__i2b+0x28>)
 800caba:	f240 1145 	movw	r1, #325	@ 0x145
 800cabe:	f000 fd6f 	bl	800d5a0 <__assert_func>
 800cac2:	2301      	movs	r3, #1
 800cac4:	6144      	str	r4, [r0, #20]
 800cac6:	6103      	str	r3, [r0, #16]
 800cac8:	bd10      	pop	{r4, pc}
 800caca:	bf00      	nop
 800cacc:	0800dbb5 	.word	0x0800dbb5
 800cad0:	0800dc37 	.word	0x0800dc37

0800cad4 <__multiply>:
 800cad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad8:	4614      	mov	r4, r2
 800cada:	690a      	ldr	r2, [r1, #16]
 800cadc:	6923      	ldr	r3, [r4, #16]
 800cade:	429a      	cmp	r2, r3
 800cae0:	bfa8      	it	ge
 800cae2:	4623      	movge	r3, r4
 800cae4:	460f      	mov	r7, r1
 800cae6:	bfa4      	itt	ge
 800cae8:	460c      	movge	r4, r1
 800caea:	461f      	movge	r7, r3
 800caec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800caf0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800caf4:	68a3      	ldr	r3, [r4, #8]
 800caf6:	6861      	ldr	r1, [r4, #4]
 800caf8:	eb0a 0609 	add.w	r6, sl, r9
 800cafc:	42b3      	cmp	r3, r6
 800cafe:	b085      	sub	sp, #20
 800cb00:	bfb8      	it	lt
 800cb02:	3101      	addlt	r1, #1
 800cb04:	f7ff fe92 	bl	800c82c <_Balloc>
 800cb08:	b930      	cbnz	r0, 800cb18 <__multiply+0x44>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	4b44      	ldr	r3, [pc, #272]	@ (800cc20 <__multiply+0x14c>)
 800cb0e:	4845      	ldr	r0, [pc, #276]	@ (800cc24 <__multiply+0x150>)
 800cb10:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cb14:	f000 fd44 	bl	800d5a0 <__assert_func>
 800cb18:	f100 0514 	add.w	r5, r0, #20
 800cb1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cb20:	462b      	mov	r3, r5
 800cb22:	2200      	movs	r2, #0
 800cb24:	4543      	cmp	r3, r8
 800cb26:	d321      	bcc.n	800cb6c <__multiply+0x98>
 800cb28:	f107 0114 	add.w	r1, r7, #20
 800cb2c:	f104 0214 	add.w	r2, r4, #20
 800cb30:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cb34:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cb38:	9302      	str	r3, [sp, #8]
 800cb3a:	1b13      	subs	r3, r2, r4
 800cb3c:	3b15      	subs	r3, #21
 800cb3e:	f023 0303 	bic.w	r3, r3, #3
 800cb42:	3304      	adds	r3, #4
 800cb44:	f104 0715 	add.w	r7, r4, #21
 800cb48:	42ba      	cmp	r2, r7
 800cb4a:	bf38      	it	cc
 800cb4c:	2304      	movcc	r3, #4
 800cb4e:	9301      	str	r3, [sp, #4]
 800cb50:	9b02      	ldr	r3, [sp, #8]
 800cb52:	9103      	str	r1, [sp, #12]
 800cb54:	428b      	cmp	r3, r1
 800cb56:	d80c      	bhi.n	800cb72 <__multiply+0x9e>
 800cb58:	2e00      	cmp	r6, #0
 800cb5a:	dd03      	ble.n	800cb64 <__multiply+0x90>
 800cb5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d05b      	beq.n	800cc1c <__multiply+0x148>
 800cb64:	6106      	str	r6, [r0, #16]
 800cb66:	b005      	add	sp, #20
 800cb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb6c:	f843 2b04 	str.w	r2, [r3], #4
 800cb70:	e7d8      	b.n	800cb24 <__multiply+0x50>
 800cb72:	f8b1 a000 	ldrh.w	sl, [r1]
 800cb76:	f1ba 0f00 	cmp.w	sl, #0
 800cb7a:	d024      	beq.n	800cbc6 <__multiply+0xf2>
 800cb7c:	f104 0e14 	add.w	lr, r4, #20
 800cb80:	46a9      	mov	r9, r5
 800cb82:	f04f 0c00 	mov.w	ip, #0
 800cb86:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cb8a:	f8d9 3000 	ldr.w	r3, [r9]
 800cb8e:	fa1f fb87 	uxth.w	fp, r7
 800cb92:	b29b      	uxth	r3, r3
 800cb94:	fb0a 330b 	mla	r3, sl, fp, r3
 800cb98:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cb9c:	f8d9 7000 	ldr.w	r7, [r9]
 800cba0:	4463      	add	r3, ip
 800cba2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cba6:	fb0a c70b 	mla	r7, sl, fp, ip
 800cbaa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cbb4:	4572      	cmp	r2, lr
 800cbb6:	f849 3b04 	str.w	r3, [r9], #4
 800cbba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cbbe:	d8e2      	bhi.n	800cb86 <__multiply+0xb2>
 800cbc0:	9b01      	ldr	r3, [sp, #4]
 800cbc2:	f845 c003 	str.w	ip, [r5, r3]
 800cbc6:	9b03      	ldr	r3, [sp, #12]
 800cbc8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cbcc:	3104      	adds	r1, #4
 800cbce:	f1b9 0f00 	cmp.w	r9, #0
 800cbd2:	d021      	beq.n	800cc18 <__multiply+0x144>
 800cbd4:	682b      	ldr	r3, [r5, #0]
 800cbd6:	f104 0c14 	add.w	ip, r4, #20
 800cbda:	46ae      	mov	lr, r5
 800cbdc:	f04f 0a00 	mov.w	sl, #0
 800cbe0:	f8bc b000 	ldrh.w	fp, [ip]
 800cbe4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cbe8:	fb09 770b 	mla	r7, r9, fp, r7
 800cbec:	4457      	add	r7, sl
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cbf4:	f84e 3b04 	str.w	r3, [lr], #4
 800cbf8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cbfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc00:	f8be 3000 	ldrh.w	r3, [lr]
 800cc04:	fb09 330a 	mla	r3, r9, sl, r3
 800cc08:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cc0c:	4562      	cmp	r2, ip
 800cc0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc12:	d8e5      	bhi.n	800cbe0 <__multiply+0x10c>
 800cc14:	9f01      	ldr	r7, [sp, #4]
 800cc16:	51eb      	str	r3, [r5, r7]
 800cc18:	3504      	adds	r5, #4
 800cc1a:	e799      	b.n	800cb50 <__multiply+0x7c>
 800cc1c:	3e01      	subs	r6, #1
 800cc1e:	e79b      	b.n	800cb58 <__multiply+0x84>
 800cc20:	0800dbb5 	.word	0x0800dbb5
 800cc24:	0800dc37 	.word	0x0800dc37

0800cc28 <__pow5mult>:
 800cc28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc2c:	4615      	mov	r5, r2
 800cc2e:	f012 0203 	ands.w	r2, r2, #3
 800cc32:	4607      	mov	r7, r0
 800cc34:	460e      	mov	r6, r1
 800cc36:	d007      	beq.n	800cc48 <__pow5mult+0x20>
 800cc38:	4c25      	ldr	r4, [pc, #148]	@ (800ccd0 <__pow5mult+0xa8>)
 800cc3a:	3a01      	subs	r2, #1
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cc42:	f7ff fe55 	bl	800c8f0 <__multadd>
 800cc46:	4606      	mov	r6, r0
 800cc48:	10ad      	asrs	r5, r5, #2
 800cc4a:	d03d      	beq.n	800ccc8 <__pow5mult+0xa0>
 800cc4c:	69fc      	ldr	r4, [r7, #28]
 800cc4e:	b97c      	cbnz	r4, 800cc70 <__pow5mult+0x48>
 800cc50:	2010      	movs	r0, #16
 800cc52:	f7ff fc77 	bl	800c544 <malloc>
 800cc56:	4602      	mov	r2, r0
 800cc58:	61f8      	str	r0, [r7, #28]
 800cc5a:	b928      	cbnz	r0, 800cc68 <__pow5mult+0x40>
 800cc5c:	4b1d      	ldr	r3, [pc, #116]	@ (800ccd4 <__pow5mult+0xac>)
 800cc5e:	481e      	ldr	r0, [pc, #120]	@ (800ccd8 <__pow5mult+0xb0>)
 800cc60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cc64:	f000 fc9c 	bl	800d5a0 <__assert_func>
 800cc68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cc6c:	6004      	str	r4, [r0, #0]
 800cc6e:	60c4      	str	r4, [r0, #12]
 800cc70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cc74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cc78:	b94c      	cbnz	r4, 800cc8e <__pow5mult+0x66>
 800cc7a:	f240 2171 	movw	r1, #625	@ 0x271
 800cc7e:	4638      	mov	r0, r7
 800cc80:	f7ff ff12 	bl	800caa8 <__i2b>
 800cc84:	2300      	movs	r3, #0
 800cc86:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	6003      	str	r3, [r0, #0]
 800cc8e:	f04f 0900 	mov.w	r9, #0
 800cc92:	07eb      	lsls	r3, r5, #31
 800cc94:	d50a      	bpl.n	800ccac <__pow5mult+0x84>
 800cc96:	4631      	mov	r1, r6
 800cc98:	4622      	mov	r2, r4
 800cc9a:	4638      	mov	r0, r7
 800cc9c:	f7ff ff1a 	bl	800cad4 <__multiply>
 800cca0:	4631      	mov	r1, r6
 800cca2:	4680      	mov	r8, r0
 800cca4:	4638      	mov	r0, r7
 800cca6:	f7ff fe01 	bl	800c8ac <_Bfree>
 800ccaa:	4646      	mov	r6, r8
 800ccac:	106d      	asrs	r5, r5, #1
 800ccae:	d00b      	beq.n	800ccc8 <__pow5mult+0xa0>
 800ccb0:	6820      	ldr	r0, [r4, #0]
 800ccb2:	b938      	cbnz	r0, 800ccc4 <__pow5mult+0x9c>
 800ccb4:	4622      	mov	r2, r4
 800ccb6:	4621      	mov	r1, r4
 800ccb8:	4638      	mov	r0, r7
 800ccba:	f7ff ff0b 	bl	800cad4 <__multiply>
 800ccbe:	6020      	str	r0, [r4, #0]
 800ccc0:	f8c0 9000 	str.w	r9, [r0]
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	e7e4      	b.n	800cc92 <__pow5mult+0x6a>
 800ccc8:	4630      	mov	r0, r6
 800ccca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccce:	bf00      	nop
 800ccd0:	0800dc90 	.word	0x0800dc90
 800ccd4:	0800db46 	.word	0x0800db46
 800ccd8:	0800dc37 	.word	0x0800dc37

0800ccdc <__lshift>:
 800ccdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cce0:	460c      	mov	r4, r1
 800cce2:	6849      	ldr	r1, [r1, #4]
 800cce4:	6923      	ldr	r3, [r4, #16]
 800cce6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ccea:	68a3      	ldr	r3, [r4, #8]
 800ccec:	4607      	mov	r7, r0
 800ccee:	4691      	mov	r9, r2
 800ccf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ccf4:	f108 0601 	add.w	r6, r8, #1
 800ccf8:	42b3      	cmp	r3, r6
 800ccfa:	db0b      	blt.n	800cd14 <__lshift+0x38>
 800ccfc:	4638      	mov	r0, r7
 800ccfe:	f7ff fd95 	bl	800c82c <_Balloc>
 800cd02:	4605      	mov	r5, r0
 800cd04:	b948      	cbnz	r0, 800cd1a <__lshift+0x3e>
 800cd06:	4602      	mov	r2, r0
 800cd08:	4b28      	ldr	r3, [pc, #160]	@ (800cdac <__lshift+0xd0>)
 800cd0a:	4829      	ldr	r0, [pc, #164]	@ (800cdb0 <__lshift+0xd4>)
 800cd0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cd10:	f000 fc46 	bl	800d5a0 <__assert_func>
 800cd14:	3101      	adds	r1, #1
 800cd16:	005b      	lsls	r3, r3, #1
 800cd18:	e7ee      	b.n	800ccf8 <__lshift+0x1c>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	f100 0114 	add.w	r1, r0, #20
 800cd20:	f100 0210 	add.w	r2, r0, #16
 800cd24:	4618      	mov	r0, r3
 800cd26:	4553      	cmp	r3, sl
 800cd28:	db33      	blt.n	800cd92 <__lshift+0xb6>
 800cd2a:	6920      	ldr	r0, [r4, #16]
 800cd2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd30:	f104 0314 	add.w	r3, r4, #20
 800cd34:	f019 091f 	ands.w	r9, r9, #31
 800cd38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cd3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cd40:	d02b      	beq.n	800cd9a <__lshift+0xbe>
 800cd42:	f1c9 0e20 	rsb	lr, r9, #32
 800cd46:	468a      	mov	sl, r1
 800cd48:	2200      	movs	r2, #0
 800cd4a:	6818      	ldr	r0, [r3, #0]
 800cd4c:	fa00 f009 	lsl.w	r0, r0, r9
 800cd50:	4310      	orrs	r0, r2
 800cd52:	f84a 0b04 	str.w	r0, [sl], #4
 800cd56:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd5a:	459c      	cmp	ip, r3
 800cd5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cd60:	d8f3      	bhi.n	800cd4a <__lshift+0x6e>
 800cd62:	ebac 0304 	sub.w	r3, ip, r4
 800cd66:	3b15      	subs	r3, #21
 800cd68:	f023 0303 	bic.w	r3, r3, #3
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	f104 0015 	add.w	r0, r4, #21
 800cd72:	4584      	cmp	ip, r0
 800cd74:	bf38      	it	cc
 800cd76:	2304      	movcc	r3, #4
 800cd78:	50ca      	str	r2, [r1, r3]
 800cd7a:	b10a      	cbz	r2, 800cd80 <__lshift+0xa4>
 800cd7c:	f108 0602 	add.w	r6, r8, #2
 800cd80:	3e01      	subs	r6, #1
 800cd82:	4638      	mov	r0, r7
 800cd84:	612e      	str	r6, [r5, #16]
 800cd86:	4621      	mov	r1, r4
 800cd88:	f7ff fd90 	bl	800c8ac <_Bfree>
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd92:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd96:	3301      	adds	r3, #1
 800cd98:	e7c5      	b.n	800cd26 <__lshift+0x4a>
 800cd9a:	3904      	subs	r1, #4
 800cd9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cda0:	f841 2f04 	str.w	r2, [r1, #4]!
 800cda4:	459c      	cmp	ip, r3
 800cda6:	d8f9      	bhi.n	800cd9c <__lshift+0xc0>
 800cda8:	e7ea      	b.n	800cd80 <__lshift+0xa4>
 800cdaa:	bf00      	nop
 800cdac:	0800dbb5 	.word	0x0800dbb5
 800cdb0:	0800dc37 	.word	0x0800dc37

0800cdb4 <__mcmp>:
 800cdb4:	690a      	ldr	r2, [r1, #16]
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	6900      	ldr	r0, [r0, #16]
 800cdba:	1a80      	subs	r0, r0, r2
 800cdbc:	b530      	push	{r4, r5, lr}
 800cdbe:	d10e      	bne.n	800cdde <__mcmp+0x2a>
 800cdc0:	3314      	adds	r3, #20
 800cdc2:	3114      	adds	r1, #20
 800cdc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cdc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cdcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cdd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cdd4:	4295      	cmp	r5, r2
 800cdd6:	d003      	beq.n	800cde0 <__mcmp+0x2c>
 800cdd8:	d205      	bcs.n	800cde6 <__mcmp+0x32>
 800cdda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cdde:	bd30      	pop	{r4, r5, pc}
 800cde0:	42a3      	cmp	r3, r4
 800cde2:	d3f3      	bcc.n	800cdcc <__mcmp+0x18>
 800cde4:	e7fb      	b.n	800cdde <__mcmp+0x2a>
 800cde6:	2001      	movs	r0, #1
 800cde8:	e7f9      	b.n	800cdde <__mcmp+0x2a>
	...

0800cdec <__mdiff>:
 800cdec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf0:	4689      	mov	r9, r1
 800cdf2:	4606      	mov	r6, r0
 800cdf4:	4611      	mov	r1, r2
 800cdf6:	4648      	mov	r0, r9
 800cdf8:	4614      	mov	r4, r2
 800cdfa:	f7ff ffdb 	bl	800cdb4 <__mcmp>
 800cdfe:	1e05      	subs	r5, r0, #0
 800ce00:	d112      	bne.n	800ce28 <__mdiff+0x3c>
 800ce02:	4629      	mov	r1, r5
 800ce04:	4630      	mov	r0, r6
 800ce06:	f7ff fd11 	bl	800c82c <_Balloc>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	b928      	cbnz	r0, 800ce1a <__mdiff+0x2e>
 800ce0e:	4b3f      	ldr	r3, [pc, #252]	@ (800cf0c <__mdiff+0x120>)
 800ce10:	f240 2137 	movw	r1, #567	@ 0x237
 800ce14:	483e      	ldr	r0, [pc, #248]	@ (800cf10 <__mdiff+0x124>)
 800ce16:	f000 fbc3 	bl	800d5a0 <__assert_func>
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ce20:	4610      	mov	r0, r2
 800ce22:	b003      	add	sp, #12
 800ce24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce28:	bfbc      	itt	lt
 800ce2a:	464b      	movlt	r3, r9
 800ce2c:	46a1      	movlt	r9, r4
 800ce2e:	4630      	mov	r0, r6
 800ce30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ce34:	bfba      	itte	lt
 800ce36:	461c      	movlt	r4, r3
 800ce38:	2501      	movlt	r5, #1
 800ce3a:	2500      	movge	r5, #0
 800ce3c:	f7ff fcf6 	bl	800c82c <_Balloc>
 800ce40:	4602      	mov	r2, r0
 800ce42:	b918      	cbnz	r0, 800ce4c <__mdiff+0x60>
 800ce44:	4b31      	ldr	r3, [pc, #196]	@ (800cf0c <__mdiff+0x120>)
 800ce46:	f240 2145 	movw	r1, #581	@ 0x245
 800ce4a:	e7e3      	b.n	800ce14 <__mdiff+0x28>
 800ce4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ce50:	6926      	ldr	r6, [r4, #16]
 800ce52:	60c5      	str	r5, [r0, #12]
 800ce54:	f109 0310 	add.w	r3, r9, #16
 800ce58:	f109 0514 	add.w	r5, r9, #20
 800ce5c:	f104 0e14 	add.w	lr, r4, #20
 800ce60:	f100 0b14 	add.w	fp, r0, #20
 800ce64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ce68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ce6c:	9301      	str	r3, [sp, #4]
 800ce6e:	46d9      	mov	r9, fp
 800ce70:	f04f 0c00 	mov.w	ip, #0
 800ce74:	9b01      	ldr	r3, [sp, #4]
 800ce76:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ce7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ce7e:	9301      	str	r3, [sp, #4]
 800ce80:	fa1f f38a 	uxth.w	r3, sl
 800ce84:	4619      	mov	r1, r3
 800ce86:	b283      	uxth	r3, r0
 800ce88:	1acb      	subs	r3, r1, r3
 800ce8a:	0c00      	lsrs	r0, r0, #16
 800ce8c:	4463      	add	r3, ip
 800ce8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ce92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ce9c:	4576      	cmp	r6, lr
 800ce9e:	f849 3b04 	str.w	r3, [r9], #4
 800cea2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cea6:	d8e5      	bhi.n	800ce74 <__mdiff+0x88>
 800cea8:	1b33      	subs	r3, r6, r4
 800ceaa:	3b15      	subs	r3, #21
 800ceac:	f023 0303 	bic.w	r3, r3, #3
 800ceb0:	3415      	adds	r4, #21
 800ceb2:	3304      	adds	r3, #4
 800ceb4:	42a6      	cmp	r6, r4
 800ceb6:	bf38      	it	cc
 800ceb8:	2304      	movcc	r3, #4
 800ceba:	441d      	add	r5, r3
 800cebc:	445b      	add	r3, fp
 800cebe:	461e      	mov	r6, r3
 800cec0:	462c      	mov	r4, r5
 800cec2:	4544      	cmp	r4, r8
 800cec4:	d30e      	bcc.n	800cee4 <__mdiff+0xf8>
 800cec6:	f108 0103 	add.w	r1, r8, #3
 800ceca:	1b49      	subs	r1, r1, r5
 800cecc:	f021 0103 	bic.w	r1, r1, #3
 800ced0:	3d03      	subs	r5, #3
 800ced2:	45a8      	cmp	r8, r5
 800ced4:	bf38      	it	cc
 800ced6:	2100      	movcc	r1, #0
 800ced8:	440b      	add	r3, r1
 800ceda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cede:	b191      	cbz	r1, 800cf06 <__mdiff+0x11a>
 800cee0:	6117      	str	r7, [r2, #16]
 800cee2:	e79d      	b.n	800ce20 <__mdiff+0x34>
 800cee4:	f854 1b04 	ldr.w	r1, [r4], #4
 800cee8:	46e6      	mov	lr, ip
 800ceea:	0c08      	lsrs	r0, r1, #16
 800ceec:	fa1c fc81 	uxtah	ip, ip, r1
 800cef0:	4471      	add	r1, lr
 800cef2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cef6:	b289      	uxth	r1, r1
 800cef8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cefc:	f846 1b04 	str.w	r1, [r6], #4
 800cf00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cf04:	e7dd      	b.n	800cec2 <__mdiff+0xd6>
 800cf06:	3f01      	subs	r7, #1
 800cf08:	e7e7      	b.n	800ceda <__mdiff+0xee>
 800cf0a:	bf00      	nop
 800cf0c:	0800dbb5 	.word	0x0800dbb5
 800cf10:	0800dc37 	.word	0x0800dc37

0800cf14 <__ulp>:
 800cf14:	b082      	sub	sp, #8
 800cf16:	ed8d 0b00 	vstr	d0, [sp]
 800cf1a:	9a01      	ldr	r2, [sp, #4]
 800cf1c:	4b0f      	ldr	r3, [pc, #60]	@ (800cf5c <__ulp+0x48>)
 800cf1e:	4013      	ands	r3, r2
 800cf20:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	dc08      	bgt.n	800cf3a <__ulp+0x26>
 800cf28:	425b      	negs	r3, r3
 800cf2a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cf2e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cf32:	da04      	bge.n	800cf3e <__ulp+0x2a>
 800cf34:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cf38:	4113      	asrs	r3, r2
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	e008      	b.n	800cf50 <__ulp+0x3c>
 800cf3e:	f1a2 0314 	sub.w	r3, r2, #20
 800cf42:	2b1e      	cmp	r3, #30
 800cf44:	bfda      	itte	le
 800cf46:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cf4a:	40da      	lsrle	r2, r3
 800cf4c:	2201      	movgt	r2, #1
 800cf4e:	2300      	movs	r3, #0
 800cf50:	4619      	mov	r1, r3
 800cf52:	4610      	mov	r0, r2
 800cf54:	ec41 0b10 	vmov	d0, r0, r1
 800cf58:	b002      	add	sp, #8
 800cf5a:	4770      	bx	lr
 800cf5c:	7ff00000 	.word	0x7ff00000

0800cf60 <__b2d>:
 800cf60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf64:	6906      	ldr	r6, [r0, #16]
 800cf66:	f100 0814 	add.w	r8, r0, #20
 800cf6a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cf6e:	1f37      	subs	r7, r6, #4
 800cf70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cf74:	4610      	mov	r0, r2
 800cf76:	f7ff fd4b 	bl	800ca10 <__hi0bits>
 800cf7a:	f1c0 0320 	rsb	r3, r0, #32
 800cf7e:	280a      	cmp	r0, #10
 800cf80:	600b      	str	r3, [r1, #0]
 800cf82:	491b      	ldr	r1, [pc, #108]	@ (800cff0 <__b2d+0x90>)
 800cf84:	dc15      	bgt.n	800cfb2 <__b2d+0x52>
 800cf86:	f1c0 0c0b 	rsb	ip, r0, #11
 800cf8a:	fa22 f30c 	lsr.w	r3, r2, ip
 800cf8e:	45b8      	cmp	r8, r7
 800cf90:	ea43 0501 	orr.w	r5, r3, r1
 800cf94:	bf34      	ite	cc
 800cf96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cf9a:	2300      	movcs	r3, #0
 800cf9c:	3015      	adds	r0, #21
 800cf9e:	fa02 f000 	lsl.w	r0, r2, r0
 800cfa2:	fa23 f30c 	lsr.w	r3, r3, ip
 800cfa6:	4303      	orrs	r3, r0
 800cfa8:	461c      	mov	r4, r3
 800cfaa:	ec45 4b10 	vmov	d0, r4, r5
 800cfae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfb2:	45b8      	cmp	r8, r7
 800cfb4:	bf3a      	itte	cc
 800cfb6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cfba:	f1a6 0708 	subcc.w	r7, r6, #8
 800cfbe:	2300      	movcs	r3, #0
 800cfc0:	380b      	subs	r0, #11
 800cfc2:	d012      	beq.n	800cfea <__b2d+0x8a>
 800cfc4:	f1c0 0120 	rsb	r1, r0, #32
 800cfc8:	fa23 f401 	lsr.w	r4, r3, r1
 800cfcc:	4082      	lsls	r2, r0
 800cfce:	4322      	orrs	r2, r4
 800cfd0:	4547      	cmp	r7, r8
 800cfd2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cfd6:	bf8c      	ite	hi
 800cfd8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cfdc:	2200      	movls	r2, #0
 800cfde:	4083      	lsls	r3, r0
 800cfe0:	40ca      	lsrs	r2, r1
 800cfe2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	e7de      	b.n	800cfa8 <__b2d+0x48>
 800cfea:	ea42 0501 	orr.w	r5, r2, r1
 800cfee:	e7db      	b.n	800cfa8 <__b2d+0x48>
 800cff0:	3ff00000 	.word	0x3ff00000

0800cff4 <__d2b>:
 800cff4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cff8:	460f      	mov	r7, r1
 800cffa:	2101      	movs	r1, #1
 800cffc:	ec59 8b10 	vmov	r8, r9, d0
 800d000:	4616      	mov	r6, r2
 800d002:	f7ff fc13 	bl	800c82c <_Balloc>
 800d006:	4604      	mov	r4, r0
 800d008:	b930      	cbnz	r0, 800d018 <__d2b+0x24>
 800d00a:	4602      	mov	r2, r0
 800d00c:	4b23      	ldr	r3, [pc, #140]	@ (800d09c <__d2b+0xa8>)
 800d00e:	4824      	ldr	r0, [pc, #144]	@ (800d0a0 <__d2b+0xac>)
 800d010:	f240 310f 	movw	r1, #783	@ 0x30f
 800d014:	f000 fac4 	bl	800d5a0 <__assert_func>
 800d018:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d01c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d020:	b10d      	cbz	r5, 800d026 <__d2b+0x32>
 800d022:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d026:	9301      	str	r3, [sp, #4]
 800d028:	f1b8 0300 	subs.w	r3, r8, #0
 800d02c:	d023      	beq.n	800d076 <__d2b+0x82>
 800d02e:	4668      	mov	r0, sp
 800d030:	9300      	str	r3, [sp, #0]
 800d032:	f7ff fd0c 	bl	800ca4e <__lo0bits>
 800d036:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d03a:	b1d0      	cbz	r0, 800d072 <__d2b+0x7e>
 800d03c:	f1c0 0320 	rsb	r3, r0, #32
 800d040:	fa02 f303 	lsl.w	r3, r2, r3
 800d044:	430b      	orrs	r3, r1
 800d046:	40c2      	lsrs	r2, r0
 800d048:	6163      	str	r3, [r4, #20]
 800d04a:	9201      	str	r2, [sp, #4]
 800d04c:	9b01      	ldr	r3, [sp, #4]
 800d04e:	61a3      	str	r3, [r4, #24]
 800d050:	2b00      	cmp	r3, #0
 800d052:	bf0c      	ite	eq
 800d054:	2201      	moveq	r2, #1
 800d056:	2202      	movne	r2, #2
 800d058:	6122      	str	r2, [r4, #16]
 800d05a:	b1a5      	cbz	r5, 800d086 <__d2b+0x92>
 800d05c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d060:	4405      	add	r5, r0
 800d062:	603d      	str	r5, [r7, #0]
 800d064:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d068:	6030      	str	r0, [r6, #0]
 800d06a:	4620      	mov	r0, r4
 800d06c:	b003      	add	sp, #12
 800d06e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d072:	6161      	str	r1, [r4, #20]
 800d074:	e7ea      	b.n	800d04c <__d2b+0x58>
 800d076:	a801      	add	r0, sp, #4
 800d078:	f7ff fce9 	bl	800ca4e <__lo0bits>
 800d07c:	9b01      	ldr	r3, [sp, #4]
 800d07e:	6163      	str	r3, [r4, #20]
 800d080:	3020      	adds	r0, #32
 800d082:	2201      	movs	r2, #1
 800d084:	e7e8      	b.n	800d058 <__d2b+0x64>
 800d086:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d08a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d08e:	6038      	str	r0, [r7, #0]
 800d090:	6918      	ldr	r0, [r3, #16]
 800d092:	f7ff fcbd 	bl	800ca10 <__hi0bits>
 800d096:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d09a:	e7e5      	b.n	800d068 <__d2b+0x74>
 800d09c:	0800dbb5 	.word	0x0800dbb5
 800d0a0:	0800dc37 	.word	0x0800dc37

0800d0a4 <__ratio>:
 800d0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a8:	b085      	sub	sp, #20
 800d0aa:	e9cd 1000 	strd	r1, r0, [sp]
 800d0ae:	a902      	add	r1, sp, #8
 800d0b0:	f7ff ff56 	bl	800cf60 <__b2d>
 800d0b4:	9800      	ldr	r0, [sp, #0]
 800d0b6:	a903      	add	r1, sp, #12
 800d0b8:	ec55 4b10 	vmov	r4, r5, d0
 800d0bc:	f7ff ff50 	bl	800cf60 <__b2d>
 800d0c0:	9b01      	ldr	r3, [sp, #4]
 800d0c2:	6919      	ldr	r1, [r3, #16]
 800d0c4:	9b00      	ldr	r3, [sp, #0]
 800d0c6:	691b      	ldr	r3, [r3, #16]
 800d0c8:	1ac9      	subs	r1, r1, r3
 800d0ca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d0ce:	1a9b      	subs	r3, r3, r2
 800d0d0:	ec5b ab10 	vmov	sl, fp, d0
 800d0d4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	bfce      	itee	gt
 800d0dc:	462a      	movgt	r2, r5
 800d0de:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d0e2:	465a      	movle	r2, fp
 800d0e4:	462f      	mov	r7, r5
 800d0e6:	46d9      	mov	r9, fp
 800d0e8:	bfcc      	ite	gt
 800d0ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d0ee:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d0f2:	464b      	mov	r3, r9
 800d0f4:	4652      	mov	r2, sl
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	4639      	mov	r1, r7
 800d0fa:	f7f3 fba7 	bl	800084c <__aeabi_ddiv>
 800d0fe:	ec41 0b10 	vmov	d0, r0, r1
 800d102:	b005      	add	sp, #20
 800d104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d108 <__copybits>:
 800d108:	3901      	subs	r1, #1
 800d10a:	b570      	push	{r4, r5, r6, lr}
 800d10c:	1149      	asrs	r1, r1, #5
 800d10e:	6914      	ldr	r4, [r2, #16]
 800d110:	3101      	adds	r1, #1
 800d112:	f102 0314 	add.w	r3, r2, #20
 800d116:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d11a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d11e:	1f05      	subs	r5, r0, #4
 800d120:	42a3      	cmp	r3, r4
 800d122:	d30c      	bcc.n	800d13e <__copybits+0x36>
 800d124:	1aa3      	subs	r3, r4, r2
 800d126:	3b11      	subs	r3, #17
 800d128:	f023 0303 	bic.w	r3, r3, #3
 800d12c:	3211      	adds	r2, #17
 800d12e:	42a2      	cmp	r2, r4
 800d130:	bf88      	it	hi
 800d132:	2300      	movhi	r3, #0
 800d134:	4418      	add	r0, r3
 800d136:	2300      	movs	r3, #0
 800d138:	4288      	cmp	r0, r1
 800d13a:	d305      	bcc.n	800d148 <__copybits+0x40>
 800d13c:	bd70      	pop	{r4, r5, r6, pc}
 800d13e:	f853 6b04 	ldr.w	r6, [r3], #4
 800d142:	f845 6f04 	str.w	r6, [r5, #4]!
 800d146:	e7eb      	b.n	800d120 <__copybits+0x18>
 800d148:	f840 3b04 	str.w	r3, [r0], #4
 800d14c:	e7f4      	b.n	800d138 <__copybits+0x30>

0800d14e <__any_on>:
 800d14e:	f100 0214 	add.w	r2, r0, #20
 800d152:	6900      	ldr	r0, [r0, #16]
 800d154:	114b      	asrs	r3, r1, #5
 800d156:	4298      	cmp	r0, r3
 800d158:	b510      	push	{r4, lr}
 800d15a:	db11      	blt.n	800d180 <__any_on+0x32>
 800d15c:	dd0a      	ble.n	800d174 <__any_on+0x26>
 800d15e:	f011 011f 	ands.w	r1, r1, #31
 800d162:	d007      	beq.n	800d174 <__any_on+0x26>
 800d164:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d168:	fa24 f001 	lsr.w	r0, r4, r1
 800d16c:	fa00 f101 	lsl.w	r1, r0, r1
 800d170:	428c      	cmp	r4, r1
 800d172:	d10b      	bne.n	800d18c <__any_on+0x3e>
 800d174:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d178:	4293      	cmp	r3, r2
 800d17a:	d803      	bhi.n	800d184 <__any_on+0x36>
 800d17c:	2000      	movs	r0, #0
 800d17e:	bd10      	pop	{r4, pc}
 800d180:	4603      	mov	r3, r0
 800d182:	e7f7      	b.n	800d174 <__any_on+0x26>
 800d184:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d188:	2900      	cmp	r1, #0
 800d18a:	d0f5      	beq.n	800d178 <__any_on+0x2a>
 800d18c:	2001      	movs	r0, #1
 800d18e:	e7f6      	b.n	800d17e <__any_on+0x30>

0800d190 <__sread>:
 800d190:	b510      	push	{r4, lr}
 800d192:	460c      	mov	r4, r1
 800d194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d198:	f000 f9ce 	bl	800d538 <_read_r>
 800d19c:	2800      	cmp	r0, #0
 800d19e:	bfab      	itete	ge
 800d1a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d1a2:	89a3      	ldrhlt	r3, [r4, #12]
 800d1a4:	181b      	addge	r3, r3, r0
 800d1a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d1aa:	bfac      	ite	ge
 800d1ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d1ae:	81a3      	strhlt	r3, [r4, #12]
 800d1b0:	bd10      	pop	{r4, pc}

0800d1b2 <__swrite>:
 800d1b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1b6:	461f      	mov	r7, r3
 800d1b8:	898b      	ldrh	r3, [r1, #12]
 800d1ba:	05db      	lsls	r3, r3, #23
 800d1bc:	4605      	mov	r5, r0
 800d1be:	460c      	mov	r4, r1
 800d1c0:	4616      	mov	r6, r2
 800d1c2:	d505      	bpl.n	800d1d0 <__swrite+0x1e>
 800d1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1c8:	2302      	movs	r3, #2
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f000 f9a2 	bl	800d514 <_lseek_r>
 800d1d0:	89a3      	ldrh	r3, [r4, #12]
 800d1d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d1da:	81a3      	strh	r3, [r4, #12]
 800d1dc:	4632      	mov	r2, r6
 800d1de:	463b      	mov	r3, r7
 800d1e0:	4628      	mov	r0, r5
 800d1e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e6:	f000 b9c9 	b.w	800d57c <_write_r>

0800d1ea <__sseek>:
 800d1ea:	b510      	push	{r4, lr}
 800d1ec:	460c      	mov	r4, r1
 800d1ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1f2:	f000 f98f 	bl	800d514 <_lseek_r>
 800d1f6:	1c43      	adds	r3, r0, #1
 800d1f8:	89a3      	ldrh	r3, [r4, #12]
 800d1fa:	bf15      	itete	ne
 800d1fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d1fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d202:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d206:	81a3      	strheq	r3, [r4, #12]
 800d208:	bf18      	it	ne
 800d20a:	81a3      	strhne	r3, [r4, #12]
 800d20c:	bd10      	pop	{r4, pc}

0800d20e <__sclose>:
 800d20e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d212:	f000 b94d 	b.w	800d4b0 <_close_r>

0800d216 <_realloc_r>:
 800d216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d21a:	4680      	mov	r8, r0
 800d21c:	4615      	mov	r5, r2
 800d21e:	460c      	mov	r4, r1
 800d220:	b921      	cbnz	r1, 800d22c <_realloc_r+0x16>
 800d222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d226:	4611      	mov	r1, r2
 800d228:	f7ff b9b6 	b.w	800c598 <_malloc_r>
 800d22c:	b92a      	cbnz	r2, 800d23a <_realloc_r+0x24>
 800d22e:	f000 f9e9 	bl	800d604 <_free_r>
 800d232:	2400      	movs	r4, #0
 800d234:	4620      	mov	r0, r4
 800d236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d23a:	f000 fa2d 	bl	800d698 <_malloc_usable_size_r>
 800d23e:	4285      	cmp	r5, r0
 800d240:	4606      	mov	r6, r0
 800d242:	d802      	bhi.n	800d24a <_realloc_r+0x34>
 800d244:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d248:	d8f4      	bhi.n	800d234 <_realloc_r+0x1e>
 800d24a:	4629      	mov	r1, r5
 800d24c:	4640      	mov	r0, r8
 800d24e:	f7ff f9a3 	bl	800c598 <_malloc_r>
 800d252:	4607      	mov	r7, r0
 800d254:	2800      	cmp	r0, #0
 800d256:	d0ec      	beq.n	800d232 <_realloc_r+0x1c>
 800d258:	42b5      	cmp	r5, r6
 800d25a:	462a      	mov	r2, r5
 800d25c:	4621      	mov	r1, r4
 800d25e:	bf28      	it	cs
 800d260:	4632      	movcs	r2, r6
 800d262:	f7fd fd30 	bl	800acc6 <memcpy>
 800d266:	4621      	mov	r1, r4
 800d268:	4640      	mov	r0, r8
 800d26a:	f000 f9cb 	bl	800d604 <_free_r>
 800d26e:	463c      	mov	r4, r7
 800d270:	e7e0      	b.n	800d234 <_realloc_r+0x1e>

0800d272 <__swbuf_r>:
 800d272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d274:	460e      	mov	r6, r1
 800d276:	4614      	mov	r4, r2
 800d278:	4605      	mov	r5, r0
 800d27a:	b118      	cbz	r0, 800d284 <__swbuf_r+0x12>
 800d27c:	6a03      	ldr	r3, [r0, #32]
 800d27e:	b90b      	cbnz	r3, 800d284 <__swbuf_r+0x12>
 800d280:	f7fc fdac 	bl	8009ddc <__sinit>
 800d284:	69a3      	ldr	r3, [r4, #24]
 800d286:	60a3      	str	r3, [r4, #8]
 800d288:	89a3      	ldrh	r3, [r4, #12]
 800d28a:	071a      	lsls	r2, r3, #28
 800d28c:	d501      	bpl.n	800d292 <__swbuf_r+0x20>
 800d28e:	6923      	ldr	r3, [r4, #16]
 800d290:	b943      	cbnz	r3, 800d2a4 <__swbuf_r+0x32>
 800d292:	4621      	mov	r1, r4
 800d294:	4628      	mov	r0, r5
 800d296:	f000 f82b 	bl	800d2f0 <__swsetup_r>
 800d29a:	b118      	cbz	r0, 800d2a4 <__swbuf_r+0x32>
 800d29c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d2a0:	4638      	mov	r0, r7
 800d2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2a4:	6823      	ldr	r3, [r4, #0]
 800d2a6:	6922      	ldr	r2, [r4, #16]
 800d2a8:	1a98      	subs	r0, r3, r2
 800d2aa:	6963      	ldr	r3, [r4, #20]
 800d2ac:	b2f6      	uxtb	r6, r6
 800d2ae:	4283      	cmp	r3, r0
 800d2b0:	4637      	mov	r7, r6
 800d2b2:	dc05      	bgt.n	800d2c0 <__swbuf_r+0x4e>
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	4628      	mov	r0, r5
 800d2b8:	f7ff fa84 	bl	800c7c4 <_fflush_r>
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	d1ed      	bne.n	800d29c <__swbuf_r+0x2a>
 800d2c0:	68a3      	ldr	r3, [r4, #8]
 800d2c2:	3b01      	subs	r3, #1
 800d2c4:	60a3      	str	r3, [r4, #8]
 800d2c6:	6823      	ldr	r3, [r4, #0]
 800d2c8:	1c5a      	adds	r2, r3, #1
 800d2ca:	6022      	str	r2, [r4, #0]
 800d2cc:	701e      	strb	r6, [r3, #0]
 800d2ce:	6962      	ldr	r2, [r4, #20]
 800d2d0:	1c43      	adds	r3, r0, #1
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d004      	beq.n	800d2e0 <__swbuf_r+0x6e>
 800d2d6:	89a3      	ldrh	r3, [r4, #12]
 800d2d8:	07db      	lsls	r3, r3, #31
 800d2da:	d5e1      	bpl.n	800d2a0 <__swbuf_r+0x2e>
 800d2dc:	2e0a      	cmp	r6, #10
 800d2de:	d1df      	bne.n	800d2a0 <__swbuf_r+0x2e>
 800d2e0:	4621      	mov	r1, r4
 800d2e2:	4628      	mov	r0, r5
 800d2e4:	f7ff fa6e 	bl	800c7c4 <_fflush_r>
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	d0d9      	beq.n	800d2a0 <__swbuf_r+0x2e>
 800d2ec:	e7d6      	b.n	800d29c <__swbuf_r+0x2a>
	...

0800d2f0 <__swsetup_r>:
 800d2f0:	b538      	push	{r3, r4, r5, lr}
 800d2f2:	4b29      	ldr	r3, [pc, #164]	@ (800d398 <__swsetup_r+0xa8>)
 800d2f4:	4605      	mov	r5, r0
 800d2f6:	6818      	ldr	r0, [r3, #0]
 800d2f8:	460c      	mov	r4, r1
 800d2fa:	b118      	cbz	r0, 800d304 <__swsetup_r+0x14>
 800d2fc:	6a03      	ldr	r3, [r0, #32]
 800d2fe:	b90b      	cbnz	r3, 800d304 <__swsetup_r+0x14>
 800d300:	f7fc fd6c 	bl	8009ddc <__sinit>
 800d304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d308:	0719      	lsls	r1, r3, #28
 800d30a:	d422      	bmi.n	800d352 <__swsetup_r+0x62>
 800d30c:	06da      	lsls	r2, r3, #27
 800d30e:	d407      	bmi.n	800d320 <__swsetup_r+0x30>
 800d310:	2209      	movs	r2, #9
 800d312:	602a      	str	r2, [r5, #0]
 800d314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d318:	81a3      	strh	r3, [r4, #12]
 800d31a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d31e:	e033      	b.n	800d388 <__swsetup_r+0x98>
 800d320:	0758      	lsls	r0, r3, #29
 800d322:	d512      	bpl.n	800d34a <__swsetup_r+0x5a>
 800d324:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d326:	b141      	cbz	r1, 800d33a <__swsetup_r+0x4a>
 800d328:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d32c:	4299      	cmp	r1, r3
 800d32e:	d002      	beq.n	800d336 <__swsetup_r+0x46>
 800d330:	4628      	mov	r0, r5
 800d332:	f000 f967 	bl	800d604 <_free_r>
 800d336:	2300      	movs	r3, #0
 800d338:	6363      	str	r3, [r4, #52]	@ 0x34
 800d33a:	89a3      	ldrh	r3, [r4, #12]
 800d33c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d340:	81a3      	strh	r3, [r4, #12]
 800d342:	2300      	movs	r3, #0
 800d344:	6063      	str	r3, [r4, #4]
 800d346:	6923      	ldr	r3, [r4, #16]
 800d348:	6023      	str	r3, [r4, #0]
 800d34a:	89a3      	ldrh	r3, [r4, #12]
 800d34c:	f043 0308 	orr.w	r3, r3, #8
 800d350:	81a3      	strh	r3, [r4, #12]
 800d352:	6923      	ldr	r3, [r4, #16]
 800d354:	b94b      	cbnz	r3, 800d36a <__swsetup_r+0x7a>
 800d356:	89a3      	ldrh	r3, [r4, #12]
 800d358:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d35c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d360:	d003      	beq.n	800d36a <__swsetup_r+0x7a>
 800d362:	4621      	mov	r1, r4
 800d364:	4628      	mov	r0, r5
 800d366:	f000 f84c 	bl	800d402 <__smakebuf_r>
 800d36a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d36e:	f013 0201 	ands.w	r2, r3, #1
 800d372:	d00a      	beq.n	800d38a <__swsetup_r+0x9a>
 800d374:	2200      	movs	r2, #0
 800d376:	60a2      	str	r2, [r4, #8]
 800d378:	6962      	ldr	r2, [r4, #20]
 800d37a:	4252      	negs	r2, r2
 800d37c:	61a2      	str	r2, [r4, #24]
 800d37e:	6922      	ldr	r2, [r4, #16]
 800d380:	b942      	cbnz	r2, 800d394 <__swsetup_r+0xa4>
 800d382:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d386:	d1c5      	bne.n	800d314 <__swsetup_r+0x24>
 800d388:	bd38      	pop	{r3, r4, r5, pc}
 800d38a:	0799      	lsls	r1, r3, #30
 800d38c:	bf58      	it	pl
 800d38e:	6962      	ldrpl	r2, [r4, #20]
 800d390:	60a2      	str	r2, [r4, #8]
 800d392:	e7f4      	b.n	800d37e <__swsetup_r+0x8e>
 800d394:	2000      	movs	r0, #0
 800d396:	e7f7      	b.n	800d388 <__swsetup_r+0x98>
 800d398:	20000190 	.word	0x20000190

0800d39c <__ascii_wctomb>:
 800d39c:	4603      	mov	r3, r0
 800d39e:	4608      	mov	r0, r1
 800d3a0:	b141      	cbz	r1, 800d3b4 <__ascii_wctomb+0x18>
 800d3a2:	2aff      	cmp	r2, #255	@ 0xff
 800d3a4:	d904      	bls.n	800d3b0 <__ascii_wctomb+0x14>
 800d3a6:	228a      	movs	r2, #138	@ 0x8a
 800d3a8:	601a      	str	r2, [r3, #0]
 800d3aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3ae:	4770      	bx	lr
 800d3b0:	700a      	strb	r2, [r1, #0]
 800d3b2:	2001      	movs	r0, #1
 800d3b4:	4770      	bx	lr

0800d3b6 <__swhatbuf_r>:
 800d3b6:	b570      	push	{r4, r5, r6, lr}
 800d3b8:	460c      	mov	r4, r1
 800d3ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3be:	2900      	cmp	r1, #0
 800d3c0:	b096      	sub	sp, #88	@ 0x58
 800d3c2:	4615      	mov	r5, r2
 800d3c4:	461e      	mov	r6, r3
 800d3c6:	da0d      	bge.n	800d3e4 <__swhatbuf_r+0x2e>
 800d3c8:	89a3      	ldrh	r3, [r4, #12]
 800d3ca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d3ce:	f04f 0100 	mov.w	r1, #0
 800d3d2:	bf14      	ite	ne
 800d3d4:	2340      	movne	r3, #64	@ 0x40
 800d3d6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d3da:	2000      	movs	r0, #0
 800d3dc:	6031      	str	r1, [r6, #0]
 800d3de:	602b      	str	r3, [r5, #0]
 800d3e0:	b016      	add	sp, #88	@ 0x58
 800d3e2:	bd70      	pop	{r4, r5, r6, pc}
 800d3e4:	466a      	mov	r2, sp
 800d3e6:	f000 f873 	bl	800d4d0 <_fstat_r>
 800d3ea:	2800      	cmp	r0, #0
 800d3ec:	dbec      	blt.n	800d3c8 <__swhatbuf_r+0x12>
 800d3ee:	9901      	ldr	r1, [sp, #4]
 800d3f0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d3f4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d3f8:	4259      	negs	r1, r3
 800d3fa:	4159      	adcs	r1, r3
 800d3fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d400:	e7eb      	b.n	800d3da <__swhatbuf_r+0x24>

0800d402 <__smakebuf_r>:
 800d402:	898b      	ldrh	r3, [r1, #12]
 800d404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d406:	079d      	lsls	r5, r3, #30
 800d408:	4606      	mov	r6, r0
 800d40a:	460c      	mov	r4, r1
 800d40c:	d507      	bpl.n	800d41e <__smakebuf_r+0x1c>
 800d40e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d412:	6023      	str	r3, [r4, #0]
 800d414:	6123      	str	r3, [r4, #16]
 800d416:	2301      	movs	r3, #1
 800d418:	6163      	str	r3, [r4, #20]
 800d41a:	b003      	add	sp, #12
 800d41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d41e:	ab01      	add	r3, sp, #4
 800d420:	466a      	mov	r2, sp
 800d422:	f7ff ffc8 	bl	800d3b6 <__swhatbuf_r>
 800d426:	9f00      	ldr	r7, [sp, #0]
 800d428:	4605      	mov	r5, r0
 800d42a:	4639      	mov	r1, r7
 800d42c:	4630      	mov	r0, r6
 800d42e:	f7ff f8b3 	bl	800c598 <_malloc_r>
 800d432:	b948      	cbnz	r0, 800d448 <__smakebuf_r+0x46>
 800d434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d438:	059a      	lsls	r2, r3, #22
 800d43a:	d4ee      	bmi.n	800d41a <__smakebuf_r+0x18>
 800d43c:	f023 0303 	bic.w	r3, r3, #3
 800d440:	f043 0302 	orr.w	r3, r3, #2
 800d444:	81a3      	strh	r3, [r4, #12]
 800d446:	e7e2      	b.n	800d40e <__smakebuf_r+0xc>
 800d448:	89a3      	ldrh	r3, [r4, #12]
 800d44a:	6020      	str	r0, [r4, #0]
 800d44c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d450:	81a3      	strh	r3, [r4, #12]
 800d452:	9b01      	ldr	r3, [sp, #4]
 800d454:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d458:	b15b      	cbz	r3, 800d472 <__smakebuf_r+0x70>
 800d45a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d45e:	4630      	mov	r0, r6
 800d460:	f000 f848 	bl	800d4f4 <_isatty_r>
 800d464:	b128      	cbz	r0, 800d472 <__smakebuf_r+0x70>
 800d466:	89a3      	ldrh	r3, [r4, #12]
 800d468:	f023 0303 	bic.w	r3, r3, #3
 800d46c:	f043 0301 	orr.w	r3, r3, #1
 800d470:	81a3      	strh	r3, [r4, #12]
 800d472:	89a3      	ldrh	r3, [r4, #12]
 800d474:	431d      	orrs	r5, r3
 800d476:	81a5      	strh	r5, [r4, #12]
 800d478:	e7cf      	b.n	800d41a <__smakebuf_r+0x18>

0800d47a <memmove>:
 800d47a:	4288      	cmp	r0, r1
 800d47c:	b510      	push	{r4, lr}
 800d47e:	eb01 0402 	add.w	r4, r1, r2
 800d482:	d902      	bls.n	800d48a <memmove+0x10>
 800d484:	4284      	cmp	r4, r0
 800d486:	4623      	mov	r3, r4
 800d488:	d807      	bhi.n	800d49a <memmove+0x20>
 800d48a:	1e43      	subs	r3, r0, #1
 800d48c:	42a1      	cmp	r1, r4
 800d48e:	d008      	beq.n	800d4a2 <memmove+0x28>
 800d490:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d494:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d498:	e7f8      	b.n	800d48c <memmove+0x12>
 800d49a:	4402      	add	r2, r0
 800d49c:	4601      	mov	r1, r0
 800d49e:	428a      	cmp	r2, r1
 800d4a0:	d100      	bne.n	800d4a4 <memmove+0x2a>
 800d4a2:	bd10      	pop	{r4, pc}
 800d4a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4ac:	e7f7      	b.n	800d49e <memmove+0x24>
	...

0800d4b0 <_close_r>:
 800d4b0:	b538      	push	{r3, r4, r5, lr}
 800d4b2:	4d06      	ldr	r5, [pc, #24]	@ (800d4cc <_close_r+0x1c>)
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	4604      	mov	r4, r0
 800d4b8:	4608      	mov	r0, r1
 800d4ba:	602b      	str	r3, [r5, #0]
 800d4bc:	f7f5 fdfe 	bl	80030bc <_close>
 800d4c0:	1c43      	adds	r3, r0, #1
 800d4c2:	d102      	bne.n	800d4ca <_close_r+0x1a>
 800d4c4:	682b      	ldr	r3, [r5, #0]
 800d4c6:	b103      	cbz	r3, 800d4ca <_close_r+0x1a>
 800d4c8:	6023      	str	r3, [r4, #0]
 800d4ca:	bd38      	pop	{r3, r4, r5, pc}
 800d4cc:	20000500 	.word	0x20000500

0800d4d0 <_fstat_r>:
 800d4d0:	b538      	push	{r3, r4, r5, lr}
 800d4d2:	4d07      	ldr	r5, [pc, #28]	@ (800d4f0 <_fstat_r+0x20>)
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	4604      	mov	r4, r0
 800d4d8:	4608      	mov	r0, r1
 800d4da:	4611      	mov	r1, r2
 800d4dc:	602b      	str	r3, [r5, #0]
 800d4de:	f7f5 fdf9 	bl	80030d4 <_fstat>
 800d4e2:	1c43      	adds	r3, r0, #1
 800d4e4:	d102      	bne.n	800d4ec <_fstat_r+0x1c>
 800d4e6:	682b      	ldr	r3, [r5, #0]
 800d4e8:	b103      	cbz	r3, 800d4ec <_fstat_r+0x1c>
 800d4ea:	6023      	str	r3, [r4, #0]
 800d4ec:	bd38      	pop	{r3, r4, r5, pc}
 800d4ee:	bf00      	nop
 800d4f0:	20000500 	.word	0x20000500

0800d4f4 <_isatty_r>:
 800d4f4:	b538      	push	{r3, r4, r5, lr}
 800d4f6:	4d06      	ldr	r5, [pc, #24]	@ (800d510 <_isatty_r+0x1c>)
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	4604      	mov	r4, r0
 800d4fc:	4608      	mov	r0, r1
 800d4fe:	602b      	str	r3, [r5, #0]
 800d500:	f7f5 fdf8 	bl	80030f4 <_isatty>
 800d504:	1c43      	adds	r3, r0, #1
 800d506:	d102      	bne.n	800d50e <_isatty_r+0x1a>
 800d508:	682b      	ldr	r3, [r5, #0]
 800d50a:	b103      	cbz	r3, 800d50e <_isatty_r+0x1a>
 800d50c:	6023      	str	r3, [r4, #0]
 800d50e:	bd38      	pop	{r3, r4, r5, pc}
 800d510:	20000500 	.word	0x20000500

0800d514 <_lseek_r>:
 800d514:	b538      	push	{r3, r4, r5, lr}
 800d516:	4d07      	ldr	r5, [pc, #28]	@ (800d534 <_lseek_r+0x20>)
 800d518:	4604      	mov	r4, r0
 800d51a:	4608      	mov	r0, r1
 800d51c:	4611      	mov	r1, r2
 800d51e:	2200      	movs	r2, #0
 800d520:	602a      	str	r2, [r5, #0]
 800d522:	461a      	mov	r2, r3
 800d524:	f7f5 fdf1 	bl	800310a <_lseek>
 800d528:	1c43      	adds	r3, r0, #1
 800d52a:	d102      	bne.n	800d532 <_lseek_r+0x1e>
 800d52c:	682b      	ldr	r3, [r5, #0]
 800d52e:	b103      	cbz	r3, 800d532 <_lseek_r+0x1e>
 800d530:	6023      	str	r3, [r4, #0]
 800d532:	bd38      	pop	{r3, r4, r5, pc}
 800d534:	20000500 	.word	0x20000500

0800d538 <_read_r>:
 800d538:	b538      	push	{r3, r4, r5, lr}
 800d53a:	4d07      	ldr	r5, [pc, #28]	@ (800d558 <_read_r+0x20>)
 800d53c:	4604      	mov	r4, r0
 800d53e:	4608      	mov	r0, r1
 800d540:	4611      	mov	r1, r2
 800d542:	2200      	movs	r2, #0
 800d544:	602a      	str	r2, [r5, #0]
 800d546:	461a      	mov	r2, r3
 800d548:	f7f5 fd9b 	bl	8003082 <_read>
 800d54c:	1c43      	adds	r3, r0, #1
 800d54e:	d102      	bne.n	800d556 <_read_r+0x1e>
 800d550:	682b      	ldr	r3, [r5, #0]
 800d552:	b103      	cbz	r3, 800d556 <_read_r+0x1e>
 800d554:	6023      	str	r3, [r4, #0]
 800d556:	bd38      	pop	{r3, r4, r5, pc}
 800d558:	20000500 	.word	0x20000500

0800d55c <_sbrk_r>:
 800d55c:	b538      	push	{r3, r4, r5, lr}
 800d55e:	4d06      	ldr	r5, [pc, #24]	@ (800d578 <_sbrk_r+0x1c>)
 800d560:	2300      	movs	r3, #0
 800d562:	4604      	mov	r4, r0
 800d564:	4608      	mov	r0, r1
 800d566:	602b      	str	r3, [r5, #0]
 800d568:	f7f5 fddc 	bl	8003124 <_sbrk>
 800d56c:	1c43      	adds	r3, r0, #1
 800d56e:	d102      	bne.n	800d576 <_sbrk_r+0x1a>
 800d570:	682b      	ldr	r3, [r5, #0]
 800d572:	b103      	cbz	r3, 800d576 <_sbrk_r+0x1a>
 800d574:	6023      	str	r3, [r4, #0]
 800d576:	bd38      	pop	{r3, r4, r5, pc}
 800d578:	20000500 	.word	0x20000500

0800d57c <_write_r>:
 800d57c:	b538      	push	{r3, r4, r5, lr}
 800d57e:	4d07      	ldr	r5, [pc, #28]	@ (800d59c <_write_r+0x20>)
 800d580:	4604      	mov	r4, r0
 800d582:	4608      	mov	r0, r1
 800d584:	4611      	mov	r1, r2
 800d586:	2200      	movs	r2, #0
 800d588:	602a      	str	r2, [r5, #0]
 800d58a:	461a      	mov	r2, r3
 800d58c:	f7f4 f994 	bl	80018b8 <_write>
 800d590:	1c43      	adds	r3, r0, #1
 800d592:	d102      	bne.n	800d59a <_write_r+0x1e>
 800d594:	682b      	ldr	r3, [r5, #0]
 800d596:	b103      	cbz	r3, 800d59a <_write_r+0x1e>
 800d598:	6023      	str	r3, [r4, #0]
 800d59a:	bd38      	pop	{r3, r4, r5, pc}
 800d59c:	20000500 	.word	0x20000500

0800d5a0 <__assert_func>:
 800d5a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5a2:	4614      	mov	r4, r2
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	4b09      	ldr	r3, [pc, #36]	@ (800d5cc <__assert_func+0x2c>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4605      	mov	r5, r0
 800d5ac:	68d8      	ldr	r0, [r3, #12]
 800d5ae:	b954      	cbnz	r4, 800d5c6 <__assert_func+0x26>
 800d5b0:	4b07      	ldr	r3, [pc, #28]	@ (800d5d0 <__assert_func+0x30>)
 800d5b2:	461c      	mov	r4, r3
 800d5b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5b8:	9100      	str	r1, [sp, #0]
 800d5ba:	462b      	mov	r3, r5
 800d5bc:	4905      	ldr	r1, [pc, #20]	@ (800d5d4 <__assert_func+0x34>)
 800d5be:	f000 f873 	bl	800d6a8 <fiprintf>
 800d5c2:	f000 f883 	bl	800d6cc <abort>
 800d5c6:	4b04      	ldr	r3, [pc, #16]	@ (800d5d8 <__assert_func+0x38>)
 800d5c8:	e7f4      	b.n	800d5b4 <__assert_func+0x14>
 800d5ca:	bf00      	nop
 800d5cc:	20000190 	.word	0x20000190
 800d5d0:	0800ddcb 	.word	0x0800ddcb
 800d5d4:	0800dd9d 	.word	0x0800dd9d
 800d5d8:	0800dd90 	.word	0x0800dd90

0800d5dc <_calloc_r>:
 800d5dc:	b570      	push	{r4, r5, r6, lr}
 800d5de:	fba1 5402 	umull	r5, r4, r1, r2
 800d5e2:	b93c      	cbnz	r4, 800d5f4 <_calloc_r+0x18>
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	f7fe ffd7 	bl	800c598 <_malloc_r>
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	b928      	cbnz	r0, 800d5fa <_calloc_r+0x1e>
 800d5ee:	2600      	movs	r6, #0
 800d5f0:	4630      	mov	r0, r6
 800d5f2:	bd70      	pop	{r4, r5, r6, pc}
 800d5f4:	220c      	movs	r2, #12
 800d5f6:	6002      	str	r2, [r0, #0]
 800d5f8:	e7f9      	b.n	800d5ee <_calloc_r+0x12>
 800d5fa:	462a      	mov	r2, r5
 800d5fc:	4621      	mov	r1, r4
 800d5fe:	f7fd fb29 	bl	800ac54 <memset>
 800d602:	e7f5      	b.n	800d5f0 <_calloc_r+0x14>

0800d604 <_free_r>:
 800d604:	b538      	push	{r3, r4, r5, lr}
 800d606:	4605      	mov	r5, r0
 800d608:	2900      	cmp	r1, #0
 800d60a:	d041      	beq.n	800d690 <_free_r+0x8c>
 800d60c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d610:	1f0c      	subs	r4, r1, #4
 800d612:	2b00      	cmp	r3, #0
 800d614:	bfb8      	it	lt
 800d616:	18e4      	addlt	r4, r4, r3
 800d618:	f7ff f8fc 	bl	800c814 <__malloc_lock>
 800d61c:	4a1d      	ldr	r2, [pc, #116]	@ (800d694 <_free_r+0x90>)
 800d61e:	6813      	ldr	r3, [r2, #0]
 800d620:	b933      	cbnz	r3, 800d630 <_free_r+0x2c>
 800d622:	6063      	str	r3, [r4, #4]
 800d624:	6014      	str	r4, [r2, #0]
 800d626:	4628      	mov	r0, r5
 800d628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d62c:	f7ff b8f8 	b.w	800c820 <__malloc_unlock>
 800d630:	42a3      	cmp	r3, r4
 800d632:	d908      	bls.n	800d646 <_free_r+0x42>
 800d634:	6820      	ldr	r0, [r4, #0]
 800d636:	1821      	adds	r1, r4, r0
 800d638:	428b      	cmp	r3, r1
 800d63a:	bf01      	itttt	eq
 800d63c:	6819      	ldreq	r1, [r3, #0]
 800d63e:	685b      	ldreq	r3, [r3, #4]
 800d640:	1809      	addeq	r1, r1, r0
 800d642:	6021      	streq	r1, [r4, #0]
 800d644:	e7ed      	b.n	800d622 <_free_r+0x1e>
 800d646:	461a      	mov	r2, r3
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	b10b      	cbz	r3, 800d650 <_free_r+0x4c>
 800d64c:	42a3      	cmp	r3, r4
 800d64e:	d9fa      	bls.n	800d646 <_free_r+0x42>
 800d650:	6811      	ldr	r1, [r2, #0]
 800d652:	1850      	adds	r0, r2, r1
 800d654:	42a0      	cmp	r0, r4
 800d656:	d10b      	bne.n	800d670 <_free_r+0x6c>
 800d658:	6820      	ldr	r0, [r4, #0]
 800d65a:	4401      	add	r1, r0
 800d65c:	1850      	adds	r0, r2, r1
 800d65e:	4283      	cmp	r3, r0
 800d660:	6011      	str	r1, [r2, #0]
 800d662:	d1e0      	bne.n	800d626 <_free_r+0x22>
 800d664:	6818      	ldr	r0, [r3, #0]
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	6053      	str	r3, [r2, #4]
 800d66a:	4408      	add	r0, r1
 800d66c:	6010      	str	r0, [r2, #0]
 800d66e:	e7da      	b.n	800d626 <_free_r+0x22>
 800d670:	d902      	bls.n	800d678 <_free_r+0x74>
 800d672:	230c      	movs	r3, #12
 800d674:	602b      	str	r3, [r5, #0]
 800d676:	e7d6      	b.n	800d626 <_free_r+0x22>
 800d678:	6820      	ldr	r0, [r4, #0]
 800d67a:	1821      	adds	r1, r4, r0
 800d67c:	428b      	cmp	r3, r1
 800d67e:	bf04      	itt	eq
 800d680:	6819      	ldreq	r1, [r3, #0]
 800d682:	685b      	ldreq	r3, [r3, #4]
 800d684:	6063      	str	r3, [r4, #4]
 800d686:	bf04      	itt	eq
 800d688:	1809      	addeq	r1, r1, r0
 800d68a:	6021      	streq	r1, [r4, #0]
 800d68c:	6054      	str	r4, [r2, #4]
 800d68e:	e7ca      	b.n	800d626 <_free_r+0x22>
 800d690:	bd38      	pop	{r3, r4, r5, pc}
 800d692:	bf00      	nop
 800d694:	200004fc 	.word	0x200004fc

0800d698 <_malloc_usable_size_r>:
 800d698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d69c:	1f18      	subs	r0, r3, #4
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	bfbc      	itt	lt
 800d6a2:	580b      	ldrlt	r3, [r1, r0]
 800d6a4:	18c0      	addlt	r0, r0, r3
 800d6a6:	4770      	bx	lr

0800d6a8 <fiprintf>:
 800d6a8:	b40e      	push	{r1, r2, r3}
 800d6aa:	b503      	push	{r0, r1, lr}
 800d6ac:	4601      	mov	r1, r0
 800d6ae:	ab03      	add	r3, sp, #12
 800d6b0:	4805      	ldr	r0, [pc, #20]	@ (800d6c8 <fiprintf+0x20>)
 800d6b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6b6:	6800      	ldr	r0, [r0, #0]
 800d6b8:	9301      	str	r3, [sp, #4]
 800d6ba:	f7fe fe2b 	bl	800c314 <_vfiprintf_r>
 800d6be:	b002      	add	sp, #8
 800d6c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6c4:	b003      	add	sp, #12
 800d6c6:	4770      	bx	lr
 800d6c8:	20000190 	.word	0x20000190

0800d6cc <abort>:
 800d6cc:	b508      	push	{r3, lr}
 800d6ce:	2006      	movs	r0, #6
 800d6d0:	f000 f82c 	bl	800d72c <raise>
 800d6d4:	2001      	movs	r0, #1
 800d6d6:	f7f5 fcc9 	bl	800306c <_exit>

0800d6da <_raise_r>:
 800d6da:	291f      	cmp	r1, #31
 800d6dc:	b538      	push	{r3, r4, r5, lr}
 800d6de:	4605      	mov	r5, r0
 800d6e0:	460c      	mov	r4, r1
 800d6e2:	d904      	bls.n	800d6ee <_raise_r+0x14>
 800d6e4:	2316      	movs	r3, #22
 800d6e6:	6003      	str	r3, [r0, #0]
 800d6e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d6ec:	bd38      	pop	{r3, r4, r5, pc}
 800d6ee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d6f0:	b112      	cbz	r2, 800d6f8 <_raise_r+0x1e>
 800d6f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d6f6:	b94b      	cbnz	r3, 800d70c <_raise_r+0x32>
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	f000 f831 	bl	800d760 <_getpid_r>
 800d6fe:	4622      	mov	r2, r4
 800d700:	4601      	mov	r1, r0
 800d702:	4628      	mov	r0, r5
 800d704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d708:	f000 b818 	b.w	800d73c <_kill_r>
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d00a      	beq.n	800d726 <_raise_r+0x4c>
 800d710:	1c59      	adds	r1, r3, #1
 800d712:	d103      	bne.n	800d71c <_raise_r+0x42>
 800d714:	2316      	movs	r3, #22
 800d716:	6003      	str	r3, [r0, #0]
 800d718:	2001      	movs	r0, #1
 800d71a:	e7e7      	b.n	800d6ec <_raise_r+0x12>
 800d71c:	2100      	movs	r1, #0
 800d71e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d722:	4620      	mov	r0, r4
 800d724:	4798      	blx	r3
 800d726:	2000      	movs	r0, #0
 800d728:	e7e0      	b.n	800d6ec <_raise_r+0x12>
	...

0800d72c <raise>:
 800d72c:	4b02      	ldr	r3, [pc, #8]	@ (800d738 <raise+0xc>)
 800d72e:	4601      	mov	r1, r0
 800d730:	6818      	ldr	r0, [r3, #0]
 800d732:	f7ff bfd2 	b.w	800d6da <_raise_r>
 800d736:	bf00      	nop
 800d738:	20000190 	.word	0x20000190

0800d73c <_kill_r>:
 800d73c:	b538      	push	{r3, r4, r5, lr}
 800d73e:	4d07      	ldr	r5, [pc, #28]	@ (800d75c <_kill_r+0x20>)
 800d740:	2300      	movs	r3, #0
 800d742:	4604      	mov	r4, r0
 800d744:	4608      	mov	r0, r1
 800d746:	4611      	mov	r1, r2
 800d748:	602b      	str	r3, [r5, #0]
 800d74a:	f7f5 fc7f 	bl	800304c <_kill>
 800d74e:	1c43      	adds	r3, r0, #1
 800d750:	d102      	bne.n	800d758 <_kill_r+0x1c>
 800d752:	682b      	ldr	r3, [r5, #0]
 800d754:	b103      	cbz	r3, 800d758 <_kill_r+0x1c>
 800d756:	6023      	str	r3, [r4, #0]
 800d758:	bd38      	pop	{r3, r4, r5, pc}
 800d75a:	bf00      	nop
 800d75c:	20000500 	.word	0x20000500

0800d760 <_getpid_r>:
 800d760:	f7f5 bc6c 	b.w	800303c <_getpid>

0800d764 <_init>:
 800d764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d766:	bf00      	nop
 800d768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d76a:	bc08      	pop	{r3}
 800d76c:	469e      	mov	lr, r3
 800d76e:	4770      	bx	lr

0800d770 <_fini>:
 800d770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d772:	bf00      	nop
 800d774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d776:	bc08      	pop	{r3}
 800d778:	469e      	mov	lr, r3
 800d77a:	4770      	bx	lr
