
stm32l476_mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d484  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  0800d618  0800d618  0000e618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc6c  0800dc6c  0000f1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc6c  0800dc6c  0000ec6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc74  0800dc74  0000f1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc74  0800dc74  0000ec74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dc78  0800dc78  0000ec78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800dc7c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  200001e0  0800de5c  0000f1e0  2**3
                  ALLOC
 10 .ram2         00007ae4  10000000  10000000  00010000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000050c  2000050c  0000f50c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000152d2  00000000  00000000  0000f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002af9  00000000  00000000  000244e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  00026fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f89  00000000  00000000  000283f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000289ff  00000000  00000000  00029381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001534f  00000000  00000000  00051d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f53d9  00000000  00000000  000670cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  0015c4a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a9c  00000000  00000000  0015c530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00162fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d5fc 	.word	0x0800d5fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d5fc 	.word	0x0800d5fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe6:	f2ad 4d34 	subw	sp, sp, #1076	@ 0x434
 8000fea:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fec:	f002 f888 	bl	8003100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff0:	f000 f9b4 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff4:	f000 fb36 	bl	8001664 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ff8:	f000 fb16 	bl	8001628 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ffc:	f000 fae4 	bl	80015c8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001000:	f000 fa0c 	bl	800141c <MX_I2C1_Init>
  MX_RTC_Init();
 8001004:	f000 fa4a 	bl	800149c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET){ // Recovering from standby
 8001008:	4bbb      	ldr	r3, [pc, #748]	@ (80012f8 <main+0x314>)
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001010:	2b00      	cmp	r3, #0
 8001012:	d027      	beq.n	8001064 <main+0x80>

    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the StandBy flag
 8001014:	4bb8      	ldr	r3, [pc, #736]	@ (80012f8 <main+0x314>)
 8001016:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800101a:	619a      	str	r2, [r3, #24]

    /** Disable the WWAKEUP PIN **/
    HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN5);
 800101c:	2010      	movs	r0, #16
 800101e:	f005 f897 	bl	8006150 <HAL_PWR_DisableWakeUpPin>

    awake_status = MPU6050_getIntMotionStatus(&hi2c1);  // clear interrupt status register
 8001022:	48b6      	ldr	r0, [pc, #728]	@ (80012fc <main+0x318>)
 8001024:	f001 fab2 	bl	800258c <MPU6050_getIntMotionStatus>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	4bb4      	ldr	r3, [pc, #720]	@ (8001300 <main+0x31c>)
 800102e:	701a      	strb	r2, [r3, #0]

    //reset all registers and re-initialize the device
    MPU6050_reset(&hi2c1);
 8001030:	48b2      	ldr	r0, [pc, #712]	@ (80012fc <main+0x318>)
 8001032:	f001 f99b 	bl	800236c <MPU6050_reset>
    HAL_Delay(50);
 8001036:	2032      	movs	r0, #50	@ 0x32
 8001038:	f002 f8de 	bl	80031f8 <HAL_Delay>

    printf("MPU6050 Initialized!\r\n");
 800103c:	48b1      	ldr	r0, [pc, #708]	@ (8001304 <main+0x320>)
 800103e:	f009 fd3b 	bl	800aab8 <puts>


    /* mpu6050 setup zero motion interrupt: */
    MPU6050_setupZeroMotionInt(&hi2c1, zeroMot_dur, zeroMot_th, MPU6050_offsets);
 8001042:	4bb1      	ldr	r3, [pc, #708]	@ (8001308 <main+0x324>)
 8001044:	223c      	movs	r2, #60	@ 0x3c
 8001046:	2196      	movs	r1, #150	@ 0x96
 8001048:	48ac      	ldr	r0, [pc, #688]	@ (80012fc <main+0x318>)
 800104a:	f001 fc30 	bl	80028ae <MPU6050_setupZeroMotionInt>


    /* modify mpu6050 settings to store sensor readings in the FIFO: */

    // maximum divider -> New samples fill the FIFO with a rate of 4 Hz
    bool overflowEnabled = true;
 800104e:	2301      	movs	r3, #1
 8001050:	f887 3416 	strb.w	r3, [r7, #1046]	@ 0x416
    MPU6050_setupFifoBuffer(&hi2c1, MPU6050_DLPF_BW_188, 0xFF, overflowEnabled);
 8001054:	f897 3416 	ldrb.w	r3, [r7, #1046]	@ 0x416
 8001058:	22ff      	movs	r2, #255	@ 0xff
 800105a:	2101      	movs	r1, #1
 800105c:	48a7      	ldr	r0, [pc, #668]	@ (80012fc <main+0x318>)
 800105e:	f001 fc7a 	bl	8002956 <MPU6050_setupFifoBuffer>
 8001062:	e039      	b.n	80010d8 <main+0xf4>



  } else { // 1st initialization:

    printf("First cycle!\r\n");
 8001064:	48a9      	ldr	r0, [pc, #676]	@ (800130c <main+0x328>)
 8001066:	f009 fd27 	bl	800aab8 <puts>

    // Initialize buffers stored in RAM2 section:
    memset(mainBuff, 0, sizeof(mainBuff));
 800106a:	f647 22e0 	movw	r2, #31456	@ 0x7ae0
 800106e:	2100      	movs	r1, #0
 8001070:	48a7      	ldr	r0, [pc, #668]	@ (8001310 <main+0x32c>)
 8001072:	f009 fd3b 	bl	800aaec <memset>
    buff_Head = 0;
 8001076:	4ba7      	ldr	r3, [pc, #668]	@ (8001314 <main+0x330>)
 8001078:	2200      	movs	r2, #0
 800107a:	801a      	strh	r2, [r3, #0]

    // Initialize IMU for the 1st time
    printf("Starting IMU...\r\n");
 800107c:	48a6      	ldr	r0, [pc, #664]	@ (8001318 <main+0x334>)
 800107e:	f009 fd1b 	bl	800aab8 <puts>

    MPU6050_reset(&hi2c1);
 8001082:	489e      	ldr	r0, [pc, #632]	@ (80012fc <main+0x318>)
 8001084:	f001 f972 	bl	800236c <MPU6050_reset>
    HAL_Delay(50);
 8001088:	2032      	movs	r0, #50	@ 0x32
 800108a:	f002 f8b5 	bl	80031f8 <HAL_Delay>

    uint8_t check = MPU6050_Initialize(&hi2c1, A2G, G250DPS, MPU6050_offsets);
 800108e:	4b9e      	ldr	r3, [pc, #632]	@ (8001308 <main+0x324>)
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	4899      	ldr	r0, [pc, #612]	@ (80012fc <main+0x318>)
 8001096:	f001 f88f 	bl	80021b8 <MPU6050_Initialize>
 800109a:	4603      	mov	r3, r0
 800109c:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417

    if (check == 0){ // If no errors during initialization
 80010a0:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d112      	bne.n	80010ce <main+0xea>
      printf("IMU Initialized! \r\n");
 80010a8:	489c      	ldr	r0, [pc, #624]	@ (800131c <main+0x338>)
 80010aa:	f009 fd05 	bl	800aab8 <puts>

      while(1){/* block code execution */}
    }

    // Needed while loading the script (avoid conflict with ST-Link)
    HAL_Delay(500);
 80010ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010b2:	f002 f8a1 	bl	80031f8 <HAL_Delay>

    // Uncomment here to perform a new calibration routine:
    // MPU6050_selfCalibration(&hi2c1, A2G, G250DPS, readings, acel_deadzone, gyro_deadzone);

    // Set-up motion interrupt
    printf("Setting up motion interrupt!\r\n\n");
 80010b6:	489a      	ldr	r0, [pc, #616]	@ (8001320 <main+0x33c>)
 80010b8:	f009 fcfe 	bl	800aab8 <puts>

    MPU6050_setupMotionInt(&hi2c1, mot_dur, mot_th, MPU6050_offsets);
 80010bc:	4b92      	ldr	r3, [pc, #584]	@ (8001308 <main+0x324>)
 80010be:	220a      	movs	r2, #10
 80010c0:	2102      	movs	r1, #2
 80010c2:	488e      	ldr	r0, [pc, #568]	@ (80012fc <main+0x318>)
 80010c4:	f001 fb87 	bl	80027d6 <MPU6050_setupMotionInt>

    /** Now enter the standby mode **/
    enterStandbyMode();
 80010c8:	f000 fe92 	bl	8001df0 <enterStandbyMode>
 80010cc:	e004      	b.n	80010d8 <main+0xf4>
      printf("An error occured during initializiation! \r\n");
 80010ce:	4895      	ldr	r0, [pc, #596]	@ (8001324 <main+0x340>)
 80010d0:	f009 fcf2 	bl	800aab8 <puts>
      while(1){/* block code execution */}
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <main+0xf0>
   */


  // local buff used to read FIFO data:
  uint8_t buff[FIFO_SIZE];
  memset(buff, 0, sizeof(buff));
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f009 fd03 	bl	800aaec <memset>
  /*
   * TODO calculate sleep time using functions
   * (changes according to sampling time and packet size)
   * This variable remains constant (used as a reference)
   */
  uint16_t defaultSleepTime = 21000;  // in milliseconds!!
 80010e6:	f245 2308 	movw	r3, #21000	@ 0x5208
 80010ea:	f8a7 3414 	strh.w	r3, [r7, #1044]	@ 0x414

  // initially sleep for the default time:
  sleepTime = defaultSleepTime;
 80010ee:	4a8e      	ldr	r2, [pc, #568]	@ (8001328 <main+0x344>)
 80010f0:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	@ 0x414
 80010f4:	8013      	strh	r3, [r2, #0]

  // TODO: comment here:

  // suspend tick and setup RTC interrupt
  HAL_SuspendTick();
 80010f6:	f002 f8a3 	bl	8003240 <HAL_SuspendTick>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, sleepTime, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80010fa:	4b8b      	ldr	r3, [pc, #556]	@ (8001328 <main+0x344>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	2200      	movs	r2, #0
 8001100:	4619      	mov	r1, r3
 8001102:	488a      	ldr	r0, [pc, #552]	@ (800132c <main+0x348>)
 8001104:	f006 ffa6 	bl	8008054 <HAL_RTCEx_SetWakeUpTimer_IT>

  /* Enter Stop mode 2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001108:	2001      	movs	r0, #1
 800110a:	f005 f995 	bl	8006438 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // awake here...
    // deactivate the RTC interrupt and resume settings
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800110e:	4887      	ldr	r0, [pc, #540]	@ (800132c <main+0x348>)
 8001110:	f007 f834 	bl	800817c <HAL_RTCEx_DeactivateWakeUpTimer>
    SystemClock_Config();
 8001114:	f000 f922 	bl	800135c <SystemClock_Config>
    HAL_ResumeTick();
 8001118:	f002 f8a2 	bl	8003260 <HAL_ResumeTick>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    if(zero_mot_trg){ // if zero motion is triggered
 800111c:	4b84      	ldr	r3, [pc, #528]	@ (8001330 <main+0x34c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d07e      	beq.n	8001222 <main+0x23e>

      // prevent new interrupt generation
      MPU6050_setIntZeroMotionEnabled(&hi2c1, false);
 8001124:	2100      	movs	r1, #0
 8001126:	4875      	ldr	r0, [pc, #468]	@ (80012fc <main+0x318>)
 8001128:	f001 f974 	bl	8002414 <MPU6050_setIntZeroMotionEnabled>

      // get the full interrupt status vector:
      uint8_t interrupt_status = MPU6050_getIntStatus(&hi2c1);
 800112c:	4873      	ldr	r0, [pc, #460]	@ (80012fc <main+0x318>)
 800112e:	f001 fa1d 	bl	800256c <MPU6050_getIntStatus>
 8001132:	4603      	mov	r3, r0
 8001134:	f887 3413 	strb.w	r3, [r7, #1043]	@ 0x413

      // check zero motion and overflow bits:
      bool zeroMotBit   = (interrupt_status >> MPU6050_INTERRUPT_ZMOT_BIT) & 0x01;
 8001138:	f897 3413 	ldrb.w	r3, [r7, #1043]	@ 0x413
 800113c:	095b      	lsrs	r3, r3, #5
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b00      	cmp	r3, #0
 8001146:	bf14      	ite	ne
 8001148:	2301      	movne	r3, #1
 800114a:	2300      	moveq	r3, #0
 800114c:	f887 3412 	strb.w	r3, [r7, #1042]	@ 0x412
      bool fifoOflowBit = (interrupt_status >> MPU6050_INTERRUPT_FIFO_OFLOW_BIT) & 0x01;
 8001150:	f897 3413 	ldrb.w	r3, [r7, #1043]	@ 0x413
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	b2db      	uxtb	r3, r3
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b00      	cmp	r3, #0
 800115e:	bf14      	ite	ne
 8001160:	2301      	movne	r3, #1
 8001162:	2300      	moveq	r3, #0
 8001164:	f887 3411 	strb.w	r3, [r7, #1041]	@ 0x411

      // check motiont_status_reg --> determine if the interrupt was caused by motion_to_zero_motion event or vice-versa
      bool mot_to_zeroMot = MPU6050_getZeroMotionDetected(&hi2c1);
 8001168:	4864      	ldr	r0, [pc, #400]	@ (80012fc <main+0x318>)
 800116a:	f001 fa26 	bl	80025ba <MPU6050_getZeroMotionDetected>
 800116e:	4603      	mov	r3, r0
 8001170:	f887 3410 	strb.w	r3, [r7, #1040]	@ 0x410

      /* Determine which signal triggered the system activation: */

      // FIFO overflow event:
      if (fifoOflowBit) {
 8001174:	f897 3411 	ldrb.w	r3, [r7, #1041]	@ 0x411
 8001178:	2b00      	cmp	r3, #0
 800117a:	d004      	beq.n	8001186 <main+0x1a2>
        // TODO manage overflow event
        printf("FIFO Oflow\r\n");
 800117c:	486d      	ldr	r0, [pc, #436]	@ (8001334 <main+0x350>)
 800117e:	f009 fc9b 	bl	800aab8 <puts>
        while(1);
 8001182:	bf00      	nop
 8001184:	e7fd      	b.n	8001182 <main+0x19e>
      }

      // Zero motion event caused by zero_motion_to_motion status
      if (zeroMotBit & !mot_to_zeroMot) {
 8001186:	f897 3412 	ldrb.w	r3, [r7, #1042]	@ 0x412
 800118a:	f897 2410 	ldrb.w	r2, [r7, #1040]	@ 0x410
 800118e:	f082 0201 	eor.w	r2, r2, #1
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	4013      	ands	r3, r2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d004      	beq.n	80011a4 <main+0x1c0>
        // TODO manage this event
        printf("Wrong zero mot\r\n");
 800119a:	4867      	ldr	r0, [pc, #412]	@ (8001338 <main+0x354>)
 800119c:	f009 fc8c 	bl	800aab8 <puts>
        while(1);
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <main+0x1bc>
      }

      // This point is reached only if the MCU was triggered by a real zero motion event

      // stop FIFO acquisition and read data:
      bool rehabilitateFifo = false;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f
      fifoCount = readIMUFifoBuffer(&hi2c1, buff, rehabilitateFifo);
 80011aa:	f897 240f 	ldrb.w	r2, [r7, #1039]	@ 0x40f
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	4619      	mov	r1, r3
 80011b2:	4852      	ldr	r0, [pc, #328]	@ (80012fc <main+0x318>)
 80011b4:	f000 fc2e 	bl	8001a14 <readIMUFifoBuffer>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f8a7 340c 	strh.w	r3, [r7, #1036]	@ 0x40c

      // process FIFO data
      process_and_save_ImuReadings(buff, fifoCount, mainBuff, &buff_Head, ax, ay, az, gx, gy, gz);
 80011be:	4b5f      	ldr	r3, [pc, #380]	@ (800133c <main+0x358>)
 80011c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c4:	4a5e      	ldr	r2, [pc, #376]	@ (8001340 <main+0x35c>)
 80011c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011ca:	495e      	ldr	r1, [pc, #376]	@ (8001344 <main+0x360>)
 80011cc:	f9b1 1000 	ldrsh.w	r1, [r1]
 80011d0:	485d      	ldr	r0, [pc, #372]	@ (8001348 <main+0x364>)
 80011d2:	f9b0 0000 	ldrsh.w	r0, [r0]
 80011d6:	4c5d      	ldr	r4, [pc, #372]	@ (800134c <main+0x368>)
 80011d8:	f9b4 4000 	ldrsh.w	r4, [r4]
 80011dc:	4d5c      	ldr	r5, [pc, #368]	@ (8001350 <main+0x36c>)
 80011de:	f9b5 5000 	ldrsh.w	r5, [r5]
 80011e2:	f8b7 c40c 	ldrh.w	ip, [r7, #1036]	@ 0x40c
 80011e6:	1d3e      	adds	r6, r7, #4
 80011e8:	9505      	str	r5, [sp, #20]
 80011ea:	9404      	str	r4, [sp, #16]
 80011ec:	9003      	str	r0, [sp, #12]
 80011ee:	9102      	str	r1, [sp, #8]
 80011f0:	9201      	str	r2, [sp, #4]
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	4b47      	ldr	r3, [pc, #284]	@ (8001314 <main+0x330>)
 80011f6:	4a46      	ldr	r2, [pc, #280]	@ (8001310 <main+0x32c>)
 80011f8:	4661      	mov	r1, ip
 80011fa:	4630      	mov	r0, r6
 80011fc:	f000 fcaa 	bl	8001b54 <process_and_save_ImuReadings>

      // Set-up MPU6050 for motion interrupt:
      MPU6050_reset(&hi2c1);
 8001200:	483e      	ldr	r0, [pc, #248]	@ (80012fc <main+0x318>)
 8001202:	f001 f8b3 	bl	800236c <MPU6050_reset>
      HAL_Delay(50);
 8001206:	2032      	movs	r0, #50	@ 0x32
 8001208:	f001 fff6 	bl	80031f8 <HAL_Delay>

      // Set-up motion interrupt
      printf("Setting up motion interrupt!\r\n\n");
 800120c:	4844      	ldr	r0, [pc, #272]	@ (8001320 <main+0x33c>)
 800120e:	f009 fc53 	bl	800aab8 <puts>

      MPU6050_setupMotionInt(&hi2c1, mot_dur, mot_th, MPU6050_offsets);
 8001212:	4b3d      	ldr	r3, [pc, #244]	@ (8001308 <main+0x324>)
 8001214:	220a      	movs	r2, #10
 8001216:	2102      	movs	r1, #2
 8001218:	4838      	ldr	r0, [pc, #224]	@ (80012fc <main+0x318>)
 800121a:	f001 fadc 	bl	80027d6 <MPU6050_setupMotionInt>

      /** Now enter standby mode **/
      enterStandbyMode();
 800121e:	f000 fde7 	bl	8001df0 <enterStandbyMode>

    } /* End of zero motion event: enter deep sleep mode */

    if(rtc_trg){ // if rtc flag is set
 8001222:	4b4c      	ldr	r3, [pc, #304]	@ (8001354 <main+0x370>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	f43f af71 	beq.w	800110e <main+0x12a>

      /* read FIFO buffer: */
      bool rehabilitateFifo = true;
 800122c:	2301      	movs	r3, #1
 800122e:	f887 340b 	strb.w	r3, [r7, #1035]	@ 0x40b
      fifoCount = readIMUFifoBuffer(&hi2c1, buff, rehabilitateFifo);
 8001232:	f897 240b 	ldrb.w	r2, [r7, #1035]	@ 0x40b
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	4619      	mov	r1, r3
 800123a:	4830      	ldr	r0, [pc, #192]	@ (80012fc <main+0x318>)
 800123c:	f000 fbea 	bl	8001a14 <readIMUFifoBuffer>
 8001240:	4603      	mov	r3, r0
 8001242:	f8a7 340c 	strh.w	r3, [r7, #1036]	@ 0x40c


      // Start counting total time required by the MCU
      // This time will be subtracted from the total sleep time
      Timer_On();
 8001246:	f000 fbcd 	bl	80019e4 <Timer_On>

      /* Process data and write into permanent memories */

      process_and_save_ImuReadings(buff, fifoCount, mainBuff, &buff_Head, ax, ay, az, gx, gy, gz);
 800124a:	4b3c      	ldr	r3, [pc, #240]	@ (800133c <main+0x358>)
 800124c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001250:	4a3b      	ldr	r2, [pc, #236]	@ (8001340 <main+0x35c>)
 8001252:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001256:	493b      	ldr	r1, [pc, #236]	@ (8001344 <main+0x360>)
 8001258:	f9b1 1000 	ldrsh.w	r1, [r1]
 800125c:	483a      	ldr	r0, [pc, #232]	@ (8001348 <main+0x364>)
 800125e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8001262:	4c3a      	ldr	r4, [pc, #232]	@ (800134c <main+0x368>)
 8001264:	f9b4 4000 	ldrsh.w	r4, [r4]
 8001268:	4d39      	ldr	r5, [pc, #228]	@ (8001350 <main+0x36c>)
 800126a:	f9b5 5000 	ldrsh.w	r5, [r5]
 800126e:	f8b7 c40c 	ldrh.w	ip, [r7, #1036]	@ 0x40c
 8001272:	1d3e      	adds	r6, r7, #4
 8001274:	9505      	str	r5, [sp, #20]
 8001276:	9404      	str	r4, [sp, #16]
 8001278:	9003      	str	r0, [sp, #12]
 800127a:	9102      	str	r1, [sp, #8]
 800127c:	9201      	str	r2, [sp, #4]
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	4b24      	ldr	r3, [pc, #144]	@ (8001314 <main+0x330>)
 8001282:	4a23      	ldr	r2, [pc, #140]	@ (8001310 <main+0x32c>)
 8001284:	4661      	mov	r1, ip
 8001286:	4630      	mov	r0, r6
 8001288:	f000 fc64 	bl	8001b54 <process_and_save_ImuReadings>
          To configure the wake up timer to 20s the WakeUpCounter is set to 0xA017:
            RTC_WAKEUPCLOCK_RTCCLK_DIV = RTCCLK_Div16 = 16
            Wake-up Time Base = 16 /(32KHz) = 0.0005 seconds
            ==> WakeUpCounter = ~10s/0.0005s = 20000 = 0x4E20 */

      rtc_trg = false;
 800128c:	4b31      	ldr	r3, [pc, #196]	@ (8001354 <main+0x370>)
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
      sleepTime = defaultSleepTime - Timer_Status();
 8001292:	f000 fbb3 	bl	80019fc <Timer_Status>
 8001296:	4603      	mov	r3, r0
 8001298:	b29b      	uxth	r3, r3
 800129a:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	@ 0x414
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	4b21      	ldr	r3, [pc, #132]	@ (8001328 <main+0x344>)
 80012a4:	801a      	strh	r2, [r3, #0]
      uint32_t wakeUpCounter = (sleepTime/1e3)/(0.00048828125);
 80012a6:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <main+0x344>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f93a 	bl	8000524 <__aeabi_i2d>
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	4b28      	ldr	r3, [pc, #160]	@ (8001358 <main+0x374>)
 80012b6:	f7ff fac9 	bl	800084c <__aeabi_ddiv>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 80012ca:	f7ff fabf 	bl	800084c <__aeabi_ddiv>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	f7ff fc67 	bl	8000ba8 <__aeabi_d2uiz>
 80012da:	4603      	mov	r3, r0
 80012dc:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404

      // Enter STOP2 mode:
      HAL_SuspendTick();
 80012e0:	f001 ffae 	bl	8003240 <HAL_SuspendTick>
      HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeUpCounter, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80012e4:	2200      	movs	r2, #0
 80012e6:	f8d7 1404 	ldr.w	r1, [r7, #1028]	@ 0x404
 80012ea:	4810      	ldr	r0, [pc, #64]	@ (800132c <main+0x348>)
 80012ec:	f006 feb2 	bl	8008054 <HAL_RTCEx_SetWakeUpTimer_IT>


      /*  Enter Stop Mode 2 */
      HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80012f0:	2001      	movs	r0, #1
 80012f2:	f005 f8a1 	bl	8006438 <HAL_PWREx_EnterSTOP2Mode>
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80012f6:	e70a      	b.n	800110e <main+0x12a>
 80012f8:	40007000 	.word	0x40007000
 80012fc:	200001fc 	.word	0x200001fc
 8001300:	2000036a 	.word	0x2000036a
 8001304:	0800d618 	.word	0x0800d618
 8001308:	20000000 	.word	0x20000000
 800130c:	0800d630 	.word	0x0800d630
 8001310:	10000000 	.word	0x10000000
 8001314:	10007ae0 	.word	0x10007ae0
 8001318:	0800d640 	.word	0x0800d640
 800131c:	0800d654 	.word	0x0800d654
 8001320:	0800d694 	.word	0x0800d694
 8001324:	0800d668 	.word	0x0800d668
 8001328:	20000368 	.word	0x20000368
 800132c:	20000298 	.word	0x20000298
 8001330:	20000345 	.word	0x20000345
 8001334:	0800d6b4 	.word	0x0800d6b4
 8001338:	0800d6c0 	.word	0x0800d6c0
 800133c:	2000036c 	.word	0x2000036c
 8001340:	2000036e 	.word	0x2000036e
 8001344:	20000370 	.word	0x20000370
 8001348:	20000390 	.word	0x20000390
 800134c:	20000392 	.word	0x20000392
 8001350:	20000394 	.word	0x20000394
 8001354:	20000346 	.word	0x20000346
 8001358:	408f4000 	.word	0x408f4000

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b096      	sub	sp, #88	@ 0x58
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	2244      	movs	r2, #68	@ 0x44
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f009 fbbe 	bl	800aaec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	463b      	mov	r3, r7
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800137e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001382:	f004 ff23 	bl	80061cc <HAL_PWREx_ControlVoltageScaling>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800138c:	f000 fda0 	bl	8001ed0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001390:	f004 feae 	bl	80060f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001394:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <SystemClock_Config+0xbc>)
 8001396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800139a:	4a1f      	ldr	r2, [pc, #124]	@ (8001418 <SystemClock_Config+0xbc>)
 800139c:	f023 0318 	bic.w	r3, r3, #24
 80013a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80013a4:	2306      	movs	r3, #6
 80013a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013a8:	2301      	movs	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b2:	2310      	movs	r3, #16
 80013b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b6:	2302      	movs	r3, #2
 80013b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ba:	2302      	movs	r3, #2
 80013bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013be:	2301      	movs	r3, #1
 80013c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013c2:	230a      	movs	r3, #10
 80013c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013c6:	2307      	movs	r3, #7
 80013c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013ca:	2302      	movs	r3, #2
 80013cc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013ce:	2302      	movs	r3, #2
 80013d0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4618      	mov	r0, r3
 80013d8:	f005 f85a 	bl	8006490 <HAL_RCC_OscConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80013e2:	f000 fd75 	bl	8001ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e6:	230f      	movs	r3, #15
 80013e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ea:	2303      	movs	r3, #3
 80013ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013fa:	463b      	mov	r3, r7
 80013fc:	2104      	movs	r1, #4
 80013fe:	4618      	mov	r0, r3
 8001400:	f005 fc22 	bl	8006c48 <HAL_RCC_ClockConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800140a:	f000 fd61 	bl	8001ed0 <Error_Handler>
  }
}
 800140e:	bf00      	nop
 8001410:	3758      	adds	r7, #88	@ 0x58
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000

0800141c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001420:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <MX_I2C1_Init+0x74>)
 8001422:	4a1c      	ldr	r2, [pc, #112]	@ (8001494 <MX_I2C1_Init+0x78>)
 8001424:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <MX_I2C1_Init+0x74>)
 8001428:	4a1b      	ldr	r2, [pc, #108]	@ (8001498 <MX_I2C1_Init+0x7c>)
 800142a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800142c:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <MX_I2C1_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001432:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <MX_I2C1_Init+0x74>)
 8001434:	2201      	movs	r2, #1
 8001436:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001438:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <MX_I2C1_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800143e:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <MX_I2C1_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <MX_I2C1_Init+0x74>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144a:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <MX_I2C1_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001450:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <MX_I2C1_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001456:	480e      	ldr	r0, [pc, #56]	@ (8001490 <MX_I2C1_Init+0x74>)
 8001458:	f002 fc44 	bl	8003ce4 <HAL_I2C_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001462:	f000 fd35 	bl	8001ed0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001466:	2100      	movs	r1, #0
 8001468:	4809      	ldr	r0, [pc, #36]	@ (8001490 <MX_I2C1_Init+0x74>)
 800146a:	f004 fda9 	bl	8005fc0 <HAL_I2CEx_ConfigAnalogFilter>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001474:	f000 fd2c 	bl	8001ed0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001478:	2100      	movs	r1, #0
 800147a:	4805      	ldr	r0, [pc, #20]	@ (8001490 <MX_I2C1_Init+0x74>)
 800147c:	f004 fdeb 	bl	8006056 <HAL_I2CEx_ConfigDigitalFilter>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001486:	f000 fd23 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200001fc 	.word	0x200001fc
 8001494:	40005400 	.word	0x40005400
 8001498:	00702991 	.word	0x00702991

0800149c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80014b0:	2300      	movs	r3, #0
 80014b2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014b4:	4b3f      	ldr	r3, [pc, #252]	@ (80015b4 <MX_RTC_Init+0x118>)
 80014b6:	4a40      	ldr	r2, [pc, #256]	@ (80015b8 <MX_RTC_Init+0x11c>)
 80014b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014ba:	4b3e      	ldr	r3, [pc, #248]	@ (80015b4 <MX_RTC_Init+0x118>)
 80014bc:	2200      	movs	r2, #0
 80014be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014c0:	4b3c      	ldr	r3, [pc, #240]	@ (80015b4 <MX_RTC_Init+0x118>)
 80014c2:	227f      	movs	r2, #127	@ 0x7f
 80014c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014c6:	4b3b      	ldr	r3, [pc, #236]	@ (80015b4 <MX_RTC_Init+0x118>)
 80014c8:	22ff      	movs	r2, #255	@ 0xff
 80014ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014cc:	4b39      	ldr	r3, [pc, #228]	@ (80015b4 <MX_RTC_Init+0x118>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80014d2:	4b38      	ldr	r3, [pc, #224]	@ (80015b4 <MX_RTC_Init+0x118>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014d8:	4b36      	ldr	r3, [pc, #216]	@ (80015b4 <MX_RTC_Init+0x118>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014de:	4b35      	ldr	r3, [pc, #212]	@ (80015b4 <MX_RTC_Init+0x118>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014e4:	4833      	ldr	r0, [pc, #204]	@ (80015b4 <MX_RTC_Init+0x118>)
 80014e6:	f006 fa8f 	bl	8007a08 <HAL_RTC_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80014f0:	f000 fcee 	bl	8001ed0 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 80014f4:	4b31      	ldr	r3, [pc, #196]	@ (80015bc <MX_RTC_Init+0x120>)
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <MX_RTC_Init+0x6c>
    printf("\n\nWaking from StandBy mode, RTC skip!\r\n");
 8001500:	482f      	ldr	r0, [pc, #188]	@ (80015c0 <MX_RTC_Init+0x124>)
 8001502:	f009 fad9 	bl	800aab8 <puts>
 8001506:	e052      	b.n	80015ae <MX_RTC_Init+0x112>
    return; // Exit the function to prevent reinitialize RTC
  } else {
    printf("\n\nInitializing RTC!\r\n");
 8001508:	482e      	ldr	r0, [pc, #184]	@ (80015c4 <MX_RTC_Init+0x128>)
 800150a:	f009 fad5 	bl	800aab8 <puts>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800150e:	2300      	movs	r3, #0
 8001510:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001512:	2300      	movs	r3, #0
 8001514:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001516:	2300      	movs	r3, #0
 8001518:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2201      	movs	r2, #1
 8001526:	4619      	mov	r1, r3
 8001528:	4822      	ldr	r0, [pc, #136]	@ (80015b4 <MX_RTC_Init+0x118>)
 800152a:	f006 faf5 	bl	8007b18 <HAL_RTC_SetTime>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_RTC_Init+0x9c>
  {
    Error_Handler();
 8001534:	f000 fccc 	bl	8001ed0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001538:	2301      	movs	r3, #1
 800153a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800153c:	2301      	movs	r3, #1
 800153e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001540:	2301      	movs	r3, #1
 8001542:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001544:	2300      	movs	r3, #0
 8001546:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	2201      	movs	r2, #1
 800154c:	4619      	mov	r1, r3
 800154e:	4819      	ldr	r0, [pc, #100]	@ (80015b4 <MX_RTC_Init+0x118>)
 8001550:	f006 fbdb 	bl	8007d0a <HAL_RTC_SetDate>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800155a:	f000 fcb9 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Initialize RTC with user variables:
   sTime.Hours = startHours;
 800155e:	2318      	movs	r3, #24
 8001560:	713b      	strb	r3, [r7, #4]
   sTime.Minutes = startMinutes;
 8001562:	2333      	movs	r3, #51	@ 0x33
 8001564:	717b      	strb	r3, [r7, #5]
   sTime.Seconds = startSeconds;
 8001566:	2300      	movs	r3, #0
 8001568:	71bb      	strb	r3, [r7, #6]
   sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
   sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2201      	movs	r2, #1
 8001576:	4619      	mov	r1, r3
 8001578:	480e      	ldr	r0, [pc, #56]	@ (80015b4 <MX_RTC_Init+0x118>)
 800157a:	f006 facd 	bl	8007b18 <HAL_RTC_SetTime>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_RTC_Init+0xec>
   {
     Error_Handler();
 8001584:	f000 fca4 	bl	8001ed0 <Error_Handler>
   }
   sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001588:	2301      	movs	r3, #1
 800158a:	703b      	strb	r3, [r7, #0]
   sDate.Month = startMonth;
 800158c:	2310      	movs	r3, #16
 800158e:	707b      	strb	r3, [r7, #1]
   sDate.Date = startDate;
 8001590:	2309      	movs	r3, #9
 8001592:	70bb      	strb	r3, [r7, #2]
   sDate.Year = startYear;
 8001594:	2324      	movs	r3, #36	@ 0x24
 8001596:	70fb      	strb	r3, [r7, #3]

   if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001598:	463b      	mov	r3, r7
 800159a:	2201      	movs	r2, #1
 800159c:	4619      	mov	r1, r3
 800159e:	4805      	ldr	r0, [pc, #20]	@ (80015b4 <MX_RTC_Init+0x118>)
 80015a0:	f006 fbb3 	bl	8007d0a <HAL_RTC_SetDate>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_RTC_Init+0x112>
   {
     Error_Handler();
 80015aa:	f000 fc91 	bl	8001ed0 <Error_Handler>
   }

  /* USER CODE END RTC_Init 2 */

}
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000298 	.word	0x20000298
 80015b8:	40002800 	.word	0x40002800
 80015bc:	40007000 	.word	0x40007000
 80015c0:	0800d6d0 	.word	0x0800d6d0
 80015c4:	0800d6f8 	.word	0x0800d6f8

080015c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015cc:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015ce:	4a15      	ldr	r2, [pc, #84]	@ (8001624 <MX_USART2_UART_Init+0x5c>)
 80015d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015d2:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015ee:	220c      	movs	r2, #12
 80015f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f8:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fe:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001604:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 800160c:	f006 fe3a 	bl	8008284 <HAL_UART_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001616:	f000 fc5b 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200002bc 	.word	0x200002bc
 8001624:	40004400 	.word	0x40004400

08001628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800162e:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <MX_DMA_Init+0x38>)
 8001630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001632:	4a0b      	ldr	r2, [pc, #44]	@ (8001660 <MX_DMA_Init+0x38>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6493      	str	r3, [r2, #72]	@ 0x48
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <MX_DMA_Init+0x38>)
 800163c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	2011      	movs	r0, #17
 800164c:	f001 fef3 	bl	8003436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001650:	2011      	movs	r0, #17
 8001652:	f001 ff0c 	bl	800346e <HAL_NVIC_EnableIRQ>

}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000

08001664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	@ 0x28
 8001668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	4b57      	ldr	r3, [pc, #348]	@ (80017d8 <MX_GPIO_Init+0x174>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167e:	4a56      	ldr	r2, [pc, #344]	@ (80017d8 <MX_GPIO_Init+0x174>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001686:	4b54      	ldr	r3, [pc, #336]	@ (80017d8 <MX_GPIO_Init+0x174>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001692:	4b51      	ldr	r3, [pc, #324]	@ (80017d8 <MX_GPIO_Init+0x174>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	4a50      	ldr	r2, [pc, #320]	@ (80017d8 <MX_GPIO_Init+0x174>)
 8001698:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800169c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169e:	4b4e      	ldr	r3, [pc, #312]	@ (80017d8 <MX_GPIO_Init+0x174>)
 80016a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	4b4b      	ldr	r3, [pc, #300]	@ (80017d8 <MX_GPIO_Init+0x174>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ae:	4a4a      	ldr	r2, [pc, #296]	@ (80017d8 <MX_GPIO_Init+0x174>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b6:	4b48      	ldr	r3, [pc, #288]	@ (80017d8 <MX_GPIO_Init+0x174>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	4b45      	ldr	r3, [pc, #276]	@ (80017d8 <MX_GPIO_Init+0x174>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	4a44      	ldr	r2, [pc, #272]	@ (80017d8 <MX_GPIO_Init+0x174>)
 80016c8:	f043 0302 	orr.w	r3, r3, #2
 80016cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ce:	4b42      	ldr	r3, [pc, #264]	@ (80017d8 <MX_GPIO_Init+0x174>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016da:	4b3f      	ldr	r3, [pc, #252]	@ (80017d8 <MX_GPIO_Init+0x174>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	4a3e      	ldr	r2, [pc, #248]	@ (80017d8 <MX_GPIO_Init+0x174>)
 80016e0:	f043 0308 	orr.w	r3, r3, #8
 80016e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e6:	4b3c      	ldr	r3, [pc, #240]	@ (80017d8 <MX_GPIO_Init+0x174>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2120      	movs	r1, #32
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016fa:	f002 fac3 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001704:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4831      	ldr	r0, [pc, #196]	@ (80017dc <MX_GPIO_Init+0x178>)
 8001716:	f002 f90b 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800171a:	f641 73df 	movw	r3, #8159	@ 0x1fdf
 800171e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001720:	2303      	movs	r3, #3
 8001722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	482b      	ldr	r0, [pc, #172]	@ (80017dc <MX_GPIO_Init+0x178>)
 8001730:	f002 f8fe 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 PA8 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8001734:	f649 53d3 	movw	r3, #40403	@ 0x9dd3
 8001738:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800173a:	2303      	movs	r3, #3
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800174c:	f002 f8f0 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001750:	2320      	movs	r3, #32
 8001752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001754:	2301      	movs	r3, #1
 8001756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800176a:	f002 f8e1 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800176e:	f64f 43f7 	movw	r3, #64759	@ 0xfcf7
 8001772:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001774:	2303      	movs	r3, #3
 8001776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	4817      	ldr	r0, [pc, #92]	@ (80017e0 <MX_GPIO_Init+0x17c>)
 8001784:	f002 f8d4 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_Int1_Pin */
  GPIO_InitStruct.Pin = IMU_Int1_Pin;
 8001788:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800178c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800178e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001794:	2302      	movs	r3, #2
 8001796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_Int1_GPIO_Port, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017a2:	f002 f8c5 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017a6:	2304      	movs	r3, #4
 80017a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017aa:	2303      	movs	r3, #3
 80017ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	480a      	ldr	r0, [pc, #40]	@ (80017e4 <MX_GPIO_Init+0x180>)
 80017ba:	f002 f8b9 	bl	8003930 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2017      	movs	r0, #23
 80017c4:	f001 fe37 	bl	8003436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017c8:	2017      	movs	r0, #23
 80017ca:	f001 fe50 	bl	800346e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ce:	bf00      	nop
 80017d0:	3728      	adds	r7, #40	@ 0x28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000
 80017dc:	48000800 	.word	0x48000800
 80017e0:	48000400 	.word	0x48000400
 80017e4:	48000c00 	.word	0x48000c00

080017e8 <_write>:

/* USER CODE BEGIN 4 */

// Function to redirect printf output to UART
int _write(int file, char *ptr, int len)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	4804      	ldr	r0, [pc, #16]	@ (8001810 <_write+0x28>)
 8001800:	f006 fd8e 	bl	8008320 <HAL_UART_Transmit>
  return len;
 8001804:	687b      	ldr	r3, [r7, #4]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200002bc 	.word	0x200002bc

08001814 <add_data_to_buff>:


// TODO
uint8_t add_data_to_buff (char* buff, uint16_t* buff_Head, double ax, double ay, double az, double gx, double gy, double gz) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b096      	sub	sp, #88	@ 0x58
 8001818:	af06      	add	r7, sp, #24
 800181a:	6378      	str	r0, [r7, #52]	@ 0x34
 800181c:	6339      	str	r1, [r7, #48]	@ 0x30
 800181e:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 8001822:	ed87 1b08 	vstr	d1, [r7, #32]
 8001826:	ed87 2b06 	vstr	d2, [r7, #24]
 800182a:	ed87 3b04 	vstr	d3, [r7, #16]
 800182e:	ed87 4b02 	vstr	d4, [r7, #8]
 8001832:	ed87 5b00 	vstr	d5, [r7]

  // Check for buffer overflow
  uint16_t init_buff_head = *buff_Head;
 8001836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t available_space = BUFFER_SIZE - *buff_Head;
 800183c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	f5c3 43f5 	rsb	r3, r3, #31360	@ 0x7a80
 8001844:	3360      	adds	r3, #96	@ 0x60
 8001846:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  if (available_space < SD_PACKET_SIZE) {  // +1 for null terminator
 8001848:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800184a:	2b2d      	cmp	r3, #45	@ 0x2d
 800184c:	d801      	bhi.n	8001852 <add_data_to_buff+0x3e>
    return -1;  // Indicate buffer full
 800184e:	23ff      	movs	r3, #255	@ 0xff
 8001850:	e04a      	b.n	80018e8 <add_data_to_buff+0xd4>
  }

  // Add Accelerometer:

  *buff_Head += snprintf(buff + *buff_Head, BUFFER_SIZE - *buff_Head,
 8001852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800185a:	1898      	adds	r0, r3, r2
 800185c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	f5c3 43f5 	rsb	r3, r3, #31360	@ 0x7a80
 8001864:	3360      	adds	r3, #96	@ 0x60
 8001866:	4619      	mov	r1, r3
 8001868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800186c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001870:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001874:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001878:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800187c:	e9cd 2300 	strd	r2, r3, [sp]
 8001880:	4a1b      	ldr	r2, [pc, #108]	@ (80018f0 <add_data_to_buff+0xdc>)
 8001882:	f008 f915 	bl	8009ab0 <sniprintf>
 8001886:	4601      	mov	r1, r0
 8001888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800188a:	881a      	ldrh	r2, [r3, #0]
 800188c:	b28b      	uxth	r3, r1
 800188e:	4413      	add	r3, r2
 8001890:	b29a      	uxth	r2, r3
 8001892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001894:	801a      	strh	r2, [r3, #0]
                                ax,
                                ay,
                                az);

  // Add Gyroscope:
  *buff_Head += snprintf(buff + *buff_Head, BUFFER_SIZE - *buff_Head,
 8001896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800189e:	1898      	adds	r0, r3, r2
 80018a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	f5c3 43f5 	rsb	r3, r3, #31360	@ 0x7a80
 80018a8:	3360      	adds	r3, #96	@ 0x60
 80018aa:	4619      	mov	r1, r3
 80018ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018c0:	e9cd 2300 	strd	r2, r3, [sp]
 80018c4:	4a0b      	ldr	r2, [pc, #44]	@ (80018f4 <add_data_to_buff+0xe0>)
 80018c6:	f008 f8f3 	bl	8009ab0 <sniprintf>
 80018ca:	4601      	mov	r1, r0
 80018cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018ce:	881a      	ldrh	r2, [r3, #0]
 80018d0:	b28b      	uxth	r3, r1
 80018d2:	4413      	add	r3, r2
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018d8:	801a      	strh	r2, [r3, #0]
                                "%+07.2f %+07.2f %+07.2f\r\n",
                                gx,
                                gy,
                                gz);

  return *buff_Head - init_buff_head;
 80018da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	b2db      	uxtb	r3, r3
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3740      	adds	r7, #64	@ 0x40
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	0800d710 	.word	0x0800d710
 80018f4:	0800d728 	.word	0x0800d728

080018f8 <add_time_to_buff>:


// TODO: add more comments here...
//add current time to main buffer, returns -1 if buffer full, number of bytes written otherwise
uint8_t add_time_to_buff (char * buff, uint16_t* buff_Head) {
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fa:	b08b      	sub	sp, #44	@ 0x2c
 80018fc:	af06      	add	r7, sp, #24
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]

  // Check for buffer overflow
  uint16_t init_buff_head = *buff_Head;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	81fb      	strh	r3, [r7, #14]
  uint16_t available_space = BUFFER_SIZE - *buff_Head;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	f5c3 43f5 	rsb	r3, r3, #31360	@ 0x7a80
 8001910:	3360      	adds	r3, #96	@ 0x60
 8001912:	81bb      	strh	r3, [r7, #12]

  // Ensure that the buffer is not overflowed
  if (available_space < SD_TIMESTAMP_SIZE) {  // +1 for null terminator
 8001914:	89bb      	ldrh	r3, [r7, #12]
 8001916:	2b15      	cmp	r3, #21
 8001918:	d801      	bhi.n	800191e <add_time_to_buff+0x26>
    return -1;  // Indicate buffer full
 800191a:	23ff      	movs	r3, #255	@ 0xff
 800191c:	e052      	b.n	80019c4 <add_time_to_buff+0xcc>
  }

  // Get current time:
  statusRTC = HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800191e:	2200      	movs	r2, #0
 8001920:	492a      	ldr	r1, [pc, #168]	@ (80019cc <add_time_to_buff+0xd4>)
 8001922:	482b      	ldr	r0, [pc, #172]	@ (80019d0 <add_time_to_buff+0xd8>)
 8001924:	f006 f995 	bl	8007c52 <HAL_RTC_GetTime>
 8001928:	4603      	mov	r3, r0
 800192a:	461a      	mov	r2, r3
 800192c:	4b29      	ldr	r3, [pc, #164]	@ (80019d4 <add_time_to_buff+0xdc>)
 800192e:	701a      	strb	r2, [r3, #0]
  if (statusRTC != HAL_OK) {
 8001930:	4b28      	ldr	r3, [pc, #160]	@ (80019d4 <add_time_to_buff+0xdc>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d004      	beq.n	8001942 <add_time_to_buff+0x4a>
    printf("RTC error!\r\n");
 8001938:	4827      	ldr	r0, [pc, #156]	@ (80019d8 <add_time_to_buff+0xe0>)
 800193a:	f009 f8bd 	bl	800aab8 <puts>
    while(1);
 800193e:	bf00      	nop
 8001940:	e7fd      	b.n	800193e <add_time_to_buff+0x46>
  }

  // Get current date:
  statusRTC = HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001942:	2200      	movs	r2, #0
 8001944:	4925      	ldr	r1, [pc, #148]	@ (80019dc <add_time_to_buff+0xe4>)
 8001946:	4822      	ldr	r0, [pc, #136]	@ (80019d0 <add_time_to_buff+0xd8>)
 8001948:	f006 fa66 	bl	8007e18 <HAL_RTC_GetDate>
 800194c:	4603      	mov	r3, r0
 800194e:	461a      	mov	r2, r3
 8001950:	4b20      	ldr	r3, [pc, #128]	@ (80019d4 <add_time_to_buff+0xdc>)
 8001952:	701a      	strb	r2, [r3, #0]
  if (statusRTC != HAL_OK) {
 8001954:	4b1f      	ldr	r3, [pc, #124]	@ (80019d4 <add_time_to_buff+0xdc>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d004      	beq.n	8001966 <add_time_to_buff+0x6e>
    printf("RTC error!\r\n");
 800195c:	481e      	ldr	r0, [pc, #120]	@ (80019d8 <add_time_to_buff+0xe0>)
 800195e:	f009 f8ab 	bl	800aab8 <puts>
    while(1);
 8001962:	bf00      	nop
 8001964:	e7fd      	b.n	8001962 <add_time_to_buff+0x6a>
  }

  // Add time stamp:
  *buff_Head += snprintf(buff + *buff_Head, available_space, "T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	1898      	adds	r0, r3, r2
 8001970:	89b9      	ldrh	r1, [r7, #12]
                         sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001972:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <add_time_to_buff+0xe4>)
 8001974:	78db      	ldrb	r3, [r3, #3]
  *buff_Head += snprintf(buff + *buff_Head, available_space, "T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001976:	469c      	mov	ip, r3
                         sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001978:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <add_time_to_buff+0xe4>)
 800197a:	785b      	ldrb	r3, [r3, #1]
  *buff_Head += snprintf(buff + *buff_Head, available_space, "T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 800197c:	461a      	mov	r2, r3
                         sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 800197e:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <add_time_to_buff+0xe4>)
 8001980:	789b      	ldrb	r3, [r3, #2]
  *buff_Head += snprintf(buff + *buff_Head, available_space, "T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001982:	461c      	mov	r4, r3
                         sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001984:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <add_time_to_buff+0xd4>)
 8001986:	781b      	ldrb	r3, [r3, #0]
  *buff_Head += snprintf(buff + *buff_Head, available_space, "T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001988:	461d      	mov	r5, r3
                         sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 800198a:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <add_time_to_buff+0xd4>)
 800198c:	785b      	ldrb	r3, [r3, #1]
  *buff_Head += snprintf(buff + *buff_Head, available_space, "T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 800198e:	461e      	mov	r6, r3
                         sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001990:	4b0e      	ldr	r3, [pc, #56]	@ (80019cc <add_time_to_buff+0xd4>)
 8001992:	789b      	ldrb	r3, [r3, #2]
  *buff_Head += snprintf(buff + *buff_Head, available_space, "T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001994:	9304      	str	r3, [sp, #16]
 8001996:	9603      	str	r6, [sp, #12]
 8001998:	9502      	str	r5, [sp, #8]
 800199a:	9401      	str	r4, [sp, #4]
 800199c:	9200      	str	r2, [sp, #0]
 800199e:	4663      	mov	r3, ip
 80019a0:	4a0f      	ldr	r2, [pc, #60]	@ (80019e0 <add_time_to_buff+0xe8>)
 80019a2:	f008 f885 	bl	8009ab0 <sniprintf>
 80019a6:	4601      	mov	r1, r0
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	881a      	ldrh	r2, [r3, #0]
 80019ac:	b28b      	uxth	r3, r1
 80019ae:	4413      	add	r3, r2
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	801a      	strh	r2, [r3, #0]


  return *buff_Head - init_buff_head;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	89fb      	ldrh	r3, [r7, #14]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	b2db      	uxtb	r3, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019cc:	20000348 	.word	0x20000348
 80019d0:	20000298 	.word	0x20000298
 80019d4:	20000360 	.word	0x20000360
 80019d8:	0800d744 	.word	0x0800d744
 80019dc:	2000035c 	.word	0x2000035c
 80019e0:	0800d750 	.word	0x0800d750

080019e4 <Timer_On>:


// TODO
void Timer_On() {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  timerTickStart = HAL_GetTick();
 80019e8:	f001 fbfa 	bl	80031e0 <HAL_GetTick>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4a02      	ldr	r2, [pc, #8]	@ (80019f8 <Timer_On+0x14>)
 80019f0:	6013      	str	r3, [r2, #0]
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000364 	.word	0x20000364

080019fc <Timer_Status>:


// TODO
uint32_t Timer_Status() {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  return HAL_GetTick() - timerTickStart;
 8001a00:	f001 fbee 	bl	80031e0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	4b02      	ldr	r3, [pc, #8]	@ (8001a10 <Timer_Status+0x14>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	1ad3      	subs	r3, r2, r3
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000364 	.word	0x20000364

08001a14 <readIMUFifoBuffer>:


//TODO
uint16_t readIMUFifoBuffer(I2C_HandleTypeDef *I2Cx, uint8_t *temp_buff, bool rehabilitateFifo) {
 8001a14:	b5b0      	push	{r4, r5, r7, lr}
 8001a16:	b08a      	sub	sp, #40	@ 0x28
 8001a18:	af04      	add	r7, sp, #16
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	71fb      	strb	r3, [r7, #7]
  uint16_t fifoCount;

  // wait full packet received
  do {
   fifoCount = MPU6050_getFIFOCount(I2Cx);
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f001 f8b7 	bl	8002b96 <MPU6050_getFIFOCount>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	82fb      	strh	r3, [r7, #22]

  // TODO: add additional check to drop data if fifoCount%12 != 0
  } while(fifoCount % FIFO_PACKET_SIZE != 0);
 8001a2c:	8afa      	ldrh	r2, [r7, #22]
 8001a2e:	4b42      	ldr	r3, [pc, #264]	@ (8001b38 <readIMUFifoBuffer+0x124>)
 8001a30:	fba3 1302 	umull	r1, r3, r3, r2
 8001a34:	08d9      	lsrs	r1, r3, #3
 8001a36:	460b      	mov	r3, r1
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	440b      	add	r3, r1
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1ed      	bne.n	8001a22 <readIMUFifoBuffer+0xe>

  // prevent new incoming packets
  MPU6050_setFIFOEnabled(I2Cx, false);
 8001a46:	2100      	movs	r1, #0
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f001 f882 	bl	8002b52 <MPU6050_setFIFOEnabled>

  // prevent new data incoming in the FIFO while reading:
  MPU6050_setXGyroFIFOEnabled(I2Cx, false);
 8001a4e:	2100      	movs	r1, #0
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f001 f824 	bl	8002a9e <MPU6050_setXGyroFIFOEnabled>
  MPU6050_setYGyroFIFOEnabled(I2Cx, false);
 8001a56:	2100      	movs	r1, #0
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f001 f832 	bl	8002ac2 <MPU6050_setYGyroFIFOEnabled>
  MPU6050_setZGyroFIFOEnabled(I2Cx, false);
 8001a5e:	2100      	movs	r1, #0
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f001 f840 	bl	8002ae6 <MPU6050_setZGyroFIFOEnabled>
  MPU6050_setAccelFIFOEnabled(I2Cx, false);
 8001a66:	2100      	movs	r1, #0
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f001 f84e 	bl	8002b0a <MPU6050_setAccelFIFOEnabled>

  // Enable the FIFO for reading:
  MPU6050_setFIFOEnabled(I2Cx, true);
 8001a6e:	2101      	movs	r1, #1
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f001 f86e 	bl	8002b52 <MPU6050_setFIFOEnabled>

  // read FIFO here...
  //MPU6050_getFIFOBytes(&hi2c1, buff, fifoCount);

  HAL_I2C_Mem_Read_DMA(I2Cx, MPU6050_ADDR, MPU6050_RA_FIFO_R_W, 1, temp_buff, fifoCount);
 8001a76:	8afb      	ldrh	r3, [r7, #22]
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	2274      	movs	r2, #116	@ 0x74
 8001a82:	21d0      	movs	r1, #208	@ 0xd0
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f002 fbf7 	bl	8004278 <HAL_I2C_Mem_Read_DMA>

  // TODO remove this debug
  printf("Bytes: %d\r\n", fifoCount);
 8001a8a:	8afb      	ldrh	r3, [r7, #22]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	482b      	ldr	r0, [pc, #172]	@ (8001b3c <readIMUFifoBuffer+0x128>)
 8001a90:	f008 ffaa 	bl	800a9e8 <iprintf>

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001a94:	2200      	movs	r2, #0
 8001a96:	492a      	ldr	r1, [pc, #168]	@ (8001b40 <readIMUFifoBuffer+0x12c>)
 8001a98:	482a      	ldr	r0, [pc, #168]	@ (8001b44 <readIMUFifoBuffer+0x130>)
 8001a9a:	f006 f8da 	bl	8007c52 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	4929      	ldr	r1, [pc, #164]	@ (8001b48 <readIMUFifoBuffer+0x134>)
 8001aa2:	4828      	ldr	r0, [pc, #160]	@ (8001b44 <readIMUFifoBuffer+0x130>)
 8001aa4:	f006 f9b8 	bl	8007e18 <HAL_RTC_GetDate>
  printf("T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
           sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001aa8:	4b27      	ldr	r3, [pc, #156]	@ (8001b48 <readIMUFifoBuffer+0x134>)
 8001aaa:	78db      	ldrb	r3, [r3, #3]
  printf("T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001aac:	4618      	mov	r0, r3
           sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001aae:	4b26      	ldr	r3, [pc, #152]	@ (8001b48 <readIMUFifoBuffer+0x134>)
 8001ab0:	785b      	ldrb	r3, [r3, #1]
  printf("T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001ab2:	461c      	mov	r4, r3
           sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001ab4:	4b24      	ldr	r3, [pc, #144]	@ (8001b48 <readIMUFifoBuffer+0x134>)
 8001ab6:	789b      	ldrb	r3, [r3, #2]
  printf("T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001ab8:	461d      	mov	r5, r3
           sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001aba:	4b21      	ldr	r3, [pc, #132]	@ (8001b40 <readIMUFifoBuffer+0x12c>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
  printf("T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001abe:	461a      	mov	r2, r3
           sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b40 <readIMUFifoBuffer+0x12c>)
 8001ac2:	785b      	ldrb	r3, [r3, #1]
  printf("T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001ac4:	4619      	mov	r1, r3
           sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b40 <readIMUFifoBuffer+0x12c>)
 8001ac8:	789b      	ldrb	r3, [r3, #2]
  printf("T: %02d-%02d-%02d %02d:%02d:%02d\r\n",
 8001aca:	9302      	str	r3, [sp, #8]
 8001acc:	9101      	str	r1, [sp, #4]
 8001ace:	9200      	str	r2, [sp, #0]
 8001ad0:	462b      	mov	r3, r5
 8001ad2:	4622      	mov	r2, r4
 8001ad4:	4601      	mov	r1, r0
 8001ad6:	481d      	ldr	r0, [pc, #116]	@ (8001b4c <readIMUFifoBuffer+0x138>)
 8001ad8:	f008 ff86 	bl	800a9e8 <iprintf>

  while(!dmaTxDone);
 8001adc:	bf00      	nop
 8001ade:	4b1c      	ldr	r3, [pc, #112]	@ (8001b50 <readIMUFifoBuffer+0x13c>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	f083 0301 	eor.w	r3, r3, #1
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f8      	bne.n	8001ade <readIMUFifoBuffer+0xca>
  dmaTxDone = false;
 8001aec:	4b18      	ldr	r3, [pc, #96]	@ (8001b50 <readIMUFifoBuffer+0x13c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]

  // here FIFO can be enabled again: (avoid losing samples)

  // prevent new incoming packets
  MPU6050_setFIFOEnabled(I2Cx, false);
 8001af2:	2100      	movs	r1, #0
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f001 f82c 	bl	8002b52 <MPU6050_setFIFOEnabled>

  // activate sensors writing to FIFO
  MPU6050_setXGyroFIFOEnabled(I2Cx, true);
 8001afa:	2101      	movs	r1, #1
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 ffce 	bl	8002a9e <MPU6050_setXGyroFIFOEnabled>
  MPU6050_setYGyroFIFOEnabled(I2Cx, true);
 8001b02:	2101      	movs	r1, #1
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 ffdc 	bl	8002ac2 <MPU6050_setYGyroFIFOEnabled>
  MPU6050_setZGyroFIFOEnabled(I2Cx, true);
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 ffea 	bl	8002ae6 <MPU6050_setZGyroFIFOEnabled>
  MPU6050_setAccelFIFOEnabled(I2Cx, true);
 8001b12:	2101      	movs	r1, #1
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 fff8 	bl	8002b0a <MPU6050_setAccelFIFOEnabled>

  // reset FIFO:
  MPU6050_resetFIFO(I2Cx);
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f001 f82b 	bl	8002b76 <MPU6050_resetFIFO>

  // activate FIFO for a new cycle: (prevent activation if zero motion triggered)
  if (rehabilitateFifo) MPU6050_setFIFOEnabled(I2Cx, true);
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <readIMUFifoBuffer+0x11a>
 8001b26:	2101      	movs	r1, #1
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f001 f812 	bl	8002b52 <MPU6050_setFIFOEnabled>

  return fifoCount;
 8001b2e:	8afb      	ldrh	r3, [r7, #22]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bdb0      	pop	{r4, r5, r7, pc}
 8001b38:	aaaaaaab 	.word	0xaaaaaaab
 8001b3c:	0800d774 	.word	0x0800d774
 8001b40:	20000348 	.word	0x20000348
 8001b44:	20000298 	.word	0x20000298
 8001b48:	2000035c 	.word	0x2000035c
 8001b4c:	0800d750 	.word	0x0800d750
 8001b50:	20000344 	.word	0x20000344

08001b54 <process_and_save_ImuReadings>:


//TODO
void process_and_save_ImuReadings(uint8_t *fifoBuff, uint16_t fifoSize, char *sramBuff, uint16_t *sramBuff_Head,
                        int16_t ax, int16_t ay, int16_t az, int16_t gx, int16_t gy, int16_t gz){
 8001b54:	b5b0      	push	{r4, r5, r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	460b      	mov	r3, r1
 8001b62:	817b      	strh	r3, [r7, #10]


  // write time stamp into the sram2 buff:
  int8_t new_bytes = add_time_to_buff(sramBuff, sramBuff_Head);
 8001b64:	6839      	ldr	r1, [r7, #0]
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff fec6 	bl	80018f8 <add_time_to_buff>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	74fb      	strb	r3, [r7, #19]

  if (new_bytes == -1){
 8001b70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b78:	d114      	bne.n	8001ba4 <process_and_save_ImuReadings+0x50>
    // write to SD card here...
    printf("Buffer full, write to SD card\r\n");
 8001b7a:	4894      	ldr	r0, [pc, #592]	@ (8001dcc <process_and_save_ImuReadings+0x278>)
 8001b7c:	f008 ff9c 	bl	800aab8 <puts>
    HAL_Delay(1000);
 8001b80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b84:	f001 fb38 	bl	80031f8 <HAL_Delay>

    // reset buffer:
    memset(sramBuff, 0, *sramBuff_Head);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2100      	movs	r1, #0
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f008 ffab 	bl	800aaec <memset>
    *sramBuff_Head = 0;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	801a      	strh	r2, [r3, #0]

    // now add timestamp to main buff:
    add_time_to_buff(sramBuff, sramBuff_Head);
 8001b9c:	6839      	ldr	r1, [r7, #0]
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff feaa 	bl	80018f8 <add_time_to_buff>
  }

  for (int i = 0; i < fifoSize; i += FIFO_PACKET_SIZE) {
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	e105      	b.n	8001db6 <process_and_save_ImuReadings+0x262>
    // combine raw data and convert into readable format:
    ax = (((int16_t)fifoBuff[i]) << 8) | fifoBuff[i+1];
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	68f9      	ldr	r1, [r7, #12]
 8001bbc:	440b      	add	r3, r1
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b21b      	sxth	r3, r3
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	853b      	strh	r3, [r7, #40]	@ 0x28
    ay = (((int16_t)fifoBuff[i+2]) << 8) | fifoBuff[i+3];
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	3302      	adds	r3, #2
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	4413      	add	r3, r2
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	b21a      	sxth	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	3303      	adds	r3, #3
 8001bd8:	68f9      	ldr	r1, [r7, #12]
 8001bda:	440b      	add	r3, r1
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	4313      	orrs	r3, r2
 8001be2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    az = (((int16_t)fifoBuff[i+4]) << 8) | fifoBuff[i+5];
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	3304      	adds	r3, #4
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3305      	adds	r3, #5
 8001bf6:	68f9      	ldr	r1, [r7, #12]
 8001bf8:	440b      	add	r3, r1
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	863b      	strh	r3, [r7, #48]	@ 0x30

    gx = (((int16_t)fifoBuff[i+6]) << 8) | fifoBuff[i+7];
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3306      	adds	r3, #6
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4413      	add	r3, r2
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	021b      	lsls	r3, r3, #8
 8001c0e:	b21a      	sxth	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3307      	adds	r3, #7
 8001c14:	68f9      	ldr	r1, [r7, #12]
 8001c16:	440b      	add	r3, r1
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    gy = (((int16_t)fifoBuff[i+8]) << 8) | fifoBuff[i+9];
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3308      	adds	r3, #8
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	b21a      	sxth	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3309      	adds	r3, #9
 8001c32:	68f9      	ldr	r1, [r7, #12]
 8001c34:	440b      	add	r3, r1
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	873b      	strh	r3, [r7, #56]	@ 0x38
    gz = (((int16_t)fifoBuff[i+10]) << 8) | fifoBuff[i+11];
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	330a      	adds	r3, #10
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	4413      	add	r3, r2
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	b21a      	sxth	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	330b      	adds	r3, #11
 8001c50:	68f9      	ldr	r1, [r7, #12]
 8001c52:	440b      	add	r3, r1
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    // scale measurement depending on resolution:
    Ax = (double)ax * accelerationResolution;
 8001c5c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fc5f 	bl	8000524 <__aeabi_i2d>
 8001c66:	4604      	mov	r4, r0
 8001c68:	460d      	mov	r5, r1
 8001c6a:	4b59      	ldr	r3, [pc, #356]	@ (8001dd0 <process_and_save_ImuReadings+0x27c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fc6a 	bl	8000548 <__aeabi_f2d>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4620      	mov	r0, r4
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	f7fe fcbc 	bl	80005f8 <__aeabi_dmul>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4953      	ldr	r1, [pc, #332]	@ (8001dd4 <process_and_save_ImuReadings+0x280>)
 8001c86:	e9c1 2300 	strd	r2, r3, [r1]
    Ay = (double)ay * accelerationResolution;
 8001c8a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fc48 	bl	8000524 <__aeabi_i2d>
 8001c94:	4604      	mov	r4, r0
 8001c96:	460d      	mov	r5, r1
 8001c98:	4b4d      	ldr	r3, [pc, #308]	@ (8001dd0 <process_and_save_ImuReadings+0x27c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc53 	bl	8000548 <__aeabi_f2d>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	4629      	mov	r1, r5
 8001caa:	f7fe fca5 	bl	80005f8 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4949      	ldr	r1, [pc, #292]	@ (8001dd8 <process_and_save_ImuReadings+0x284>)
 8001cb4:	e9c1 2300 	strd	r2, r3, [r1]
    Az = (double)az * accelerationResolution;
 8001cb8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fc31 	bl	8000524 <__aeabi_i2d>
 8001cc2:	4604      	mov	r4, r0
 8001cc4:	460d      	mov	r5, r1
 8001cc6:	4b42      	ldr	r3, [pc, #264]	@ (8001dd0 <process_and_save_ImuReadings+0x27c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fc3c 	bl	8000548 <__aeabi_f2d>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	4629      	mov	r1, r5
 8001cd8:	f7fe fc8e 	bl	80005f8 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	493e      	ldr	r1, [pc, #248]	@ (8001ddc <process_and_save_ImuReadings+0x288>)
 8001ce2:	e9c1 2300 	strd	r2, r3, [r1]
    Gx = (double)gx * gyroscopeResolution;
 8001ce6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc1a 	bl	8000524 <__aeabi_i2d>
 8001cf0:	4604      	mov	r4, r0
 8001cf2:	460d      	mov	r5, r1
 8001cf4:	4b3a      	ldr	r3, [pc, #232]	@ (8001de0 <process_and_save_ImuReadings+0x28c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fc25 	bl	8000548 <__aeabi_f2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4620      	mov	r0, r4
 8001d04:	4629      	mov	r1, r5
 8001d06:	f7fe fc77 	bl	80005f8 <__aeabi_dmul>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4935      	ldr	r1, [pc, #212]	@ (8001de4 <process_and_save_ImuReadings+0x290>)
 8001d10:	e9c1 2300 	strd	r2, r3, [r1]
    Gy = (double)gy * gyroscopeResolution;
 8001d14:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fc03 	bl	8000524 <__aeabi_i2d>
 8001d1e:	4604      	mov	r4, r0
 8001d20:	460d      	mov	r5, r1
 8001d22:	4b2f      	ldr	r3, [pc, #188]	@ (8001de0 <process_and_save_ImuReadings+0x28c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fc0e 	bl	8000548 <__aeabi_f2d>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4620      	mov	r0, r4
 8001d32:	4629      	mov	r1, r5
 8001d34:	f7fe fc60 	bl	80005f8 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	492a      	ldr	r1, [pc, #168]	@ (8001de8 <process_and_save_ImuReadings+0x294>)
 8001d3e:	e9c1 2300 	strd	r2, r3, [r1]
    Gz = (double)gz * gyroscopeResolution;
 8001d42:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fbec 	bl	8000524 <__aeabi_i2d>
 8001d4c:	4604      	mov	r4, r0
 8001d4e:	460d      	mov	r5, r1
 8001d50:	4b23      	ldr	r3, [pc, #140]	@ (8001de0 <process_and_save_ImuReadings+0x28c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fbf7 	bl	8000548 <__aeabi_f2d>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4620      	mov	r0, r4
 8001d60:	4629      	mov	r1, r5
 8001d62:	f7fe fc49 	bl	80005f8 <__aeabi_dmul>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4920      	ldr	r1, [pc, #128]	@ (8001dec <process_and_save_ImuReadings+0x298>)
 8001d6c:	e9c1 2300 	strd	r2, r3, [r1]
//        printf("Gz: %.3f °/s\r\n", Gz);
//
//        HAL_Delay(500);

    // write time stamp into the sram2 buff:
    uint8_t new_bytes = add_data_to_buff(sramBuff, sramBuff_Head, Ax, Ay, Az, Gx, Gy, Gz);
 8001d70:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <process_and_save_ImuReadings+0x280>)
 8001d72:	ed93 7b00 	vldr	d7, [r3]
 8001d76:	4b18      	ldr	r3, [pc, #96]	@ (8001dd8 <process_and_save_ImuReadings+0x284>)
 8001d78:	ed93 6b00 	vldr	d6, [r3]
 8001d7c:	4b17      	ldr	r3, [pc, #92]	@ (8001ddc <process_and_save_ImuReadings+0x288>)
 8001d7e:	ed93 2b00 	vldr	d2, [r3]
 8001d82:	4b18      	ldr	r3, [pc, #96]	@ (8001de4 <process_and_save_ImuReadings+0x290>)
 8001d84:	ed93 3b00 	vldr	d3, [r3]
 8001d88:	4b17      	ldr	r3, [pc, #92]	@ (8001de8 <process_and_save_ImuReadings+0x294>)
 8001d8a:	ed93 4b00 	vldr	d4, [r3]
 8001d8e:	4b17      	ldr	r3, [pc, #92]	@ (8001dec <process_and_save_ImuReadings+0x298>)
 8001d90:	ed93 5b00 	vldr	d5, [r3]
 8001d94:	eeb0 1a46 	vmov.f32	s2, s12
 8001d98:	eef0 1a66 	vmov.f32	s3, s13
 8001d9c:	eeb0 0a47 	vmov.f32	s0, s14
 8001da0:	eef0 0a67 	vmov.f32	s1, s15
 8001da4:	6839      	ldr	r1, [r7, #0]
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff fd34 	bl	8001814 <add_data_to_buff>
 8001dac:	4603      	mov	r3, r0
 8001dae:	74bb      	strb	r3, [r7, #18]
  for (int i = 0; i < fifoSize; i += FIFO_PACKET_SIZE) {
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	330c      	adds	r3, #12
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	897b      	ldrh	r3, [r7, #10]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	f6ff aef5 	blt.w	8001baa <process_and_save_ImuReadings+0x56>

      // now add timestamp to main buff:
      add_data_to_buff(sramBuff, sramBuff_Head, Ax, Ay, Az, Gx, Gy, Gz);
    }
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	0800d780 	.word	0x0800d780
 8001dd0:	200003b0 	.word	0x200003b0
 8001dd4:	20000378 	.word	0x20000378
 8001dd8:	20000380 	.word	0x20000380
 8001ddc:	20000388 	.word	0x20000388
 8001de0:	200003b4 	.word	0x200003b4
 8001de4:	20000398 	.word	0x20000398
 8001de8:	200003a0 	.word	0x200003a0
 8001dec:	200003a8 	.word	0x200003a8

08001df0 <enterStandbyMode>:


void enterStandbyMode(){
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Clear the WU FLAG */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8001df4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <enterStandbyMode+0x34>)
 8001df6:	221f      	movs	r2, #31
 8001df8:	619a      	str	r2, [r3, #24]

  printf("About to sleep...\r\n");
 8001dfa:	480b      	ldr	r0, [pc, #44]	@ (8001e28 <enterStandbyMode+0x38>)
 8001dfc:	f008 fe5c 	bl	800aab8 <puts>

  // Enable pull down on SYS_WKUP pin
  HAL_PWREx_EnableGPIOPullDown(PWR_GPIO_C, PWR_GPIO_BIT_5);
 8001e00:	2120      	movs	r1, #32
 8001e02:	2002      	movs	r0, #2
 8001e04:	f004 fa38 	bl	8006278 <HAL_PWREx_EnableGPIOPullDown>
  HAL_PWREx_EnablePullUpPullDownConfig();
 8001e08:	f004 fada 	bl	80063c0 <HAL_PWREx_EnablePullUpPullDownConfig>

  // Enable RAM2 content retention
  HAL_PWREx_EnableSRAM2ContentRetention();
 8001e0c:	f004 fae8 	bl	80063e0 <HAL_PWREx_EnableSRAM2ContentRetention>

  /* Enable the WAKEUP PIN */
  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN5);
 8001e10:	2010      	movs	r0, #16
 8001e12:	f004 f97d 	bl	8006110 <HAL_PWR_EnableWakeUpPin>

  printf("Entering standby mode\r\n");
 8001e16:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <enterStandbyMode+0x3c>)
 8001e18:	f008 fe4e 	bl	800aab8 <puts>

  /* Finally enter the standby mode */
  HAL_PWR_EnterSTANDBYMode();
 8001e1c:	f004 f9ae 	bl	800617c <HAL_PWR_EnterSTANDBYMode>
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40007000 	.word	0x40007000
 8001e28:	0800d7a0 	.word	0x0800d7a0
 8001e2c:	0800d7b4 	.word	0x0800d7b4

08001e30 <HAL_I2C_MemRxCpltCallback>:


//TODO
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef * hi2c) {
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  dmaTxDone = true;
 8001e38:	4b04      	ldr	r3, [pc, #16]	@ (8001e4c <HAL_I2C_MemRxCpltCallback+0x1c>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000344 	.word	0x20000344

08001e50 <HAL_I2C_ErrorCallback>:


//TODO
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef * hi2c){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  printf("Err DMA!\r\n");
 8001e58:	4803      	ldr	r0, [pc, #12]	@ (8001e68 <HAL_I2C_ErrorCallback+0x18>)
 8001e5a:	f008 fe2d 	bl	800aab8 <puts>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	0800d7cc 	.word	0x0800d7cc

08001e6c <HAL_RTCEx_WakeUpTimerEventCallback>:

//TODO
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  SystemClock_Config();
 8001e74:	f7ff fa72 	bl	800135c <SystemClock_Config>
  HAL_ResumeTick();
 8001e78:	f001 f9f2 	bl	8003260 <HAL_ResumeTick>

  // other code here...
  printf("wake from RTC\r\n");
 8001e7c:	4804      	ldr	r0, [pc, #16]	@ (8001e90 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 8001e7e:	f008 fe1b 	bl	800aab8 <puts>
  rtc_trg = true;
 8001e82:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	0800d7d8 	.word	0x0800d7d8
 8001e94:	20000346 	.word	0x20000346

08001e98 <HAL_GPIO_EXTI_Callback>:

//TODO
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == IMU_Int1_Pin)
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ea8:	d109      	bne.n	8001ebe <HAL_GPIO_EXTI_Callback+0x26>
  {
    SystemClock_Config();
 8001eaa:	f7ff fa57 	bl	800135c <SystemClock_Config>
    HAL_ResumeTick();
 8001eae:	f001 f9d7 	bl	8003260 <HAL_ResumeTick>

    // code here...
    printf("wake from pin\r\n");
 8001eb2:	4805      	ldr	r0, [pc, #20]	@ (8001ec8 <HAL_GPIO_EXTI_Callback+0x30>)
 8001eb4:	f008 fe00 	bl	800aab8 <puts>
    zero_mot_trg = true;
 8001eb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <HAL_GPIO_EXTI_Callback+0x34>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]

  }
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	0800d7e8 	.word	0x0800d7e8
 8001ecc:	20000345 	.word	0x20000345

08001ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed4:	b672      	cpsid	i
}
 8001ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <Error_Handler+0x8>

08001edc <I2Cdev_readBit>:
 * @param regAddr Register regAddr to read from
 * @param bitNum Bit position to read (0-7)
 * @param data Container for single bit value
 * @return Status of read operation (true = success)
 */
HAL_StatusTypeDef I2Cdev_readBit(I2C_HandleTypeDef *I2Cx, uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af04      	add	r7, sp, #16
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	4608      	mov	r0, r1
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4603      	mov	r3, r0
 8001eec:	70fb      	strb	r3, [r7, #3]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	70bb      	strb	r3, [r7, #2]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	707b      	strb	r3, [r7, #1]
  uint8_t b;
  HAL_StatusTypeDef status =  HAL_I2C_Mem_Read(I2Cx, devAddr, regAddr, 1, &b, 1, HAL_MAX_DELAY);
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	b299      	uxth	r1, r3
 8001efa:	78bb      	ldrb	r3, [r7, #2]
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f02:	9302      	str	r3, [sp, #8]
 8001f04:	2301      	movs	r3, #1
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	f107 030e 	add.w	r3, r7, #14
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2301      	movs	r3, #1
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f002 f897 	bl	8004044 <HAL_I2C_Mem_Read>
 8001f16:	4603      	mov	r3, r0
 8001f18:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK){
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10a      	bne.n	8001f36 <I2Cdev_readBit+0x5a>
    //*data = b & (1 << bitNum);
    *data = (b >> bitNum) & 0x01;
 8001f20:	7bbb      	ldrb	r3, [r7, #14]
 8001f22:	461a      	mov	r2, r3
 8001f24:	787b      	ldrb	r3, [r7, #1]
 8001f26:	fa42 f303 	asr.w	r3, r2, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <I2Cdev_writeBit>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
HAL_StatusTypeDef I2Cdev_writeBit(I2C_HandleTypeDef *I2Cx, uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af04      	add	r7, sp, #16
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	4608      	mov	r0, r1
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4603      	mov	r3, r0
 8001f50:	70fb      	strb	r3, [r7, #3]
 8001f52:	460b      	mov	r3, r1
 8001f54:	70bb      	strb	r3, [r7, #2]
 8001f56:	4613      	mov	r3, r2
 8001f58:	707b      	strb	r3, [r7, #1]
  uint8_t b;
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(I2Cx, devAddr, regAddr, 1, &b, 1, HAL_MAX_DELAY);
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	b299      	uxth	r1, r3
 8001f5e:	78bb      	ldrb	r3, [r7, #2]
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f66:	9302      	str	r3, [sp, #8]
 8001f68:	2301      	movs	r3, #1
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	f107 030e 	add.w	r3, r7, #14
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	2301      	movs	r3, #1
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f002 f865 	bl	8004044 <HAL_I2C_Mem_Read>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK) {
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d12c      	bne.n	8001fde <I2Cdev_writeBit+0x9e>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 8001f84:	7e3b      	ldrb	r3, [r7, #24]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00a      	beq.n	8001fa0 <I2Cdev_writeBit+0x60>
 8001f8a:	787b      	ldrb	r3, [r7, #1]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	b25a      	sxtb	r2, r3
 8001f94:	7bbb      	ldrb	r3, [r7, #14]
 8001f96:	b25b      	sxtb	r3, r3
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	b25b      	sxtb	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	e00b      	b.n	8001fb8 <I2Cdev_writeBit+0x78>
 8001fa0:	787b      	ldrb	r3, [r7, #1]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	b25b      	sxtb	r3, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	b25a      	sxtb	r2, r3
 8001fae:	7bbb      	ldrb	r3, [r7, #14]
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	b25b      	sxtb	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	73bb      	strb	r3, [r7, #14]
    status = HAL_I2C_Mem_Write(I2Cx, devAddr, regAddr, 1, &b, 1, HAL_MAX_DELAY);
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	b299      	uxth	r1, r3
 8001fbe:	78bb      	ldrb	r3, [r7, #2]
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fc6:	9302      	str	r3, [sp, #8]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	f107 030e 	add.w	r3, r7, #14
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f001 ff21 	bl	8003e1c <HAL_I2C_Mem_Write>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <I2Cdev_writeBits>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
HAL_StatusTypeDef I2Cdev_writeBits(I2C_HandleTypeDef *I2Cx, uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af04      	add	r7, sp, #16
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	4608      	mov	r0, r1
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	70fb      	strb	r3, [r7, #3]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	70bb      	strb	r3, [r7, #2]
 8001ffe:	4613      	mov	r3, r2
 8002000:	707b      	strb	r3, [r7, #1]
  // 10101111 original value (sample)
  // 10100011 original & ~mask
  // 10101011 masked | value
  uint8_t b;

  if (HAL_I2C_Mem_Read(I2Cx, devAddr, regAddr, 1, &b, 1, HAL_MAX_DELAY) == HAL_OK) {
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	b299      	uxth	r1, r3
 8002006:	78bb      	ldrb	r3, [r7, #2]
 8002008:	b29a      	uxth	r2, r3
 800200a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800200e:	9302      	str	r3, [sp, #8]
 8002010:	2301      	movs	r3, #1
 8002012:	9301      	str	r3, [sp, #4]
 8002014:	f107 030e 	add.w	r3, r7, #14
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2301      	movs	r3, #1
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f002 f811 	bl	8004044 <HAL_I2C_Mem_Read>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d138      	bne.n	800209a <I2Cdev_writeBits+0xb2>
    uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1); // (1 << length)-1: creates length-subsequent ones
 8002028:	7e3b      	ldrb	r3, [r7, #24]
 800202a:	2201      	movs	r2, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	1e5a      	subs	r2, r3, #1
 8002032:	7879      	ldrb	r1, [r7, #1]
 8002034:	7e3b      	ldrb	r3, [r7, #24]
 8002036:	1acb      	subs	r3, r1, r3
 8002038:	3301      	adds	r3, #1
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	73fb      	strb	r3, [r7, #15]
                                   // Then the mask is shifted into correct position
    data <<= (bitStart - length + 1); // shift data into correct position
 8002040:	7f3a      	ldrb	r2, [r7, #28]
 8002042:	7879      	ldrb	r1, [r7, #1]
 8002044:	7e3b      	ldrb	r3, [r7, #24]
 8002046:	1acb      	subs	r3, r1, r3
 8002048:	3301      	adds	r3, #1
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	773b      	strb	r3, [r7, #28]
    data &= mask; // zero all non-important bits in data
 8002050:	7f3a      	ldrb	r2, [r7, #28]
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	4013      	ands	r3, r2
 8002056:	773b      	strb	r3, [r7, #28]
    b &= ~(mask); // zero all important bits in existing byte
 8002058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205c:	43db      	mvns	r3, r3
 800205e:	b25a      	sxtb	r2, r3
 8002060:	7bbb      	ldrb	r3, [r7, #14]
 8002062:	b25b      	sxtb	r3, r3
 8002064:	4013      	ands	r3, r2
 8002066:	b25b      	sxtb	r3, r3
 8002068:	b2db      	uxtb	r3, r3
 800206a:	73bb      	strb	r3, [r7, #14]
    b |= data; // combine data with existing byte
 800206c:	7bba      	ldrb	r2, [r7, #14]
 800206e:	7f3b      	ldrb	r3, [r7, #28]
 8002070:	4313      	orrs	r3, r2
 8002072:	b2db      	uxtb	r3, r3
 8002074:	73bb      	strb	r3, [r7, #14]
    return HAL_I2C_Mem_Write(I2Cx, devAddr, regAddr, 1, &b, 1, HAL_MAX_DELAY);
 8002076:	78fb      	ldrb	r3, [r7, #3]
 8002078:	b299      	uxth	r1, r3
 800207a:	78bb      	ldrb	r3, [r7, #2]
 800207c:	b29a      	uxth	r2, r3
 800207e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002082:	9302      	str	r3, [sp, #8]
 8002084:	2301      	movs	r3, #1
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	f107 030e 	add.w	r3, r7, #14
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2301      	movs	r3, #1
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f001 fec3 	bl	8003e1c <HAL_I2C_Mem_Write>
 8002096:	4603      	mov	r3, r0
 8002098:	e000      	b.n	800209c <I2Cdev_writeBits+0xb4>
  } else {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
  }
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <I2Cdev_readByte>:
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
HAL_StatusTypeDef I2Cdev_readByte(I2C_HandleTypeDef *I2Cx, uint8_t devAddr, uint8_t regAddr, uint8_t *data) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af04      	add	r7, sp, #16
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	607b      	str	r3, [r7, #4]
 80020ae:	460b      	mov	r3, r1
 80020b0:	72fb      	strb	r3, [r7, #11]
 80020b2:	4613      	mov	r3, r2
 80020b4:	72bb      	strb	r3, [r7, #10]
  return HAL_I2C_Mem_Read(I2Cx, devAddr, regAddr, 1, data, 1, HAL_MAX_DELAY);
 80020b6:	7afb      	ldrb	r3, [r7, #11]
 80020b8:	b299      	uxth	r1, r3
 80020ba:	7abb      	ldrb	r3, [r7, #10]
 80020bc:	b29a      	uxth	r2, r3
 80020be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020c2:	9302      	str	r3, [sp, #8]
 80020c4:	2301      	movs	r3, #1
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	2301      	movs	r3, #1
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f001 ffb8 	bl	8004044 <HAL_I2C_Mem_Read>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <I2Cdev_writeByte>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
HAL_StatusTypeDef I2Cdev_writeByte(I2C_HandleTypeDef *I2Cx, uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 80020de:	b580      	push	{r7, lr}
 80020e0:	b086      	sub	sp, #24
 80020e2:	af04      	add	r7, sp, #16
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	4608      	mov	r0, r1
 80020e8:	4611      	mov	r1, r2
 80020ea:	461a      	mov	r2, r3
 80020ec:	4603      	mov	r3, r0
 80020ee:	70fb      	strb	r3, [r7, #3]
 80020f0:	460b      	mov	r3, r1
 80020f2:	70bb      	strb	r3, [r7, #2]
 80020f4:	4613      	mov	r3, r2
 80020f6:	707b      	strb	r3, [r7, #1]
  return HAL_I2C_Mem_Write(I2Cx, devAddr, regAddr, 1, &data, 1, HAL_MAX_DELAY);
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	b299      	uxth	r1, r3
 80020fc:	78bb      	ldrb	r3, [r7, #2]
 80020fe:	b29a      	uxth	r2, r3
 8002100:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002104:	9302      	str	r3, [sp, #8]
 8002106:	2301      	movs	r3, #1
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	1c7b      	adds	r3, r7, #1
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2301      	movs	r3, #1
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f001 fe83 	bl	8003e1c <HAL_I2C_Mem_Write>
 8002116:	4603      	mov	r3, r0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <I2Cdev_readBytes>:
 * @param regAddr First register regAddr to read from
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @return Status of operation (true = success)
 */
HAL_StatusTypeDef I2Cdev_readBytes(I2C_HandleTypeDef *I2Cx, uint8_t devAddr, uint8_t regAddr, uint16_t length, uint8_t *data) {
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af04      	add	r7, sp, #16
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	4608      	mov	r0, r1
 800212a:	4611      	mov	r1, r2
 800212c:	461a      	mov	r2, r3
 800212e:	4603      	mov	r3, r0
 8002130:	70fb      	strb	r3, [r7, #3]
 8002132:	460b      	mov	r3, r1
 8002134:	70bb      	strb	r3, [r7, #2]
 8002136:	4613      	mov	r3, r2
 8002138:	803b      	strh	r3, [r7, #0]
  return HAL_I2C_Mem_Read(I2Cx, devAddr, regAddr, 1, data, length, HAL_MAX_DELAY);
 800213a:	78fb      	ldrb	r3, [r7, #3]
 800213c:	b299      	uxth	r1, r3
 800213e:	78bb      	ldrb	r3, [r7, #2]
 8002140:	b29a      	uxth	r2, r3
 8002142:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002146:	9302      	str	r3, [sp, #8]
 8002148:	883b      	ldrh	r3, [r7, #0]
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2301      	movs	r3, #1
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f001 ff76 	bl	8004044 <HAL_I2C_Mem_Read>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <I2Cdev_writeWord>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New word value to write
 * @return Status of operation (true = success)
 */
HAL_StatusTypeDef I2Cdev_writeWord(I2C_HandleTypeDef *I2Cx, uint8_t devAddr, uint8_t regAddr, uint16_t value) {
 8002162:	b580      	push	{r7, lr}
 8002164:	b088      	sub	sp, #32
 8002166:	af04      	add	r7, sp, #16
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	4608      	mov	r0, r1
 800216c:	4611      	mov	r1, r2
 800216e:	461a      	mov	r2, r3
 8002170:	4603      	mov	r3, r0
 8002172:	70fb      	strb	r3, [r7, #3]
 8002174:	460b      	mov	r3, r1
 8002176:	70bb      	strb	r3, [r7, #2]
 8002178:	4613      	mov	r3, r2
 800217a:	803b      	strh	r3, [r7, #0]
  uint8_t data[2];
  data[0] = (uint8_t)(value >> 8);    // Most significant byte;
 800217c:	883b      	ldrh	r3, [r7, #0]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	b29b      	uxth	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	733b      	strb	r3, [r7, #12]
  data[1] = (uint8_t)(value & 0xFF);  // Least significant byte;
 8002186:	883b      	ldrh	r3, [r7, #0]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	737b      	strb	r3, [r7, #13]
  return HAL_I2C_Mem_Write(I2Cx, devAddr, regAddr, 1, data, 2, HAL_MAX_DELAY);
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	b299      	uxth	r1, r3
 8002190:	78bb      	ldrb	r3, [r7, #2]
 8002192:	b29a      	uxth	r2, r3
 8002194:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002198:	9302      	str	r3, [sp, #8]
 800219a:	2302      	movs	r3, #2
 800219c:	9301      	str	r3, [sp, #4]
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2301      	movs	r3, #1
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f001 fe38 	bl	8003e1c <HAL_I2C_Mem_Write>
 80021ac:	4603      	mov	r3, r0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <MPU6050_Initialize>:
 * @param gyroRange gyroscope FS range, see GYRO_FS in mpu6050.h
 * @param offsets pointer to buffer containing offsets for both accelerometer and gyroscope
 * @return initialization status (true if correctly done)
 */
uint8_t MPU6050_Initialize(I2C_HandleTypeDef *I2Cx, ACCEL_FS accelRange, GYRO_FS gyroRange, int16_t* offsets)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	@ 0x28
 80021bc:	af04      	add	r7, sp, #16
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	460b      	mov	r3, r1
 80021c4:	72fb      	strb	r3, [r7, #11]
 80021c6:	4613      	mov	r3, r2
 80021c8:	72bb      	strb	r3, [r7, #10]
  uint8_t check;
  uint8_t Data;

  // check device ID WHO_AM_I

  HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 100);
 80021ca:	2364      	movs	r3, #100	@ 0x64
 80021cc:	9302      	str	r3, [sp, #8]
 80021ce:	2301      	movs	r3, #1
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	f107 0317 	add.w	r3, r7, #23
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	2301      	movs	r3, #1
 80021da:	2275      	movs	r2, #117	@ 0x75
 80021dc:	21d0      	movs	r1, #208	@ 0xd0
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f001 ff30 	bl	8004044 <HAL_I2C_Mem_Read>

  if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
 80021e6:	2b68      	cmp	r3, #104	@ 0x68
 80021e8:	f040 80af 	bne.w	800234a <MPU6050_Initialize+0x192>
  {
    // Power management register 0X6B we should write all 0's to wake the sensor up
    // Also reset all the registers status
    Data = 0x00;
 80021ec:	2300      	movs	r3, #0
 80021ee:	75bb      	strb	r3, [r7, #22]
    HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 100);
 80021f0:	2364      	movs	r3, #100	@ 0x64
 80021f2:	9302      	str	r3, [sp, #8]
 80021f4:	2301      	movs	r3, #1
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	f107 0316 	add.w	r3, r7, #22
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	2301      	movs	r3, #1
 8002200:	226b      	movs	r2, #107	@ 0x6b
 8002202:	21d0      	movs	r1, #208	@ 0xd0
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f001 fe09 	bl	8003e1c <HAL_I2C_Mem_Write>

    // Set accelerometer configuration in ACCEL_CONFIG Register
    switch (accelRange)
 800220a:	7afb      	ldrb	r3, [r7, #11]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d82f      	bhi.n	8002270 <MPU6050_Initialize+0xb8>
 8002210:	a201      	add	r2, pc, #4	@ (adr r2, 8002218 <MPU6050_Initialize+0x60>)
 8002212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002216:	bf00      	nop
 8002218:	08002229 	.word	0x08002229
 800221c:	0800223b 	.word	0x0800223b
 8002220:	0800224d 	.word	0x0800224d
 8002224:	0800225f 	.word	0x0800225f
    {
      case A2G:
      MPU6050_setFullScaleAccelRange(I2Cx, MPU6050_ACCEL_FS_2);
 8002228:	2100      	movs	r1, #0
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 fa4d 	bl	80026ca <MPU6050_setFullScaleAccelRange>
      accelerationResolution = 2.0 / 32768.0;
 8002230:	4b48      	ldr	r3, [pc, #288]	@ (8002354 <MPU6050_Initialize+0x19c>)
 8002232:	f04f 5262 	mov.w	r2, #947912704	@ 0x38800000
 8002236:	601a      	str	r2, [r3, #0]
      break;
 8002238:	e01c      	b.n	8002274 <MPU6050_Initialize+0xbc>

      case A4G:
      MPU6050_setFullScaleAccelRange(I2Cx, MPU6050_ACCEL_FS_4);
 800223a:	2101      	movs	r1, #1
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fa44 	bl	80026ca <MPU6050_setFullScaleAccelRange>
      accelerationResolution = 4.0 / 32768.0;
 8002242:	4b44      	ldr	r3, [pc, #272]	@ (8002354 <MPU6050_Initialize+0x19c>)
 8002244:	f04f 5264 	mov.w	r2, #956301312	@ 0x39000000
 8002248:	601a      	str	r2, [r3, #0]
      break;
 800224a:	e013      	b.n	8002274 <MPU6050_Initialize+0xbc>

      case A8G:
      MPU6050_setFullScaleAccelRange(I2Cx, MPU6050_ACCEL_FS_8);
 800224c:	2102      	movs	r1, #2
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 fa3b 	bl	80026ca <MPU6050_setFullScaleAccelRange>
      accelerationResolution = 8.0 / 32768.0;
 8002254:	4b3f      	ldr	r3, [pc, #252]	@ (8002354 <MPU6050_Initialize+0x19c>)
 8002256:	f04f 5266 	mov.w	r2, #964689920	@ 0x39800000
 800225a:	601a      	str	r2, [r3, #0]
      break;
 800225c:	e00a      	b.n	8002274 <MPU6050_Initialize+0xbc>

      case A16G:
      MPU6050_setFullScaleAccelRange(I2Cx, MPU6050_ACCEL_FS_16);
 800225e:	2103      	movs	r1, #3
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fa32 	bl	80026ca <MPU6050_setFullScaleAccelRange>
      accelerationResolution = 16.0 / 32768.0;
 8002266:	4b3b      	ldr	r3, [pc, #236]	@ (8002354 <MPU6050_Initialize+0x19c>)
 8002268:	f04f 5268 	mov.w	r2, #973078528	@ 0x3a000000
 800226c:	601a      	str	r2, [r3, #0]
      break;
 800226e:	e001      	b.n	8002274 <MPU6050_Initialize+0xbc>

      default:
      return 1;
 8002270:	2301      	movs	r3, #1
 8002272:	e06b      	b.n	800234c <MPU6050_Initialize+0x194>
    }

    // Set Gyroscope configuration in GYRO_CONFIG Register
    switch (gyroRange)
 8002274:	7abb      	ldrb	r3, [r7, #10]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d82a      	bhi.n	80022d0 <MPU6050_Initialize+0x118>
 800227a:	a201      	add	r2, pc, #4	@ (adr r2, 8002280 <MPU6050_Initialize+0xc8>)
 800227c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002280:	08002291 	.word	0x08002291
 8002284:	080022a1 	.word	0x080022a1
 8002288:	080022b1 	.word	0x080022b1
 800228c:	080022c1 	.word	0x080022c1
    {
      case G250DPS:
      MPU6050_setFullScaleGyroRange(I2Cx, MPU6050_GYRO_FS_250);
 8002290:	2100      	movs	r1, #0
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 fa51 	bl	800273a <MPU6050_setFullScaleGyroRange>
      gyroscopeResolution = 250.0 / 32768.0;
 8002298:	4b2f      	ldr	r3, [pc, #188]	@ (8002358 <MPU6050_Initialize+0x1a0>)
 800229a:	4a30      	ldr	r2, [pc, #192]	@ (800235c <MPU6050_Initialize+0x1a4>)
 800229c:	601a      	str	r2, [r3, #0]
      break;
 800229e:	e019      	b.n	80022d4 <MPU6050_Initialize+0x11c>

      case G500DPS:
      MPU6050_setFullScaleGyroRange(I2Cx, MPU6050_GYRO_FS_500);
 80022a0:	2101      	movs	r1, #1
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 fa49 	bl	800273a <MPU6050_setFullScaleGyroRange>
      gyroscopeResolution = 500.0 / 32768.0;
 80022a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002358 <MPU6050_Initialize+0x1a0>)
 80022aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002360 <MPU6050_Initialize+0x1a8>)
 80022ac:	601a      	str	r2, [r3, #0]
      break;
 80022ae:	e011      	b.n	80022d4 <MPU6050_Initialize+0x11c>

      case G1000DPS:
      MPU6050_setFullScaleGyroRange(I2Cx, MPU6050_GYRO_FS_1000);
 80022b0:	2102      	movs	r1, #2
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fa41 	bl	800273a <MPU6050_setFullScaleGyroRange>
      gyroscopeResolution = 1000.0 / 32768.0;
 80022b8:	4b27      	ldr	r3, [pc, #156]	@ (8002358 <MPU6050_Initialize+0x1a0>)
 80022ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002364 <MPU6050_Initialize+0x1ac>)
 80022bc:	601a      	str	r2, [r3, #0]
      break;
 80022be:	e009      	b.n	80022d4 <MPU6050_Initialize+0x11c>

      case G2000DPS:
      MPU6050_setFullScaleGyroRange(I2Cx, MPU6050_GYRO_FS_2000);
 80022c0:	2103      	movs	r1, #3
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 fa39 	bl	800273a <MPU6050_setFullScaleGyroRange>
      gyroscopeResolution = 2000.0 / 32768.0;
 80022c8:	4b23      	ldr	r3, [pc, #140]	@ (8002358 <MPU6050_Initialize+0x1a0>)
 80022ca:	4a27      	ldr	r2, [pc, #156]	@ (8002368 <MPU6050_Initialize+0x1b0>)
 80022cc:	601a      	str	r2, [r3, #0]
      break;
 80022ce:	e001      	b.n	80022d4 <MPU6050_Initialize+0x11c>

      default:
      return 1;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e03b      	b.n	800234c <MPU6050_Initialize+0x194>
    }

    // make sure everything is running:
    MPU6050_setSleepEnabled(I2Cx, false);
 80022d4:	2100      	movs	r1, #0
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f868 	bl	80023ac <MPU6050_setSleepEnabled>

    // set correct offset values:
    MPU6050_setXAccelOffset(I2Cx, offsets[0]);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e2:	4619      	mov	r1, r3
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 fb7a 	bl	80029de <MPU6050_setXAccelOffset>
    MPU6050_setYAccelOffset(I2Cx, offsets[1]);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3302      	adds	r3, #2
 80022ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f2:	4619      	mov	r1, r3
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 fb82 	bl	80029fe <MPU6050_setYAccelOffset>
    MPU6050_setZAccelOffset(I2Cx, offsets[2]);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3304      	adds	r3, #4
 80022fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002302:	4619      	mov	r1, r3
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 fb8a 	bl	8002a1e <MPU6050_setZAccelOffset>

    MPU6050_setXGyroOffset(I2Cx, offsets[3]);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3306      	adds	r3, #6
 800230e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002312:	4619      	mov	r1, r3
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 fb92 	bl	8002a3e <MPU6050_setXGyroOffset>
    MPU6050_setYGyroOffset(I2Cx, offsets[4]);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3308      	adds	r3, #8
 800231e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002322:	4619      	mov	r1, r3
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fb9a 	bl	8002a5e <MPU6050_setYGyroOffset>
    MPU6050_setZGyroOffset(I2Cx, offsets[5]);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	330a      	adds	r3, #10
 800232e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002332:	4619      	mov	r1, r3
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 fba2 	bl	8002a7e <MPU6050_setZGyroOffset>

    // turn off temperature sensor, saves ~ 60 uA in active mode
    MPU6050_setTempSensorEnabled(I2Cx, 0);
 800233a:	2100      	movs	r1, #0
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 f953 	bl	80025e8 <MPU6050_setTempSensorEnabled>

    // turn off internal DMP, saves ~ 100 uA in active mode
    MPU6050_setDMPEnabled(I2Cx, 0);
 8002342:	2100      	movs	r1, #0
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 fa34 	bl	80027b2 <MPU6050_setDMPEnabled>
  }
  return 0;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	200003b0 	.word	0x200003b0
 8002358:	200003b4 	.word	0x200003b4
 800235c:	3bfa0000 	.word	0x3bfa0000
 8002360:	3c7a0000 	.word	0x3c7a0000
 8002364:	3cfa0000 	.word	0x3cfa0000
 8002368:	3d7a0000 	.word	0x3d7a0000

0800236c <MPU6050_reset>:
 * A small delay of ~50ms may be desirable after triggering a reset.
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_DEVICE_RESET_BIT
 */
void MPU6050_reset(I2C_HandleTypeDef *I2Cx) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af02      	add	r7, sp, #8
 8002372:	6078      	str	r0, [r7, #4]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, MPU6050_PWR1_DEVICE_RESET_BIT, true);
 8002374:	2301      	movs	r3, #1
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	2307      	movs	r3, #7
 800237a:	226b      	movs	r2, #107	@ 0x6b
 800237c:	21d0      	movs	r1, #208	@ 0xd0
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff fdde 	bl	8001f40 <I2Cdev_writeBit>
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <MPU6050_setRate>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param rate New sample rate divider
 * @see getRate()
 * @see MPU6050_RA_SMPLRT_DIV
 */
void MPU6050_setRate(I2C_HandleTypeDef *I2Cx, uint8_t rate) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeByte(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, rate);
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	2219      	movs	r2, #25
 800239c:	21d0      	movs	r1, #208	@ 0xd0
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff fe9d 	bl	80020de <I2Cdev_writeByte>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <MPU6050_setSleepEnabled>:
 * @param enabled New sleep mode enabled status
 * @see getSleepEnabled()
 * @see PWR_MGMT_1_REG
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050_setSleepEnabled(I2C_HandleTypeDef *I2Cx, bool enabled){
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af02      	add	r7, sp, #8
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, MPU6050_PWR1_SLEEP_BIT, enabled);
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2306      	movs	r3, #6
 80023be:	226b      	movs	r2, #107	@ 0x6b
 80023c0:	21d0      	movs	r1, #208	@ 0xd0
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fdbc 	bl	8001f40 <I2Cdev_writeBit>
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <MPU6050_setIntEnabled>:
 * @param enabled New interrupt enabled status
 * @see getIntFreefallEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FF_BIT
 **/
void MPU6050_setIntEnabled(I2C_HandleTypeDef *I2Cx, uint8_t enabled) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeByte(I2Cx, MPU6050_ADDR, INT_ENABLE_REG, enabled);
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	2238      	movs	r2, #56	@ 0x38
 80023e0:	21d0      	movs	r1, #208	@ 0xd0
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff fe7b 	bl	80020de <I2Cdev_writeByte>
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <MPU6050_setIntMotionEnabled>:
 * @param enabled New interrupt enabled status
 * @see getIntMotionEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_MOT_BIT
 **/
void MPU6050_setIntMotionEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, INT_ENABLE_REG, MPU6050_INTERRUPT_MOT_BIT, enabled);
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2306      	movs	r3, #6
 8002402:	2238      	movs	r2, #56	@ 0x38
 8002404:	21d0      	movs	r1, #208	@ 0xd0
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff fd9a 	bl	8001f40 <I2Cdev_writeBit>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <MPU6050_setIntZeroMotionEnabled>:
 * @param enabled New interrupt enabled status
 * @see getIntZeroMotionEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_ZMOT_BIT
 **/
void MPU6050_setIntZeroMotionEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af02      	add	r7, sp, #8
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBit(I2Cx, MPU6050_ADDR, INT_ENABLE_REG, MPU6050_INTERRUPT_ZMOT_BIT, enabled);
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	2305      	movs	r3, #5
 8002426:	2238      	movs	r2, #56	@ 0x38
 8002428:	21d0      	movs	r1, #208	@ 0xd0
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff fd88 	bl	8001f40 <I2Cdev_writeBit>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <MPU6050_setMotionDetectionDuration>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param duration New motion detection duration threshold value (LSB = 1ms)
 * @see getMotionDetectionDuration()
 * @see MPU6050_RA_MOT_DUR
 */
void MPU6050_setMotionDetectionDuration(I2C_HandleTypeDef *I2Cx, uint8_t duration) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeByte(I2Cx, MPU6050_ADDR, MOT_DUR_TH_REG, duration);
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	2220      	movs	r2, #32
 8002448:	21d0      	movs	r1, #208	@ 0xd0
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff fe47 	bl	80020de <I2Cdev_writeByte>
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <MPU6050_setZeroMotionDetectionDuration>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param duration New zero motion detection duration threshold value (LSB = 1ms)
 * @see getZeroMotionDetectionDuration()
 * @see MPU6050_RA_ZRMOT_DUR
 */
void MPU6050_setZeroMotionDetectionDuration(I2C_HandleTypeDef *I2Cx, uint8_t duration) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeByte(I2Cx, MPU6050_ADDR, ZRMOT_DUR_REG, duration);
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	2222      	movs	r2, #34	@ 0x22
 8002468:	21d0      	movs	r1, #208	@ 0xd0
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff fe37 	bl	80020de <I2Cdev_writeByte>
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <MPU6050_setMotionDetectionThreshold>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param threshold New motion detection acceleration threshold value (LSB = 2mg)
 * @see getMotionDetectionThreshold()
 * @see MPU6050_RA_MOT_THR
 */
void MPU6050_setMotionDetectionThreshold(I2C_HandleTypeDef *I2Cx, uint8_t threshold) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeByte(I2Cx, MPU6050_ADDR, MOT_DET_TH_REG, threshold);
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	221f      	movs	r2, #31
 8002488:	21d0      	movs	r1, #208	@ 0xd0
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff fe27 	bl	80020de <I2Cdev_writeByte>
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <MPU6050_setZeroMotionDetectionThreshold>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)
 * @see getZeroMotionDetectionThreshold()
 * @see MPU6050_RA_ZRMOT_THR
 */
void MPU6050_setZeroMotionDetectionThreshold(I2C_HandleTypeDef *I2Cx, uint8_t threshold) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeByte(I2Cx, MPU6050_ADDR, ZRMOT_THR_REG, threshold);
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	2221      	movs	r2, #33	@ 0x21
 80024a8:	21d0      	movs	r1, #208	@ 0xd0
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff fe17 	bl	80020de <I2Cdev_writeByte>
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <MPU6050_setWakeCycleEnabled>:
 * @param enabled New sleep mode enabled status
 * @see getWakeCycleEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CYCLE_BIT
 */
void MPU6050_setWakeCycleEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af02      	add	r7, sp, #8
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, MPU6050_PWR1_CYCLE_BIT, enabled);
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2305      	movs	r3, #5
 80024ca:	226b      	movs	r2, #107	@ 0x6b
 80024cc:	21d0      	movs	r1, #208	@ 0xd0
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff fd36 	bl	8001f40 <I2Cdev_writeBit>
}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <MPU6050_setInterruptLatch>:
 * @param latch New latch mode (0=50us-pulse, 1=latch-until-int-cleared)
 * @see getInterruptLatch()
 * @see MPU6050_RA_INT_PIN_CFG
 * @see MPU6050_INTCFG_LATCH_INT_EN_BIT
 */
void MPU6050_setInterruptLatch(I2C_HandleTypeDef *I2Cx, bool latch) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, INT_PIN_CFG, MPU6050_INTCFG_LATCH_INT_EN_BIT, latch);
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2305      	movs	r3, #5
 80024ee:	2237      	movs	r2, #55	@ 0x37
 80024f0:	21d0      	movs	r1, #208	@ 0xd0
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff fd24 	bl	8001f40 <I2Cdev_writeBit>
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <MPU6050_setInterruptLatchClear>:
 * @param clear New latch clear mode (0=status-read-only, 1=any-register-read)
 * @see getInterruptLatchClear()
 * @see MPU6050_RA_INT_PIN_CFG
 * @see MPU6050_INTCFG_INT_RD_CLEAR_BIT
 */
void MPU6050_setInterruptLatchClear(I2C_HandleTypeDef *I2Cx, bool clear) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af02      	add	r7, sp, #8
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, INT_PIN_CFG, MPU6050_INTCFG_INT_RD_CLEAR_BIT, clear);
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2304      	movs	r3, #4
 8002512:	2237      	movs	r2, #55	@ 0x37
 8002514:	21d0      	movs	r1, #208	@ 0xd0
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff fd12 	bl	8001f40 <I2Cdev_writeBit>
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <MPU6050_setInterruptDrive>:
 * @param drive New interrupt drive mode (0=push-pull, 1=open-drain)
 * @see getInterruptDrive()
 * @see MPU6050_RA_INT_PIN_CFG
 * @see MPU6050_INTCFG_INT_OPEN_BIT
 */
void MPU6050_setInterruptDrive(I2C_HandleTypeDef *I2Cx, bool drive) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af02      	add	r7, sp, #8
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, INT_PIN_CFG, MPU6050_INTCFG_INT_OPEN_BIT, drive);
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2306      	movs	r3, #6
 8002536:	2237      	movs	r2, #55	@ 0x37
 8002538:	21d0      	movs	r1, #208	@ 0xd0
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff fd00 	bl	8001f40 <I2Cdev_writeBit>
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <MPU6050_setInterruptMode>:
 * @param mode New interrupt mode (0=active-high, 1=active-low)
 * @see getInterruptMode()
 * @see MPU6050_RA_INT_PIN_CFG
 * @see MPU6050_INTCFG_INT_LEVEL_BIT
 */
void MPU6050_setInterruptMode(I2C_HandleTypeDef *I2Cx, bool mode) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af02      	add	r7, sp, #8
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, INT_PIN_CFG, MPU6050_INTCFG_INT_LEVEL_BIT, mode);
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	2307      	movs	r3, #7
 800255a:	2237      	movs	r2, #55	@ 0x37
 800255c:	21d0      	movs	r1, #208	@ 0xd0
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff fcee 	bl	8001f40 <I2Cdev_writeBit>
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <MPU6050_getIntStatus>:
 * the entire register.
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050_getIntStatus(I2C_HandleTypeDef *I2Cx) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint8_t data;
  I2Cdev_readByte(I2Cx, MPU6050_ADDR, INT_STATUS_REG, &data);
 8002574:	f107 030f 	add.w	r3, r7, #15
 8002578:	223a      	movs	r2, #58	@ 0x3a
 800257a:	21d0      	movs	r1, #208	@ 0xd0
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff fd91 	bl	80020a4 <I2Cdev_readByte>
  return data;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <MPU6050_getIntMotionStatus>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 * @see MPU6050_INTERRUPT_MOT_BIT
 */
bool MPU6050_getIntMotionStatus(I2C_HandleTypeDef *I2Cx) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af02      	add	r7, sp, #8
 8002592:	6078      	str	r0, [r7, #4]
  uint8_t data;
  I2Cdev_readBit(I2Cx, MPU6050_ADDR, INT_STATUS_REG, MPU6050_INTERRUPT_MOT_BIT, &data);
 8002594:	f107 030f 	add.w	r3, r7, #15
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2306      	movs	r3, #6
 800259c:	223a      	movs	r2, #58	@ 0x3a
 800259e:	21d0      	movs	r1, #208	@ 0xd0
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff fc9b 	bl	8001edc <I2Cdev_readBit>
  return data != 0;
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf14      	ite	ne
 80025ac:	2301      	movne	r3, #1
 80025ae:	2300      	moveq	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <MPU6050_getZeroMotionDetected>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @return Motion detection status
 * @see MPU6050_RA_MOT_DETECT_STATUS
 * @see MPU6050_MOTION_MOT_ZRMOT_BIT
 */
bool MPU6050_getZeroMotionDetected(I2C_HandleTypeDef *I2Cx) {
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b086      	sub	sp, #24
 80025be:	af02      	add	r7, sp, #8
 80025c0:	6078      	str	r0, [r7, #4]
  uint8_t data;
  I2Cdev_readBit(I2Cx, MPU6050_ADDR, MOT_DETECT_STATUS_REG, MPU6050_MOTION_MOT_ZRMOT_BIT, &data);
 80025c2:	f107 030f 	add.w	r3, r7, #15
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	2300      	movs	r3, #0
 80025ca:	2261      	movs	r2, #97	@ 0x61
 80025cc:	21d0      	movs	r1, #208	@ 0xd0
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff fc84 	bl	8001edc <I2Cdev_readBit>
  return data != 0;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	bf14      	ite	ne
 80025da:	2301      	movne	r3, #1
 80025dc:	2300      	moveq	r3, #0
 80025de:	b2db      	uxtb	r3, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <MPU6050_setTempSensorEnabled>:
 * @param enabled New temperature sensor enabled status
 * @see getTempSensorEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_TEMP_DIS_BIT
 */
void MPU6050_setTempSensorEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
  // 1 is actually disabled here
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, MPU6050_PWR1_TEMP_DIS_BIT, !enabled);
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	f083 0301 	eor.w	r3, r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	2303      	movs	r3, #3
 8002600:	226b      	movs	r2, #107	@ 0x6b
 8002602:	21d0      	movs	r1, #208	@ 0xd0
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff fc9b 	bl	8001f40 <I2Cdev_writeBit>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <MPU6050_setWakeFrequency>:
/** Set wake frequency in Accel-Only Low Power Mode.
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param frequency New wake frequency
 * @see MPU6050_RA_PWR_MGMT_2
 */
void MPU6050_setWakeFrequency(I2C_HandleTypeDef *I2Cx, uint8_t frequency) {
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af02      	add	r7, sp, #8
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBits(I2Cx, MPU6050_ADDR, PWR_MGMT_2_REG, MPU6050_PWR2_LP_WAKE_CTRL_BIT, MPU6050_PWR2_LP_WAKE_CTRL_LENGTH, frequency);
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	2302      	movs	r3, #2
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	2307      	movs	r3, #7
 8002628:	226c      	movs	r2, #108	@ 0x6c
 800262a:	21d0      	movs	r1, #208	@ 0xd0
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff fcdb 	bl	8001fe8 <I2Cdev_writeBits>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <MPU6050_setStandbyXAccelEnabled>:
 * @param New X-axis standby enabled status
 * @see getStandbyXAccelEnabled()
 * @see MPU6050_RA_PWR_MGMT_2
 * @see MPU6050_PWR2_STBY_XA_BIT
 */
void MPU6050_setStandbyXAccelEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af02      	add	r7, sp, #8
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	460b      	mov	r3, r1
 8002644:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_2_REG, MPU6050_PWR2_STBY_XA_BIT, enabled);
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	2305      	movs	r3, #5
 800264c:	226c      	movs	r2, #108	@ 0x6c
 800264e:	21d0      	movs	r1, #208	@ 0xd0
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff fc75 	bl	8001f40 <I2Cdev_writeBit>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <MPU6050_setStandbyYAccelEnabled>:
 * @param New Y-axis standby enabled status
 * @see getStandbyYAccelEnabled()
 * @see MPU6050_RA_PWR_MGMT_2
 * @see MPU6050_PWR2_STBY_YA_BIT
 */
void MPU6050_setStandbyYAccelEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af02      	add	r7, sp, #8
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	460b      	mov	r3, r1
 8002668:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_2_REG, MPU6050_PWR2_STBY_YA_BIT, enabled);
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	2304      	movs	r3, #4
 8002670:	226c      	movs	r2, #108	@ 0x6c
 8002672:	21d0      	movs	r1, #208	@ 0xd0
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7ff fc63 	bl	8001f40 <I2Cdev_writeBit>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <MPU6050_setStandbyZAccelEnabled>:
 * @param New Z-axis standby enabled status
 * @see getStandbyZAccelEnabled()
 * @see MPU6050_RA_PWR_MGMT_2
 * @see MPU6050_PWR2_STBY_ZA_BIT
 */
void MPU6050_setStandbyZAccelEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af02      	add	r7, sp, #8
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_2_REG, MPU6050_PWR2_STBY_ZA_BIT, enabled);
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2303      	movs	r3, #3
 8002694:	226c      	movs	r2, #108	@ 0x6c
 8002696:	21d0      	movs	r1, #208	@ 0xd0
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff fc51 	bl	8001f40 <I2Cdev_writeBit>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <MPU6050_setStandbyXGyroEnabled>:
 * @param New X-axis standby enabled status
 * @see getStandbyXGyroEnabled()
 * @see MPU6050_RA_PWR_MGMT_2
 * @see MPU6050_PWR2_STBY_XG_BIT
 */
void MPU6050_setStandbyXGyroEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af02      	add	r7, sp, #8
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	460b      	mov	r3, r1
 80026b0:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_2_REG, MPU6050_PWR2_STBY_XG_BIT, enabled);
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	2302      	movs	r3, #2
 80026b8:	226c      	movs	r2, #108	@ 0x6c
 80026ba:	21d0      	movs	r1, #208	@ 0xd0
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff fc3f 	bl	8001f40 <I2Cdev_writeBit>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <MPU6050_setFullScaleAccelRange>:
/** Set full-scale accelerometer range.
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050_setFullScaleAccelRange(I2C_HandleTypeDef *I2Cx, uint8_t range) {
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af02      	add	r7, sp, #8
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	460b      	mov	r3, r1
 80026d4:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBits(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	2302      	movs	r3, #2
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	2304      	movs	r3, #4
 80026e0:	221c      	movs	r2, #28
 80026e2:	21d0      	movs	r1, #208	@ 0xd0
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff fc7f 	bl	8001fe8 <I2Cdev_writeBits>
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <MPU6050_setStandbyYGyroEnabled>:
 * @param New Y-axis standby enabled status
 * @see getStandbyYGyroEnabled()
 * @see MPU6050_RA_PWR_MGMT_2
 * @see MPU6050_PWR2_STBY_YG_BIT
 */
void MPU6050_setStandbyYGyroEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af02      	add	r7, sp, #8
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	460b      	mov	r3, r1
 80026fc:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_2_REG, MPU6050_PWR2_STBY_YG_BIT, enabled);
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	2301      	movs	r3, #1
 8002704:	226c      	movs	r2, #108	@ 0x6c
 8002706:	21d0      	movs	r1, #208	@ 0xd0
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff fc19 	bl	8001f40 <I2Cdev_writeBit>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <MPU6050_setStandbyZGyroEnabled>:
 * @param New Z-axis standby enabled status
 * @see getStandbyZGyroEnabled()
 * @see MPU6050_RA_PWR_MGMT_2
 * @see MPU6050_PWR2_STBY_ZG_BIT
 */
void MPU6050_setStandbyZGyroEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af02      	add	r7, sp, #8
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	460b      	mov	r3, r1
 8002720:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, PWR_MGMT_2_REG, MPU6050_PWR2_STBY_ZG_BIT, enabled);
 8002722:	78fb      	ldrb	r3, [r7, #3]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	2300      	movs	r3, #0
 8002728:	226c      	movs	r2, #108	@ 0x6c
 800272a:	21d0      	movs	r1, #208	@ 0xd0
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff fc07 	bl	8001f40 <I2Cdev_writeBit>
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <MPU6050_setFullScaleGyroRange>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050_setFullScaleGyroRange(I2C_HandleTypeDef *I2Cx, uint8_t range) {
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af02      	add	r7, sp, #8
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	460b      	mov	r3, r1
 8002744:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBits(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	2302      	movs	r3, #2
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	2304      	movs	r3, #4
 8002750:	221b      	movs	r2, #27
 8002752:	21d0      	movs	r1, #208	@ 0xd0
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff fc47 	bl	8001fe8 <I2Cdev_writeBits>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <MPU6050_setDHPFMode>:
 * @param bandwidth New high-pass filter configuration
 * @see setDHPFMode()
 * @see MPU6050_DHPF_RESET
 * @see MPU6050_RA_ACCEL_CONFIG
 */
void MPU6050_setDHPFMode(I2C_HandleTypeDef *I2Cx, uint8_t bandwidth) {
 8002762:	b580      	push	{r7, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	af02      	add	r7, sp, #8
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	460b      	mov	r3, r1
 800276c:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBits(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, MPU6050_ACONFIG_ACCEL_HPF_BIT, MPU6050_ACONFIG_ACCEL_HPF_LENGTH, bandwidth);
 800276e:	78fb      	ldrb	r3, [r7, #3]
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	2303      	movs	r3, #3
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	2302      	movs	r3, #2
 8002778:	221c      	movs	r2, #28
 800277a:	21d0      	movs	r1, #208	@ 0xd0
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff fc33 	bl	8001fe8 <I2Cdev_writeBits>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <MPU6050_setDLPFMode>:
 * @see MPU6050_DLPF_BW_256
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050_setDLPFMode(I2C_HandleTypeDef *I2Cx, uint8_t mode) {
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af02      	add	r7, sp, #8
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBits(I2Cx, MPU6050_ADDR, DLPF_CFG_REG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	9301      	str	r3, [sp, #4]
 800279a:	2303      	movs	r3, #3
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	2302      	movs	r3, #2
 80027a0:	221a      	movs	r2, #26
 80027a2:	21d0      	movs	r1, #208	@ 0xd0
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff fc1f 	bl	8001fe8 <I2Cdev_writeBits>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <MPU6050_setDMPEnabled>:
 *
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param enabled updated DMP status
 * @see gitHub page, no documentation provided about this register
 */
void MPU6050_setDMPEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af02      	add	r7, sp, #8
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	460b      	mov	r3, r1
 80027bc:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, USER_CTRL_REG, MPU6050_USERCTRL_DMP_EN_BIT, enabled);
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	2307      	movs	r3, #7
 80027c4:	226a      	movs	r2, #106	@ 0x6a
 80027c6:	21d0      	movs	r1, #208	@ 0xd0
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff fbb9 	bl	8001f40 <I2Cdev_writeBit>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <MPU6050_setupMotionInt>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param duration 8-bit unsigned integer container for motion duration threshold in ms
 * @param threshold 8-bit unsigned integer container for motion detection threshold in mg
 * @param offsets data buffer containing gyroscope and accelerometer offsets to be used during initialization
 */
void MPU6050_setupMotionInt(I2C_HandleTypeDef *I2Cx, uint8_t duration, uint8_t threshold, int16_t* offsets) {
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b084      	sub	sp, #16
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	72fb      	strb	r3, [r7, #11]
 80027e4:	4613      	mov	r3, r2
 80027e6:	72bb      	strb	r3, [r7, #10]

  // make sure standard settings are used
  MPU6050_Initialize(I2Cx, A2G, G250DPS, offsets);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	2100      	movs	r1, #0
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f7ff fce2 	bl	80021b8 <MPU6050_Initialize>

  //set trigger event: Active high until interrupt status register is cleared, push-pull configuration
  MPU6050_setInterruptLatch(I2Cx, 1);
 80027f4:	2101      	movs	r1, #1
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f7ff fe70 	bl	80024dc <MPU6050_setInterruptLatch>
  MPU6050_setInterruptLatchClear(I2Cx, 0);
 80027fc:	2100      	movs	r1, #0
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f7ff fe7e 	bl	8002500 <MPU6050_setInterruptLatchClear>
  MPU6050_setInterruptDrive(I2Cx, 0);
 8002804:	2100      	movs	r1, #0
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f7ff fe8c 	bl	8002524 <MPU6050_setInterruptDrive>
  MPU6050_setInterruptMode(I2Cx, 0);
 800280c:	2100      	movs	r1, #0
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f7ff fe9a 	bl	8002548 <MPU6050_setInterruptMode>

  // Ensure the accelerometer is running
  MPU6050_setSleepEnabled(I2Cx, false);
 8002814:	2100      	movs	r1, #0
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7ff fdc8 	bl	80023ac <MPU6050_setSleepEnabled>
  MPU6050_setWakeCycleEnabled(I2Cx, false);
 800281c:	2100      	movs	r1, #0
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f7ff fe4a 	bl	80024b8 <MPU6050_setWakeCycleEnabled>
  MPU6050_setStandbyXAccelEnabled(I2Cx, false);
 8002824:	2100      	movs	r1, #0
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f7ff ff07 	bl	800263a <MPU6050_setStandbyXAccelEnabled>
  MPU6050_setStandbyYAccelEnabled(I2Cx, false);
 800282c:	2100      	movs	r1, #0
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff ff15 	bl	800265e <MPU6050_setStandbyYAccelEnabled>
  MPU6050_setStandbyZAccelEnabled(I2Cx, false);
 8002834:	2100      	movs	r1, #0
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f7ff ff23 	bl	8002682 <MPU6050_setStandbyZAccelEnabled>

  //Set the accelerometer HPF to reset settings
  MPU6050_setDHPFMode(I2Cx, MPU6050_DHPF_RESET);
 800283c:	2100      	movs	r1, #0
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f7ff ff8f 	bl	8002762 <MPU6050_setDHPFMode>

  //Set the accelerometer LPF to 256Hz Bandwidth
  MPU6050_setDLPFMode(I2Cx, MPU6050_DLPF_BW_256);
 8002844:	2100      	movs	r1, #0
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f7ff ff9f 	bl	800278a <MPU6050_setDLPFMode>

  //Enable the motion interrupt
  MPU6050_setIntEnabled(I2Cx, 0b00000000);
 800284c:	2100      	movs	r1, #0
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f7ff fdbe 	bl	80023d0 <MPU6050_setIntEnabled>
  MPU6050_setIntMotionEnabled(I2Cx, true);
 8002854:	2101      	movs	r1, #1
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f7ff fdca 	bl	80023f0 <MPU6050_setIntMotionEnabled>

  //Set the motion detection duration
  MPU6050_setMotionDetectionDuration(I2Cx, duration); //Duration in ms
 800285c:	7afb      	ldrb	r3, [r7, #11]
 800285e:	4619      	mov	r1, r3
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f7ff fde9 	bl	8002438 <MPU6050_setMotionDetectionDuration>

  //Set the motion detection threshold
  MPU6050_setMotionDetectionThreshold(I2Cx, threshold); // Threshold in 2mg
 8002866:	7abb      	ldrb	r3, [r7, #10]
 8002868:	4619      	mov	r1, r3
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f7ff fe04 	bl	8002478 <MPU6050_setMotionDetectionThreshold>

  //1 ms delay
  HAL_Delay(1);
 8002870:	2001      	movs	r0, #1
 8002872:	f000 fcc1 	bl	80031f8 <HAL_Delay>

  //Set the accelerometer HPF to HOLD settings
  MPU6050_setDHPFMode(I2Cx, MPU6050_DHPF_HOLD);
 8002876:	2107      	movs	r1, #7
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f7ff ff72 	bl	8002762 <MPU6050_setDHPFMode>

  // Set the wakeup frequency
  MPU6050_setWakeFrequency(I2Cx, MPU6050_WAKE_FREQ_1P25);
 800287e:	2100      	movs	r1, #0
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7ff fec6 	bl	8002612 <MPU6050_setWakeFrequency>
  MPU6050_setStandbyXGyroEnabled(I2Cx, true);
 8002886:	2101      	movs	r1, #1
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f7ff ff0c 	bl	80026a6 <MPU6050_setStandbyXGyroEnabled>
  MPU6050_setStandbyYGyroEnabled(I2Cx, true);
 800288e:	2101      	movs	r1, #1
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f7ff ff2e 	bl	80026f2 <MPU6050_setStandbyYGyroEnabled>
  MPU6050_setStandbyZGyroEnabled(I2Cx, true);
 8002896:	2101      	movs	r1, #1
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f7ff ff3c 	bl	8002716 <MPU6050_setStandbyZGyroEnabled>

  // Enable cycle mode
  MPU6050_setWakeCycleEnabled(I2Cx, true);
 800289e:	2101      	movs	r1, #1
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7ff fe09 	bl	80024b8 <MPU6050_setWakeCycleEnabled>

}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <MPU6050_setupZeroMotionInt>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param duration 8-bit unsigned integer container for zero motion duration threshold in ms
 * @param threshold 8-bit unsigned integer container for zero motion detection threshold in mg
 * @param offsets data buffer containing gyroscope and accelerometer offsets to be used during initialization
 */
void MPU6050_setupZeroMotionInt(I2C_HandleTypeDef *I2Cx, uint8_t duration, uint8_t threshold, int16_t* offsets) {
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b084      	sub	sp, #16
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	607b      	str	r3, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	72fb      	strb	r3, [r7, #11]
 80028bc:	4613      	mov	r3, r2
 80028be:	72bb      	strb	r3, [r7, #10]

  // make sure standard settings are used
  MPU6050_Initialize(I2Cx, A2G, G250DPS, offsets);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	2100      	movs	r1, #0
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7ff fc76 	bl	80021b8 <MPU6050_Initialize>

  //set trigger event: Active high until interrupt status register is cleared, push-pull configuration
  MPU6050_setInterruptLatch(I2Cx, 1);
 80028cc:	2101      	movs	r1, #1
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f7ff fe04 	bl	80024dc <MPU6050_setInterruptLatch>
  MPU6050_setInterruptLatchClear(I2Cx, 0);
 80028d4:	2100      	movs	r1, #0
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f7ff fe12 	bl	8002500 <MPU6050_setInterruptLatchClear>
  MPU6050_setInterruptDrive(I2Cx, 0);
 80028dc:	2100      	movs	r1, #0
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f7ff fe20 	bl	8002524 <MPU6050_setInterruptDrive>
  MPU6050_setInterruptMode(I2Cx, 0);
 80028e4:	2100      	movs	r1, #0
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f7ff fe2e 	bl	8002548 <MPU6050_setInterruptMode>

  // Ensure the accelerometer is running
  MPU6050_setSleepEnabled(I2Cx, false);
 80028ec:	2100      	movs	r1, #0
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f7ff fd5c 	bl	80023ac <MPU6050_setSleepEnabled>
  MPU6050_setWakeCycleEnabled(I2Cx, false);
 80028f4:	2100      	movs	r1, #0
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f7ff fdde 	bl	80024b8 <MPU6050_setWakeCycleEnabled>
  MPU6050_setStandbyXAccelEnabled(I2Cx, false);
 80028fc:	2100      	movs	r1, #0
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f7ff fe9b 	bl	800263a <MPU6050_setStandbyXAccelEnabled>
  MPU6050_setStandbyYAccelEnabled(I2Cx, false);
 8002904:	2100      	movs	r1, #0
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f7ff fea9 	bl	800265e <MPU6050_setStandbyYAccelEnabled>
  MPU6050_setStandbyZAccelEnabled(I2Cx, false);
 800290c:	2100      	movs	r1, #0
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f7ff feb7 	bl	8002682 <MPU6050_setStandbyZAccelEnabled>

  //Set the accelerometer HPF to reset settings
  MPU6050_setDHPFMode(I2Cx, MPU6050_DHPF_RESET);
 8002914:	2100      	movs	r1, #0
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f7ff ff23 	bl	8002762 <MPU6050_setDHPFMode>
  //
  //MPU6050_setDLPFMode(I2Cx, MPU6050_DLPF_BW_256);


  //Enable the motion interrupt
  MPU6050_setIntEnabled(I2Cx, 0b00000000);
 800291c:	2100      	movs	r1, #0
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f7ff fd56 	bl	80023d0 <MPU6050_setIntEnabled>
  MPU6050_setIntZeroMotionEnabled(I2Cx, true);
 8002924:	2101      	movs	r1, #1
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f7ff fd74 	bl	8002414 <MPU6050_setIntZeroMotionEnabled>

  //Set the motion detection duration
  MPU6050_setZeroMotionDetectionDuration(I2Cx, duration);   //Duration in ms
 800292c:	7afb      	ldrb	r3, [r7, #11]
 800292e:	4619      	mov	r1, r3
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f7ff fd91 	bl	8002458 <MPU6050_setZeroMotionDetectionDuration>

  //Set the motion detection threshold
  MPU6050_setZeroMotionDetectionThreshold(I2Cx, threshold); // Threshold in 2mg
 8002936:	7abb      	ldrb	r3, [r7, #10]
 8002938:	4619      	mov	r1, r3
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f7ff fdac 	bl	8002498 <MPU6050_setZeroMotionDetectionThreshold>

  //1 ms delay
  HAL_Delay(1);
 8002940:	2001      	movs	r0, #1
 8002942:	f000 fc59 	bl	80031f8 <HAL_Delay>

  //Set the accelerometer HPF to HOLD settings
  MPU6050_setDHPFMode(I2Cx, MPU6050_DHPF_5);
 8002946:	2101      	movs	r1, #1
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f7ff ff0a 	bl	8002762 <MPU6050_setDHPFMode>

}
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <MPU6050_setupFifoBuffer>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param dlpfMode 8-bit unsigned integer variable to specify the lowpass filter frequency, which affects sensors output rate
 * @param freqDivider 8-bit unsigned integer that specifies the sensors update frequency (actual sampFrequency = gyroFreq/freqDivider)
 * @param overflowEnabled bool used to activate the fifo buffer overflow interrupt line
 */
void MPU6050_setupFifoBuffer(I2C_HandleTypeDef *I2Cx, uint8_t dlpfMode, uint8_t freqDivider, bool overflowEnabled) {
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	4608      	mov	r0, r1
 8002960:	4611      	mov	r1, r2
 8002962:	461a      	mov	r2, r3
 8002964:	4603      	mov	r3, r0
 8002966:	70fb      	strb	r3, [r7, #3]
 8002968:	460b      	mov	r3, r1
 800296a:	70bb      	strb	r3, [r7, #2]
 800296c:	4613      	mov	r3, r2
 800296e:	707b      	strb	r3, [r7, #1]
  // force gyro output rate to 1kHz
   MPU6050_setDLPFMode(I2Cx, dlpfMode);
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	4619      	mov	r1, r3
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ff08 	bl	800278a <MPU6050_setDLPFMode>

   // frequency divider:
   MPU6050_setRate(I2Cx, freqDivider);
 800297a:	78bb      	ldrb	r3, [r7, #2]
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff fd04 	bl	800238c <MPU6050_setRate>

   // enable sensors writing to FIFO:
   MPU6050_setXGyroFIFOEnabled(I2Cx, true);
 8002984:	2101      	movs	r1, #1
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f889 	bl	8002a9e <MPU6050_setXGyroFIFOEnabled>
   MPU6050_setYGyroFIFOEnabled(I2Cx, true);
 800298c:	2101      	movs	r1, #1
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f897 	bl	8002ac2 <MPU6050_setYGyroFIFOEnabled>
   MPU6050_setZGyroFIFOEnabled(I2Cx, true);
 8002994:	2101      	movs	r1, #1
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f8a5 	bl	8002ae6 <MPU6050_setZGyroFIFOEnabled>
   MPU6050_setAccelFIFOEnabled(I2Cx, true);
 800299c:	2101      	movs	r1, #1
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f8b3 	bl	8002b0a <MPU6050_setAccelFIFOEnabled>

   // enable interrupt generation when the FIFO overflows:
   MPU6050_setIntFIFOBufferOverflowEnabled(I2Cx, overflowEnabled);
 80029a4:	787b      	ldrb	r3, [r7, #1]
 80029a6:	4619      	mov	r1, r3
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f8c0 	bl	8002b2e <MPU6050_setIntFIFOBufferOverflowEnabled>

   //set trigger event: Active high until interrupt status register is cleared, push-pull configuration
   MPU6050_setInterruptLatch(I2Cx, 1);
 80029ae:	2101      	movs	r1, #1
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff fd93 	bl	80024dc <MPU6050_setInterruptLatch>
   MPU6050_setInterruptLatchClear(I2Cx, 0);
 80029b6:	2100      	movs	r1, #0
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff fda1 	bl	8002500 <MPU6050_setInterruptLatchClear>
   MPU6050_setInterruptDrive(I2Cx, 0);
 80029be:	2100      	movs	r1, #0
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff fdaf 	bl	8002524 <MPU6050_setInterruptDrive>
   MPU6050_setInterruptMode(I2Cx, 0);
 80029c6:	2100      	movs	r1, #0
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff fdbd 	bl	8002548 <MPU6050_setInterruptMode>

   // Enable the FIFO here:
   MPU6050_setFIFOEnabled(I2Cx, true);
 80029ce:	2101      	movs	r1, #1
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f8be 	bl	8002b52 <MPU6050_setFIFOEnabled>

}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <MPU6050_setXAccelOffset>:

/** Update accelerometer x-axis offset
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param offset 16-bit signed integer container for new offset value
 */
void MPU6050_setXAccelOffset(I2C_HandleTypeDef *I2Cx, int16_t offset) {
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	460b      	mov	r3, r1
 80029e8:	807b      	strh	r3, [r7, #2]
  I2Cdev_writeWord(I2Cx, MPU6050_ADDR, XA_OFFS_H, offset);
 80029ea:	887b      	ldrh	r3, [r7, #2]
 80029ec:	2206      	movs	r2, #6
 80029ee:	21d0      	movs	r1, #208	@ 0xd0
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff fbb6 	bl	8002162 <I2Cdev_writeWord>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <MPU6050_setYAccelOffset>:

/** Update accelerometer y-axis offset
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param offset 16-bit signed integer container for new offset value
 */
void MPU6050_setYAccelOffset(I2C_HandleTypeDef *I2Cx, int16_t offset) {
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	807b      	strh	r3, [r7, #2]
  I2Cdev_writeWord(I2Cx, MPU6050_ADDR, YA_OFFS_H, offset);
 8002a0a:	887b      	ldrh	r3, [r7, #2]
 8002a0c:	2208      	movs	r2, #8
 8002a0e:	21d0      	movs	r1, #208	@ 0xd0
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff fba6 	bl	8002162 <I2Cdev_writeWord>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <MPU6050_setZAccelOffset>:

/** Update accelerometer z-axis offset
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param offset 16-bit signed integer container for new offset value
 */
void MPU6050_setZAccelOffset(I2C_HandleTypeDef *I2Cx, int16_t offset) {
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	460b      	mov	r3, r1
 8002a28:	807b      	strh	r3, [r7, #2]
  I2Cdev_writeWord(I2Cx, MPU6050_ADDR, ZA_OFFS_H, offset);
 8002a2a:	887b      	ldrh	r3, [r7, #2]
 8002a2c:	220a      	movs	r2, #10
 8002a2e:	21d0      	movs	r1, #208	@ 0xd0
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff fb96 	bl	8002162 <I2Cdev_writeWord>
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <MPU6050_setXGyroOffset>:

/** Update gyroscope x-axis offset
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param offset 16-bit signed integer container for new offset value
 */
void MPU6050_setXGyroOffset(I2C_HandleTypeDef *I2Cx, int16_t offset) {
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	460b      	mov	r3, r1
 8002a48:	807b      	strh	r3, [r7, #2]
  I2Cdev_writeWord(I2Cx, MPU6050_ADDR, XG_OFFS_USRH, offset);
 8002a4a:	887b      	ldrh	r3, [r7, #2]
 8002a4c:	2213      	movs	r2, #19
 8002a4e:	21d0      	movs	r1, #208	@ 0xd0
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff fb86 	bl	8002162 <I2Cdev_writeWord>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <MPU6050_setYGyroOffset>:

/** Update gyroscope y-axis offset
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param offset 16-bit signed integer container for new offset value
 */
void MPU6050_setYGyroOffset(I2C_HandleTypeDef *I2Cx, int16_t offset) {
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	460b      	mov	r3, r1
 8002a68:	807b      	strh	r3, [r7, #2]
  I2Cdev_writeWord(I2Cx, MPU6050_ADDR, YG_OFFS_USRH, offset);
 8002a6a:	887b      	ldrh	r3, [r7, #2]
 8002a6c:	2215      	movs	r2, #21
 8002a6e:	21d0      	movs	r1, #208	@ 0xd0
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff fb76 	bl	8002162 <I2Cdev_writeWord>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <MPU6050_setZGyroOffset>:

/** Update gyroscope z-axis offset
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param offset 16-bit signed integer container for new offset value
 */
void MPU6050_setZGyroOffset(I2C_HandleTypeDef *I2Cx, int16_t offset) {
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	460b      	mov	r3, r1
 8002a88:	807b      	strh	r3, [r7, #2]
  I2Cdev_writeWord(I2Cx, MPU6050_ADDR, ZG_OFFS_USRH, offset);
 8002a8a:	887b      	ldrh	r3, [r7, #2]
 8002a8c:	2217      	movs	r2, #23
 8002a8e:	21d0      	movs	r1, #208	@ 0xd0
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff fb66 	bl	8002162 <I2Cdev_writeWord>
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <MPU6050_setXGyroFIFOEnabled>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param enabled New gyroscope X-axis FIFO enabled value
 * @see getXGyroFIFOEnabled()
 * @see MPU6050_RA_FIFO_EN
 */
void MPU6050_setXGyroFIFOEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af02      	add	r7, sp, #8
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, MPU6050_RA_FIFO_EN, MPU6050_XG_FIFO_EN_BIT, enabled);
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	2306      	movs	r3, #6
 8002ab0:	2223      	movs	r2, #35	@ 0x23
 8002ab2:	21d0      	movs	r1, #208	@ 0xd0
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff fa43 	bl	8001f40 <I2Cdev_writeBit>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <MPU6050_setYGyroFIFOEnabled>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param enabled New gyroscope Y-axis FIFO enabled value
 * @see getYGyroFIFOEnabled()
 * @see MPU6050_RA_FIFO_EN
 */
void MPU6050_setYGyroFIFOEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b084      	sub	sp, #16
 8002ac6:	af02      	add	r7, sp, #8
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBit(I2Cx, MPU6050_ADDR, MPU6050_RA_FIFO_EN, MPU6050_YG_FIFO_EN_BIT, enabled);
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	2305      	movs	r3, #5
 8002ad4:	2223      	movs	r2, #35	@ 0x23
 8002ad6:	21d0      	movs	r1, #208	@ 0xd0
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff fa31 	bl	8001f40 <I2Cdev_writeBit>
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <MPU6050_setZGyroFIFOEnabled>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param enabled New gyroscope Z-axis FIFO enabled value
 * @see getZGyroFIFOEnabled()
 * @see MPU6050_RA_FIFO_EN
 */
void MPU6050_setZGyroFIFOEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af02      	add	r7, sp, #8
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	460b      	mov	r3, r1
 8002af0:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBit(I2Cx, MPU6050_ADDR, MPU6050_RA_FIFO_EN, MPU6050_ZG_FIFO_EN_BIT, enabled);
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	2304      	movs	r3, #4
 8002af8:	2223      	movs	r2, #35	@ 0x23
 8002afa:	21d0      	movs	r1, #208	@ 0xd0
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff fa1f 	bl	8001f40 <I2Cdev_writeBit>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <MPU6050_setAccelFIFOEnabled>:
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @param enabled New accelerometer FIFO enabled value
 * @see getAccelFIFOEnabled()
 * @see MPU6050_RA_FIFO_EN
 */
void MPU6050_setAccelFIFOEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af02      	add	r7, sp, #8
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, MPU6050_RA_FIFO_EN, MPU6050_ACCEL_FIFO_EN_BIT, enabled);
 8002b16:	78fb      	ldrb	r3, [r7, #3]
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	2223      	movs	r2, #35	@ 0x23
 8002b1e:	21d0      	movs	r1, #208	@ 0xd0
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff fa0d 	bl	8001f40 <I2Cdev_writeBit>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <MPU6050_setIntFIFOBufferOverflowEnabled>:
 * @param enabled New interrupt enabled status
 * @see getIntFIFOBufferOverflowEnabled()
 * @see MPU6050_RA_INT_ENABLE
 * @see MPU6050_INTERRUPT_FIFO_OFLOW_BIT
 **/
void MPU6050_setIntFIFOBufferOverflowEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af02      	add	r7, sp, #8
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	460b      	mov	r3, r1
 8002b38:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, INT_ENABLE_REG, MPU6050_INTERRUPT_FIFO_OFLOW_BIT, enabled);
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	2304      	movs	r3, #4
 8002b40:	2238      	movs	r2, #56	@ 0x38
 8002b42:	21d0      	movs	r1, #208	@ 0xd0
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff f9fb 	bl	8001f40 <I2Cdev_writeBit>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <MPU6050_setFIFOEnabled>:
 * @param enabled New FIFO enabled status
 * @see getFIFOEnabled()
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_EN_BIT
 */
void MPU6050_setFIFOEnabled(I2C_HandleTypeDef *I2Cx, bool enabled) {
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af02      	add	r7, sp, #8
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	70fb      	strb	r3, [r7, #3]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, USER_CTRL_REG, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	2306      	movs	r3, #6
 8002b64:	226a      	movs	r2, #106	@ 0x6a
 8002b66:	21d0      	movs	r1, #208	@ 0xd0
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff f9e9 	bl	8001f40 <I2Cdev_writeBit>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <MPU6050_resetFIFO>:
 * bit automatically clears to 0 after the reset has been triggered.
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050_resetFIFO(I2C_HandleTypeDef *I2Cx) {
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af02      	add	r7, sp, #8
 8002b7c:	6078      	str	r0, [r7, #4]
  I2Cdev_writeBit(I2Cx, MPU6050_ADDR, USER_CTRL_REG, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8002b7e:	2301      	movs	r3, #1
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	2302      	movs	r3, #2
 8002b84:	226a      	movs	r2, #106	@ 0x6a
 8002b86:	21d0      	movs	r1, #208	@ 0xd0
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff f9d9 	bl	8001f40 <I2Cdev_writeBit>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <MPU6050_getFIFOCount>:
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @param I2C_HandleTypeDef pointer to I2C HAL handler
 * @return Current FIFO buffer size
 */
uint16_t MPU6050_getFIFOCount(I2C_HandleTypeDef *I2Cx) {
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b086      	sub	sp, #24
 8002b9a:	af02      	add	r7, sp, #8
 8002b9c:	6078      	str	r0, [r7, #4]
  uint8_t data[2];
  I2Cdev_readBytes(I2Cx, MPU6050_ADDR, MPU6050_RA_FIFO_COUNTH, 2, data);
 8002b9e:	f107 030c 	add.w	r3, r7, #12
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	2272      	movs	r2, #114	@ 0x72
 8002ba8:	21d0      	movs	r1, #208	@ 0xd0
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff fab8 	bl	8002120 <I2Cdev_readBytes>
  return (((uint16_t)data[0]) << 8) | data[1];
 8002bb0:	7b3b      	ldrb	r3, [r7, #12]
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	b21a      	sxth	r2, r3
 8002bb6:	7b7b      	ldrb	r3, [r7, #13]
 8002bb8:	b21b      	sxth	r3, r3
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	b21b      	sxth	r3, r3
 8002bbe:	b29b      	uxth	r3, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bce:	4b0f      	ldr	r3, [pc, #60]	@ (8002c0c <HAL_MspInit+0x44>)
 8002bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8002c0c <HAL_MspInit+0x44>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bda:	4b0c      	ldr	r3, [pc, #48]	@ (8002c0c <HAL_MspInit+0x44>)
 8002bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	607b      	str	r3, [r7, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <HAL_MspInit+0x44>)
 8002be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bea:	4a08      	ldr	r2, [pc, #32]	@ (8002c0c <HAL_MspInit+0x44>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bf2:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <HAL_MspInit+0x44>)
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000

08002c10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b0ac      	sub	sp, #176	@ 0xb0
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	2288      	movs	r2, #136	@ 0x88
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f007 ff5b 	bl	800aaec <memset>
  if(hi2c->Instance==I2C1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a3e      	ldr	r2, [pc, #248]	@ (8002d34 <HAL_I2C_MspInit+0x124>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d174      	bne.n	8002d2a <HAL_I2C_MspInit+0x11a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c40:	2340      	movs	r3, #64	@ 0x40
 8002c42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002c44:	2300      	movs	r3, #0
 8002c46:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c48:	f107 0314 	add.w	r3, r7, #20
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f004 fa1f 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002c58:	f7ff f93a 	bl	8001ed0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5c:	4b36      	ldr	r3, [pc, #216]	@ (8002d38 <HAL_I2C_MspInit+0x128>)
 8002c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c60:	4a35      	ldr	r2, [pc, #212]	@ (8002d38 <HAL_I2C_MspInit+0x128>)
 8002c62:	f043 0302 	orr.w	r3, r3, #2
 8002c66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c68:	4b33      	ldr	r3, [pc, #204]	@ (8002d38 <HAL_I2C_MspInit+0x128>)
 8002c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c74:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c7c:	2312      	movs	r3, #18
 8002c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c8e:	2304      	movs	r3, #4
 8002c90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c94:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4828      	ldr	r0, [pc, #160]	@ (8002d3c <HAL_I2C_MspInit+0x12c>)
 8002c9c:	f000 fe48 	bl	8003930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ca0:	4b25      	ldr	r3, [pc, #148]	@ (8002d38 <HAL_I2C_MspInit+0x128>)
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca4:	4a24      	ldr	r2, [pc, #144]	@ (8002d38 <HAL_I2C_MspInit+0x128>)
 8002ca6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002caa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cac:	4b22      	ldr	r3, [pc, #136]	@ (8002d38 <HAL_I2C_MspInit+0x128>)
 8002cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8002cb8:	4b21      	ldr	r3, [pc, #132]	@ (8002d40 <HAL_I2C_MspInit+0x130>)
 8002cba:	4a22      	ldr	r2, [pc, #136]	@ (8002d44 <HAL_I2C_MspInit+0x134>)
 8002cbc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8002cbe:	4b20      	ldr	r3, [pc, #128]	@ (8002d40 <HAL_I2C_MspInit+0x130>)
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cc4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d40 <HAL_I2C_MspInit+0x130>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cca:	4b1d      	ldr	r3, [pc, #116]	@ (8002d40 <HAL_I2C_MspInit+0x130>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d40 <HAL_I2C_MspInit+0x130>)
 8002cd2:	2280      	movs	r2, #128	@ 0x80
 8002cd4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d40 <HAL_I2C_MspInit+0x130>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cdc:	4b18      	ldr	r3, [pc, #96]	@ (8002d40 <HAL_I2C_MspInit+0x130>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002ce2:	4b17      	ldr	r3, [pc, #92]	@ (8002d40 <HAL_I2C_MspInit+0x130>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ce8:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <HAL_I2C_MspInit+0x130>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002cee:	4814      	ldr	r0, [pc, #80]	@ (8002d40 <HAL_I2C_MspInit+0x130>)
 8002cf0:	f000 fbd8 	bl	80034a4 <HAL_DMA_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 8002cfa:	f7ff f8e9 	bl	8001ed0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a0f      	ldr	r2, [pc, #60]	@ (8002d40 <HAL_I2C_MspInit+0x130>)
 8002d02:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d04:	4a0e      	ldr	r2, [pc, #56]	@ (8002d40 <HAL_I2C_MspInit+0x130>)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	201f      	movs	r0, #31
 8002d10:	f000 fb91 	bl	8003436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002d14:	201f      	movs	r0, #31
 8002d16:	f000 fbaa 	bl	800346e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	2020      	movs	r0, #32
 8002d20:	f000 fb89 	bl	8003436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002d24:	2020      	movs	r0, #32
 8002d26:	f000 fba2 	bl	800346e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002d2a:	bf00      	nop
 8002d2c:	37b0      	adds	r7, #176	@ 0xb0
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40005400 	.word	0x40005400
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	48000400 	.word	0x48000400
 8002d40:	20000250 	.word	0x20000250
 8002d44:	40020080 	.word	0x40020080

08002d48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b0a4      	sub	sp, #144	@ 0x90
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d50:	f107 0308 	add.w	r3, r7, #8
 8002d54:	2288      	movs	r2, #136	@ 0x88
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f007 fec7 	bl	800aaec <memset>
  if(hrtc->Instance==RTC)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a14      	ldr	r2, [pc, #80]	@ (8002db4 <HAL_RTC_MspInit+0x6c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d120      	bne.n	8002daa <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d6c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002d6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d76:	f107 0308 	add.w	r3, r7, #8
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f004 f988 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002d86:	f7ff f8a3 	bl	8001ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002db8 <HAL_RTC_MspInit+0x70>)
 8002d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d90:	4a09      	ldr	r2, [pc, #36]	@ (8002db8 <HAL_RTC_MspInit+0x70>)
 8002d92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	2003      	movs	r0, #3
 8002da0:	f000 fb49 	bl	8003436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002da4:	2003      	movs	r0, #3
 8002da6:	f000 fb62 	bl	800346e <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002daa:	bf00      	nop
 8002dac:	3790      	adds	r7, #144	@ 0x90
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40002800 	.word	0x40002800
 8002db8:	40021000 	.word	0x40021000

08002dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b0ac      	sub	sp, #176	@ 0xb0
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dd4:	f107 0314 	add.w	r3, r7, #20
 8002dd8:	2288      	movs	r2, #136	@ 0x88
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f007 fe85 	bl	800aaec <memset>
  if(huart->Instance==USART2)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a21      	ldr	r2, [pc, #132]	@ (8002e6c <HAL_UART_MspInit+0xb0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d13b      	bne.n	8002e64 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002dec:	2302      	movs	r3, #2
 8002dee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002df0:	2300      	movs	r3, #0
 8002df2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f004 f949 	bl	8007090 <HAL_RCCEx_PeriphCLKConfig>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e04:	f7ff f864 	bl	8001ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e08:	4b19      	ldr	r3, [pc, #100]	@ (8002e70 <HAL_UART_MspInit+0xb4>)
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0c:	4a18      	ldr	r2, [pc, #96]	@ (8002e70 <HAL_UART_MspInit+0xb4>)
 8002e0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e12:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e14:	4b16      	ldr	r3, [pc, #88]	@ (8002e70 <HAL_UART_MspInit+0xb4>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e20:	4b13      	ldr	r3, [pc, #76]	@ (8002e70 <HAL_UART_MspInit+0xb4>)
 8002e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e24:	4a12      	ldr	r2, [pc, #72]	@ (8002e70 <HAL_UART_MspInit+0xb4>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e2c:	4b10      	ldr	r3, [pc, #64]	@ (8002e70 <HAL_UART_MspInit+0xb4>)
 8002e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e38:	230c      	movs	r3, #12
 8002e3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e50:	2307      	movs	r3, #7
 8002e52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e56:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e60:	f000 fd66 	bl	8003930 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002e64:	bf00      	nop
 8002e66:	37b0      	adds	r7, #176	@ 0xb0
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40004400 	.word	0x40004400
 8002e70:	40021000 	.word	0x40021000

08002e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e78:	bf00      	nop
 8002e7a:	e7fd      	b.n	8002e78 <NMI_Handler+0x4>

08002e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e80:	bf00      	nop
 8002e82:	e7fd      	b.n	8002e80 <HardFault_Handler+0x4>

08002e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e88:	bf00      	nop
 8002e8a:	e7fd      	b.n	8002e88 <MemManage_Handler+0x4>

08002e8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e90:	bf00      	nop
 8002e92:	e7fd      	b.n	8002e90 <BusFault_Handler+0x4>

08002e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e98:	bf00      	nop
 8002e9a:	e7fd      	b.n	8002e98 <UsageFault_Handler+0x4>

08002e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eca:	f000 f975 	bl	80031b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002ed8:	4802      	ldr	r0, [pc, #8]	@ (8002ee4 <RTC_WKUP_IRQHandler+0x10>)
 8002eda:	f005 f9ad 	bl	8008238 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000298 	.word	0x20000298

08002ee8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002eec:	4802      	ldr	r0, [pc, #8]	@ (8002ef8 <DMA1_Channel7_IRQHandler+0x10>)
 8002eee:	f000 fc32 	bl	8003756 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000250 	.word	0x20000250

08002efc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_Int1_Pin);
 8002f00:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002f04:	f000 fed6 	bl	8003cb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f08:	bf00      	nop
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002f10:	4802      	ldr	r0, [pc, #8]	@ (8002f1c <I2C1_EV_IRQHandler+0x10>)
 8002f12:	f001 fa97 	bl	8004444 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	200001fc 	.word	0x200001fc

08002f20 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002f24:	4802      	ldr	r0, [pc, #8]	@ (8002f30 <I2C1_ER_IRQHandler+0x10>)
 8002f26:	f001 faa7 	bl	8004478 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	200001fc 	.word	0x200001fc

08002f34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return 1;
 8002f38:	2301      	movs	r3, #1
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <_kill>:

int _kill(int pid, int sig)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f4e:	f007 fdd9 	bl	800ab04 <__errno>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2216      	movs	r2, #22
 8002f56:	601a      	str	r2, [r3, #0]
  return -1;
 8002f58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <_exit>:

void _exit (int status)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ffe7 	bl	8002f44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f76:	bf00      	nop
 8002f78:	e7fd      	b.n	8002f76 <_exit+0x12>

08002f7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e00a      	b.n	8002fa2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f8c:	f3af 8000 	nop.w
 8002f90:	4601      	mov	r1, r0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	60ba      	str	r2, [r7, #8]
 8002f98:	b2ca      	uxtb	r2, r1
 8002f9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	dbf0      	blt.n	8002f8c <_read+0x12>
  }

  return len;
 8002faa:	687b      	ldr	r3, [r7, #4]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fdc:	605a      	str	r2, [r3, #4]
  return 0;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <_isatty>:

int _isatty(int file)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ff4:	2301      	movs	r3, #1
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003002:	b480      	push	{r7}
 8003004:	b085      	sub	sp, #20
 8003006:	af00      	add	r7, sp, #0
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003024:	4a14      	ldr	r2, [pc, #80]	@ (8003078 <_sbrk+0x5c>)
 8003026:	4b15      	ldr	r3, [pc, #84]	@ (800307c <_sbrk+0x60>)
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003030:	4b13      	ldr	r3, [pc, #76]	@ (8003080 <_sbrk+0x64>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003038:	4b11      	ldr	r3, [pc, #68]	@ (8003080 <_sbrk+0x64>)
 800303a:	4a12      	ldr	r2, [pc, #72]	@ (8003084 <_sbrk+0x68>)
 800303c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800303e:	4b10      	ldr	r3, [pc, #64]	@ (8003080 <_sbrk+0x64>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	429a      	cmp	r2, r3
 800304a:	d207      	bcs.n	800305c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800304c:	f007 fd5a 	bl	800ab04 <__errno>
 8003050:	4603      	mov	r3, r0
 8003052:	220c      	movs	r2, #12
 8003054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003056:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800305a:	e009      	b.n	8003070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800305c:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <_sbrk+0x64>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003062:	4b07      	ldr	r3, [pc, #28]	@ (8003080 <_sbrk+0x64>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	4a05      	ldr	r2, [pc, #20]	@ (8003080 <_sbrk+0x64>)
 800306c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800306e:	68fb      	ldr	r3, [r7, #12]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20018000 	.word	0x20018000
 800307c:	00000400 	.word	0x00000400
 8003080:	200003b8 	.word	0x200003b8
 8003084:	20000510 	.word	0x20000510

08003088 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800308c:	4b06      	ldr	r3, [pc, #24]	@ (80030a8 <SystemInit+0x20>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003092:	4a05      	ldr	r2, [pc, #20]	@ (80030a8 <SystemInit+0x20>)
 8003094:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003098:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80030ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030b0:	f7ff ffea 	bl	8003088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030b4:	480c      	ldr	r0, [pc, #48]	@ (80030e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80030b6:	490d      	ldr	r1, [pc, #52]	@ (80030ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80030b8:	4a0d      	ldr	r2, [pc, #52]	@ (80030f0 <LoopForever+0xe>)
  movs r3, #0
 80030ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030bc:	e002      	b.n	80030c4 <LoopCopyDataInit>

080030be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030c2:	3304      	adds	r3, #4

080030c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030c8:	d3f9      	bcc.n	80030be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ca:	4a0a      	ldr	r2, [pc, #40]	@ (80030f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030cc:	4c0a      	ldr	r4, [pc, #40]	@ (80030f8 <LoopForever+0x16>)
  movs r3, #0
 80030ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030d0:	e001      	b.n	80030d6 <LoopFillZerobss>

080030d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030d4:	3204      	adds	r2, #4

080030d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030d8:	d3fb      	bcc.n	80030d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030da:	f007 fd19 	bl	800ab10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030de:	f7fd ff81 	bl	8000fe4 <main>

080030e2 <LoopForever>:

LoopForever:
    b LoopForever
 80030e2:	e7fe      	b.n	80030e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80030e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80030e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030ec:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80030f0:	0800dc7c 	.word	0x0800dc7c
  ldr r2, =_sbss
 80030f4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80030f8:	2000050c 	.word	0x2000050c

080030fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030fc:	e7fe      	b.n	80030fc <ADC1_2_IRQHandler>
	...

08003100 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800310a:	4b0c      	ldr	r3, [pc, #48]	@ (800313c <HAL_Init+0x3c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a0b      	ldr	r2, [pc, #44]	@ (800313c <HAL_Init+0x3c>)
 8003110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003114:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003116:	2003      	movs	r0, #3
 8003118:	f000 f982 	bl	8003420 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800311c:	2000      	movs	r0, #0
 800311e:	f000 f80f 	bl	8003140 <HAL_InitTick>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	71fb      	strb	r3, [r7, #7]
 800312c:	e001      	b.n	8003132 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800312e:	f7ff fd4b 	bl	8002bc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003132:	79fb      	ldrb	r3, [r7, #7]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40022000 	.word	0x40022000

08003140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800314c:	4b17      	ldr	r3, [pc, #92]	@ (80031ac <HAL_InitTick+0x6c>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d023      	beq.n	800319c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003154:	4b16      	ldr	r3, [pc, #88]	@ (80031b0 <HAL_InitTick+0x70>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b14      	ldr	r3, [pc, #80]	@ (80031ac <HAL_InitTick+0x6c>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	4619      	mov	r1, r3
 800315e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003162:	fbb3 f3f1 	udiv	r3, r3, r1
 8003166:	fbb2 f3f3 	udiv	r3, r2, r3
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f98d 	bl	800348a <HAL_SYSTICK_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10f      	bne.n	8003196 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b0f      	cmp	r3, #15
 800317a:	d809      	bhi.n	8003190 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800317c:	2200      	movs	r2, #0
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003184:	f000 f957 	bl	8003436 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003188:	4a0a      	ldr	r2, [pc, #40]	@ (80031b4 <HAL_InitTick+0x74>)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e007      	b.n	80031a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
 8003194:	e004      	b.n	80031a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
 800319a:	e001      	b.n	80031a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000014 	.word	0x20000014
 80031b0:	2000000c 	.word	0x2000000c
 80031b4:	20000010 	.word	0x20000010

080031b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031bc:	4b06      	ldr	r3, [pc, #24]	@ (80031d8 <HAL_IncTick+0x20>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <HAL_IncTick+0x24>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4413      	add	r3, r2
 80031c8:	4a04      	ldr	r2, [pc, #16]	@ (80031dc <HAL_IncTick+0x24>)
 80031ca:	6013      	str	r3, [r2, #0]
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000014 	.word	0x20000014
 80031dc:	200003bc 	.word	0x200003bc

080031e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return uwTick;
 80031e4:	4b03      	ldr	r3, [pc, #12]	@ (80031f4 <HAL_GetTick+0x14>)
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	200003bc 	.word	0x200003bc

080031f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003200:	f7ff ffee 	bl	80031e0 <HAL_GetTick>
 8003204:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003210:	d005      	beq.n	800321e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003212:	4b0a      	ldr	r3, [pc, #40]	@ (800323c <HAL_Delay+0x44>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4413      	add	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800321e:	bf00      	nop
 8003220:	f7ff ffde 	bl	80031e0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	429a      	cmp	r2, r3
 800322e:	d8f7      	bhi.n	8003220 <HAL_Delay+0x28>
  {
  }
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000014 	.word	0x20000014

08003240 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003244:	4b05      	ldr	r3, [pc, #20]	@ (800325c <HAL_SuspendTick+0x1c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a04      	ldr	r2, [pc, #16]	@ (800325c <HAL_SuspendTick+0x1c>)
 800324a:	f023 0302 	bic.w	r3, r3, #2
 800324e:	6013      	str	r3, [r2, #0]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	e000e010 	.word	0xe000e010

08003260 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003264:	4b05      	ldr	r3, [pc, #20]	@ (800327c <HAL_ResumeTick+0x1c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a04      	ldr	r2, [pc, #16]	@ (800327c <HAL_ResumeTick+0x1c>)
 800326a:	f043 0302 	orr.w	r3, r3, #2
 800326e:	6013      	str	r3, [r2, #0]
}
 8003270:	bf00      	nop
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	e000e010 	.word	0xe000e010

08003280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003290:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800329c:	4013      	ands	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032b2:	4a04      	ldr	r2, [pc, #16]	@ (80032c4 <__NVIC_SetPriorityGrouping+0x44>)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	60d3      	str	r3, [r2, #12]
}
 80032b8:	bf00      	nop
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032cc:	4b04      	ldr	r3, [pc, #16]	@ (80032e0 <__NVIC_GetPriorityGrouping+0x18>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	0a1b      	lsrs	r3, r3, #8
 80032d2:	f003 0307 	and.w	r3, r3, #7
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	db0b      	blt.n	800330e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	f003 021f 	and.w	r2, r3, #31
 80032fc:	4907      	ldr	r1, [pc, #28]	@ (800331c <__NVIC_EnableIRQ+0x38>)
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	2001      	movs	r0, #1
 8003306:	fa00 f202 	lsl.w	r2, r0, r2
 800330a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	e000e100 	.word	0xe000e100

08003320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	6039      	str	r1, [r7, #0]
 800332a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800332c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003330:	2b00      	cmp	r3, #0
 8003332:	db0a      	blt.n	800334a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	490c      	ldr	r1, [pc, #48]	@ (800336c <__NVIC_SetPriority+0x4c>)
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	0112      	lsls	r2, r2, #4
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	440b      	add	r3, r1
 8003344:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003348:	e00a      	b.n	8003360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	b2da      	uxtb	r2, r3
 800334e:	4908      	ldr	r1, [pc, #32]	@ (8003370 <__NVIC_SetPriority+0x50>)
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	3b04      	subs	r3, #4
 8003358:	0112      	lsls	r2, r2, #4
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	440b      	add	r3, r1
 800335e:	761a      	strb	r2, [r3, #24]
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000e100 	.word	0xe000e100
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003374:	b480      	push	{r7}
 8003376:	b089      	sub	sp, #36	@ 0x24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f1c3 0307 	rsb	r3, r3, #7
 800338e:	2b04      	cmp	r3, #4
 8003390:	bf28      	it	cs
 8003392:	2304      	movcs	r3, #4
 8003394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	3304      	adds	r3, #4
 800339a:	2b06      	cmp	r3, #6
 800339c:	d902      	bls.n	80033a4 <NVIC_EncodePriority+0x30>
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	3b03      	subs	r3, #3
 80033a2:	e000      	b.n	80033a6 <NVIC_EncodePriority+0x32>
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43da      	mvns	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	401a      	ands	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	fa01 f303 	lsl.w	r3, r1, r3
 80033c6:	43d9      	mvns	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033cc:	4313      	orrs	r3, r2
         );
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3724      	adds	r7, #36	@ 0x24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033ec:	d301      	bcc.n	80033f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ee:	2301      	movs	r3, #1
 80033f0:	e00f      	b.n	8003412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033f2:	4a0a      	ldr	r2, [pc, #40]	@ (800341c <SysTick_Config+0x40>)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033fa:	210f      	movs	r1, #15
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003400:	f7ff ff8e 	bl	8003320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003404:	4b05      	ldr	r3, [pc, #20]	@ (800341c <SysTick_Config+0x40>)
 8003406:	2200      	movs	r2, #0
 8003408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800340a:	4b04      	ldr	r3, [pc, #16]	@ (800341c <SysTick_Config+0x40>)
 800340c:	2207      	movs	r2, #7
 800340e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	e000e010 	.word	0xe000e010

08003420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ff29 	bl	8003280 <__NVIC_SetPriorityGrouping>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b086      	sub	sp, #24
 800343a:	af00      	add	r7, sp, #0
 800343c:	4603      	mov	r3, r0
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003448:	f7ff ff3e 	bl	80032c8 <__NVIC_GetPriorityGrouping>
 800344c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	6978      	ldr	r0, [r7, #20]
 8003454:	f7ff ff8e 	bl	8003374 <NVIC_EncodePriority>
 8003458:	4602      	mov	r2, r0
 800345a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff ff5d 	bl	8003320 <__NVIC_SetPriority>
}
 8003466:	bf00      	nop
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	4603      	mov	r3, r0
 8003476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ff31 	bl	80032e4 <__NVIC_EnableIRQ>
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7ff ffa2 	bl	80033dc <SysTick_Config>
 8003498:	4603      	mov	r3, r0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e098      	b.n	80035e8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	4b4d      	ldr	r3, [pc, #308]	@ (80035f4 <HAL_DMA_Init+0x150>)
 80034be:	429a      	cmp	r2, r3
 80034c0:	d80f      	bhi.n	80034e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	4b4b      	ldr	r3, [pc, #300]	@ (80035f8 <HAL_DMA_Init+0x154>)
 80034ca:	4413      	add	r3, r2
 80034cc:	4a4b      	ldr	r2, [pc, #300]	@ (80035fc <HAL_DMA_Init+0x158>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	091b      	lsrs	r3, r3, #4
 80034d4:	009a      	lsls	r2, r3, #2
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a48      	ldr	r2, [pc, #288]	@ (8003600 <HAL_DMA_Init+0x15c>)
 80034de:	641a      	str	r2, [r3, #64]	@ 0x40
 80034e0:	e00e      	b.n	8003500 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	4b46      	ldr	r3, [pc, #280]	@ (8003604 <HAL_DMA_Init+0x160>)
 80034ea:	4413      	add	r3, r2
 80034ec:	4a43      	ldr	r2, [pc, #268]	@ (80035fc <HAL_DMA_Init+0x158>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	091b      	lsrs	r3, r3, #4
 80034f4:	009a      	lsls	r2, r3, #2
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a42      	ldr	r2, [pc, #264]	@ (8003608 <HAL_DMA_Init+0x164>)
 80034fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800351a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003524:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003530:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800353c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800355a:	d039      	beq.n	80035d0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003560:	4a27      	ldr	r2, [pc, #156]	@ (8003600 <HAL_DMA_Init+0x15c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d11a      	bne.n	800359c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003566:	4b29      	ldr	r3, [pc, #164]	@ (800360c <HAL_DMA_Init+0x168>)
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356e:	f003 031c 	and.w	r3, r3, #28
 8003572:	210f      	movs	r1, #15
 8003574:	fa01 f303 	lsl.w	r3, r1, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	4924      	ldr	r1, [pc, #144]	@ (800360c <HAL_DMA_Init+0x168>)
 800357c:	4013      	ands	r3, r2
 800357e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003580:	4b22      	ldr	r3, [pc, #136]	@ (800360c <HAL_DMA_Init+0x168>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6859      	ldr	r1, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358c:	f003 031c 	and.w	r3, r3, #28
 8003590:	fa01 f303 	lsl.w	r3, r1, r3
 8003594:	491d      	ldr	r1, [pc, #116]	@ (800360c <HAL_DMA_Init+0x168>)
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]
 800359a:	e019      	b.n	80035d0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800359c:	4b1c      	ldr	r3, [pc, #112]	@ (8003610 <HAL_DMA_Init+0x16c>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a4:	f003 031c 	and.w	r3, r3, #28
 80035a8:	210f      	movs	r1, #15
 80035aa:	fa01 f303 	lsl.w	r3, r1, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	4917      	ldr	r1, [pc, #92]	@ (8003610 <HAL_DMA_Init+0x16c>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80035b6:	4b16      	ldr	r3, [pc, #88]	@ (8003610 <HAL_DMA_Init+0x16c>)
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6859      	ldr	r1, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c2:	f003 031c 	and.w	r3, r3, #28
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	4911      	ldr	r1, [pc, #68]	@ (8003610 <HAL_DMA_Init+0x16c>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	40020407 	.word	0x40020407
 80035f8:	bffdfff8 	.word	0xbffdfff8
 80035fc:	cccccccd 	.word	0xcccccccd
 8003600:	40020000 	.word	0x40020000
 8003604:	bffdfbf8 	.word	0xbffdfbf8
 8003608:	40020400 	.word	0x40020400
 800360c:	400200a8 	.word	0x400200a8
 8003610:	400204a8 	.word	0x400204a8

08003614 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_DMA_Start_IT+0x20>
 8003630:	2302      	movs	r3, #2
 8003632:	e04b      	b.n	80036cc <HAL_DMA_Start_IT+0xb8>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d13a      	bne.n	80036be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0201 	bic.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	68b9      	ldr	r1, [r7, #8]
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f92f 	bl	80038d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 020e 	orr.w	r2, r2, #14
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	e00f      	b.n	80036ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0204 	bic.w	r2, r2, #4
 800369a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 020a 	orr.w	r2, r2, #10
 80036aa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	e005      	b.n	80036ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
 80036c8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80036ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d005      	beq.n	80036f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2204      	movs	r2, #4
 80036f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
 80036f6:	e029      	b.n	800374c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 020e 	bic.w	r2, r2, #14
 8003706:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0201 	bic.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371c:	f003 021c 	and.w	r2, r3, #28
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003724:	2101      	movs	r1, #1
 8003726:	fa01 f202 	lsl.w	r2, r1, r2
 800372a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4798      	blx	r3
    }
  }
  return status;
 800374c:	7bfb      	ldrb	r3, [r7, #15]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003772:	f003 031c 	and.w	r3, r3, #28
 8003776:	2204      	movs	r2, #4
 8003778:	409a      	lsls	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	4013      	ands	r3, r2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d026      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x7a>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d021      	beq.n	80037d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b00      	cmp	r3, #0
 8003798:	d107      	bne.n	80037aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0204 	bic.w	r2, r2, #4
 80037a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ae:	f003 021c 	and.w	r2, r3, #28
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b6:	2104      	movs	r1, #4
 80037b8:	fa01 f202 	lsl.w	r2, r1, r2
 80037bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d071      	beq.n	80038aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80037ce:	e06c      	b.n	80038aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d4:	f003 031c 	and.w	r3, r3, #28
 80037d8:	2202      	movs	r2, #2
 80037da:	409a      	lsls	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d02e      	beq.n	8003842 <HAL_DMA_IRQHandler+0xec>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d029      	beq.n	8003842 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10b      	bne.n	8003814 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 020a 	bic.w	r2, r2, #10
 800380a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003818:	f003 021c 	and.w	r2, r3, #28
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003820:	2102      	movs	r1, #2
 8003822:	fa01 f202 	lsl.w	r2, r1, r2
 8003826:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d038      	beq.n	80038aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003840:	e033      	b.n	80038aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	f003 031c 	and.w	r3, r3, #28
 800384a:	2208      	movs	r2, #8
 800384c:	409a      	lsls	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d02a      	beq.n	80038ac <HAL_DMA_IRQHandler+0x156>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b00      	cmp	r3, #0
 800385e:	d025      	beq.n	80038ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 020e 	bic.w	r2, r2, #14
 800386e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003874:	f003 021c 	and.w	r2, r3, #28
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	2101      	movs	r1, #1
 800387e:	fa01 f202 	lsl.w	r2, r1, r2
 8003882:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d004      	beq.n	80038ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
}
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038c2:	b2db      	uxtb	r3, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e2:	f003 021c 	and.w	r2, r3, #28
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f202 	lsl.w	r2, r1, r2
 80038f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b10      	cmp	r3, #16
 8003900:	d108      	bne.n	8003914 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003912:	e007      	b.n	8003924 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	60da      	str	r2, [r3, #12]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800393e:	e17f      	b.n	8003c40 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	2101      	movs	r1, #1
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	fa01 f303 	lsl.w	r3, r1, r3
 800394c:	4013      	ands	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 8171 	beq.w	8003c3a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b01      	cmp	r3, #1
 8003962:	d005      	beq.n	8003970 <HAL_GPIO_Init+0x40>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d130      	bne.n	80039d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4013      	ands	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039a6:	2201      	movs	r2, #1
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4013      	ands	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	091b      	lsrs	r3, r3, #4
 80039bc:	f003 0201 	and.w	r2, r3, #1
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d118      	bne.n	8003a10 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80039e4:	2201      	movs	r2, #1
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4013      	ands	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	08db      	lsrs	r3, r3, #3
 80039fa:	f003 0201 	and.w	r2, r3, #1
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d017      	beq.n	8003a4c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	2203      	movs	r2, #3
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d123      	bne.n	8003aa0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	08da      	lsrs	r2, r3, #3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3208      	adds	r2, #8
 8003a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	220f      	movs	r2, #15
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	08da      	lsrs	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3208      	adds	r2, #8
 8003a9a:	6939      	ldr	r1, [r7, #16]
 8003a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	2203      	movs	r2, #3
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0203 	and.w	r2, r3, #3
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80ac 	beq.w	8003c3a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ae2:	4b5f      	ldr	r3, [pc, #380]	@ (8003c60 <HAL_GPIO_Init+0x330>)
 8003ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ae6:	4a5e      	ldr	r2, [pc, #376]	@ (8003c60 <HAL_GPIO_Init+0x330>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	6613      	str	r3, [r2, #96]	@ 0x60
 8003aee:	4b5c      	ldr	r3, [pc, #368]	@ (8003c60 <HAL_GPIO_Init+0x330>)
 8003af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003afa:	4a5a      	ldr	r2, [pc, #360]	@ (8003c64 <HAL_GPIO_Init+0x334>)
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	089b      	lsrs	r3, r3, #2
 8003b00:	3302      	adds	r3, #2
 8003b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b06:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	220f      	movs	r2, #15
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43db      	mvns	r3, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b24:	d025      	beq.n	8003b72 <HAL_GPIO_Init+0x242>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a4f      	ldr	r2, [pc, #316]	@ (8003c68 <HAL_GPIO_Init+0x338>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d01f      	beq.n	8003b6e <HAL_GPIO_Init+0x23e>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a4e      	ldr	r2, [pc, #312]	@ (8003c6c <HAL_GPIO_Init+0x33c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d019      	beq.n	8003b6a <HAL_GPIO_Init+0x23a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a4d      	ldr	r2, [pc, #308]	@ (8003c70 <HAL_GPIO_Init+0x340>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d013      	beq.n	8003b66 <HAL_GPIO_Init+0x236>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a4c      	ldr	r2, [pc, #304]	@ (8003c74 <HAL_GPIO_Init+0x344>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00d      	beq.n	8003b62 <HAL_GPIO_Init+0x232>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a4b      	ldr	r2, [pc, #300]	@ (8003c78 <HAL_GPIO_Init+0x348>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d007      	beq.n	8003b5e <HAL_GPIO_Init+0x22e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a4a      	ldr	r2, [pc, #296]	@ (8003c7c <HAL_GPIO_Init+0x34c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d101      	bne.n	8003b5a <HAL_GPIO_Init+0x22a>
 8003b56:	2306      	movs	r3, #6
 8003b58:	e00c      	b.n	8003b74 <HAL_GPIO_Init+0x244>
 8003b5a:	2307      	movs	r3, #7
 8003b5c:	e00a      	b.n	8003b74 <HAL_GPIO_Init+0x244>
 8003b5e:	2305      	movs	r3, #5
 8003b60:	e008      	b.n	8003b74 <HAL_GPIO_Init+0x244>
 8003b62:	2304      	movs	r3, #4
 8003b64:	e006      	b.n	8003b74 <HAL_GPIO_Init+0x244>
 8003b66:	2303      	movs	r3, #3
 8003b68:	e004      	b.n	8003b74 <HAL_GPIO_Init+0x244>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e002      	b.n	8003b74 <HAL_GPIO_Init+0x244>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <HAL_GPIO_Init+0x244>
 8003b72:	2300      	movs	r3, #0
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	f002 0203 	and.w	r2, r2, #3
 8003b7a:	0092      	lsls	r2, r2, #2
 8003b7c:	4093      	lsls	r3, r2
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b84:	4937      	ldr	r1, [pc, #220]	@ (8003c64 <HAL_GPIO_Init+0x334>)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	089b      	lsrs	r3, r3, #2
 8003b8a:	3302      	adds	r3, #2
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b92:	4b3b      	ldr	r3, [pc, #236]	@ (8003c80 <HAL_GPIO_Init+0x350>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bb6:	4a32      	ldr	r2, [pc, #200]	@ (8003c80 <HAL_GPIO_Init+0x350>)
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bbc:	4b30      	ldr	r3, [pc, #192]	@ (8003c80 <HAL_GPIO_Init+0x350>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003be0:	4a27      	ldr	r2, [pc, #156]	@ (8003c80 <HAL_GPIO_Init+0x350>)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003be6:	4b26      	ldr	r3, [pc, #152]	@ (8003c80 <HAL_GPIO_Init+0x350>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003c80 <HAL_GPIO_Init+0x350>)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c10:	4b1b      	ldr	r3, [pc, #108]	@ (8003c80 <HAL_GPIO_Init+0x350>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c34:	4a12      	ldr	r2, [pc, #72]	@ (8003c80 <HAL_GPIO_Init+0x350>)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f47f ae78 	bne.w	8003940 <HAL_GPIO_Init+0x10>
  }
}
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40010000 	.word	0x40010000
 8003c68:	48000400 	.word	0x48000400
 8003c6c:	48000800 	.word	0x48000800
 8003c70:	48000c00 	.word	0x48000c00
 8003c74:	48001000 	.word	0x48001000
 8003c78:	48001400 	.word	0x48001400
 8003c7c:	48001800 	.word	0x48001800
 8003c80:	40010400 	.word	0x40010400

08003c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	807b      	strh	r3, [r7, #2]
 8003c90:	4613      	mov	r3, r2
 8003c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c94:	787b      	ldrb	r3, [r7, #1]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c9a:	887a      	ldrh	r2, [r7, #2]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ca0:	e002      	b.n	8003ca8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ca2:	887a      	ldrh	r2, [r7, #2]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cbe:	4b08      	ldr	r3, [pc, #32]	@ (8003ce0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d006      	beq.n	8003cd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cca:	4a05      	ldr	r2, [pc, #20]	@ (8003ce0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ccc:	88fb      	ldrh	r3, [r7, #6]
 8003cce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cd0:	88fb      	ldrh	r3, [r7, #6]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe f8e0 	bl	8001e98 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40010400 	.word	0x40010400

08003ce4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e08d      	b.n	8003e12 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fe ff80 	bl	8002c10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2224      	movs	r2, #36	@ 0x24
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0201 	bic.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d107      	bne.n	8003d5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	e006      	b.n	8003d6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003d6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d108      	bne.n	8003d86 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d82:	605a      	str	r2, [r3, #4]
 8003d84:	e007      	b.n	8003d96 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003da4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003da8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003db8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691a      	ldr	r2, [r3, #16]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69d9      	ldr	r1, [r3, #28]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1a      	ldr	r2, [r3, #32]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	4608      	mov	r0, r1
 8003e26:	4611      	mov	r1, r2
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	817b      	strh	r3, [r7, #10]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	813b      	strh	r3, [r7, #8]
 8003e32:	4613      	mov	r3, r2
 8003e34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	f040 80f9 	bne.w	8004036 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_I2C_Mem_Write+0x34>
 8003e4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d105      	bne.n	8003e5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e56:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0ed      	b.n	8004038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_I2C_Mem_Write+0x4e>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e0e6      	b.n	8004038 <HAL_I2C_Mem_Write+0x21c>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e72:	f7ff f9b5 	bl	80031e0 <HAL_GetTick>
 8003e76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	2319      	movs	r3, #25
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f001 fdc4 	bl	8005a12 <I2C_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0d1      	b.n	8004038 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2221      	movs	r2, #33	@ 0x21
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2240      	movs	r2, #64	@ 0x40
 8003ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a3a      	ldr	r2, [r7, #32]
 8003eae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ebc:	88f8      	ldrh	r0, [r7, #6]
 8003ebe:	893a      	ldrh	r2, [r7, #8]
 8003ec0:	8979      	ldrh	r1, [r7, #10]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	4603      	mov	r3, r0
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 ff91 	bl	8004df4 <I2C_RequestMemoryWrite>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0a9      	b.n	8004038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2bff      	cmp	r3, #255	@ 0xff
 8003eec:	d90e      	bls.n	8003f0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	22ff      	movs	r2, #255	@ 0xff
 8003ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	8979      	ldrh	r1, [r7, #10]
 8003efc:	2300      	movs	r3, #0
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f001 ff47 	bl	8005d98 <I2C_TransferConfig>
 8003f0a:	e00f      	b.n	8003f2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	8979      	ldrh	r1, [r7, #10]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f001 ff36 	bl	8005d98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f001 fdc7 	bl	8005ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e07b      	b.n	8004038 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f44:	781a      	ldrb	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d034      	beq.n	8003fe4 <HAL_I2C_Mem_Write+0x1c8>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d130      	bne.n	8003fe4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2180      	movs	r1, #128	@ 0x80
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f001 fd40 	bl	8005a12 <I2C_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e04d      	b.n	8004038 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2bff      	cmp	r3, #255	@ 0xff
 8003fa4:	d90e      	bls.n	8003fc4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	22ff      	movs	r2, #255	@ 0xff
 8003faa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	8979      	ldrh	r1, [r7, #10]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f001 feeb 	bl	8005d98 <I2C_TransferConfig>
 8003fc2:	e00f      	b.n	8003fe4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	8979      	ldrh	r1, [r7, #10]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f001 feda 	bl	8005d98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d19e      	bne.n	8003f2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f001 fdad 	bl	8005b52 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e01a      	b.n	8004038 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2220      	movs	r2, #32
 8004008:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6859      	ldr	r1, [r3, #4]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	4b0a      	ldr	r3, [pc, #40]	@ (8004040 <HAL_I2C_Mem_Write+0x224>)
 8004016:	400b      	ands	r3, r1
 8004018:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	e000      	b.n	8004038 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004036:	2302      	movs	r3, #2
  }
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	fe00e800 	.word	0xfe00e800

08004044 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	4608      	mov	r0, r1
 800404e:	4611      	mov	r1, r2
 8004050:	461a      	mov	r2, r3
 8004052:	4603      	mov	r3, r0
 8004054:	817b      	strh	r3, [r7, #10]
 8004056:	460b      	mov	r3, r1
 8004058:	813b      	strh	r3, [r7, #8]
 800405a:	4613      	mov	r3, r2
 800405c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b20      	cmp	r3, #32
 8004068:	f040 80fd 	bne.w	8004266 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <HAL_I2C_Mem_Read+0x34>
 8004072:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004074:	2b00      	cmp	r3, #0
 8004076:	d105      	bne.n	8004084 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800407e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e0f1      	b.n	8004268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_I2C_Mem_Read+0x4e>
 800408e:	2302      	movs	r3, #2
 8004090:	e0ea      	b.n	8004268 <HAL_I2C_Mem_Read+0x224>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800409a:	f7ff f8a1 	bl	80031e0 <HAL_GetTick>
 800409e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	2319      	movs	r3, #25
 80040a6:	2201      	movs	r2, #1
 80040a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f001 fcb0 	bl	8005a12 <I2C_WaitOnFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0d5      	b.n	8004268 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2222      	movs	r2, #34	@ 0x22
 80040c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2240      	movs	r2, #64	@ 0x40
 80040c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a3a      	ldr	r2, [r7, #32]
 80040d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80040dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040e4:	88f8      	ldrh	r0, [r7, #6]
 80040e6:	893a      	ldrh	r2, [r7, #8]
 80040e8:	8979      	ldrh	r1, [r7, #10]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	9301      	str	r3, [sp, #4]
 80040ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	4603      	mov	r3, r0
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fed1 	bl	8004e9c <I2C_RequestMemoryRead>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0ad      	b.n	8004268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2bff      	cmp	r3, #255	@ 0xff
 8004114:	d90e      	bls.n	8004134 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004120:	b2da      	uxtb	r2, r3
 8004122:	8979      	ldrh	r1, [r7, #10]
 8004124:	4b52      	ldr	r3, [pc, #328]	@ (8004270 <HAL_I2C_Mem_Read+0x22c>)
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f001 fe33 	bl	8005d98 <I2C_TransferConfig>
 8004132:	e00f      	b.n	8004154 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004142:	b2da      	uxtb	r2, r3
 8004144:	8979      	ldrh	r1, [r7, #10]
 8004146:	4b4a      	ldr	r3, [pc, #296]	@ (8004270 <HAL_I2C_Mem_Read+0x22c>)
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f001 fe22 	bl	8005d98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800415a:	2200      	movs	r2, #0
 800415c:	2104      	movs	r1, #4
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f001 fc57 	bl	8005a12 <I2C_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e07c      	b.n	8004268 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d034      	beq.n	8004214 <HAL_I2C_Mem_Read+0x1d0>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d130      	bne.n	8004214 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b8:	2200      	movs	r2, #0
 80041ba:	2180      	movs	r1, #128	@ 0x80
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f001 fc28 	bl	8005a12 <I2C_WaitOnFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e04d      	b.n	8004268 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	2bff      	cmp	r3, #255	@ 0xff
 80041d4:	d90e      	bls.n	80041f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	8979      	ldrh	r1, [r7, #10]
 80041e4:	2300      	movs	r3, #0
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f001 fdd3 	bl	8005d98 <I2C_TransferConfig>
 80041f2:	e00f      	b.n	8004214 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004202:	b2da      	uxtb	r2, r3
 8004204:	8979      	ldrh	r1, [r7, #10]
 8004206:	2300      	movs	r3, #0
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f001 fdc2 	bl	8005d98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d19a      	bne.n	8004154 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f001 fc95 	bl	8005b52 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e01a      	b.n	8004268 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2220      	movs	r2, #32
 8004238:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6859      	ldr	r1, [r3, #4]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4b0b      	ldr	r3, [pc, #44]	@ (8004274 <HAL_I2C_Mem_Read+0x230>)
 8004246:	400b      	ands	r3, r1
 8004248:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	e000      	b.n	8004268 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004266:	2302      	movs	r3, #2
  }
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	80002400 	.word	0x80002400
 8004274:	fe00e800 	.word	0xfe00e800

08004278 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af02      	add	r7, sp, #8
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	4608      	mov	r0, r1
 8004282:	4611      	mov	r1, r2
 8004284:	461a      	mov	r2, r3
 8004286:	4603      	mov	r3, r0
 8004288:	817b      	strh	r3, [r7, #10]
 800428a:	460b      	mov	r3, r1
 800428c:	813b      	strh	r3, [r7, #8]
 800428e:	4613      	mov	r3, r2
 8004290:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b20      	cmp	r3, #32
 800429c:	f040 80c2 	bne.w	8004424 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_I2C_Mem_Read_DMA+0x34>
 80042a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d105      	bne.n	80042b8 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042b2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0b6      	b.n	8004426 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042c6:	d101      	bne.n	80042cc <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 80042c8:	2302      	movs	r3, #2
 80042ca:	e0ac      	b.n	8004426 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_I2C_Mem_Read_DMA+0x62>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e0a5      	b.n	8004426 <HAL_I2C_Mem_Read_DMA+0x1ae>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2222      	movs	r2, #34	@ 0x22
 80042e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2240      	movs	r2, #64	@ 0x40
 80042ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a3a      	ldr	r2, [r7, #32]
 80042fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004302:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4a4a      	ldr	r2, [pc, #296]	@ (8004430 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8004308:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4a49      	ldr	r2, [pc, #292]	@ (8004434 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 800430e:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8004310:	897a      	ldrh	r2, [r7, #10]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431a:	b29b      	uxth	r3, r3
 800431c:	2bff      	cmp	r3, #255	@ 0xff
 800431e:	d903      	bls.n	8004328 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	22ff      	movs	r2, #255	@ 0xff
 8004324:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004326:	e004      	b.n	8004332 <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004332:	88fb      	ldrh	r3, [r7, #6]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d109      	bne.n	800434c <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004338:	893b      	ldrh	r3, [r7, #8]
 800433a:	b2da      	uxtb	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004348:	651a      	str	r2, [r3, #80]	@ 0x50
 800434a:	e00b      	b.n	8004364 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800434c:	893b      	ldrh	r3, [r7, #8]
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	b29b      	uxth	r3, r3
 8004352:	b2da      	uxtb	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800435a:	893b      	ldrh	r3, [r7, #8]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	461a      	mov	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d020      	beq.n	80043ae <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004370:	4a31      	ldr	r2, [pc, #196]	@ (8004438 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 8004372:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004378:	4a30      	ldr	r2, [pc, #192]	@ (800443c <HAL_I2C_Mem_Read_DMA+0x1c4>)
 800437a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004380:	2200      	movs	r2, #0
 8004382:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004388:	2200      	movs	r2, #0
 800438a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3324      	adds	r3, #36	@ 0x24
 8004396:	4619      	mov	r1, r3
 8004398:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800439e:	f7ff f939 	bl	8003614 <HAL_DMA_Start_IT>
 80043a2:	4603      	mov	r3, r0
 80043a4:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d127      	bne.n	80043fc <HAL_I2C_Mem_Read_DMA+0x184>
 80043ac:	e013      	b.n	80043d6 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e027      	b.n	8004426 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80043d6:	88fb      	ldrh	r3, [r7, #6]
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	8979      	ldrh	r1, [r7, #10]
 80043dc:	4b18      	ldr	r3, [pc, #96]	@ (8004440 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	2300      	movs	r3, #0
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f001 fcd8 	bl	8005d98 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80043f0:	2101      	movs	r1, #1
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f001 fd02 	bl	8005dfc <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	e014      	b.n	8004426 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004410:	f043 0210 	orr.w	r2, r3, #16
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e000      	b.n	8004426 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8004424:	2302      	movs	r3, #2
  }
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	ffff0000 	.word	0xffff0000
 8004434:	080049bd 	.word	0x080049bd
 8004438:	080058f7 	.word	0x080058f7
 800443c:	080059a9 	.word	0x080059a9
 8004440:	80002000 	.word	0x80002000

08004444 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	68f9      	ldr	r1, [r7, #12]
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	4798      	blx	r3
  }
}
 8004470:	bf00      	nop
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00f      	beq.n	80044ba <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00a      	beq.n	80044ba <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a8:	f043 0201 	orr.w	r2, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044b8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00f      	beq.n	80044e4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d2:	f043 0208 	orr.w	r2, r3, #8
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044e2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00f      	beq.n	800450e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fc:	f043 0202 	orr.w	r2, r3, #2
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800450c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004512:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 030b 	and.w	r3, r3, #11
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800451e:	68f9      	ldr	r1, [r7, #12]
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f001 f8ad 	bl	8005680 <I2C_ITError>
  }
}
 8004526:	bf00      	nop
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	460b      	mov	r3, r1
 8004588:	70fb      	strb	r3, [r7, #3]
 800458a:	4613      	mov	r3, r2
 800458c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b086      	sub	sp, #24
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <I2C_Slave_ISR_IT+0x24>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e0e2      	b.n	80047c0 <I2C_Slave_ISR_IT+0x1ea>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f003 0320 	and.w	r3, r3, #32
 8004608:	2b00      	cmp	r3, #0
 800460a:	d009      	beq.n	8004620 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004612:	2b00      	cmp	r3, #0
 8004614:	d004      	beq.n	8004620 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004616:	6939      	ldr	r1, [r7, #16]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 fe79 	bl	8005310 <I2C_ITSlaveCplt>
 800461e:	e0ca      	b.n	80047b6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b00      	cmp	r3, #0
 8004628:	d04b      	beq.n	80046c2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004630:	2b00      	cmp	r3, #0
 8004632:	d046      	beq.n	80046c2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d128      	bne.n	8004690 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b28      	cmp	r3, #40	@ 0x28
 8004648:	d108      	bne.n	800465c <I2C_Slave_ISR_IT+0x86>
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004650:	d104      	bne.n	800465c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004652:	6939      	ldr	r1, [r7, #16]
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 ffbf 	bl	80055d8 <I2C_ITListenCplt>
 800465a:	e031      	b.n	80046c0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b29      	cmp	r3, #41	@ 0x29
 8004666:	d10e      	bne.n	8004686 <I2C_Slave_ISR_IT+0xb0>
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800466e:	d00a      	beq.n	8004686 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2210      	movs	r2, #16
 8004676:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f001 f918 	bl	80058ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 fd21 	bl	80050c6 <I2C_ITSlaveSeqCplt>
 8004684:	e01c      	b.n	80046c0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2210      	movs	r2, #16
 800468c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800468e:	e08f      	b.n	80047b0 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2210      	movs	r2, #16
 8004696:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469c:	f043 0204 	orr.w	r2, r3, #4
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <I2C_Slave_ISR_IT+0xdc>
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046b0:	d17e      	bne.n	80047b0 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b6:	4619      	mov	r1, r3
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 ffe1 	bl	8005680 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80046be:	e077      	b.n	80047b0 <I2C_Slave_ISR_IT+0x1da>
 80046c0:	e076      	b.n	80047b0 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d02f      	beq.n	800472c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d02a      	beq.n	800472c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d018      	beq.n	8004712 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d14b      	bne.n	80047b4 <I2C_Slave_ISR_IT+0x1de>
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004722:	d047      	beq.n	80047b4 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 fcce 	bl	80050c6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800472a:	e043      	b.n	80047b4 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d009      	beq.n	800474a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800473c:	2b00      	cmp	r3, #0
 800473e:	d004      	beq.n	800474a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004740:	6939      	ldr	r1, [r7, #16]
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 fbfe 	bl	8004f44 <I2C_ITAddrCplt>
 8004748:	e035      	b.n	80047b6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d030      	beq.n	80047b6 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800475a:	2b00      	cmp	r3, #0
 800475c:	d02b      	beq.n	80047b6 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d018      	beq.n	800479a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	781a      	ldrb	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004798:	e00d      	b.n	80047b6 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047a0:	d002      	beq.n	80047a8 <I2C_Slave_ISR_IT+0x1d2>
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d106      	bne.n	80047b6 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 fc8c 	bl	80050c6 <I2C_ITSlaveSeqCplt>
 80047ae:	e002      	b.n	80047b6 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80047b0:	bf00      	nop
 80047b2:	e000      	b.n	80047b6 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80047b4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d101      	bne.n	80047e2 <I2C_Master_ISR_DMA+0x1a>
 80047de:	2302      	movs	r3, #2
 80047e0:	e0e7      	b.n	80049b2 <I2C_Master_ISR_DMA+0x1ea>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d016      	beq.n	8004822 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d011      	beq.n	8004822 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2210      	movs	r2, #16
 8004804:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800480a:	f043 0204 	orr.w	r2, r3, #4
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004812:	2120      	movs	r1, #32
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f001 faf1 	bl	8005dfc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f001 f847 	bl	80058ae <I2C_Flush_TXDR>
 8004820:	e0c2      	b.n	80049a8 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004828:	2b00      	cmp	r3, #0
 800482a:	d07f      	beq.n	800492c <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004832:	2b00      	cmp	r3, #0
 8004834:	d07a      	beq.n	800492c <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004844:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d05c      	beq.n	800490a <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	b29b      	uxth	r3, r3
 8004858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800485c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004862:	b29b      	uxth	r3, r3
 8004864:	2bff      	cmp	r3, #255	@ 0xff
 8004866:	d914      	bls.n	8004892 <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	0c1b      	lsrs	r3, r3, #16
 8004870:	b2db      	uxtb	r3, r3
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b01      	cmp	r3, #1
 800487a:	d103      	bne.n	8004884 <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004882:	e002      	b.n	800488a <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	22ff      	movs	r2, #255	@ 0xff
 8004888:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800488a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	e010      	b.n	80048b4 <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048a4:	d003      	beq.n	80048ae <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	e002      	b.n	80048b4 <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80048ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048b2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	8a79      	ldrh	r1, [r7, #18]
 80048bc:	2300      	movs	r3, #0
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f001 fa68 	bl	8005d98 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b22      	cmp	r3, #34	@ 0x22
 80048e4:	d108      	bne.n	80048f8 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048f4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80048f6:	e057      	b.n	80049a8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004906:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004908:	e04e      	b.n	80049a8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004914:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004918:	d003      	beq.n	8004922 <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 fb96 	bl	800504c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004920:	e042      	b.n	80049a8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004922:	2140      	movs	r1, #64	@ 0x40
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 feab 	bl	8005680 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800492a:	e03d      	b.n	80049a8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d028      	beq.n	8004988 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800493c:	2b00      	cmp	r3, #0
 800493e:	d023      	beq.n	8004988 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004944:	b29b      	uxth	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d119      	bne.n	800497e <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004954:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004958:	d025      	beq.n	80049a6 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004962:	d108      	bne.n	8004976 <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004972:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004974:	e017      	b.n	80049a6 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 fb68 	bl	800504c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800497c:	e013      	b.n	80049a6 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800497e:	2140      	movs	r1, #64	@ 0x40
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 fe7d 	bl	8005680 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004986:	e00e      	b.n	80049a6 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800499c:	68b9      	ldr	r1, [r7, #8]
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fbee 	bl	8005180 <I2C_ITMasterCplt>
 80049a4:	e000      	b.n	80049a8 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80049a6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af02      	add	r7, sp, #8
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80049c8:	4b90      	ldr	r3, [pc, #576]	@ (8004c0c <I2C_Mem_ISR_DMA+0x250>)
 80049ca:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <I2C_Mem_ISR_DMA+0x1e>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e12f      	b.n	8004c3a <I2C_Mem_ISR_DMA+0x27e>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d016      	beq.n	8004a1a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d011      	beq.n	8004a1a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2210      	movs	r2, #16
 80049fc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a02:	f043 0204 	orr.w	r2, r3, #4
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004a0a:	2120      	movs	r1, #32
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f001 f9f5 	bl	8005dfc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 ff4b 	bl	80058ae <I2C_Flush_TXDR>
 8004a18:	e10a      	b.n	8004c30 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00e      	beq.n	8004a42 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a36:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a3e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004a40:	e0f6      	b.n	8004c30 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d06d      	beq.n	8004b28 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d068      	beq.n	8004b28 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a56:	2101      	movs	r1, #1
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f001 fa53 	bl	8005f04 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004a5e:	2110      	movs	r1, #16
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f001 f9cb 	bl	8005dfc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d056      	beq.n	8004b1e <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2bff      	cmp	r3, #255	@ 0xff
 8004a78:	d91e      	bls.n	8004ab8 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	0c1b      	lsrs	r3, r3, #16
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d103      	bne.n	8004a96 <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004a94:	e002      	b.n	8004a9c <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	22ff      	movs	r2, #255	@ 0xff
 8004a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aa0:	b299      	uxth	r1, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f001 f971 	bl	8005d98 <I2C_TransferConfig>
 8004ab6:	e011      	b.n	8004adc <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac6:	b299      	uxth	r1, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	2300      	movs	r3, #0
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f001 f95e 	bl	8005d98 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b22      	cmp	r3, #34	@ 0x22
 8004af8:	d108      	bne.n	8004b0c <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b08:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004b0a:	e091      	b.n	8004c30 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b1a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004b1c:	e088      	b.n	8004c30 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004b1e:	2140      	movs	r1, #64	@ 0x40
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 fdad 	bl	8005680 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004b26:	e083      	b.n	8004c30 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d070      	beq.n	8004c14 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d06b      	beq.n	8004c14 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f001 f9e0 	bl	8005f04 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004b44:	2110      	movs	r1, #16
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f001 f958 	bl	8005dfc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b22      	cmp	r3, #34	@ 0x22
 8004b56:	d101      	bne.n	8004b5c <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8004b58:	4b2d      	ldr	r3, [pc, #180]	@ (8004c10 <I2C_Mem_ISR_DMA+0x254>)
 8004b5a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2bff      	cmp	r3, #255	@ 0xff
 8004b64:	d91e      	bls.n	8004ba4 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	0c1b      	lsrs	r3, r3, #16
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d103      	bne.n	8004b82 <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004b80:	e002      	b.n	8004b88 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	22ff      	movs	r2, #255	@ 0xff
 8004b86:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b8c:	b299      	uxth	r1, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f001 f8fb 	bl	8005d98 <I2C_TransferConfig>
 8004ba2:	e011      	b.n	8004bc8 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb2:	b299      	uxth	r1, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f001 f8e8 	bl	8005d98 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b22      	cmp	r3, #34	@ 0x22
 8004be4:	d108      	bne.n	8004bf8 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bf4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bf6:	e01b      	b.n	8004c30 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c06:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c08:	e012      	b.n	8004c30 <I2C_Mem_ISR_DMA+0x274>
 8004c0a:	bf00      	nop
 8004c0c:	80002000 	.word	0x80002000
 8004c10:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f003 0320 	and.w	r3, r3, #32
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d008      	beq.n	8004c30 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 faa8 	bl	8005180 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop

08004c44 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c54:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d101      	bne.n	8004c68 <I2C_Slave_ISR_DMA+0x24>
 8004c64:	2302      	movs	r3, #2
 8004c66:	e0c0      	b.n	8004dea <I2C_Slave_ISR_DMA+0x1a6>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d009      	beq.n	8004c8e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d004      	beq.n	8004c8e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 fb42 	bl	8005310 <I2C_ITSlaveCplt>
 8004c8c:	e0a8      	b.n	8004de0 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8095 	beq.w	8004dc4 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 808f 	beq.w	8004dc4 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d104      	bne.n	8004cba <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d07d      	beq.n	8004db6 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00c      	beq.n	8004cdc <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00c      	beq.n	8004cfe <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d128      	bne.n	8004d56 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b28      	cmp	r3, #40	@ 0x28
 8004d0e:	d108      	bne.n	8004d22 <I2C_Slave_ISR_DMA+0xde>
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d16:	d104      	bne.n	8004d22 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fc5c 	bl	80055d8 <I2C_ITListenCplt>
 8004d20:	e048      	b.n	8004db4 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b29      	cmp	r3, #41	@ 0x29
 8004d2c:	d10e      	bne.n	8004d4c <I2C_Slave_ISR_DMA+0x108>
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d34:	d00a      	beq.n	8004d4c <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2210      	movs	r2, #16
 8004d3c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 fdb5 	bl	80058ae <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f9be 	bl	80050c6 <I2C_ITSlaveSeqCplt>
 8004d4a:	e033      	b.n	8004db4 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2210      	movs	r2, #16
 8004d52:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004d54:	e034      	b.n	8004dc0 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2210      	movs	r2, #16
 8004d5c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d62:	f043 0204 	orr.w	r2, r3, #4
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d70:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <I2C_Slave_ISR_DMA+0x13c>
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d7e:	d11f      	bne.n	8004dc0 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
 8004d82:	2b21      	cmp	r3, #33	@ 0x21
 8004d84:	d002      	beq.n	8004d8c <I2C_Slave_ISR_DMA+0x148>
 8004d86:	7dfb      	ldrb	r3, [r7, #23]
 8004d88:	2b29      	cmp	r3, #41	@ 0x29
 8004d8a:	d103      	bne.n	8004d94 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2221      	movs	r2, #33	@ 0x21
 8004d90:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d92:	e008      	b.n	8004da6 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d94:	7dfb      	ldrb	r3, [r7, #23]
 8004d96:	2b22      	cmp	r3, #34	@ 0x22
 8004d98:	d002      	beq.n	8004da0 <I2C_Slave_ISR_DMA+0x15c>
 8004d9a:	7dfb      	ldrb	r3, [r7, #23]
 8004d9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d9e:	d102      	bne.n	8004da6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2222      	movs	r2, #34	@ 0x22
 8004da4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004daa:	4619      	mov	r1, r3
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 fc67 	bl	8005680 <I2C_ITError>
      if (treatdmanack == 1U)
 8004db2:	e005      	b.n	8004dc0 <I2C_Slave_ISR_DMA+0x17c>
 8004db4:	e004      	b.n	8004dc0 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2210      	movs	r2, #16
 8004dbc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004dbe:	e00f      	b.n	8004de0 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8004dc0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004dc2:	e00d      	b.n	8004de0 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d008      	beq.n	8004de0 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f8b2 	bl	8004f44 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3720      	adds	r7, #32
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af02      	add	r7, sp, #8
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	4608      	mov	r0, r1
 8004dfe:	4611      	mov	r1, r2
 8004e00:	461a      	mov	r2, r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	817b      	strh	r3, [r7, #10]
 8004e06:	460b      	mov	r3, r1
 8004e08:	813b      	strh	r3, [r7, #8]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004e0e:	88fb      	ldrh	r3, [r7, #6]
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	8979      	ldrh	r1, [r7, #10]
 8004e14:	4b20      	ldr	r3, [pc, #128]	@ (8004e98 <I2C_RequestMemoryWrite+0xa4>)
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 ffbb 	bl	8005d98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	69b9      	ldr	r1, [r7, #24]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 fe4c 	bl	8005ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e02c      	b.n	8004e90 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d105      	bne.n	8004e48 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e3c:	893b      	ldrh	r3, [r7, #8]
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e46:	e015      	b.n	8004e74 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e48:	893b      	ldrh	r3, [r7, #8]
 8004e4a:	0a1b      	lsrs	r3, r3, #8
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e56:	69fa      	ldr	r2, [r7, #28]
 8004e58:	69b9      	ldr	r1, [r7, #24]
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fe32 	bl	8005ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e012      	b.n	8004e90 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e6a:	893b      	ldrh	r3, [r7, #8]
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2180      	movs	r1, #128	@ 0x80
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 fdc7 	bl	8005a12 <I2C_WaitOnFlagUntilTimeout>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	80002000 	.word	0x80002000

08004e9c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	4608      	mov	r0, r1
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	4603      	mov	r3, r0
 8004eac:	817b      	strh	r3, [r7, #10]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	813b      	strh	r3, [r7, #8]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	8979      	ldrh	r1, [r7, #10]
 8004ebc:	4b20      	ldr	r3, [pc, #128]	@ (8004f40 <I2C_RequestMemoryRead+0xa4>)
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 ff68 	bl	8005d98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	69b9      	ldr	r1, [r7, #24]
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fdf9 	bl	8005ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e02c      	b.n	8004f36 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004edc:	88fb      	ldrh	r3, [r7, #6]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d105      	bne.n	8004eee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ee2:	893b      	ldrh	r3, [r7, #8]
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	629a      	str	r2, [r3, #40]	@ 0x28
 8004eec:	e015      	b.n	8004f1a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004eee:	893b      	ldrh	r3, [r7, #8]
 8004ef0:	0a1b      	lsrs	r3, r3, #8
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	69b9      	ldr	r1, [r7, #24]
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fddf 	bl	8005ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e012      	b.n	8004f36 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f10:	893b      	ldrh	r3, [r7, #8]
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	9300      	str	r3, [sp, #0]
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2200      	movs	r2, #0
 8004f22:	2140      	movs	r1, #64	@ 0x40
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 fd74 	bl	8005a12 <I2C_WaitOnFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e000      	b.n	8004f36 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	80002000 	.word	0x80002000

08004f44 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f5a:	2b28      	cmp	r3, #40	@ 0x28
 8004f5c:	d16a      	bne.n	8005034 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	0c1b      	lsrs	r3, r3, #16
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	0c1b      	lsrs	r3, r3, #16
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004f7c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f8a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004f98:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d138      	bne.n	8005014 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004fa2:	897b      	ldrh	r3, [r7, #10]
 8004fa4:	09db      	lsrs	r3, r3, #7
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	89bb      	ldrh	r3, [r7, #12]
 8004faa:	4053      	eors	r3, r2
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	f003 0306 	and.w	r3, r3, #6
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d11c      	bne.n	8004ff0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004fb6:	897b      	ldrh	r3, [r7, #10]
 8004fb8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d13b      	bne.n	8005044 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2208      	movs	r2, #8
 8004fd8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004fe2:	89ba      	ldrh	r2, [r7, #12]
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff fac8 	bl	800457e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004fee:	e029      	b.n	8005044 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004ff0:	893b      	ldrh	r3, [r7, #8]
 8004ff2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ff4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 ff83 	bl	8005f04 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005006:	89ba      	ldrh	r2, [r7, #12]
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	4619      	mov	r1, r3
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff fab6 	bl	800457e <HAL_I2C_AddrCallback>
}
 8005012:	e017      	b.n	8005044 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005014:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 ff73 	bl	8005f04 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005026:	89ba      	ldrh	r2, [r7, #12]
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	4619      	mov	r1, r3
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7ff faa6 	bl	800457e <HAL_I2C_AddrCallback>
}
 8005032:	e007      	b.n	8005044 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2208      	movs	r2, #8
 800503a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b21      	cmp	r3, #33	@ 0x21
 8005066:	d115      	bne.n	8005094 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2211      	movs	r2, #17
 8005074:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800507c:	2101      	movs	r1, #1
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 ff40 	bl	8005f04 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff fa4e 	bl	800452e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005092:	e014      	b.n	80050be <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2212      	movs	r2, #18
 80050a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80050a8:	2102      	movs	r1, #2
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 ff2a 	bl	8005f04 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff fa42 	bl	8004542 <HAL_I2C_MasterRxCpltCallback>
}
 80050be:	bf00      	nop
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d008      	beq.n	80050fa <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	e00c      	b.n	8005114 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d007      	beq.n	8005114 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005112:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b29      	cmp	r3, #41	@ 0x29
 800511e:	d112      	bne.n	8005146 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2228      	movs	r2, #40	@ 0x28
 8005124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2221      	movs	r2, #33	@ 0x21
 800512c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800512e:	2101      	movs	r1, #1
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fee7 	bl	8005f04 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff fa09 	bl	8004556 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005144:	e017      	b.n	8005176 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005150:	d111      	bne.n	8005176 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2228      	movs	r2, #40	@ 0x28
 8005156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2222      	movs	r2, #34	@ 0x22
 800515e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005160:	2102      	movs	r1, #2
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fece 	bl	8005f04 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7ff f9fa 	bl	800456a <HAL_I2C_SlaveRxCpltCallback>
}
 8005176:	bf00      	nop
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2220      	movs	r2, #32
 8005194:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b21      	cmp	r3, #33	@ 0x21
 80051a0:	d107      	bne.n	80051b2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80051a2:	2101      	movs	r1, #1
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fead 	bl	8005f04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2211      	movs	r2, #17
 80051ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80051b0:	e00c      	b.n	80051cc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b22      	cmp	r3, #34	@ 0x22
 80051bc:	d106      	bne.n	80051cc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80051be:	2102      	movs	r1, #2
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fe9f 	bl	8005f04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2212      	movs	r2, #18
 80051ca:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6859      	ldr	r1, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	4b4c      	ldr	r3, [pc, #304]	@ (8005308 <I2C_ITMasterCplt+0x188>)
 80051d8:	400b      	ands	r3, r1
 80051da:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a49      	ldr	r2, [pc, #292]	@ (800530c <I2C_ITMasterCplt+0x18c>)
 80051e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f003 0310 	and.w	r3, r3, #16
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d009      	beq.n	8005206 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2210      	movs	r2, #16
 80051f8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fe:	f043 0204 	orr.w	r2, r3, #4
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b60      	cmp	r3, #96	@ 0x60
 8005210:	d10a      	bne.n	8005228 <I2C_ITMasterCplt+0xa8>
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005222:	b2db      	uxtb	r3, r3
 8005224:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005226:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fb40 	bl	80058ae <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005232:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b60      	cmp	r3, #96	@ 0x60
 800523e:	d002      	beq.n	8005246 <I2C_ITMasterCplt+0xc6>
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d006      	beq.n	8005254 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800524a:	4619      	mov	r1, r3
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fa17 	bl	8005680 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005252:	e054      	b.n	80052fe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b21      	cmp	r3, #33	@ 0x21
 800525e:	d124      	bne.n	80052aa <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b40      	cmp	r3, #64	@ 0x40
 8005278:	d10b      	bne.n	8005292 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff f98f 	bl	80045ae <HAL_I2C_MemTxCpltCallback>
}
 8005290:	e035      	b.n	80052fe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff f943 	bl	800452e <HAL_I2C_MasterTxCpltCallback>
}
 80052a8:	e029      	b.n	80052fe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b22      	cmp	r3, #34	@ 0x22
 80052b4:	d123      	bne.n	80052fe <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b40      	cmp	r3, #64	@ 0x40
 80052ce:	d10b      	bne.n	80052e8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7fc fda5 	bl	8001e30 <HAL_I2C_MemRxCpltCallback>
}
 80052e6:	e00a      	b.n	80052fe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff f922 	bl	8004542 <HAL_I2C_MasterRxCpltCallback>
}
 80052fe:	bf00      	nop
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	fe00e800 	.word	0xfe00e800
 800530c:	ffff0000 	.word	0xffff0000

08005310 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005332:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2220      	movs	r2, #32
 800533a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800533c:	7afb      	ldrb	r3, [r7, #11]
 800533e:	2b21      	cmp	r3, #33	@ 0x21
 8005340:	d002      	beq.n	8005348 <I2C_ITSlaveCplt+0x38>
 8005342:	7afb      	ldrb	r3, [r7, #11]
 8005344:	2b29      	cmp	r3, #41	@ 0x29
 8005346:	d108      	bne.n	800535a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005348:	f248 0101 	movw	r1, #32769	@ 0x8001
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fdd9 	bl	8005f04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2221      	movs	r2, #33	@ 0x21
 8005356:	631a      	str	r2, [r3, #48]	@ 0x30
 8005358:	e019      	b.n	800538e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800535a:	7afb      	ldrb	r3, [r7, #11]
 800535c:	2b22      	cmp	r3, #34	@ 0x22
 800535e:	d002      	beq.n	8005366 <I2C_ITSlaveCplt+0x56>
 8005360:	7afb      	ldrb	r3, [r7, #11]
 8005362:	2b2a      	cmp	r3, #42	@ 0x2a
 8005364:	d108      	bne.n	8005378 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005366:	f248 0102 	movw	r1, #32770	@ 0x8002
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fdca 	bl	8005f04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2222      	movs	r2, #34	@ 0x22
 8005374:	631a      	str	r2, [r3, #48]	@ 0x30
 8005376:	e00a      	b.n	800538e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005378:	7afb      	ldrb	r3, [r7, #11]
 800537a:	2b28      	cmp	r3, #40	@ 0x28
 800537c:	d107      	bne.n	800538e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800537e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fdbe 	bl	8005f04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800539c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6859      	ldr	r1, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	4b89      	ldr	r3, [pc, #548]	@ (80055d0 <I2C_ITSlaveCplt+0x2c0>)
 80053aa:	400b      	ands	r3, r1
 80053ac:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fa7d 	bl	80058ae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d013      	beq.n	80053e6 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80053cc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d01f      	beq.n	8005416 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	b29a      	uxth	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80053e4:	e017      	b.n	8005416 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d012      	beq.n	8005416 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80053fe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005404:	2b00      	cmp	r3, #0
 8005406:	d006      	beq.n	8005416 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	b29a      	uxth	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	d020      	beq.n	8005462 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f023 0304 	bic.w	r3, r3, #4
 8005426:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00c      	beq.n	8005462 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005470:	f043 0204 	orr.w	r2, r3, #4
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b00      	cmp	r3, #0
 8005480:	d049      	beq.n	8005516 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005488:	2b00      	cmp	r3, #0
 800548a:	d044      	beq.n	8005516 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005490:	b29b      	uxth	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d128      	bne.n	80054e8 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b28      	cmp	r3, #40	@ 0x28
 80054a0:	d108      	bne.n	80054b4 <I2C_ITSlaveCplt+0x1a4>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054a8:	d104      	bne.n	80054b4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80054aa:	6979      	ldr	r1, [r7, #20]
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f893 	bl	80055d8 <I2C_ITListenCplt>
 80054b2:	e030      	b.n	8005516 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b29      	cmp	r3, #41	@ 0x29
 80054be:	d10e      	bne.n	80054de <I2C_ITSlaveCplt+0x1ce>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80054c6:	d00a      	beq.n	80054de <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2210      	movs	r2, #16
 80054ce:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f9ec 	bl	80058ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7ff fdf5 	bl	80050c6 <I2C_ITSlaveSeqCplt>
 80054dc:	e01b      	b.n	8005516 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2210      	movs	r2, #16
 80054e4:	61da      	str	r2, [r3, #28]
 80054e6:	e016      	b.n	8005516 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2210      	movs	r2, #16
 80054ee:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f4:	f043 0204 	orr.w	r2, r3, #4
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <I2C_ITSlaveCplt+0x1fa>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005508:	d105      	bne.n	8005516 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800550e:	4619      	mov	r1, r3
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f8b5 	bl	8005680 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005528:	2b00      	cmp	r3, #0
 800552a:	d010      	beq.n	800554e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f8a4 	bl	8005680 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b28      	cmp	r3, #40	@ 0x28
 8005542:	d141      	bne.n	80055c8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005544:	6979      	ldr	r1, [r7, #20]
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f846 	bl	80055d8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800554c:	e03c      	b.n	80055c8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005552:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005556:	d014      	beq.n	8005582 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7ff fdb4 	bl	80050c6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a1c      	ldr	r2, [pc, #112]	@ (80055d4 <I2C_ITSlaveCplt+0x2c4>)
 8005562:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff f80d 	bl	800459a <HAL_I2C_ListenCpltCallback>
}
 8005580:	e022      	b.n	80055c8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b22      	cmp	r3, #34	@ 0x22
 800558c:	d10e      	bne.n	80055ac <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7fe ffe0 	bl	800456a <HAL_I2C_SlaveRxCpltCallback>
}
 80055aa:	e00d      	b.n	80055c8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fe ffc7 	bl	8004556 <HAL_I2C_SlaveTxCpltCallback>
}
 80055c8:	bf00      	nop
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	fe00e800 	.word	0xfe00e800
 80055d4:	ffff0000 	.word	0xffff0000

080055d8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a25      	ldr	r2, [pc, #148]	@ (800567c <I2C_ITListenCplt+0xa4>)
 80055e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	2b00      	cmp	r3, #0
 800560c:	d022      	beq.n	8005654 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800562a:	2b00      	cmp	r3, #0
 800562c:	d012      	beq.n	8005654 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005632:	3b01      	subs	r3, #1
 8005634:	b29a      	uxth	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800563e:	b29b      	uxth	r3, r3
 8005640:	3b01      	subs	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564c:	f043 0204 	orr.w	r2, r3, #4
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005654:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fc53 	bl	8005f04 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2210      	movs	r2, #16
 8005664:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fe ff93 	bl	800459a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005674:	bf00      	nop
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	ffff0000 	.word	0xffff0000

08005680 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005690:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a6d      	ldr	r2, [pc, #436]	@ (8005854 <I2C_ITError+0x1d4>)
 800569e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	431a      	orrs	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	2b28      	cmp	r3, #40	@ 0x28
 80056b6:	d005      	beq.n	80056c4 <I2C_ITError+0x44>
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
 80056ba:	2b29      	cmp	r3, #41	@ 0x29
 80056bc:	d002      	beq.n	80056c4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80056c2:	d10b      	bne.n	80056dc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80056c4:	2103      	movs	r1, #3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fc1c 	bl	8005f04 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2228      	movs	r2, #40	@ 0x28
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a60      	ldr	r2, [pc, #384]	@ (8005858 <I2C_ITError+0x1d8>)
 80056d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80056da:	e030      	b.n	800573e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80056dc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fc0f 	bl	8005f04 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f8e1 	bl	80058ae <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b60      	cmp	r3, #96	@ 0x60
 80056f6:	d01f      	beq.n	8005738 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b20      	cmp	r3, #32
 800570c:	d114      	bne.n	8005738 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	2b10      	cmp	r3, #16
 800571a:	d109      	bne.n	8005730 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2210      	movs	r2, #16
 8005722:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005728:	f043 0204 	orr.w	r2, r3, #4
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2220      	movs	r2, #32
 8005736:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005742:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005748:	2b00      	cmp	r3, #0
 800574a:	d039      	beq.n	80057c0 <I2C_ITError+0x140>
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2b11      	cmp	r3, #17
 8005750:	d002      	beq.n	8005758 <I2C_ITError+0xd8>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b21      	cmp	r3, #33	@ 0x21
 8005756:	d133      	bne.n	80057c0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005762:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005766:	d107      	bne.n	8005778 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005776:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe f899 	bl	80038b4 <HAL_DMA_GetState>
 8005782:	4603      	mov	r3, r0
 8005784:	2b01      	cmp	r3, #1
 8005786:	d017      	beq.n	80057b8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578c:	4a33      	ldr	r2, [pc, #204]	@ (800585c <I2C_ITError+0x1dc>)
 800578e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579c:	4618      	mov	r0, r3
 800579e:	f7fd ff99 	bl	80036d4 <HAL_DMA_Abort_IT>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d04d      	beq.n	8005844 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80057b2:	4610      	mov	r0, r2
 80057b4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057b6:	e045      	b.n	8005844 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f851 	bl	8005860 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80057be:	e041      	b.n	8005844 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d039      	beq.n	800583c <I2C_ITError+0x1bc>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b12      	cmp	r3, #18
 80057cc:	d002      	beq.n	80057d4 <I2C_ITError+0x154>
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b22      	cmp	r3, #34	@ 0x22
 80057d2:	d133      	bne.n	800583c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057e2:	d107      	bne.n	80057f4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fe f85b 	bl	80038b4 <HAL_DMA_GetState>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b01      	cmp	r3, #1
 8005802:	d017      	beq.n	8005834 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005808:	4a14      	ldr	r2, [pc, #80]	@ (800585c <I2C_ITError+0x1dc>)
 800580a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005818:	4618      	mov	r0, r3
 800581a:	f7fd ff5b 	bl	80036d4 <HAL_DMA_Abort_IT>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d011      	beq.n	8005848 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800582e:	4610      	mov	r0, r2
 8005830:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005832:	e009      	b.n	8005848 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f813 	bl	8005860 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800583a:	e005      	b.n	8005848 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f80f 	bl	8005860 <I2C_TreatErrorCallback>
  }
}
 8005842:	e002      	b.n	800584a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005844:	bf00      	nop
 8005846:	e000      	b.n	800584a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005848:	bf00      	nop
}
 800584a:	bf00      	nop
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	ffff0000 	.word	0xffff0000
 8005858:	080045d7 	.word	0x080045d7
 800585c:	080059d7 	.word	0x080059d7

08005860 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b60      	cmp	r3, #96	@ 0x60
 8005872:	d10e      	bne.n	8005892 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2220      	movs	r2, #32
 8005878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fe fe99 	bl	80045c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005890:	e009      	b.n	80058a6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7fc fad5 	bl	8001e50 <HAL_I2C_ErrorCallback>
}
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d103      	bne.n	80058cc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2200      	movs	r2, #0
 80058ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d007      	beq.n	80058ea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	699a      	ldr	r2, [r3, #24]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0201 	orr.w	r2, r2, #1
 80058e8:	619a      	str	r2, [r3, #24]
  }
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005902:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005912:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d104      	bne.n	8005928 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800591e:	2120      	movs	r1, #32
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 fa6b 	bl	8005dfc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005926:	e03b      	b.n	80059a0 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005930:	441a      	add	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800593a:	b29b      	uxth	r3, r3
 800593c:	2bff      	cmp	r3, #255	@ 0xff
 800593e:	d911      	bls.n	8005964 <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	0c1b      	lsrs	r3, r3, #16
 8005948:	b2db      	uxtb	r3, r3
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b01      	cmp	r3, #1
 8005952:	d103      	bne.n	800595c <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2201      	movs	r2, #1
 8005958:	851a      	strh	r2, [r3, #40]	@ 0x28
 800595a:	e008      	b.n	800596e <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	22ff      	movs	r2, #255	@ 0xff
 8005960:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005962:	e004      	b.n	800596e <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	3324      	adds	r3, #36	@ 0x24
 8005978:	4619      	mov	r1, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005984:	f7fd fe46 	bl	8003614 <HAL_DMA_Start_IT>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d004      	beq.n	8005998 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800598e:	2110      	movs	r1, #16
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7ff fe75 	bl	8005680 <I2C_ITError>
}
 8005996:	e003      	b.n	80059a0 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005998:	2140      	movs	r1, #64	@ 0x40
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 fa2e 	bl	8005dfc <I2C_Enable_IRQ>
}
 80059a0:	bf00      	nop
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b4:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059c4:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80059c6:	2110      	movs	r1, #16
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff fe59 	bl	8005680 <I2C_ITError>
}
 80059ce:	bf00      	nop
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b084      	sub	sp, #16
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f0:	2200      	movs	r2, #0
 80059f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a00:	2200      	movs	r2, #0
 8005a02:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7ff ff2b 	bl	8005860 <I2C_TreatErrorCallback>
}
 8005a0a:	bf00      	nop
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	603b      	str	r3, [r7, #0]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a22:	e03b      	b.n	8005a9c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f8d5 	bl	8005bd8 <I2C_IsErrorOccurred>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e041      	b.n	8005abc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a3e:	d02d      	beq.n	8005a9c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a40:	f7fd fbce 	bl	80031e0 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d302      	bcc.n	8005a56 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d122      	bne.n	8005a9c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	699a      	ldr	r2, [r3, #24]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	bf0c      	ite	eq
 8005a66:	2301      	moveq	r3, #1
 8005a68:	2300      	movne	r3, #0
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	79fb      	ldrb	r3, [r7, #7]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d113      	bne.n	8005a9c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a78:	f043 0220 	orr.w	r2, r3, #32
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e00f      	b.n	8005abc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	bf0c      	ite	eq
 8005aac:	2301      	moveq	r3, #1
 8005aae:	2300      	movne	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	79fb      	ldrb	r3, [r7, #7]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d0b4      	beq.n	8005a24 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ad0:	e033      	b.n	8005b3a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 f87e 	bl	8005bd8 <I2C_IsErrorOccurred>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e031      	b.n	8005b4a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005aec:	d025      	beq.n	8005b3a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aee:	f7fd fb77 	bl	80031e0 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d302      	bcc.n	8005b04 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d11a      	bne.n	8005b3a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d013      	beq.n	8005b3a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b16:	f043 0220 	orr.w	r2, r3, #32
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e007      	b.n	8005b4a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d1c4      	bne.n	8005ad2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b084      	sub	sp, #16
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b5e:	e02f      	b.n	8005bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 f837 	bl	8005bd8 <I2C_IsErrorOccurred>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e02d      	b.n	8005bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b74:	f7fd fb34 	bl	80031e0 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d302      	bcc.n	8005b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d11a      	bne.n	8005bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	f003 0320 	and.w	r3, r3, #32
 8005b94:	2b20      	cmp	r3, #32
 8005b96:	d013      	beq.n	8005bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b9c:	f043 0220 	orr.w	r2, r3, #32
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e007      	b.n	8005bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	d1c8      	bne.n	8005b60 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08a      	sub	sp, #40	@ 0x28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	f003 0310 	and.w	r3, r3, #16
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d068      	beq.n	8005cd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2210      	movs	r2, #16
 8005c0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c0c:	e049      	b.n	8005ca2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c14:	d045      	beq.n	8005ca2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c16:	f7fd fae3 	bl	80031e0 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d302      	bcc.n	8005c2c <I2C_IsErrorOccurred+0x54>
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d13a      	bne.n	8005ca2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c4e:	d121      	bne.n	8005c94 <I2C_IsErrorOccurred+0xbc>
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c56:	d01d      	beq.n	8005c94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005c58:	7cfb      	ldrb	r3, [r7, #19]
 8005c5a:	2b20      	cmp	r3, #32
 8005c5c:	d01a      	beq.n	8005c94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005c6e:	f7fd fab7 	bl	80031e0 <HAL_GetTick>
 8005c72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c74:	e00e      	b.n	8005c94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005c76:	f7fd fab3 	bl	80031e0 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b19      	cmp	r3, #25
 8005c82:	d907      	bls.n	8005c94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	f043 0320 	orr.w	r3, r3, #32
 8005c8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005c92:	e006      	b.n	8005ca2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	f003 0320 	and.w	r3, r3, #32
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	d1e9      	bne.n	8005c76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	f003 0320 	and.w	r3, r3, #32
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d003      	beq.n	8005cb8 <I2C_IsErrorOccurred+0xe0>
 8005cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0aa      	beq.n	8005c0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d103      	bne.n	8005cc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	f043 0304 	orr.w	r3, r3, #4
 8005cce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00b      	beq.n	8005d00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	f043 0301 	orr.w	r3, r3, #1
 8005cee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00b      	beq.n	8005d22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	f043 0308 	orr.w	r3, r3, #8
 8005d10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00b      	beq.n	8005d44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	f043 0302 	orr.w	r3, r3, #2
 8005d32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005d44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d01c      	beq.n	8005d86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f7ff fdae 	bl	80058ae <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6859      	ldr	r1, [r3, #4]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8005d94 <I2C_IsErrorOccurred+0x1bc>)
 8005d5e:	400b      	ands	r3, r1
 8005d60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005d86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3728      	adds	r7, #40	@ 0x28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	fe00e800 	.word	0xfe00e800

08005d98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	607b      	str	r3, [r7, #4]
 8005da2:	460b      	mov	r3, r1
 8005da4:	817b      	strh	r3, [r7, #10]
 8005da6:	4613      	mov	r3, r2
 8005da8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005daa:	897b      	ldrh	r3, [r7, #10]
 8005dac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005db0:	7a7b      	ldrb	r3, [r7, #9]
 8005db2:	041b      	lsls	r3, r3, #16
 8005db4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005db8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005dc6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	0d5b      	lsrs	r3, r3, #21
 8005dd2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005dd6:	4b08      	ldr	r3, [pc, #32]	@ (8005df8 <I2C_TransferConfig+0x60>)
 8005dd8:	430b      	orrs	r3, r1
 8005dda:	43db      	mvns	r3, r3
 8005ddc:	ea02 0103 	and.w	r1, r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	03ff63ff 	.word	0x03ff63ff

08005dfc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	460b      	mov	r3, r1
 8005e06:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e10:	4a39      	ldr	r2, [pc, #228]	@ (8005ef8 <I2C_Enable_IRQ+0xfc>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d032      	beq.n	8005e7c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005e1a:	4a38      	ldr	r2, [pc, #224]	@ (8005efc <I2C_Enable_IRQ+0x100>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d02d      	beq.n	8005e7c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005e24:	4a36      	ldr	r2, [pc, #216]	@ (8005f00 <I2C_Enable_IRQ+0x104>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d028      	beq.n	8005e7c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005e2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	da03      	bge.n	8005e3a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005e38:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005e3a:	887b      	ldrh	r3, [r7, #2]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005e4a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005e4c:	887b      	ldrh	r3, [r7, #2]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005e5c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005e5e:	887b      	ldrh	r3, [r7, #2]
 8005e60:	2b10      	cmp	r3, #16
 8005e62:	d103      	bne.n	8005e6c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005e6a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005e6c:	887b      	ldrh	r3, [r7, #2]
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	d133      	bne.n	8005eda <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f043 0320 	orr.w	r3, r3, #32
 8005e78:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005e7a:	e02e      	b.n	8005eda <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005e7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	da03      	bge.n	8005e8c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005e8a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005e8c:	887b      	ldrh	r3, [r7, #2]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005e9c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005e9e:	887b      	ldrh	r3, [r7, #2]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005eae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005eb0:	887b      	ldrh	r3, [r7, #2]
 8005eb2:	2b10      	cmp	r3, #16
 8005eb4:	d103      	bne.n	8005ebe <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005ebc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005ebe:	887b      	ldrh	r3, [r7, #2]
 8005ec0:	2b20      	cmp	r3, #32
 8005ec2:	d103      	bne.n	8005ecc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005eca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005ecc:	887b      	ldrh	r3, [r7, #2]
 8005ece:	2b40      	cmp	r3, #64	@ 0x40
 8005ed0:	d103      	bne.n	8005eda <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ed8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6819      	ldr	r1, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	601a      	str	r2, [r3, #0]
}
 8005eea:	bf00      	nop
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	080047c9 	.word	0x080047c9
 8005efc:	08004c45 	.word	0x08004c45
 8005f00:	080049bd 	.word	0x080049bd

08005f04 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005f14:	887b      	ldrh	r3, [r7, #2]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00f      	beq.n	8005f3e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005f24:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f32:	2b28      	cmp	r3, #40	@ 0x28
 8005f34:	d003      	beq.n	8005f3e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005f3c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005f3e:	887b      	ldrh	r3, [r7, #2]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00f      	beq.n	8005f68 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005f4e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f5c:	2b28      	cmp	r3, #40	@ 0x28
 8005f5e:	d003      	beq.n	8005f68 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005f66:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005f68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	da03      	bge.n	8005f78 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005f76:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005f78:	887b      	ldrh	r3, [r7, #2]
 8005f7a:	2b10      	cmp	r3, #16
 8005f7c:	d103      	bne.n	8005f86 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005f84:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005f86:	887b      	ldrh	r3, [r7, #2]
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d103      	bne.n	8005f94 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f043 0320 	orr.w	r3, r3, #32
 8005f92:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005f94:	887b      	ldrh	r3, [r7, #2]
 8005f96:	2b40      	cmp	r3, #64	@ 0x40
 8005f98:	d103      	bne.n	8005fa2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fa0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6819      	ldr	r1, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	43da      	mvns	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	400a      	ands	r2, r1
 8005fb2:	601a      	str	r2, [r3, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b20      	cmp	r3, #32
 8005fd4:	d138      	bne.n	8006048 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e032      	b.n	800604a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2224      	movs	r2, #36	@ 0x24
 8005ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0201 	bic.w	r2, r2, #1
 8006002:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006012:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6819      	ldr	r1, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	e000      	b.n	800604a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006048:	2302      	movs	r3, #2
  }
}
 800604a:	4618      	mov	r0, r3
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006056:	b480      	push	{r7}
 8006058:	b085      	sub	sp, #20
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b20      	cmp	r3, #32
 800606a:	d139      	bne.n	80060e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006076:	2302      	movs	r3, #2
 8006078:	e033      	b.n	80060e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2224      	movs	r2, #36	@ 0x24
 8006086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0201 	bic.w	r2, r2, #1
 8006098:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80060a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	021b      	lsls	r3, r3, #8
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0201 	orr.w	r2, r2, #1
 80060ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	e000      	b.n	80060e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80060e0:	2302      	movs	r3, #2
  }
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
	...

080060f0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80060f0:	b480      	push	{r7}
 80060f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060f4:	4b05      	ldr	r3, [pc, #20]	@ (800610c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a04      	ldr	r2, [pc, #16]	@ (800610c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060fe:	6013      	str	r3, [r2, #0]
}
 8006100:	bf00      	nop
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40007000 	.word	0x40007000

08006110 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8006118:	4b0c      	ldr	r3, [pc, #48]	@ (800614c <HAL_PWR_EnableWakeUpPin+0x3c>)
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f003 031f 	and.w	r3, r3, #31
 8006122:	43db      	mvns	r3, r3
 8006124:	401a      	ands	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	095b      	lsrs	r3, r3, #5
 800612a:	4908      	ldr	r1, [pc, #32]	@ (800614c <HAL_PWR_EnableWakeUpPin+0x3c>)
 800612c:	4313      	orrs	r3, r2
 800612e:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8006130:	4b06      	ldr	r3, [pc, #24]	@ (800614c <HAL_PWR_EnableWakeUpPin+0x3c>)
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f003 031f 	and.w	r3, r3, #31
 800613a:	4904      	ldr	r1, [pc, #16]	@ (800614c <HAL_PWR_EnableWakeUpPin+0x3c>)
 800613c:	4313      	orrs	r3, r2
 800613e:	608b      	str	r3, [r1, #8]


}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	40007000 	.word	0x40007000

08006150 <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8006158:	4b07      	ldr	r3, [pc, #28]	@ (8006178 <HAL_PWR_DisableWakeUpPin+0x28>)
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	43db      	mvns	r3, r3
 8006164:	4904      	ldr	r1, [pc, #16]	@ (8006178 <HAL_PWR_DisableWakeUpPin+0x28>)
 8006166:	4013      	ands	r3, r2
 8006168:	608b      	str	r3, [r1, #8]
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	40007000 	.word	0x40007000

0800617c <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8006180:	4b09      	ldr	r3, [pc, #36]	@ (80061a8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f023 0307 	bic.w	r3, r3, #7
 8006188:	4a07      	ldr	r2, [pc, #28]	@ (80061a8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800618a:	f043 0303 	orr.w	r3, r3, #3
 800618e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006190:	4b06      	ldr	r3, [pc, #24]	@ (80061ac <HAL_PWR_EnterSTANDBYMode+0x30>)
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	4a05      	ldr	r2, [pc, #20]	@ (80061ac <HAL_PWR_EnterSTANDBYMode+0x30>)
 8006196:	f043 0304 	orr.w	r3, r3, #4
 800619a:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800619c:	bf30      	wfi
}
 800619e:	bf00      	nop
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	40007000 	.word	0x40007000
 80061ac:	e000ed00 	.word	0xe000ed00

080061b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80061b4:	4b04      	ldr	r3, [pc, #16]	@ (80061c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80061bc:	4618      	mov	r0, r3
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	40007000 	.word	0x40007000

080061cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061da:	d130      	bne.n	800623e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80061dc:	4b23      	ldr	r3, [pc, #140]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80061e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061e8:	d038      	beq.n	800625c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061ea:	4b20      	ldr	r3, [pc, #128]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80061f2:	4a1e      	ldr	r2, [pc, #120]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006270 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2232      	movs	r2, #50	@ 0x32
 8006200:	fb02 f303 	mul.w	r3, r2, r3
 8006204:	4a1b      	ldr	r2, [pc, #108]	@ (8006274 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006206:	fba2 2303 	umull	r2, r3, r2, r3
 800620a:	0c9b      	lsrs	r3, r3, #18
 800620c:	3301      	adds	r3, #1
 800620e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006210:	e002      	b.n	8006218 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3b01      	subs	r3, #1
 8006216:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006218:	4b14      	ldr	r3, [pc, #80]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006224:	d102      	bne.n	800622c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1f2      	bne.n	8006212 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800622c:	4b0f      	ldr	r3, [pc, #60]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006238:	d110      	bne.n	800625c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e00f      	b.n	800625e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800623e:	4b0b      	ldr	r3, [pc, #44]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800624a:	d007      	beq.n	800625c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800624c:	4b07      	ldr	r3, [pc, #28]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006254:	4a05      	ldr	r2, [pc, #20]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006256:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800625a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40007000 	.word	0x40007000
 8006270:	2000000c 	.word	0x2000000c
 8006274:	431bde83 	.word	0x431bde83

08006278 <HAL_PWREx_EnableGPIOPullDown>:
  *         I/O pins are available) or the logical OR of several of them to set
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b07      	cmp	r3, #7
 800628a:	f200 808d 	bhi.w	80063a8 <HAL_PWREx_EnableGPIOPullDown+0x130>
 800628e:	a201      	add	r2, pc, #4	@ (adr r2, 8006294 <HAL_PWREx_EnableGPIOPullDown+0x1c>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	080062b5 	.word	0x080062b5
 8006298:	080062d9 	.word	0x080062d9
 800629c:	080062f9 	.word	0x080062f9
 80062a0:	08006315 	.word	0x08006315
 80062a4:	08006331 	.word	0x08006331
 80062a8:	0800634d 	.word	0x0800634d
 80062ac:	08006369 	.word	0x08006369
 80062b0:	08006385 	.word	0x08006385
  {
    case PWR_GPIO_A:
       SET_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 80062b4:	4b41      	ldr	r3, [pc, #260]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80062b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80062be:	493f      	ldr	r1, [pc, #252]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	624b      	str	r3, [r1, #36]	@ 0x24
       CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 80062c4:	4b3d      	ldr	r3, [pc, #244]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80062c6:	6a1a      	ldr	r2, [r3, #32]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062ce:	43db      	mvns	r3, r3
 80062d0:	493a      	ldr	r1, [pc, #232]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	620b      	str	r3, [r1, #32]
       break;
 80062d6:	e06a      	b.n	80063ae <HAL_PWREx_EnableGPIOPullDown+0x136>
    case PWR_GPIO_B:
       SET_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 80062d8:	4b38      	ldr	r3, [pc, #224]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80062da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	f023 0310 	bic.w	r3, r3, #16
 80062e2:	4936      	ldr	r1, [pc, #216]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	62cb      	str	r3, [r1, #44]	@ 0x2c
       CLEAR_BIT(PWR->PUCRB, GPIONumber);
 80062e8:	4b34      	ldr	r3, [pc, #208]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80062ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	43db      	mvns	r3, r3
 80062f0:	4932      	ldr	r1, [pc, #200]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80062f2:	4013      	ands	r3, r2
 80062f4:	628b      	str	r3, [r1, #40]	@ 0x28
       break;
 80062f6:	e05a      	b.n	80063ae <HAL_PWREx_EnableGPIOPullDown+0x136>
    case PWR_GPIO_C:
       SET_BIT(PWR->PDCRC, GPIONumber);
 80062f8:	4b30      	ldr	r3, [pc, #192]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80062fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062fc:	492f      	ldr	r1, [pc, #188]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	4313      	orrs	r3, r2
 8006302:	634b      	str	r3, [r1, #52]	@ 0x34
       CLEAR_BIT(PWR->PUCRC, GPIONumber);
 8006304:	4b2d      	ldr	r3, [pc, #180]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006306:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	43db      	mvns	r3, r3
 800630c:	492b      	ldr	r1, [pc, #172]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800630e:	4013      	ands	r3, r2
 8006310:	630b      	str	r3, [r1, #48]	@ 0x30
       break;
 8006312:	e04c      	b.n	80063ae <HAL_PWREx_EnableGPIOPullDown+0x136>
#if defined(GPIOD)
    case PWR_GPIO_D:
       SET_BIT(PWR->PDCRD, GPIONumber);
 8006314:	4b29      	ldr	r3, [pc, #164]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006316:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006318:	4928      	ldr	r1, [pc, #160]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	4313      	orrs	r3, r2
 800631e:	63cb      	str	r3, [r1, #60]	@ 0x3c
       CLEAR_BIT(PWR->PUCRD, GPIONumber);
 8006320:	4b26      	ldr	r3, [pc, #152]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006322:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	43db      	mvns	r3, r3
 8006328:	4924      	ldr	r1, [pc, #144]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800632a:	4013      	ands	r3, r2
 800632c:	638b      	str	r3, [r1, #56]	@ 0x38
       break;
 800632e:	e03e      	b.n	80063ae <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
#if defined(GPIOE)
    case PWR_GPIO_E:
       SET_BIT(PWR->PDCRE, GPIONumber);
 8006330:	4b22      	ldr	r3, [pc, #136]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006332:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006334:	4921      	ldr	r1, [pc, #132]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	4313      	orrs	r3, r2
 800633a:	644b      	str	r3, [r1, #68]	@ 0x44
       CLEAR_BIT(PWR->PUCRE, GPIONumber);
 800633c:	4b1f      	ldr	r3, [pc, #124]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800633e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	43db      	mvns	r3, r3
 8006344:	491d      	ldr	r1, [pc, #116]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006346:	4013      	ands	r3, r2
 8006348:	640b      	str	r3, [r1, #64]	@ 0x40
       break;
 800634a:	e030      	b.n	80063ae <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
#if defined(GPIOF)
    case PWR_GPIO_F:
       SET_BIT(PWR->PDCRF, GPIONumber);
 800634c:	4b1b      	ldr	r3, [pc, #108]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800634e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006350:	491a      	ldr	r1, [pc, #104]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	4313      	orrs	r3, r2
 8006356:	64cb      	str	r3, [r1, #76]	@ 0x4c
       CLEAR_BIT(PWR->PUCRF, GPIONumber);
 8006358:	4b18      	ldr	r3, [pc, #96]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800635a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	43db      	mvns	r3, r3
 8006360:	4916      	ldr	r1, [pc, #88]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006362:	4013      	ands	r3, r2
 8006364:	648b      	str	r3, [r1, #72]	@ 0x48
       break;
 8006366:	e022      	b.n	80063ae <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
#if defined(GPIOG)
    case PWR_GPIO_G:
       SET_BIT(PWR->PDCRG, GPIONumber);
 8006368:	4b14      	ldr	r3, [pc, #80]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800636a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800636c:	4913      	ldr	r1, [pc, #76]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	4313      	orrs	r3, r2
 8006372:	654b      	str	r3, [r1, #84]	@ 0x54
       CLEAR_BIT(PWR->PUCRG, GPIONumber);
 8006374:	4b11      	ldr	r3, [pc, #68]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006376:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	43db      	mvns	r3, r3
 800637c:	490f      	ldr	r1, [pc, #60]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 800637e:	4013      	ands	r3, r2
 8006380:	650b      	str	r3, [r1, #80]	@ 0x50
       break;
 8006382:	e014      	b.n	80063ae <HAL_PWREx_EnableGPIOPullDown+0x136>
#endif
    case PWR_GPIO_H:
#if defined (STM32L496xx) || defined (STM32L4A6xx)
       SET_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
#else
       SET_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8006384:	4b0d      	ldr	r3, [pc, #52]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006386:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	f003 0303 	and.w	r3, r3, #3
 800638e:	490b      	ldr	r1, [pc, #44]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006390:	4313      	orrs	r3, r2
 8006392:	65cb      	str	r3, [r1, #92]	@ 0x5c
#endif
       CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 8006394:	4b09      	ldr	r3, [pc, #36]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 8006396:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	43db      	mvns	r3, r3
 80063a0:	4906      	ldr	r1, [pc, #24]	@ (80063bc <HAL_PWREx_EnableGPIOPullDown+0x144>)
 80063a2:	4013      	ands	r3, r2
 80063a4:	658b      	str	r3, [r1, #88]	@ 0x58
       break;
 80063a6:	e002      	b.n	80063ae <HAL_PWREx_EnableGPIOPullDown+0x136>
       SET_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
       break;
#endif
    default:
      status = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	73fb      	strb	r3, [r7, #15]
      break;
 80063ac:	bf00      	nop
  }

  return status;
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	40007000 	.word	0x40007000

080063c0 <HAL_PWREx_EnablePullUpPullDownConfig>:
  *        HAL_PWREx_EnableGPIOPullUp() and HAL_PWREx_EnableGPIOPullDown() API's ensure there
  *        is no conflict when setting PUy or PDy bit.
  * @retval None
  */
void HAL_PWREx_EnablePullUpPullDownConfig(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_APC);
 80063c4:	4b05      	ldr	r3, [pc, #20]	@ (80063dc <HAL_PWREx_EnablePullUpPullDownConfig+0x1c>)
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	4a04      	ldr	r2, [pc, #16]	@ (80063dc <HAL_PWREx_EnablePullUpPullDownConfig+0x1c>)
 80063ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80063ce:	6093      	str	r3, [r2, #8]
}
 80063d0:	bf00      	nop
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	40007000 	.word	0x40007000

080063e0 <HAL_PWREx_EnableSRAM2ContentRetention>:
/**
  * @brief Enable Full SRAM2 content retention in Standby mode.
  * @retval None
  */
void HAL_PWREx_EnableSRAM2ContentRetention(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  (void) HAL_PWREx_SetSRAM2ContentRetention(PWR_FULL_SRAM2_RETENTION);
 80063e4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80063e8:	f000 f802 	bl	80063f0 <HAL_PWREx_SetSRAM2ContentRetention>
}
 80063ec:	bf00      	nop
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <HAL_PWREx_SetSRAM2ContentRetention>:
  *            @arg @ref PWR_4KBYTES_SRAM2_RETENTION   Only 4 Kbytes of SRAM2 is powered by the low-power regulator in Standby mode
  * @note  PWR_4KBYTES_SRAM2_RETENTION parameter is not available on all devices
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_SetSRAM2ContentRetention(uint32_t SRAM2Size)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_SRAM2_RETENTION(SRAM2Size));

  if (SRAM2Size == PWR_NO_SRAM2_RETENTION)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <HAL_PWREx_SetSRAM2ContentRetention+0x1c>
  {
    CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
 80063fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006434 <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	4a0c      	ldr	r2, [pc, #48]	@ (8006434 <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 8006404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006408:	6093      	str	r3, [r2, #8]
 800640a:	e00c      	b.n	8006426 <HAL_PWREx_SetSRAM2ContentRetention+0x36>
  }
  else if (SRAM2Size == PWR_FULL_SRAM2_RETENTION)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006412:	d106      	bne.n	8006422 <HAL_PWREx_SetSRAM2ContentRetention+0x32>
  {
    MODIFY_REG(PWR->CR3, PWR_CR3_RRS, PWR_FULL_SRAM2_RETENTION);
 8006414:	4b07      	ldr	r3, [pc, #28]	@ (8006434 <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	4a06      	ldr	r2, [pc, #24]	@ (8006434 <HAL_PWREx_SetSRAM2ContentRetention+0x44>)
 800641a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800641e:	6093      	str	r3, [r2, #8]
 8006420:	e001      	b.n	8006426 <HAL_PWREx_SetSRAM2ContentRetention+0x36>
  {
    MODIFY_REG(PWR->CR3, PWR_CR3_RRS, PWR_4KBYTES_SRAM2_RETENTION);
  }
#endif /* PWR_CR3_RRS_1 */
  else {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <HAL_PWREx_SetSRAM2ContentRetention+0x38>
  }

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	40007000 	.word	0x40007000

08006438 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8006442:	4b11      	ldr	r3, [pc, #68]	@ (8006488 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f023 0307 	bic.w	r3, r3, #7
 800644a:	4a0f      	ldr	r2, [pc, #60]	@ (8006488 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800644c:	f043 0302 	orr.w	r3, r3, #2
 8006450:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006452:	4b0e      	ldr	r3, [pc, #56]	@ (800648c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	4a0d      	ldr	r2, [pc, #52]	@ (800648c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006458:	f043 0304 	orr.w	r3, r3, #4
 800645c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800645e:	79fb      	ldrb	r3, [r7, #7]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006464:	bf30      	wfi
 8006466:	e002      	b.n	800646e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006468:	bf40      	sev
    __WFE();
 800646a:	bf20      	wfe
    __WFE();
 800646c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800646e:	4b07      	ldr	r3, [pc, #28]	@ (800648c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	4a06      	ldr	r2, [pc, #24]	@ (800648c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006474:	f023 0304 	bic.w	r3, r3, #4
 8006478:	6113      	str	r3, [r2, #16]
}
 800647a:	bf00      	nop
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	40007000 	.word	0x40007000
 800648c:	e000ed00 	.word	0xe000ed00

08006490 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e3ca      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064a2:	4b97      	ldr	r3, [pc, #604]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 030c 	and.w	r3, r3, #12
 80064aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064ac:	4b94      	ldr	r3, [pc, #592]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0303 	and.w	r3, r3, #3
 80064b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0310 	and.w	r3, r3, #16
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f000 80e4 	beq.w	800668c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d007      	beq.n	80064da <HAL_RCC_OscConfig+0x4a>
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	2b0c      	cmp	r3, #12
 80064ce:	f040 808b 	bne.w	80065e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	f040 8087 	bne.w	80065e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064da:	4b89      	ldr	r3, [pc, #548]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d005      	beq.n	80064f2 <HAL_RCC_OscConfig+0x62>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e3a2      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1a      	ldr	r2, [r3, #32]
 80064f6:	4b82      	ldr	r3, [pc, #520]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0308 	and.w	r3, r3, #8
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d004      	beq.n	800650c <HAL_RCC_OscConfig+0x7c>
 8006502:	4b7f      	ldr	r3, [pc, #508]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800650a:	e005      	b.n	8006518 <HAL_RCC_OscConfig+0x88>
 800650c:	4b7c      	ldr	r3, [pc, #496]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 800650e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006512:	091b      	lsrs	r3, r3, #4
 8006514:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006518:	4293      	cmp	r3, r2
 800651a:	d223      	bcs.n	8006564 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fd55 	bl	8006fd0 <RCC_SetFlashLatencyFromMSIRange>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e383      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006530:	4b73      	ldr	r3, [pc, #460]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a72      	ldr	r2, [pc, #456]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 8006536:	f043 0308 	orr.w	r3, r3, #8
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	4b70      	ldr	r3, [pc, #448]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	496d      	ldr	r1, [pc, #436]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 800654a:	4313      	orrs	r3, r2
 800654c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800654e:	4b6c      	ldr	r3, [pc, #432]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	021b      	lsls	r3, r3, #8
 800655c:	4968      	ldr	r1, [pc, #416]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 800655e:	4313      	orrs	r3, r2
 8006560:	604b      	str	r3, [r1, #4]
 8006562:	e025      	b.n	80065b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006564:	4b66      	ldr	r3, [pc, #408]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a65      	ldr	r2, [pc, #404]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 800656a:	f043 0308 	orr.w	r3, r3, #8
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	4b63      	ldr	r3, [pc, #396]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	4960      	ldr	r1, [pc, #384]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 800657e:	4313      	orrs	r3, r2
 8006580:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006582:	4b5f      	ldr	r3, [pc, #380]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	021b      	lsls	r3, r3, #8
 8006590:	495b      	ldr	r1, [pc, #364]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 8006592:	4313      	orrs	r3, r2
 8006594:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d109      	bne.n	80065b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 fd15 	bl	8006fd0 <RCC_SetFlashLatencyFromMSIRange>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e343      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80065b0:	f000 fc4a 	bl	8006e48 <HAL_RCC_GetSysClockFreq>
 80065b4:	4602      	mov	r2, r0
 80065b6:	4b52      	ldr	r3, [pc, #328]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	091b      	lsrs	r3, r3, #4
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	4950      	ldr	r1, [pc, #320]	@ (8006704 <HAL_RCC_OscConfig+0x274>)
 80065c2:	5ccb      	ldrb	r3, [r1, r3]
 80065c4:	f003 031f 	and.w	r3, r3, #31
 80065c8:	fa22 f303 	lsr.w	r3, r2, r3
 80065cc:	4a4e      	ldr	r2, [pc, #312]	@ (8006708 <HAL_RCC_OscConfig+0x278>)
 80065ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80065d0:	4b4e      	ldr	r3, [pc, #312]	@ (800670c <HAL_RCC_OscConfig+0x27c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fc fdb3 	bl	8003140 <HAL_InitTick>
 80065da:	4603      	mov	r3, r0
 80065dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80065de:	7bfb      	ldrb	r3, [r7, #15]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d052      	beq.n	800668a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	e327      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d032      	beq.n	8006656 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80065f0:	4b43      	ldr	r3, [pc, #268]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a42      	ldr	r2, [pc, #264]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 80065f6:	f043 0301 	orr.w	r3, r3, #1
 80065fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065fc:	f7fc fdf0 	bl	80031e0 <HAL_GetTick>
 8006600:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006602:	e008      	b.n	8006616 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006604:	f7fc fdec 	bl	80031e0 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e310      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006616:	4b3a      	ldr	r3, [pc, #232]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0f0      	beq.n	8006604 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006622:	4b37      	ldr	r3, [pc, #220]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a36      	ldr	r2, [pc, #216]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 8006628:	f043 0308 	orr.w	r3, r3, #8
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	4b34      	ldr	r3, [pc, #208]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	4931      	ldr	r1, [pc, #196]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 800663c:	4313      	orrs	r3, r2
 800663e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006640:	4b2f      	ldr	r3, [pc, #188]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	492c      	ldr	r1, [pc, #176]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 8006650:	4313      	orrs	r3, r2
 8006652:	604b      	str	r3, [r1, #4]
 8006654:	e01a      	b.n	800668c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006656:	4b2a      	ldr	r3, [pc, #168]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a29      	ldr	r2, [pc, #164]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 800665c:	f023 0301 	bic.w	r3, r3, #1
 8006660:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006662:	f7fc fdbd 	bl	80031e0 <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006668:	e008      	b.n	800667c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800666a:	f7fc fdb9 	bl	80031e0 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d901      	bls.n	800667c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e2dd      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800667c:	4b20      	ldr	r3, [pc, #128]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1f0      	bne.n	800666a <HAL_RCC_OscConfig+0x1da>
 8006688:	e000      	b.n	800668c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800668a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d074      	beq.n	8006782 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	2b08      	cmp	r3, #8
 800669c:	d005      	beq.n	80066aa <HAL_RCC_OscConfig+0x21a>
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	2b0c      	cmp	r3, #12
 80066a2:	d10e      	bne.n	80066c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d10b      	bne.n	80066c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066aa:	4b15      	ldr	r3, [pc, #84]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d064      	beq.n	8006780 <HAL_RCC_OscConfig+0x2f0>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d160      	bne.n	8006780 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e2ba      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066ca:	d106      	bne.n	80066da <HAL_RCC_OscConfig+0x24a>
 80066cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a0b      	ldr	r2, [pc, #44]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 80066d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	e026      	b.n	8006728 <HAL_RCC_OscConfig+0x298>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066e2:	d115      	bne.n	8006710 <HAL_RCC_OscConfig+0x280>
 80066e4:	4b06      	ldr	r3, [pc, #24]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a05      	ldr	r2, [pc, #20]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 80066ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066ee:	6013      	str	r3, [r2, #0]
 80066f0:	4b03      	ldr	r3, [pc, #12]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a02      	ldr	r2, [pc, #8]	@ (8006700 <HAL_RCC_OscConfig+0x270>)
 80066f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	e014      	b.n	8006728 <HAL_RCC_OscConfig+0x298>
 80066fe:	bf00      	nop
 8006700:	40021000 	.word	0x40021000
 8006704:	0800d7f8 	.word	0x0800d7f8
 8006708:	2000000c 	.word	0x2000000c
 800670c:	20000010 	.word	0x20000010
 8006710:	4ba0      	ldr	r3, [pc, #640]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a9f      	ldr	r2, [pc, #636]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 8006716:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	4b9d      	ldr	r3, [pc, #628]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a9c      	ldr	r2, [pc, #624]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 8006722:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d013      	beq.n	8006758 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006730:	f7fc fd56 	bl	80031e0 <HAL_GetTick>
 8006734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006736:	e008      	b.n	800674a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006738:	f7fc fd52 	bl	80031e0 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b64      	cmp	r3, #100	@ 0x64
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e276      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800674a:	4b92      	ldr	r3, [pc, #584]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0f0      	beq.n	8006738 <HAL_RCC_OscConfig+0x2a8>
 8006756:	e014      	b.n	8006782 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006758:	f7fc fd42 	bl	80031e0 <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006760:	f7fc fd3e 	bl	80031e0 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b64      	cmp	r3, #100	@ 0x64
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e262      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006772:	4b88      	ldr	r3, [pc, #544]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1f0      	bne.n	8006760 <HAL_RCC_OscConfig+0x2d0>
 800677e:	e000      	b.n	8006782 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d060      	beq.n	8006850 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	2b04      	cmp	r3, #4
 8006792:	d005      	beq.n	80067a0 <HAL_RCC_OscConfig+0x310>
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	2b0c      	cmp	r3, #12
 8006798:	d119      	bne.n	80067ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2b02      	cmp	r3, #2
 800679e:	d116      	bne.n	80067ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067a0:	4b7c      	ldr	r3, [pc, #496]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <HAL_RCC_OscConfig+0x328>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e23f      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067b8:	4b76      	ldr	r3, [pc, #472]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	061b      	lsls	r3, r3, #24
 80067c6:	4973      	ldr	r1, [pc, #460]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067cc:	e040      	b.n	8006850 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d023      	beq.n	800681e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067d6:	4b6f      	ldr	r3, [pc, #444]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a6e      	ldr	r2, [pc, #440]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 80067dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e2:	f7fc fcfd 	bl	80031e0 <HAL_GetTick>
 80067e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067e8:	e008      	b.n	80067fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067ea:	f7fc fcf9 	bl	80031e0 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e21d      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067fc:	4b65      	ldr	r3, [pc, #404]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0f0      	beq.n	80067ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006808:	4b62      	ldr	r3, [pc, #392]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	061b      	lsls	r3, r3, #24
 8006816:	495f      	ldr	r1, [pc, #380]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 8006818:	4313      	orrs	r3, r2
 800681a:	604b      	str	r3, [r1, #4]
 800681c:	e018      	b.n	8006850 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800681e:	4b5d      	ldr	r3, [pc, #372]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a5c      	ldr	r2, [pc, #368]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 8006824:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682a:	f7fc fcd9 	bl	80031e0 <HAL_GetTick>
 800682e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006830:	e008      	b.n	8006844 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006832:	f7fc fcd5 	bl	80031e0 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	d901      	bls.n	8006844 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e1f9      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006844:	4b53      	ldr	r3, [pc, #332]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1f0      	bne.n	8006832 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0308 	and.w	r3, r3, #8
 8006858:	2b00      	cmp	r3, #0
 800685a:	d03c      	beq.n	80068d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d01c      	beq.n	800689e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006864:	4b4b      	ldr	r3, [pc, #300]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 8006866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800686a:	4a4a      	ldr	r2, [pc, #296]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 800686c:	f043 0301 	orr.w	r3, r3, #1
 8006870:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006874:	f7fc fcb4 	bl	80031e0 <HAL_GetTick>
 8006878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800687a:	e008      	b.n	800688e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800687c:	f7fc fcb0 	bl	80031e0 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	2b02      	cmp	r3, #2
 8006888:	d901      	bls.n	800688e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e1d4      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800688e:	4b41      	ldr	r3, [pc, #260]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 8006890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b00      	cmp	r3, #0
 800689a:	d0ef      	beq.n	800687c <HAL_RCC_OscConfig+0x3ec>
 800689c:	e01b      	b.n	80068d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800689e:	4b3d      	ldr	r3, [pc, #244]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 80068a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068a4:	4a3b      	ldr	r2, [pc, #236]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 80068a6:	f023 0301 	bic.w	r3, r3, #1
 80068aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ae:	f7fc fc97 	bl	80031e0 <HAL_GetTick>
 80068b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068b4:	e008      	b.n	80068c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068b6:	f7fc fc93 	bl	80031e0 <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d901      	bls.n	80068c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e1b7      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068c8:	4b32      	ldr	r3, [pc, #200]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 80068ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1ef      	bne.n	80068b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 80a6 	beq.w	8006a30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068e4:	2300      	movs	r3, #0
 80068e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80068e8:	4b2a      	ldr	r3, [pc, #168]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 80068ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10d      	bne.n	8006910 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068f4:	4b27      	ldr	r3, [pc, #156]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 80068f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f8:	4a26      	ldr	r2, [pc, #152]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 80068fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8006900:	4b24      	ldr	r3, [pc, #144]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 8006902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006908:	60bb      	str	r3, [r7, #8]
 800690a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800690c:	2301      	movs	r3, #1
 800690e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006910:	4b21      	ldr	r3, [pc, #132]	@ (8006998 <HAL_RCC_OscConfig+0x508>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006918:	2b00      	cmp	r3, #0
 800691a:	d118      	bne.n	800694e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800691c:	4b1e      	ldr	r3, [pc, #120]	@ (8006998 <HAL_RCC_OscConfig+0x508>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a1d      	ldr	r2, [pc, #116]	@ (8006998 <HAL_RCC_OscConfig+0x508>)
 8006922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006926:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006928:	f7fc fc5a 	bl	80031e0 <HAL_GetTick>
 800692c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800692e:	e008      	b.n	8006942 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006930:	f7fc fc56 	bl	80031e0 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	2b02      	cmp	r3, #2
 800693c:	d901      	bls.n	8006942 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e17a      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006942:	4b15      	ldr	r3, [pc, #84]	@ (8006998 <HAL_RCC_OscConfig+0x508>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800694a:	2b00      	cmp	r3, #0
 800694c:	d0f0      	beq.n	8006930 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d108      	bne.n	8006968 <HAL_RCC_OscConfig+0x4d8>
 8006956:	4b0f      	ldr	r3, [pc, #60]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 8006958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800695c:	4a0d      	ldr	r2, [pc, #52]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 800695e:	f043 0301 	orr.w	r3, r3, #1
 8006962:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006966:	e029      	b.n	80069bc <HAL_RCC_OscConfig+0x52c>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	2b05      	cmp	r3, #5
 800696e:	d115      	bne.n	800699c <HAL_RCC_OscConfig+0x50c>
 8006970:	4b08      	ldr	r3, [pc, #32]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 8006972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006976:	4a07      	ldr	r2, [pc, #28]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 8006978:	f043 0304 	orr.w	r3, r3, #4
 800697c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006980:	4b04      	ldr	r3, [pc, #16]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 8006982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006986:	4a03      	ldr	r2, [pc, #12]	@ (8006994 <HAL_RCC_OscConfig+0x504>)
 8006988:	f043 0301 	orr.w	r3, r3, #1
 800698c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006990:	e014      	b.n	80069bc <HAL_RCC_OscConfig+0x52c>
 8006992:	bf00      	nop
 8006994:	40021000 	.word	0x40021000
 8006998:	40007000 	.word	0x40007000
 800699c:	4b9c      	ldr	r3, [pc, #624]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 800699e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a2:	4a9b      	ldr	r2, [pc, #620]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 80069a4:	f023 0301 	bic.w	r3, r3, #1
 80069a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80069ac:	4b98      	ldr	r3, [pc, #608]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 80069ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069b2:	4a97      	ldr	r2, [pc, #604]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 80069b4:	f023 0304 	bic.w	r3, r3, #4
 80069b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d016      	beq.n	80069f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c4:	f7fc fc0c 	bl	80031e0 <HAL_GetTick>
 80069c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069ca:	e00a      	b.n	80069e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069cc:	f7fc fc08 	bl	80031e0 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069da:	4293      	cmp	r3, r2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e12a      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069e2:	4b8b      	ldr	r3, [pc, #556]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 80069e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0ed      	beq.n	80069cc <HAL_RCC_OscConfig+0x53c>
 80069f0:	e015      	b.n	8006a1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f2:	f7fc fbf5 	bl	80031e0 <HAL_GetTick>
 80069f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069f8:	e00a      	b.n	8006a10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069fa:	f7fc fbf1 	bl	80031e0 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d901      	bls.n	8006a10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e113      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a10:	4b7f      	ldr	r3, [pc, #508]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1ed      	bne.n	80069fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a1e:	7ffb      	ldrb	r3, [r7, #31]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d105      	bne.n	8006a30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a24:	4b7a      	ldr	r3, [pc, #488]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a28:	4a79      	ldr	r2, [pc, #484]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006a2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a2e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 80fe 	beq.w	8006c36 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	f040 80d0 	bne.w	8006be4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006a44:	4b72      	ldr	r3, [pc, #456]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f003 0203 	and.w	r2, r3, #3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d130      	bne.n	8006aba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a62:	3b01      	subs	r3, #1
 8006a64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d127      	bne.n	8006aba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a74:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d11f      	bne.n	8006aba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006a84:	2a07      	cmp	r2, #7
 8006a86:	bf14      	ite	ne
 8006a88:	2201      	movne	r2, #1
 8006a8a:	2200      	moveq	r2, #0
 8006a8c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d113      	bne.n	8006aba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a9c:	085b      	lsrs	r3, r3, #1
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d109      	bne.n	8006aba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab0:	085b      	lsrs	r3, r3, #1
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d06e      	beq.n	8006b98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	2b0c      	cmp	r3, #12
 8006abe:	d069      	beq.n	8006b94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006ac0:	4b53      	ldr	r3, [pc, #332]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d105      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006acc:	4b50      	ldr	r3, [pc, #320]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e0ad      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006adc:	4b4c      	ldr	r3, [pc, #304]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a4b      	ldr	r2, [pc, #300]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ae6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ae8:	f7fc fb7a 	bl	80031e0 <HAL_GetTick>
 8006aec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006aee:	e008      	b.n	8006b02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006af0:	f7fc fb76 	bl	80031e0 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e09a      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b02:	4b43      	ldr	r3, [pc, #268]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1f0      	bne.n	8006af0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b0e:	4b40      	ldr	r3, [pc, #256]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	4b40      	ldr	r3, [pc, #256]	@ (8006c14 <HAL_RCC_OscConfig+0x784>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006b1e:	3a01      	subs	r2, #1
 8006b20:	0112      	lsls	r2, r2, #4
 8006b22:	4311      	orrs	r1, r2
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b28:	0212      	lsls	r2, r2, #8
 8006b2a:	4311      	orrs	r1, r2
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b30:	0852      	lsrs	r2, r2, #1
 8006b32:	3a01      	subs	r2, #1
 8006b34:	0552      	lsls	r2, r2, #21
 8006b36:	4311      	orrs	r1, r2
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006b3c:	0852      	lsrs	r2, r2, #1
 8006b3e:	3a01      	subs	r2, #1
 8006b40:	0652      	lsls	r2, r2, #25
 8006b42:	4311      	orrs	r1, r2
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006b48:	0912      	lsrs	r2, r2, #4
 8006b4a:	0452      	lsls	r2, r2, #17
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	4930      	ldr	r1, [pc, #192]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b54:	4b2e      	ldr	r3, [pc, #184]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a2d      	ldr	r2, [pc, #180]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006b5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b60:	4b2b      	ldr	r3, [pc, #172]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	4a2a      	ldr	r2, [pc, #168]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006b66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b6c:	f7fc fb38 	bl	80031e0 <HAL_GetTick>
 8006b70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b72:	e008      	b.n	8006b86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b74:	f7fc fb34 	bl	80031e0 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d901      	bls.n	8006b86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e058      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b86:	4b22      	ldr	r3, [pc, #136]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d0f0      	beq.n	8006b74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b92:	e050      	b.n	8006c36 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e04f      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b98:	4b1d      	ldr	r3, [pc, #116]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d148      	bne.n	8006c36 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a19      	ldr	r2, [pc, #100]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006baa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006bb0:	4b17      	ldr	r3, [pc, #92]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	4a16      	ldr	r2, [pc, #88]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006bb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006bbc:	f7fc fb10 	bl	80031e0 <HAL_GetTick>
 8006bc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bc4:	f7fc fb0c 	bl	80031e0 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e030      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0f0      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x734>
 8006be2:	e028      	b.n	8006c36 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	2b0c      	cmp	r3, #12
 8006be8:	d023      	beq.n	8006c32 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bea:	4b09      	ldr	r3, [pc, #36]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a08      	ldr	r2, [pc, #32]	@ (8006c10 <HAL_RCC_OscConfig+0x780>)
 8006bf0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf6:	f7fc faf3 	bl	80031e0 <HAL_GetTick>
 8006bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bfc:	e00c      	b.n	8006c18 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bfe:	f7fc faef 	bl	80031e0 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d905      	bls.n	8006c18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e013      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
 8006c10:	40021000 	.word	0x40021000
 8006c14:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c18:	4b09      	ldr	r3, [pc, #36]	@ (8006c40 <HAL_RCC_OscConfig+0x7b0>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1ec      	bne.n	8006bfe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006c24:	4b06      	ldr	r3, [pc, #24]	@ (8006c40 <HAL_RCC_OscConfig+0x7b0>)
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	4905      	ldr	r1, [pc, #20]	@ (8006c40 <HAL_RCC_OscConfig+0x7b0>)
 8006c2a:	4b06      	ldr	r3, [pc, #24]	@ (8006c44 <HAL_RCC_OscConfig+0x7b4>)
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	60cb      	str	r3, [r1, #12]
 8006c30:	e001      	b.n	8006c36 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e000      	b.n	8006c38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3720      	adds	r7, #32
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	40021000 	.word	0x40021000
 8006c44:	feeefffc 	.word	0xfeeefffc

08006c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e0e7      	b.n	8006e2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c5c:	4b75      	ldr	r3, [pc, #468]	@ (8006e34 <HAL_RCC_ClockConfig+0x1ec>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0307 	and.w	r3, r3, #7
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d910      	bls.n	8006c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c6a:	4b72      	ldr	r3, [pc, #456]	@ (8006e34 <HAL_RCC_ClockConfig+0x1ec>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f023 0207 	bic.w	r2, r3, #7
 8006c72:	4970      	ldr	r1, [pc, #448]	@ (8006e34 <HAL_RCC_ClockConfig+0x1ec>)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c7a:	4b6e      	ldr	r3, [pc, #440]	@ (8006e34 <HAL_RCC_ClockConfig+0x1ec>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d001      	beq.n	8006c8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e0cf      	b.n	8006e2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d010      	beq.n	8006cba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	4b66      	ldr	r3, [pc, #408]	@ (8006e38 <HAL_RCC_ClockConfig+0x1f0>)
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d908      	bls.n	8006cba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ca8:	4b63      	ldr	r3, [pc, #396]	@ (8006e38 <HAL_RCC_ClockConfig+0x1f0>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	4960      	ldr	r1, [pc, #384]	@ (8006e38 <HAL_RCC_ClockConfig+0x1f0>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d04c      	beq.n	8006d60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d107      	bne.n	8006cde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cce:	4b5a      	ldr	r3, [pc, #360]	@ (8006e38 <HAL_RCC_ClockConfig+0x1f0>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d121      	bne.n	8006d1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e0a6      	b.n	8006e2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d107      	bne.n	8006cf6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ce6:	4b54      	ldr	r3, [pc, #336]	@ (8006e38 <HAL_RCC_ClockConfig+0x1f0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d115      	bne.n	8006d1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e09a      	b.n	8006e2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d107      	bne.n	8006d0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006cfe:	4b4e      	ldr	r3, [pc, #312]	@ (8006e38 <HAL_RCC_ClockConfig+0x1f0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d109      	bne.n	8006d1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e08e      	b.n	8006e2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d0e:	4b4a      	ldr	r3, [pc, #296]	@ (8006e38 <HAL_RCC_ClockConfig+0x1f0>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e086      	b.n	8006e2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d1e:	4b46      	ldr	r3, [pc, #280]	@ (8006e38 <HAL_RCC_ClockConfig+0x1f0>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f023 0203 	bic.w	r2, r3, #3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	4943      	ldr	r1, [pc, #268]	@ (8006e38 <HAL_RCC_ClockConfig+0x1f0>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d30:	f7fc fa56 	bl	80031e0 <HAL_GetTick>
 8006d34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d36:	e00a      	b.n	8006d4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d38:	f7fc fa52 	bl	80031e0 <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e06e      	b.n	8006e2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d4e:	4b3a      	ldr	r3, [pc, #232]	@ (8006e38 <HAL_RCC_ClockConfig+0x1f0>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f003 020c 	and.w	r2, r3, #12
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d1eb      	bne.n	8006d38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d010      	beq.n	8006d8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689a      	ldr	r2, [r3, #8]
 8006d70:	4b31      	ldr	r3, [pc, #196]	@ (8006e38 <HAL_RCC_ClockConfig+0x1f0>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d208      	bcs.n	8006d8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8006e38 <HAL_RCC_ClockConfig+0x1f0>)
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	492b      	ldr	r1, [pc, #172]	@ (8006e38 <HAL_RCC_ClockConfig+0x1f0>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d8e:	4b29      	ldr	r3, [pc, #164]	@ (8006e34 <HAL_RCC_ClockConfig+0x1ec>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d210      	bcs.n	8006dbe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d9c:	4b25      	ldr	r3, [pc, #148]	@ (8006e34 <HAL_RCC_ClockConfig+0x1ec>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f023 0207 	bic.w	r2, r3, #7
 8006da4:	4923      	ldr	r1, [pc, #140]	@ (8006e34 <HAL_RCC_ClockConfig+0x1ec>)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dac:	4b21      	ldr	r3, [pc, #132]	@ (8006e34 <HAL_RCC_ClockConfig+0x1ec>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0307 	and.w	r3, r3, #7
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d001      	beq.n	8006dbe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e036      	b.n	8006e2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0304 	and.w	r3, r3, #4
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d008      	beq.n	8006ddc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dca:	4b1b      	ldr	r3, [pc, #108]	@ (8006e38 <HAL_RCC_ClockConfig+0x1f0>)
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	4918      	ldr	r1, [pc, #96]	@ (8006e38 <HAL_RCC_ClockConfig+0x1f0>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0308 	and.w	r3, r3, #8
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d009      	beq.n	8006dfc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006de8:	4b13      	ldr	r3, [pc, #76]	@ (8006e38 <HAL_RCC_ClockConfig+0x1f0>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	00db      	lsls	r3, r3, #3
 8006df6:	4910      	ldr	r1, [pc, #64]	@ (8006e38 <HAL_RCC_ClockConfig+0x1f0>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006dfc:	f000 f824 	bl	8006e48 <HAL_RCC_GetSysClockFreq>
 8006e00:	4602      	mov	r2, r0
 8006e02:	4b0d      	ldr	r3, [pc, #52]	@ (8006e38 <HAL_RCC_ClockConfig+0x1f0>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	091b      	lsrs	r3, r3, #4
 8006e08:	f003 030f 	and.w	r3, r3, #15
 8006e0c:	490b      	ldr	r1, [pc, #44]	@ (8006e3c <HAL_RCC_ClockConfig+0x1f4>)
 8006e0e:	5ccb      	ldrb	r3, [r1, r3]
 8006e10:	f003 031f 	and.w	r3, r3, #31
 8006e14:	fa22 f303 	lsr.w	r3, r2, r3
 8006e18:	4a09      	ldr	r2, [pc, #36]	@ (8006e40 <HAL_RCC_ClockConfig+0x1f8>)
 8006e1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006e1c:	4b09      	ldr	r3, [pc, #36]	@ (8006e44 <HAL_RCC_ClockConfig+0x1fc>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fc f98d 	bl	8003140 <HAL_InitTick>
 8006e26:	4603      	mov	r3, r0
 8006e28:	72fb      	strb	r3, [r7, #11]

  return status;
 8006e2a:	7afb      	ldrb	r3, [r7, #11]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	40022000 	.word	0x40022000
 8006e38:	40021000 	.word	0x40021000
 8006e3c:	0800d7f8 	.word	0x0800d7f8
 8006e40:	2000000c 	.word	0x2000000c
 8006e44:	20000010 	.word	0x20000010

08006e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b089      	sub	sp, #36	@ 0x24
 8006e4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61fb      	str	r3, [r7, #28]
 8006e52:	2300      	movs	r3, #0
 8006e54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e56:	4b3e      	ldr	r3, [pc, #248]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 030c 	and.w	r3, r3, #12
 8006e5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e60:	4b3b      	ldr	r3, [pc, #236]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	f003 0303 	and.w	r3, r3, #3
 8006e68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d005      	beq.n	8006e7c <HAL_RCC_GetSysClockFreq+0x34>
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	2b0c      	cmp	r3, #12
 8006e74:	d121      	bne.n	8006eba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d11e      	bne.n	8006eba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e7c:	4b34      	ldr	r3, [pc, #208]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0308 	and.w	r3, r3, #8
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d107      	bne.n	8006e98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006e88:	4b31      	ldr	r3, [pc, #196]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e8e:	0a1b      	lsrs	r3, r3, #8
 8006e90:	f003 030f 	and.w	r3, r3, #15
 8006e94:	61fb      	str	r3, [r7, #28]
 8006e96:	e005      	b.n	8006ea4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006e98:	4b2d      	ldr	r3, [pc, #180]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	091b      	lsrs	r3, r3, #4
 8006e9e:	f003 030f 	and.w	r3, r3, #15
 8006ea2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8006f54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10d      	bne.n	8006ed0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006eb8:	e00a      	b.n	8006ed0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d102      	bne.n	8006ec6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ec0:	4b25      	ldr	r3, [pc, #148]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0x110>)
 8006ec2:	61bb      	str	r3, [r7, #24]
 8006ec4:	e004      	b.n	8006ed0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d101      	bne.n	8006ed0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ecc:	4b23      	ldr	r3, [pc, #140]	@ (8006f5c <HAL_RCC_GetSysClockFreq+0x114>)
 8006ece:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	2b0c      	cmp	r3, #12
 8006ed4:	d134      	bne.n	8006f40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d003      	beq.n	8006eee <HAL_RCC_GetSysClockFreq+0xa6>
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d003      	beq.n	8006ef4 <HAL_RCC_GetSysClockFreq+0xac>
 8006eec:	e005      	b.n	8006efa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006eee:	4b1a      	ldr	r3, [pc, #104]	@ (8006f58 <HAL_RCC_GetSysClockFreq+0x110>)
 8006ef0:	617b      	str	r3, [r7, #20]
      break;
 8006ef2:	e005      	b.n	8006f00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006ef4:	4b19      	ldr	r3, [pc, #100]	@ (8006f5c <HAL_RCC_GetSysClockFreq+0x114>)
 8006ef6:	617b      	str	r3, [r7, #20]
      break;
 8006ef8:	e002      	b.n	8006f00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	617b      	str	r3, [r7, #20]
      break;
 8006efe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f00:	4b13      	ldr	r3, [pc, #76]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	091b      	lsrs	r3, r3, #4
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006f0e:	4b10      	ldr	r3, [pc, #64]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	0a1b      	lsrs	r3, r3, #8
 8006f14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	fb03 f202 	mul.w	r2, r3, r2
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f26:	4b0a      	ldr	r3, [pc, #40]	@ (8006f50 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	0e5b      	lsrs	r3, r3, #25
 8006f2c:	f003 0303 	and.w	r3, r3, #3
 8006f30:	3301      	adds	r3, #1
 8006f32:	005b      	lsls	r3, r3, #1
 8006f34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006f40:	69bb      	ldr	r3, [r7, #24]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3724      	adds	r7, #36	@ 0x24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	40021000 	.word	0x40021000
 8006f54:	0800d810 	.word	0x0800d810
 8006f58:	00f42400 	.word	0x00f42400
 8006f5c:	007a1200 	.word	0x007a1200

08006f60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f60:	b480      	push	{r7}
 8006f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f64:	4b03      	ldr	r3, [pc, #12]	@ (8006f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f66:	681b      	ldr	r3, [r3, #0]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	2000000c 	.word	0x2000000c

08006f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f7c:	f7ff fff0 	bl	8006f60 <HAL_RCC_GetHCLKFreq>
 8006f80:	4602      	mov	r2, r0
 8006f82:	4b06      	ldr	r3, [pc, #24]	@ (8006f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	0a1b      	lsrs	r3, r3, #8
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	4904      	ldr	r1, [pc, #16]	@ (8006fa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f8e:	5ccb      	ldrb	r3, [r1, r3]
 8006f90:	f003 031f 	and.w	r3, r3, #31
 8006f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	40021000 	.word	0x40021000
 8006fa0:	0800d808 	.word	0x0800d808

08006fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006fa8:	f7ff ffda 	bl	8006f60 <HAL_RCC_GetHCLKFreq>
 8006fac:	4602      	mov	r2, r0
 8006fae:	4b06      	ldr	r3, [pc, #24]	@ (8006fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	0adb      	lsrs	r3, r3, #11
 8006fb4:	f003 0307 	and.w	r3, r3, #7
 8006fb8:	4904      	ldr	r1, [pc, #16]	@ (8006fcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8006fba:	5ccb      	ldrb	r3, [r1, r3]
 8006fbc:	f003 031f 	and.w	r3, r3, #31
 8006fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	40021000 	.word	0x40021000
 8006fcc:	0800d808 	.word	0x0800d808

08006fd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006fd8:	2300      	movs	r3, #0
 8006fda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8007088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006fe8:	f7ff f8e2 	bl	80061b0 <HAL_PWREx_GetVoltageRange>
 8006fec:	6178      	str	r0, [r7, #20]
 8006fee:	e014      	b.n	800701a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ff0:	4b25      	ldr	r3, [pc, #148]	@ (8007088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ff4:	4a24      	ldr	r2, [pc, #144]	@ (8007088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ffa:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ffc:	4b22      	ldr	r3, [pc, #136]	@ (8007088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007008:	f7ff f8d2 	bl	80061b0 <HAL_PWREx_GetVoltageRange>
 800700c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800700e:	4b1e      	ldr	r3, [pc, #120]	@ (8007088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007012:	4a1d      	ldr	r2, [pc, #116]	@ (8007088 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007014:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007018:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007020:	d10b      	bne.n	800703a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b80      	cmp	r3, #128	@ 0x80
 8007026:	d919      	bls.n	800705c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2ba0      	cmp	r3, #160	@ 0xa0
 800702c:	d902      	bls.n	8007034 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800702e:	2302      	movs	r3, #2
 8007030:	613b      	str	r3, [r7, #16]
 8007032:	e013      	b.n	800705c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007034:	2301      	movs	r3, #1
 8007036:	613b      	str	r3, [r7, #16]
 8007038:	e010      	b.n	800705c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b80      	cmp	r3, #128	@ 0x80
 800703e:	d902      	bls.n	8007046 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007040:	2303      	movs	r3, #3
 8007042:	613b      	str	r3, [r7, #16]
 8007044:	e00a      	b.n	800705c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b80      	cmp	r3, #128	@ 0x80
 800704a:	d102      	bne.n	8007052 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800704c:	2302      	movs	r3, #2
 800704e:	613b      	str	r3, [r7, #16]
 8007050:	e004      	b.n	800705c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b70      	cmp	r3, #112	@ 0x70
 8007056:	d101      	bne.n	800705c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007058:	2301      	movs	r3, #1
 800705a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800705c:	4b0b      	ldr	r3, [pc, #44]	@ (800708c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f023 0207 	bic.w	r2, r3, #7
 8007064:	4909      	ldr	r1, [pc, #36]	@ (800708c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	4313      	orrs	r3, r2
 800706a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800706c:	4b07      	ldr	r3, [pc, #28]	@ (800708c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0307 	and.w	r3, r3, #7
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	429a      	cmp	r2, r3
 8007078:	d001      	beq.n	800707e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e000      	b.n	8007080 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3718      	adds	r7, #24
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	40021000 	.word	0x40021000
 800708c:	40022000 	.word	0x40022000

08007090 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007098:	2300      	movs	r3, #0
 800709a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800709c:	2300      	movs	r3, #0
 800709e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d041      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070b0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80070b4:	d02a      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80070b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80070ba:	d824      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80070bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070c0:	d008      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80070c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070c6:	d81e      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00a      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80070cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070d0:	d010      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80070d2:	e018      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80070d4:	4b86      	ldr	r3, [pc, #536]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	4a85      	ldr	r2, [pc, #532]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070e0:	e015      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	3304      	adds	r3, #4
 80070e6:	2100      	movs	r1, #0
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 fabb 	bl	8007664 <RCCEx_PLLSAI1_Config>
 80070ee:	4603      	mov	r3, r0
 80070f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070f2:	e00c      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3320      	adds	r3, #32
 80070f8:	2100      	movs	r1, #0
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 fba6 	bl	800784c <RCCEx_PLLSAI2_Config>
 8007100:	4603      	mov	r3, r0
 8007102:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007104:	e003      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	74fb      	strb	r3, [r7, #19]
      break;
 800710a:	e000      	b.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800710c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800710e:	7cfb      	ldrb	r3, [r7, #19]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10b      	bne.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007114:	4b76      	ldr	r3, [pc, #472]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800711a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007122:	4973      	ldr	r1, [pc, #460]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007124:	4313      	orrs	r3, r2
 8007126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800712a:	e001      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800712c:	7cfb      	ldrb	r3, [r7, #19]
 800712e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d041      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007140:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007144:	d02a      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007146:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800714a:	d824      	bhi.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800714c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007150:	d008      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007152:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007156:	d81e      	bhi.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00a      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800715c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007160:	d010      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007162:	e018      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007164:	4b62      	ldr	r3, [pc, #392]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	4a61      	ldr	r2, [pc, #388]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800716a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800716e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007170:	e015      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3304      	adds	r3, #4
 8007176:	2100      	movs	r1, #0
 8007178:	4618      	mov	r0, r3
 800717a:	f000 fa73 	bl	8007664 <RCCEx_PLLSAI1_Config>
 800717e:	4603      	mov	r3, r0
 8007180:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007182:	e00c      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	3320      	adds	r3, #32
 8007188:	2100      	movs	r1, #0
 800718a:	4618      	mov	r0, r3
 800718c:	f000 fb5e 	bl	800784c <RCCEx_PLLSAI2_Config>
 8007190:	4603      	mov	r3, r0
 8007192:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007194:	e003      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	74fb      	strb	r3, [r7, #19]
      break;
 800719a:	e000      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800719c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800719e:	7cfb      	ldrb	r3, [r7, #19]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10b      	bne.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80071a4:	4b52      	ldr	r3, [pc, #328]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071b2:	494f      	ldr	r1, [pc, #316]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80071ba:	e001      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071bc:	7cfb      	ldrb	r3, [r7, #19]
 80071be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 80a0 	beq.w	800730e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071ce:	2300      	movs	r3, #0
 80071d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80071d2:	4b47      	ldr	r3, [pc, #284]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80071e2:	2300      	movs	r3, #0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00d      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071e8:	4b41      	ldr	r3, [pc, #260]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ec:	4a40      	ldr	r2, [pc, #256]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80071f4:	4b3e      	ldr	r3, [pc, #248]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071fc:	60bb      	str	r3, [r7, #8]
 80071fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007200:	2301      	movs	r3, #1
 8007202:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007204:	4b3b      	ldr	r3, [pc, #236]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a3a      	ldr	r2, [pc, #232]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800720a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800720e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007210:	f7fb ffe6 	bl	80031e0 <HAL_GetTick>
 8007214:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007216:	e009      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007218:	f7fb ffe2 	bl	80031e0 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b02      	cmp	r3, #2
 8007224:	d902      	bls.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	74fb      	strb	r3, [r7, #19]
        break;
 800722a:	e005      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800722c:	4b31      	ldr	r3, [pc, #196]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0ef      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007238:	7cfb      	ldrb	r3, [r7, #19]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d15c      	bne.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800723e:	4b2c      	ldr	r3, [pc, #176]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007244:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007248:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d01f      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	429a      	cmp	r2, r3
 800725a:	d019      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800725c:	4b24      	ldr	r3, [pc, #144]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800725e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007266:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007268:	4b21      	ldr	r3, [pc, #132]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800726a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800726e:	4a20      	ldr	r2, [pc, #128]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007274:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007278:	4b1d      	ldr	r3, [pc, #116]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800727a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800727e:	4a1c      	ldr	r2, [pc, #112]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007288:	4a19      	ldr	r2, [pc, #100]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d016      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800729a:	f7fb ffa1 	bl	80031e0 <HAL_GetTick>
 800729e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072a0:	e00b      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072a2:	f7fb ff9d 	bl	80031e0 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d902      	bls.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	74fb      	strb	r3, [r7, #19]
            break;
 80072b8:	e006      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072ba:	4b0d      	ldr	r3, [pc, #52]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0ec      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80072c8:	7cfb      	ldrb	r3, [r7, #19]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10c      	bne.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072ce:	4b08      	ldr	r3, [pc, #32]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072de:	4904      	ldr	r1, [pc, #16]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80072e6:	e009      	b.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072e8:	7cfb      	ldrb	r3, [r7, #19]
 80072ea:	74bb      	strb	r3, [r7, #18]
 80072ec:	e006      	b.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80072ee:	bf00      	nop
 80072f0:	40021000 	.word	0x40021000
 80072f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f8:	7cfb      	ldrb	r3, [r7, #19]
 80072fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072fc:	7c7b      	ldrb	r3, [r7, #17]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d105      	bne.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007302:	4b9e      	ldr	r3, [pc, #632]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007306:	4a9d      	ldr	r2, [pc, #628]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007308:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800730c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800731a:	4b98      	ldr	r3, [pc, #608]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800731c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007320:	f023 0203 	bic.w	r2, r3, #3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007328:	4994      	ldr	r1, [pc, #592]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800732a:	4313      	orrs	r3, r2
 800732c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00a      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800733c:	4b8f      	ldr	r3, [pc, #572]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800733e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007342:	f023 020c 	bic.w	r2, r3, #12
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800734a:	498c      	ldr	r1, [pc, #560]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800734c:	4313      	orrs	r3, r2
 800734e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0304 	and.w	r3, r3, #4
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800735e:	4b87      	ldr	r3, [pc, #540]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007364:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736c:	4983      	ldr	r1, [pc, #524]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800736e:	4313      	orrs	r3, r2
 8007370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0308 	and.w	r3, r3, #8
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00a      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007380:	4b7e      	ldr	r3, [pc, #504]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007386:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800738e:	497b      	ldr	r1, [pc, #492]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007390:	4313      	orrs	r3, r2
 8007392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0310 	and.w	r3, r3, #16
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00a      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80073a2:	4b76      	ldr	r3, [pc, #472]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073b0:	4972      	ldr	r1, [pc, #456]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0320 	and.w	r3, r3, #32
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00a      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073c4:	4b6d      	ldr	r3, [pc, #436]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073d2:	496a      	ldr	r1, [pc, #424]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073d4:	4313      	orrs	r3, r2
 80073d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00a      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073e6:	4b65      	ldr	r3, [pc, #404]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073f4:	4961      	ldr	r1, [pc, #388]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00a      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007408:	4b5c      	ldr	r3, [pc, #368]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800740a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800740e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007416:	4959      	ldr	r1, [pc, #356]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007418:	4313      	orrs	r3, r2
 800741a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800742a:	4b54      	ldr	r3, [pc, #336]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800742c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007430:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007438:	4950      	ldr	r1, [pc, #320]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800743a:	4313      	orrs	r3, r2
 800743c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00a      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800744c:	4b4b      	ldr	r3, [pc, #300]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800744e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007452:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800745a:	4948      	ldr	r1, [pc, #288]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800745c:	4313      	orrs	r3, r2
 800745e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00a      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800746e:	4b43      	ldr	r3, [pc, #268]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007474:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800747c:	493f      	ldr	r1, [pc, #252]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800747e:	4313      	orrs	r3, r2
 8007480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d028      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007490:	4b3a      	ldr	r3, [pc, #232]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007496:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800749e:	4937      	ldr	r1, [pc, #220]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074a0:	4313      	orrs	r3, r2
 80074a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074ae:	d106      	bne.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074b0:	4b32      	ldr	r3, [pc, #200]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	4a31      	ldr	r2, [pc, #196]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074ba:	60d3      	str	r3, [r2, #12]
 80074bc:	e011      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074c6:	d10c      	bne.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3304      	adds	r3, #4
 80074cc:	2101      	movs	r1, #1
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 f8c8 	bl	8007664 <RCCEx_PLLSAI1_Config>
 80074d4:	4603      	mov	r3, r0
 80074d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80074d8:	7cfb      	ldrb	r3, [r7, #19]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80074de:	7cfb      	ldrb	r3, [r7, #19]
 80074e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d028      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80074ee:	4b23      	ldr	r3, [pc, #140]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074fc:	491f      	ldr	r1, [pc, #124]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007508:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800750c:	d106      	bne.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800750e:	4b1b      	ldr	r3, [pc, #108]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	4a1a      	ldr	r2, [pc, #104]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007518:	60d3      	str	r3, [r2, #12]
 800751a:	e011      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007520:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007524:	d10c      	bne.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3304      	adds	r3, #4
 800752a:	2101      	movs	r1, #1
 800752c:	4618      	mov	r0, r3
 800752e:	f000 f899 	bl	8007664 <RCCEx_PLLSAI1_Config>
 8007532:	4603      	mov	r3, r0
 8007534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007536:	7cfb      	ldrb	r3, [r7, #19]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800753c:	7cfb      	ldrb	r3, [r7, #19]
 800753e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d02b      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800754c:	4b0b      	ldr	r3, [pc, #44]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800754e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007552:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800755a:	4908      	ldr	r1, [pc, #32]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800755c:	4313      	orrs	r3, r2
 800755e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007566:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800756a:	d109      	bne.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800756c:	4b03      	ldr	r3, [pc, #12]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	4a02      	ldr	r2, [pc, #8]	@ (800757c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007572:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007576:	60d3      	str	r3, [r2, #12]
 8007578:	e014      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800757a:	bf00      	nop
 800757c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007584:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007588:	d10c      	bne.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	3304      	adds	r3, #4
 800758e:	2101      	movs	r1, #1
 8007590:	4618      	mov	r0, r3
 8007592:	f000 f867 	bl	8007664 <RCCEx_PLLSAI1_Config>
 8007596:	4603      	mov	r3, r0
 8007598:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800759a:	7cfb      	ldrb	r3, [r7, #19]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d001      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80075a0:	7cfb      	ldrb	r3, [r7, #19]
 80075a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d02f      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80075b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075be:	4928      	ldr	r1, [pc, #160]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075ce:	d10d      	bne.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3304      	adds	r3, #4
 80075d4:	2102      	movs	r1, #2
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 f844 	bl	8007664 <RCCEx_PLLSAI1_Config>
 80075dc:	4603      	mov	r3, r0
 80075de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075e0:	7cfb      	ldrb	r3, [r7, #19]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d014      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80075e6:	7cfb      	ldrb	r3, [r7, #19]
 80075e8:	74bb      	strb	r3, [r7, #18]
 80075ea:	e011      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075f4:	d10c      	bne.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3320      	adds	r3, #32
 80075fa:	2102      	movs	r1, #2
 80075fc:	4618      	mov	r0, r3
 80075fe:	f000 f925 	bl	800784c <RCCEx_PLLSAI2_Config>
 8007602:	4603      	mov	r3, r0
 8007604:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007606:	7cfb      	ldrb	r3, [r7, #19]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800760c:	7cfb      	ldrb	r3, [r7, #19]
 800760e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800761c:	4b10      	ldr	r3, [pc, #64]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800761e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007622:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800762a:	490d      	ldr	r1, [pc, #52]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800762c:	4313      	orrs	r3, r2
 800762e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00b      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800763e:	4b08      	ldr	r3, [pc, #32]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007644:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800764e:	4904      	ldr	r1, [pc, #16]	@ (8007660 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007650:	4313      	orrs	r3, r2
 8007652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007656:	7cbb      	ldrb	r3, [r7, #18]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	40021000 	.word	0x40021000

08007664 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007672:	4b75      	ldr	r3, [pc, #468]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	f003 0303 	and.w	r3, r3, #3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d018      	beq.n	80076b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800767e:	4b72      	ldr	r3, [pc, #456]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f003 0203 	and.w	r2, r3, #3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d10d      	bne.n	80076aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
       ||
 8007692:	2b00      	cmp	r3, #0
 8007694:	d009      	beq.n	80076aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007696:	4b6c      	ldr	r3, [pc, #432]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	091b      	lsrs	r3, r3, #4
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
       ||
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d047      	beq.n	800773a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	73fb      	strb	r3, [r7, #15]
 80076ae:	e044      	b.n	800773a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d018      	beq.n	80076ea <RCCEx_PLLSAI1_Config+0x86>
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d825      	bhi.n	8007708 <RCCEx_PLLSAI1_Config+0xa4>
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d002      	beq.n	80076c6 <RCCEx_PLLSAI1_Config+0x62>
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d009      	beq.n	80076d8 <RCCEx_PLLSAI1_Config+0x74>
 80076c4:	e020      	b.n	8007708 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80076c6:	4b60      	ldr	r3, [pc, #384]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d11d      	bne.n	800770e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076d6:	e01a      	b.n	800770e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80076d8:	4b5b      	ldr	r3, [pc, #364]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d116      	bne.n	8007712 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076e8:	e013      	b.n	8007712 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80076ea:	4b57      	ldr	r3, [pc, #348]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10f      	bne.n	8007716 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80076f6:	4b54      	ldr	r3, [pc, #336]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d109      	bne.n	8007716 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007706:	e006      	b.n	8007716 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	73fb      	strb	r3, [r7, #15]
      break;
 800770c:	e004      	b.n	8007718 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800770e:	bf00      	nop
 8007710:	e002      	b.n	8007718 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007712:	bf00      	nop
 8007714:	e000      	b.n	8007718 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007716:	bf00      	nop
    }

    if(status == HAL_OK)
 8007718:	7bfb      	ldrb	r3, [r7, #15]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10d      	bne.n	800773a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800771e:	4b4a      	ldr	r3, [pc, #296]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6819      	ldr	r1, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	3b01      	subs	r3, #1
 8007730:	011b      	lsls	r3, r3, #4
 8007732:	430b      	orrs	r3, r1
 8007734:	4944      	ldr	r1, [pc, #272]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007736:	4313      	orrs	r3, r2
 8007738:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800773a:	7bfb      	ldrb	r3, [r7, #15]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d17d      	bne.n	800783c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007740:	4b41      	ldr	r3, [pc, #260]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a40      	ldr	r2, [pc, #256]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007746:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800774a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800774c:	f7fb fd48 	bl	80031e0 <HAL_GetTick>
 8007750:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007752:	e009      	b.n	8007768 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007754:	f7fb fd44 	bl	80031e0 <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	2b02      	cmp	r3, #2
 8007760:	d902      	bls.n	8007768 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	73fb      	strb	r3, [r7, #15]
        break;
 8007766:	e005      	b.n	8007774 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007768:	4b37      	ldr	r3, [pc, #220]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1ef      	bne.n	8007754 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007774:	7bfb      	ldrb	r3, [r7, #15]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d160      	bne.n	800783c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d111      	bne.n	80077a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007780:	4b31      	ldr	r3, [pc, #196]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	6892      	ldr	r2, [r2, #8]
 8007790:	0211      	lsls	r1, r2, #8
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	68d2      	ldr	r2, [r2, #12]
 8007796:	0912      	lsrs	r2, r2, #4
 8007798:	0452      	lsls	r2, r2, #17
 800779a:	430a      	orrs	r2, r1
 800779c:	492a      	ldr	r1, [pc, #168]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	610b      	str	r3, [r1, #16]
 80077a2:	e027      	b.n	80077f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d112      	bne.n	80077d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077aa:	4b27      	ldr	r3, [pc, #156]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80077b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	6892      	ldr	r2, [r2, #8]
 80077ba:	0211      	lsls	r1, r2, #8
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	6912      	ldr	r2, [r2, #16]
 80077c0:	0852      	lsrs	r2, r2, #1
 80077c2:	3a01      	subs	r2, #1
 80077c4:	0552      	lsls	r2, r2, #21
 80077c6:	430a      	orrs	r2, r1
 80077c8:	491f      	ldr	r1, [pc, #124]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	610b      	str	r3, [r1, #16]
 80077ce:	e011      	b.n	80077f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077d0:	4b1d      	ldr	r3, [pc, #116]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80077d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	6892      	ldr	r2, [r2, #8]
 80077e0:	0211      	lsls	r1, r2, #8
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	6952      	ldr	r2, [r2, #20]
 80077e6:	0852      	lsrs	r2, r2, #1
 80077e8:	3a01      	subs	r2, #1
 80077ea:	0652      	lsls	r2, r2, #25
 80077ec:	430a      	orrs	r2, r1
 80077ee:	4916      	ldr	r1, [pc, #88]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80077f4:	4b14      	ldr	r3, [pc, #80]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a13      	ldr	r2, [pc, #76]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80077fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007800:	f7fb fcee 	bl	80031e0 <HAL_GetTick>
 8007804:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007806:	e009      	b.n	800781c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007808:	f7fb fcea 	bl	80031e0 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b02      	cmp	r3, #2
 8007814:	d902      	bls.n	800781c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	73fb      	strb	r3, [r7, #15]
          break;
 800781a:	e005      	b.n	8007828 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800781c:	4b0a      	ldr	r3, [pc, #40]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0ef      	beq.n	8007808 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007828:	7bfb      	ldrb	r3, [r7, #15]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d106      	bne.n	800783c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800782e:	4b06      	ldr	r3, [pc, #24]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007830:	691a      	ldr	r2, [r3, #16]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	4904      	ldr	r1, [pc, #16]	@ (8007848 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007838:	4313      	orrs	r3, r2
 800783a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800783c:	7bfb      	ldrb	r3, [r7, #15]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	40021000 	.word	0x40021000

0800784c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800785a:	4b6a      	ldr	r3, [pc, #424]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	f003 0303 	and.w	r3, r3, #3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d018      	beq.n	8007898 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007866:	4b67      	ldr	r3, [pc, #412]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	f003 0203 	and.w	r2, r3, #3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	429a      	cmp	r2, r3
 8007874:	d10d      	bne.n	8007892 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
       ||
 800787a:	2b00      	cmp	r3, #0
 800787c:	d009      	beq.n	8007892 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800787e:	4b61      	ldr	r3, [pc, #388]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	091b      	lsrs	r3, r3, #4
 8007884:	f003 0307 	and.w	r3, r3, #7
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
       ||
 800788e:	429a      	cmp	r2, r3
 8007890:	d047      	beq.n	8007922 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	73fb      	strb	r3, [r7, #15]
 8007896:	e044      	b.n	8007922 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b03      	cmp	r3, #3
 800789e:	d018      	beq.n	80078d2 <RCCEx_PLLSAI2_Config+0x86>
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d825      	bhi.n	80078f0 <RCCEx_PLLSAI2_Config+0xa4>
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d002      	beq.n	80078ae <RCCEx_PLLSAI2_Config+0x62>
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d009      	beq.n	80078c0 <RCCEx_PLLSAI2_Config+0x74>
 80078ac:	e020      	b.n	80078f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80078ae:	4b55      	ldr	r3, [pc, #340]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0302 	and.w	r3, r3, #2
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d11d      	bne.n	80078f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078be:	e01a      	b.n	80078f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80078c0:	4b50      	ldr	r3, [pc, #320]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d116      	bne.n	80078fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078d0:	e013      	b.n	80078fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80078d2:	4b4c      	ldr	r3, [pc, #304]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10f      	bne.n	80078fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80078de:	4b49      	ldr	r3, [pc, #292]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d109      	bne.n	80078fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80078ee:	e006      	b.n	80078fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	73fb      	strb	r3, [r7, #15]
      break;
 80078f4:	e004      	b.n	8007900 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80078f6:	bf00      	nop
 80078f8:	e002      	b.n	8007900 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80078fa:	bf00      	nop
 80078fc:	e000      	b.n	8007900 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80078fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8007900:	7bfb      	ldrb	r3, [r7, #15]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10d      	bne.n	8007922 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007906:	4b3f      	ldr	r3, [pc, #252]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6819      	ldr	r1, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	3b01      	subs	r3, #1
 8007918:	011b      	lsls	r3, r3, #4
 800791a:	430b      	orrs	r3, r1
 800791c:	4939      	ldr	r1, [pc, #228]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800791e:	4313      	orrs	r3, r2
 8007920:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007922:	7bfb      	ldrb	r3, [r7, #15]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d167      	bne.n	80079f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007928:	4b36      	ldr	r3, [pc, #216]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a35      	ldr	r2, [pc, #212]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800792e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007932:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007934:	f7fb fc54 	bl	80031e0 <HAL_GetTick>
 8007938:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800793a:	e009      	b.n	8007950 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800793c:	f7fb fc50 	bl	80031e0 <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	2b02      	cmp	r3, #2
 8007948:	d902      	bls.n	8007950 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	73fb      	strb	r3, [r7, #15]
        break;
 800794e:	e005      	b.n	800795c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007950:	4b2c      	ldr	r3, [pc, #176]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1ef      	bne.n	800793c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d14a      	bne.n	80079f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d111      	bne.n	800798c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007968:	4b26      	ldr	r3, [pc, #152]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007970:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	6892      	ldr	r2, [r2, #8]
 8007978:	0211      	lsls	r1, r2, #8
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	68d2      	ldr	r2, [r2, #12]
 800797e:	0912      	lsrs	r2, r2, #4
 8007980:	0452      	lsls	r2, r2, #17
 8007982:	430a      	orrs	r2, r1
 8007984:	491f      	ldr	r1, [pc, #124]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007986:	4313      	orrs	r3, r2
 8007988:	614b      	str	r3, [r1, #20]
 800798a:	e011      	b.n	80079b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800798c:	4b1d      	ldr	r3, [pc, #116]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007994:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	6892      	ldr	r2, [r2, #8]
 800799c:	0211      	lsls	r1, r2, #8
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	6912      	ldr	r2, [r2, #16]
 80079a2:	0852      	lsrs	r2, r2, #1
 80079a4:	3a01      	subs	r2, #1
 80079a6:	0652      	lsls	r2, r2, #25
 80079a8:	430a      	orrs	r2, r1
 80079aa:	4916      	ldr	r1, [pc, #88]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80079b0:	4b14      	ldr	r3, [pc, #80]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a13      	ldr	r2, [pc, #76]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079bc:	f7fb fc10 	bl	80031e0 <HAL_GetTick>
 80079c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80079c2:	e009      	b.n	80079d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80079c4:	f7fb fc0c 	bl	80031e0 <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d902      	bls.n	80079d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	73fb      	strb	r3, [r7, #15]
          break;
 80079d6:	e005      	b.n	80079e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80079d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d0ef      	beq.n	80079c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d106      	bne.n	80079f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80079ea:	4b06      	ldr	r3, [pc, #24]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079ec:	695a      	ldr	r2, [r3, #20]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	4904      	ldr	r1, [pc, #16]	@ (8007a04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079f4:	4313      	orrs	r3, r2
 80079f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80079f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	40021000 	.word	0x40021000

08007a08 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d079      	beq.n	8007b0e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d106      	bne.n	8007a34 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7fb f98a 	bl	8002d48 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	f003 0310 	and.w	r3, r3, #16
 8007a46:	2b10      	cmp	r3, #16
 8007a48:	d058      	beq.n	8007afc <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	22ca      	movs	r2, #202	@ 0xca
 8007a50:	625a      	str	r2, [r3, #36]	@ 0x24
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2253      	movs	r2, #83	@ 0x53
 8007a58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fa4e 	bl	8007efc <RTC_EnterInitMode>
 8007a60:	4603      	mov	r3, r0
 8007a62:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d127      	bne.n	8007aba <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	6812      	ldr	r2, [r2, #0]
 8007a74:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007a78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a7c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6899      	ldr	r1, [r3, #8]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	431a      	orrs	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	68d2      	ldr	r2, [r2, #12]
 8007aa4:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6919      	ldr	r1, [r3, #16]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	041a      	lsls	r2, r3, #16
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fa52 	bl	8007f64 <RTC_ExitInitMode>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d113      	bne.n	8007af2 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 0203 	bic.w	r2, r2, #3
 8007ad8:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	69da      	ldr	r2, [r3, #28]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	22ff      	movs	r2, #255	@ 0xff
 8007af8:	625a      	str	r2, [r3, #36]	@ 0x24
 8007afa:	e001      	b.n	8007b00 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d103      	bne.n	8007b0e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007b18:	b590      	push	{r4, r7, lr}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d101      	bne.n	8007b32 <HAL_RTC_SetTime+0x1a>
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e08b      	b.n	8007c4a <HAL_RTC_SetTime+0x132>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	22ca      	movs	r2, #202	@ 0xca
 8007b48:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2253      	movs	r2, #83	@ 0x53
 8007b50:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 f9d2 	bl	8007efc <RTC_EnterInitMode>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007b5c:	7cfb      	ldrb	r3, [r7, #19]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d163      	bne.n	8007c2a <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d126      	bne.n	8007bb6 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d102      	bne.n	8007b7c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 fa2d 	bl	8007fe0 <RTC_ByteToBcd2>
 8007b86:	4603      	mov	r3, r0
 8007b88:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	785b      	ldrb	r3, [r3, #1]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 fa26 	bl	8007fe0 <RTC_ByteToBcd2>
 8007b94:	4603      	mov	r3, r0
 8007b96:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007b98:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	789b      	ldrb	r3, [r3, #2]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 fa1e 	bl	8007fe0 <RTC_ByteToBcd2>
 8007ba4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007ba6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	78db      	ldrb	r3, [r3, #3]
 8007bae:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	617b      	str	r3, [r7, #20]
 8007bb4:	e018      	b.n	8007be8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d102      	bne.n	8007bca <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	785b      	ldrb	r3, [r3, #1]
 8007bd4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007bd6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007bdc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	78db      	ldrb	r3, [r3, #3]
 8007be2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007be4:	4313      	orrs	r3, r2
 8007be6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007bf2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007bf6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689a      	ldr	r2, [r3, #8]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007c06:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6899      	ldr	r1, [r3, #8]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	68da      	ldr	r2, [r3, #12]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	431a      	orrs	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f000 f99f 	bl	8007f64 <RTC_ExitInitMode>
 8007c26:	4603      	mov	r3, r0
 8007c28:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	22ff      	movs	r2, #255	@ 0xff
 8007c30:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007c32:	7cfb      	ldrb	r3, [r7, #19]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d103      	bne.n	8007c40 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007c48:	7cfb      	ldrb	r3, [r7, #19]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	371c      	adds	r7, #28
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd90      	pop	{r4, r7, pc}

08007c52 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b086      	sub	sp, #24
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	60f8      	str	r0, [r7, #12]
 8007c5a:	60b9      	str	r1, [r7, #8]
 8007c5c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007c80:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007c84:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	0c1b      	lsrs	r3, r3, #16
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	0a1b      	lsrs	r3, r3, #8
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cae:	b2da      	uxtb	r2, r3
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	0d9b      	lsrs	r3, r3, #22
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d11a      	bne.n	8007d00 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 f9a6 	bl	8008020 <RTC_Bcd2ToByte>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	785b      	ldrb	r3, [r3, #1]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 f99d 	bl	8008020 <RTC_Bcd2ToByte>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	461a      	mov	r2, r3
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	789b      	ldrb	r3, [r3, #2]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 f994 	bl	8008020 <RTC_Bcd2ToByte>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007d0a:	b590      	push	{r4, r7, lr}
 8007d0c:	b087      	sub	sp, #28
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	60f8      	str	r0, [r7, #12]
 8007d12:	60b9      	str	r1, [r7, #8]
 8007d14:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d101      	bne.n	8007d24 <HAL_RTC_SetDate+0x1a>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e075      	b.n	8007e10 <HAL_RTC_SetDate+0x106>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10e      	bne.n	8007d58 <HAL_RTC_SetDate+0x4e>
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	785b      	ldrb	r3, [r3, #1]
 8007d3e:	f003 0310 	and.w	r3, r3, #16
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d008      	beq.n	8007d58 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	785b      	ldrb	r3, [r3, #1]
 8007d4a:	f023 0310 	bic.w	r3, r3, #16
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	330a      	adds	r3, #10
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d11c      	bne.n	8007d98 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	78db      	ldrb	r3, [r3, #3]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 f93c 	bl	8007fe0 <RTC_ByteToBcd2>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	785b      	ldrb	r3, [r3, #1]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 f935 	bl	8007fe0 <RTC_ByteToBcd2>
 8007d76:	4603      	mov	r3, r0
 8007d78:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007d7a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	789b      	ldrb	r3, [r3, #2]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 f92d 	bl	8007fe0 <RTC_ByteToBcd2>
 8007d86:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007d88:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007d92:	4313      	orrs	r3, r2
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	e00e      	b.n	8007db6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	78db      	ldrb	r3, [r3, #3]
 8007d9c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	785b      	ldrb	r3, [r3, #1]
 8007da2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007da4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007daa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007db2:	4313      	orrs	r3, r2
 8007db4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	22ca      	movs	r2, #202	@ 0xca
 8007dbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2253      	movs	r2, #83	@ 0x53
 8007dc4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f000 f898 	bl	8007efc <RTC_EnterInitMode>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007dd0:	7cfb      	ldrb	r3, [r7, #19]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10c      	bne.n	8007df0 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007de0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007de4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 f8bc 	bl	8007f64 <RTC_ExitInitMode>
 8007dec:	4603      	mov	r3, r0
 8007dee:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	22ff      	movs	r2, #255	@ 0xff
 8007df6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007df8:	7cfb      	ldrb	r3, [r7, #19]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d103      	bne.n	8007e06 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007e0e:	7cfb      	ldrb	r3, [r7, #19]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	371c      	adds	r7, #28
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd90      	pop	{r4, r7, pc}

08007e18 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007e2e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007e32:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	0c1b      	lsrs	r3, r3, #16
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	0a1b      	lsrs	r3, r3, #8
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	f003 031f 	and.w	r3, r3, #31
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e56:	b2da      	uxtb	r2, r3
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	0b5b      	lsrs	r3, r3, #13
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	f003 0307 	and.w	r3, r3, #7
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d11a      	bne.n	8007ea8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	78db      	ldrb	r3, [r3, #3]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 f8d2 	bl	8008020 <RTC_Bcd2ToByte>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	461a      	mov	r2, r3
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	785b      	ldrb	r3, [r3, #1]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 f8c9 	bl	8008020 <RTC_Bcd2ToByte>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	461a      	mov	r2, r3
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	789b      	ldrb	r3, [r3, #2]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 f8c0 	bl	8008020 <RTC_Bcd2ToByte>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3718      	adds	r7, #24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8007ef8 <HAL_RTC_WaitForSynchro+0x44>)
 8007ec2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007ec4:	f7fb f98c 	bl	80031e0 <HAL_GetTick>
 8007ec8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007eca:	e009      	b.n	8007ee0 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ecc:	f7fb f988 	bl	80031e0 <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007eda:	d901      	bls.n	8007ee0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e007      	b.n	8007ef0 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	f003 0320 	and.w	r3, r3, #32
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0ee      	beq.n	8007ecc <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	0003ff5f 	.word	0x0003ff5f

08007efc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d120      	bne.n	8007f58 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f1e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007f20:	f7fb f95e 	bl	80031e0 <HAL_GetTick>
 8007f24:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007f26:	e00d      	b.n	8007f44 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007f28:	f7fb f95a 	bl	80031e0 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f36:	d905      	bls.n	8007f44 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2203      	movs	r2, #3
 8007f40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d102      	bne.n	8007f58 <RTC_EnterInitMode+0x5c>
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	2b03      	cmp	r3, #3
 8007f56:	d1e7      	bne.n	8007f28 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007f70:	4b1a      	ldr	r3, [pc, #104]	@ (8007fdc <RTC_ExitInitMode+0x78>)
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	4a19      	ldr	r2, [pc, #100]	@ (8007fdc <RTC_ExitInitMode+0x78>)
 8007f76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f7a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007f7c:	4b17      	ldr	r3, [pc, #92]	@ (8007fdc <RTC_ExitInitMode+0x78>)
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	f003 0320 	and.w	r3, r3, #32
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10c      	bne.n	8007fa2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f7ff ff93 	bl	8007eb4 <HAL_RTC_WaitForSynchro>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d01e      	beq.n	8007fd2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2203      	movs	r2, #3
 8007f98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	73fb      	strb	r3, [r7, #15]
 8007fa0:	e017      	b.n	8007fd2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8007fdc <RTC_ExitInitMode+0x78>)
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	4a0d      	ldr	r2, [pc, #52]	@ (8007fdc <RTC_ExitInitMode+0x78>)
 8007fa8:	f023 0320 	bic.w	r3, r3, #32
 8007fac:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7ff ff80 	bl	8007eb4 <HAL_RTC_WaitForSynchro>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d005      	beq.n	8007fc6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2203      	movs	r2, #3
 8007fbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007fc6:	4b05      	ldr	r3, [pc, #20]	@ (8007fdc <RTC_ExitInitMode+0x78>)
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	4a04      	ldr	r2, [pc, #16]	@ (8007fdc <RTC_ExitInitMode+0x78>)
 8007fcc:	f043 0320 	orr.w	r3, r3, #32
 8007fd0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	40002800 	.word	0x40002800

08007fe0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007fee:	79fb      	ldrb	r3, [r7, #7]
 8007ff0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007ff2:	e005      	b.n	8008000 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007ffa:	7afb      	ldrb	r3, [r7, #11]
 8007ffc:	3b0a      	subs	r3, #10
 8007ffe:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8008000:	7afb      	ldrb	r3, [r7, #11]
 8008002:	2b09      	cmp	r3, #9
 8008004:	d8f6      	bhi.n	8007ff4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	b2db      	uxtb	r3, r3
 800800a:	011b      	lsls	r3, r3, #4
 800800c:	b2da      	uxtb	r2, r3
 800800e:	7afb      	ldrb	r3, [r7, #11]
 8008010:	4313      	orrs	r3, r2
 8008012:	b2db      	uxtb	r3, r3
}
 8008014:	4618      	mov	r0, r3
 8008016:	3714      	adds	r7, #20
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	091b      	lsrs	r3, r3, #4
 800802e:	b2db      	uxtb	r3, r3
 8008030:	461a      	mov	r2, r3
 8008032:	0092      	lsls	r2, r2, #2
 8008034:	4413      	add	r3, r2
 8008036:	005b      	lsls	r3, r3, #1
 8008038:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800803a:	79fb      	ldrb	r3, [r7, #7]
 800803c:	f003 030f 	and.w	r3, r3, #15
 8008040:	b2da      	uxtb	r2, r3
 8008042:	7bfb      	ldrb	r3, [r7, #15]
 8008044:	4413      	add	r3, r2
 8008046:	b2db      	uxtb	r3, r3
}
 8008048:	4618      	mov	r0, r3
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d101      	bne.n	800806e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800806a:	2302      	movs	r3, #2
 800806c:	e07f      	b.n	800816e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2202      	movs	r2, #2
 800807a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	22ca      	movs	r2, #202	@ 0xca
 8008084:	625a      	str	r2, [r3, #36]	@ 0x24
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2253      	movs	r2, #83	@ 0x53
 800808c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689a      	ldr	r2, [r3, #8]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800809c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80080ae:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d120      	bne.n	8008100 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 80080be:	f7fb f88f 	bl	80031e0 <HAL_GetTick>
 80080c2:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80080c4:	e015      	b.n	80080f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80080c6:	f7fb f88b 	bl	80031e0 <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080d4:	d90d      	bls.n	80080f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	22ff      	movs	r2, #255	@ 0xff
 80080dc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2203      	movs	r2, #3
 80080e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e03d      	b.n	800816e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	f003 0304 	and.w	r3, r3, #4
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d0e2      	beq.n	80080c6 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f023 0107 	bic.w	r1, r3, #7
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	430a      	orrs	r2, r1
 800811a:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800811c:	4b16      	ldr	r3, [pc, #88]	@ (8008178 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a15      	ldr	r2, [pc, #84]	@ (8008178 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8008122:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008126:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8008128:	4b13      	ldr	r3, [pc, #76]	@ (8008178 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	4a12      	ldr	r2, [pc, #72]	@ (8008178 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800812e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008132:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	689a      	ldr	r2, [r3, #8]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008142:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	689a      	ldr	r2, [r3, #8]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008152:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	22ff      	movs	r2, #255	@ 0xff
 800815a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3718      	adds	r7, #24
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	40010400 	.word	0x40010400

0800817c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 3020 	ldrb.w	r3, [r3, #32]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d101      	bne.n	8008192 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800818e:	2302      	movs	r3, #2
 8008190:	e04d      	b.n	800822e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2202      	movs	r2, #2
 800819e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	22ca      	movs	r2, #202	@ 0xca
 80081a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2253      	movs	r2, #83	@ 0x53
 80081b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	689a      	ldr	r2, [r3, #8]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081c0:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	689a      	ldr	r2, [r3, #8]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80081d0:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80081d2:	f7fb f805 	bl	80031e0 <HAL_GetTick>
 80081d6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80081d8:	e015      	b.n	8008206 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80081da:	f7fb f801 	bl	80031e0 <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80081e8:	d90d      	bls.n	8008206 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	22ff      	movs	r2, #255	@ 0xff
 80081f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2203      	movs	r2, #3
 80081f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e013      	b.n	800822e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f003 0304 	and.w	r3, r3, #4
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0e2      	beq.n	80081da <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	22ff      	movs	r2, #255	@ 0xff
 800821a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
	...

08008238 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8008240:	4b0f      	ldr	r3, [pc, #60]	@ (8008280 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8008242:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008246:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00b      	beq.n	800826e <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	b2da      	uxtb	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8008266:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7f9 fdff 	bl	8001e6c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	40010400 	.word	0x40010400

08008284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e040      	b.n	8008318 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800829a:	2b00      	cmp	r3, #0
 800829c:	d106      	bne.n	80082ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7fa fd88 	bl	8002dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2224      	movs	r2, #36	@ 0x24
 80082b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f022 0201 	bic.w	r2, r2, #1
 80082c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d002      	beq.n	80082d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fb6a 	bl	80089a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f8af 	bl	8008434 <UART_SetConfig>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d101      	bne.n	80082e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e01b      	b.n	8008318 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80082ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689a      	ldr	r2, [r3, #8]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80082fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f042 0201 	orr.w	r2, r2, #1
 800830e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fbe9 	bl	8008ae8 <UART_CheckIdleState>
 8008316:	4603      	mov	r3, r0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08a      	sub	sp, #40	@ 0x28
 8008324:	af02      	add	r7, sp, #8
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	4613      	mov	r3, r2
 800832e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008334:	2b20      	cmp	r3, #32
 8008336:	d177      	bne.n	8008428 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <HAL_UART_Transmit+0x24>
 800833e:	88fb      	ldrh	r3, [r7, #6]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d101      	bne.n	8008348 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e070      	b.n	800842a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2221      	movs	r2, #33	@ 0x21
 8008354:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008356:	f7fa ff43 	bl	80031e0 <HAL_GetTick>
 800835a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	88fa      	ldrh	r2, [r7, #6]
 8008360:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	88fa      	ldrh	r2, [r7, #6]
 8008368:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008374:	d108      	bne.n	8008388 <HAL_UART_Transmit+0x68>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d104      	bne.n	8008388 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800837e:	2300      	movs	r3, #0
 8008380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	61bb      	str	r3, [r7, #24]
 8008386:	e003      	b.n	8008390 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800838c:	2300      	movs	r3, #0
 800838e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008390:	e02f      	b.n	80083f2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	2200      	movs	r2, #0
 800839a:	2180      	movs	r1, #128	@ 0x80
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 fc4b 	bl	8008c38 <UART_WaitOnFlagUntilTimeout>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d004      	beq.n	80083b2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2220      	movs	r2, #32
 80083ac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e03b      	b.n	800842a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10b      	bne.n	80083d0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	881a      	ldrh	r2, [r3, #0]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083c4:	b292      	uxth	r2, r2
 80083c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	3302      	adds	r3, #2
 80083cc:	61bb      	str	r3, [r7, #24]
 80083ce:	e007      	b.n	80083e0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	781a      	ldrb	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	3301      	adds	r3, #1
 80083de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	3b01      	subs	r3, #1
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1c9      	bne.n	8008392 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2200      	movs	r2, #0
 8008406:	2140      	movs	r1, #64	@ 0x40
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 fc15 	bl	8008c38 <UART_WaitOnFlagUntilTimeout>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d004      	beq.n	800841e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2220      	movs	r2, #32
 8008418:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e005      	b.n	800842a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2220      	movs	r2, #32
 8008422:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008424:	2300      	movs	r3, #0
 8008426:	e000      	b.n	800842a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008428:	2302      	movs	r3, #2
  }
}
 800842a:	4618      	mov	r0, r3
 800842c:	3720      	adds	r7, #32
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008438:	b08a      	sub	sp, #40	@ 0x28
 800843a:	af00      	add	r7, sp, #0
 800843c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	689a      	ldr	r2, [r3, #8]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	431a      	orrs	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	431a      	orrs	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	69db      	ldr	r3, [r3, #28]
 8008458:	4313      	orrs	r3, r2
 800845a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	4ba4      	ldr	r3, [pc, #656]	@ (80086f4 <UART_SetConfig+0x2c0>)
 8008464:	4013      	ands	r3, r2
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	6812      	ldr	r2, [r2, #0]
 800846a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800846c:	430b      	orrs	r3, r1
 800846e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	68da      	ldr	r2, [r3, #12]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a99      	ldr	r2, [pc, #612]	@ (80086f8 <UART_SetConfig+0x2c4>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d004      	beq.n	80084a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800849c:	4313      	orrs	r3, r2
 800849e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084b0:	430a      	orrs	r2, r1
 80084b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a90      	ldr	r2, [pc, #576]	@ (80086fc <UART_SetConfig+0x2c8>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d126      	bne.n	800850c <UART_SetConfig+0xd8>
 80084be:	4b90      	ldr	r3, [pc, #576]	@ (8008700 <UART_SetConfig+0x2cc>)
 80084c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084c4:	f003 0303 	and.w	r3, r3, #3
 80084c8:	2b03      	cmp	r3, #3
 80084ca:	d81b      	bhi.n	8008504 <UART_SetConfig+0xd0>
 80084cc:	a201      	add	r2, pc, #4	@ (adr r2, 80084d4 <UART_SetConfig+0xa0>)
 80084ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d2:	bf00      	nop
 80084d4:	080084e5 	.word	0x080084e5
 80084d8:	080084f5 	.word	0x080084f5
 80084dc:	080084ed 	.word	0x080084ed
 80084e0:	080084fd 	.word	0x080084fd
 80084e4:	2301      	movs	r3, #1
 80084e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084ea:	e116      	b.n	800871a <UART_SetConfig+0x2e6>
 80084ec:	2302      	movs	r3, #2
 80084ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084f2:	e112      	b.n	800871a <UART_SetConfig+0x2e6>
 80084f4:	2304      	movs	r3, #4
 80084f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084fa:	e10e      	b.n	800871a <UART_SetConfig+0x2e6>
 80084fc:	2308      	movs	r3, #8
 80084fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008502:	e10a      	b.n	800871a <UART_SetConfig+0x2e6>
 8008504:	2310      	movs	r3, #16
 8008506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800850a:	e106      	b.n	800871a <UART_SetConfig+0x2e6>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a7c      	ldr	r2, [pc, #496]	@ (8008704 <UART_SetConfig+0x2d0>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d138      	bne.n	8008588 <UART_SetConfig+0x154>
 8008516:	4b7a      	ldr	r3, [pc, #488]	@ (8008700 <UART_SetConfig+0x2cc>)
 8008518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800851c:	f003 030c 	and.w	r3, r3, #12
 8008520:	2b0c      	cmp	r3, #12
 8008522:	d82d      	bhi.n	8008580 <UART_SetConfig+0x14c>
 8008524:	a201      	add	r2, pc, #4	@ (adr r2, 800852c <UART_SetConfig+0xf8>)
 8008526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852a:	bf00      	nop
 800852c:	08008561 	.word	0x08008561
 8008530:	08008581 	.word	0x08008581
 8008534:	08008581 	.word	0x08008581
 8008538:	08008581 	.word	0x08008581
 800853c:	08008571 	.word	0x08008571
 8008540:	08008581 	.word	0x08008581
 8008544:	08008581 	.word	0x08008581
 8008548:	08008581 	.word	0x08008581
 800854c:	08008569 	.word	0x08008569
 8008550:	08008581 	.word	0x08008581
 8008554:	08008581 	.word	0x08008581
 8008558:	08008581 	.word	0x08008581
 800855c:	08008579 	.word	0x08008579
 8008560:	2300      	movs	r3, #0
 8008562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008566:	e0d8      	b.n	800871a <UART_SetConfig+0x2e6>
 8008568:	2302      	movs	r3, #2
 800856a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800856e:	e0d4      	b.n	800871a <UART_SetConfig+0x2e6>
 8008570:	2304      	movs	r3, #4
 8008572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008576:	e0d0      	b.n	800871a <UART_SetConfig+0x2e6>
 8008578:	2308      	movs	r3, #8
 800857a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800857e:	e0cc      	b.n	800871a <UART_SetConfig+0x2e6>
 8008580:	2310      	movs	r3, #16
 8008582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008586:	e0c8      	b.n	800871a <UART_SetConfig+0x2e6>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a5e      	ldr	r2, [pc, #376]	@ (8008708 <UART_SetConfig+0x2d4>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d125      	bne.n	80085de <UART_SetConfig+0x1aa>
 8008592:	4b5b      	ldr	r3, [pc, #364]	@ (8008700 <UART_SetConfig+0x2cc>)
 8008594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008598:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800859c:	2b30      	cmp	r3, #48	@ 0x30
 800859e:	d016      	beq.n	80085ce <UART_SetConfig+0x19a>
 80085a0:	2b30      	cmp	r3, #48	@ 0x30
 80085a2:	d818      	bhi.n	80085d6 <UART_SetConfig+0x1a2>
 80085a4:	2b20      	cmp	r3, #32
 80085a6:	d00a      	beq.n	80085be <UART_SetConfig+0x18a>
 80085a8:	2b20      	cmp	r3, #32
 80085aa:	d814      	bhi.n	80085d6 <UART_SetConfig+0x1a2>
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d002      	beq.n	80085b6 <UART_SetConfig+0x182>
 80085b0:	2b10      	cmp	r3, #16
 80085b2:	d008      	beq.n	80085c6 <UART_SetConfig+0x192>
 80085b4:	e00f      	b.n	80085d6 <UART_SetConfig+0x1a2>
 80085b6:	2300      	movs	r3, #0
 80085b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085bc:	e0ad      	b.n	800871a <UART_SetConfig+0x2e6>
 80085be:	2302      	movs	r3, #2
 80085c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085c4:	e0a9      	b.n	800871a <UART_SetConfig+0x2e6>
 80085c6:	2304      	movs	r3, #4
 80085c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085cc:	e0a5      	b.n	800871a <UART_SetConfig+0x2e6>
 80085ce:	2308      	movs	r3, #8
 80085d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085d4:	e0a1      	b.n	800871a <UART_SetConfig+0x2e6>
 80085d6:	2310      	movs	r3, #16
 80085d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085dc:	e09d      	b.n	800871a <UART_SetConfig+0x2e6>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a4a      	ldr	r2, [pc, #296]	@ (800870c <UART_SetConfig+0x2d8>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d125      	bne.n	8008634 <UART_SetConfig+0x200>
 80085e8:	4b45      	ldr	r3, [pc, #276]	@ (8008700 <UART_SetConfig+0x2cc>)
 80085ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80085f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80085f4:	d016      	beq.n	8008624 <UART_SetConfig+0x1f0>
 80085f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80085f8:	d818      	bhi.n	800862c <UART_SetConfig+0x1f8>
 80085fa:	2b80      	cmp	r3, #128	@ 0x80
 80085fc:	d00a      	beq.n	8008614 <UART_SetConfig+0x1e0>
 80085fe:	2b80      	cmp	r3, #128	@ 0x80
 8008600:	d814      	bhi.n	800862c <UART_SetConfig+0x1f8>
 8008602:	2b00      	cmp	r3, #0
 8008604:	d002      	beq.n	800860c <UART_SetConfig+0x1d8>
 8008606:	2b40      	cmp	r3, #64	@ 0x40
 8008608:	d008      	beq.n	800861c <UART_SetConfig+0x1e8>
 800860a:	e00f      	b.n	800862c <UART_SetConfig+0x1f8>
 800860c:	2300      	movs	r3, #0
 800860e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008612:	e082      	b.n	800871a <UART_SetConfig+0x2e6>
 8008614:	2302      	movs	r3, #2
 8008616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800861a:	e07e      	b.n	800871a <UART_SetConfig+0x2e6>
 800861c:	2304      	movs	r3, #4
 800861e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008622:	e07a      	b.n	800871a <UART_SetConfig+0x2e6>
 8008624:	2308      	movs	r3, #8
 8008626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800862a:	e076      	b.n	800871a <UART_SetConfig+0x2e6>
 800862c:	2310      	movs	r3, #16
 800862e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008632:	e072      	b.n	800871a <UART_SetConfig+0x2e6>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a35      	ldr	r2, [pc, #212]	@ (8008710 <UART_SetConfig+0x2dc>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d12a      	bne.n	8008694 <UART_SetConfig+0x260>
 800863e:	4b30      	ldr	r3, [pc, #192]	@ (8008700 <UART_SetConfig+0x2cc>)
 8008640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008644:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008648:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800864c:	d01a      	beq.n	8008684 <UART_SetConfig+0x250>
 800864e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008652:	d81b      	bhi.n	800868c <UART_SetConfig+0x258>
 8008654:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008658:	d00c      	beq.n	8008674 <UART_SetConfig+0x240>
 800865a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800865e:	d815      	bhi.n	800868c <UART_SetConfig+0x258>
 8008660:	2b00      	cmp	r3, #0
 8008662:	d003      	beq.n	800866c <UART_SetConfig+0x238>
 8008664:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008668:	d008      	beq.n	800867c <UART_SetConfig+0x248>
 800866a:	e00f      	b.n	800868c <UART_SetConfig+0x258>
 800866c:	2300      	movs	r3, #0
 800866e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008672:	e052      	b.n	800871a <UART_SetConfig+0x2e6>
 8008674:	2302      	movs	r3, #2
 8008676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800867a:	e04e      	b.n	800871a <UART_SetConfig+0x2e6>
 800867c:	2304      	movs	r3, #4
 800867e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008682:	e04a      	b.n	800871a <UART_SetConfig+0x2e6>
 8008684:	2308      	movs	r3, #8
 8008686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800868a:	e046      	b.n	800871a <UART_SetConfig+0x2e6>
 800868c:	2310      	movs	r3, #16
 800868e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008692:	e042      	b.n	800871a <UART_SetConfig+0x2e6>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a17      	ldr	r2, [pc, #92]	@ (80086f8 <UART_SetConfig+0x2c4>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d13a      	bne.n	8008714 <UART_SetConfig+0x2e0>
 800869e:	4b18      	ldr	r3, [pc, #96]	@ (8008700 <UART_SetConfig+0x2cc>)
 80086a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80086a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086ac:	d01a      	beq.n	80086e4 <UART_SetConfig+0x2b0>
 80086ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086b2:	d81b      	bhi.n	80086ec <UART_SetConfig+0x2b8>
 80086b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086b8:	d00c      	beq.n	80086d4 <UART_SetConfig+0x2a0>
 80086ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086be:	d815      	bhi.n	80086ec <UART_SetConfig+0x2b8>
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d003      	beq.n	80086cc <UART_SetConfig+0x298>
 80086c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086c8:	d008      	beq.n	80086dc <UART_SetConfig+0x2a8>
 80086ca:	e00f      	b.n	80086ec <UART_SetConfig+0x2b8>
 80086cc:	2300      	movs	r3, #0
 80086ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086d2:	e022      	b.n	800871a <UART_SetConfig+0x2e6>
 80086d4:	2302      	movs	r3, #2
 80086d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086da:	e01e      	b.n	800871a <UART_SetConfig+0x2e6>
 80086dc:	2304      	movs	r3, #4
 80086de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086e2:	e01a      	b.n	800871a <UART_SetConfig+0x2e6>
 80086e4:	2308      	movs	r3, #8
 80086e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086ea:	e016      	b.n	800871a <UART_SetConfig+0x2e6>
 80086ec:	2310      	movs	r3, #16
 80086ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086f2:	e012      	b.n	800871a <UART_SetConfig+0x2e6>
 80086f4:	efff69f3 	.word	0xefff69f3
 80086f8:	40008000 	.word	0x40008000
 80086fc:	40013800 	.word	0x40013800
 8008700:	40021000 	.word	0x40021000
 8008704:	40004400 	.word	0x40004400
 8008708:	40004800 	.word	0x40004800
 800870c:	40004c00 	.word	0x40004c00
 8008710:	40005000 	.word	0x40005000
 8008714:	2310      	movs	r3, #16
 8008716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a9f      	ldr	r2, [pc, #636]	@ (800899c <UART_SetConfig+0x568>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d17a      	bne.n	800881a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008724:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008728:	2b08      	cmp	r3, #8
 800872a:	d824      	bhi.n	8008776 <UART_SetConfig+0x342>
 800872c:	a201      	add	r2, pc, #4	@ (adr r2, 8008734 <UART_SetConfig+0x300>)
 800872e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008732:	bf00      	nop
 8008734:	08008759 	.word	0x08008759
 8008738:	08008777 	.word	0x08008777
 800873c:	08008761 	.word	0x08008761
 8008740:	08008777 	.word	0x08008777
 8008744:	08008767 	.word	0x08008767
 8008748:	08008777 	.word	0x08008777
 800874c:	08008777 	.word	0x08008777
 8008750:	08008777 	.word	0x08008777
 8008754:	0800876f 	.word	0x0800876f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008758:	f7fe fc0e 	bl	8006f78 <HAL_RCC_GetPCLK1Freq>
 800875c:	61f8      	str	r0, [r7, #28]
        break;
 800875e:	e010      	b.n	8008782 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008760:	4b8f      	ldr	r3, [pc, #572]	@ (80089a0 <UART_SetConfig+0x56c>)
 8008762:	61fb      	str	r3, [r7, #28]
        break;
 8008764:	e00d      	b.n	8008782 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008766:	f7fe fb6f 	bl	8006e48 <HAL_RCC_GetSysClockFreq>
 800876a:	61f8      	str	r0, [r7, #28]
        break;
 800876c:	e009      	b.n	8008782 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800876e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008772:	61fb      	str	r3, [r7, #28]
        break;
 8008774:	e005      	b.n	8008782 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008776:	2300      	movs	r3, #0
 8008778:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008780:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 80fb 	beq.w	8008980 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	4613      	mov	r3, r2
 8008790:	005b      	lsls	r3, r3, #1
 8008792:	4413      	add	r3, r2
 8008794:	69fa      	ldr	r2, [r7, #28]
 8008796:	429a      	cmp	r2, r3
 8008798:	d305      	bcc.n	80087a6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80087a0:	69fa      	ldr	r2, [r7, #28]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d903      	bls.n	80087ae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80087ac:	e0e8      	b.n	8008980 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	2200      	movs	r2, #0
 80087b2:	461c      	mov	r4, r3
 80087b4:	4615      	mov	r5, r2
 80087b6:	f04f 0200 	mov.w	r2, #0
 80087ba:	f04f 0300 	mov.w	r3, #0
 80087be:	022b      	lsls	r3, r5, #8
 80087c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80087c4:	0222      	lsls	r2, r4, #8
 80087c6:	68f9      	ldr	r1, [r7, #12]
 80087c8:	6849      	ldr	r1, [r1, #4]
 80087ca:	0849      	lsrs	r1, r1, #1
 80087cc:	2000      	movs	r0, #0
 80087ce:	4688      	mov	r8, r1
 80087d0:	4681      	mov	r9, r0
 80087d2:	eb12 0a08 	adds.w	sl, r2, r8
 80087d6:	eb43 0b09 	adc.w	fp, r3, r9
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	603b      	str	r3, [r7, #0]
 80087e2:	607a      	str	r2, [r7, #4]
 80087e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087e8:	4650      	mov	r0, sl
 80087ea:	4659      	mov	r1, fp
 80087ec:	f7f8 fa4c 	bl	8000c88 <__aeabi_uldivmod>
 80087f0:	4602      	mov	r2, r0
 80087f2:	460b      	mov	r3, r1
 80087f4:	4613      	mov	r3, r2
 80087f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087fe:	d308      	bcc.n	8008812 <UART_SetConfig+0x3de>
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008806:	d204      	bcs.n	8008812 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	60da      	str	r2, [r3, #12]
 8008810:	e0b6      	b.n	8008980 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008818:	e0b2      	b.n	8008980 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008822:	d15e      	bne.n	80088e2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008824:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008828:	2b08      	cmp	r3, #8
 800882a:	d828      	bhi.n	800887e <UART_SetConfig+0x44a>
 800882c:	a201      	add	r2, pc, #4	@ (adr r2, 8008834 <UART_SetConfig+0x400>)
 800882e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008832:	bf00      	nop
 8008834:	08008859 	.word	0x08008859
 8008838:	08008861 	.word	0x08008861
 800883c:	08008869 	.word	0x08008869
 8008840:	0800887f 	.word	0x0800887f
 8008844:	0800886f 	.word	0x0800886f
 8008848:	0800887f 	.word	0x0800887f
 800884c:	0800887f 	.word	0x0800887f
 8008850:	0800887f 	.word	0x0800887f
 8008854:	08008877 	.word	0x08008877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008858:	f7fe fb8e 	bl	8006f78 <HAL_RCC_GetPCLK1Freq>
 800885c:	61f8      	str	r0, [r7, #28]
        break;
 800885e:	e014      	b.n	800888a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008860:	f7fe fba0 	bl	8006fa4 <HAL_RCC_GetPCLK2Freq>
 8008864:	61f8      	str	r0, [r7, #28]
        break;
 8008866:	e010      	b.n	800888a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008868:	4b4d      	ldr	r3, [pc, #308]	@ (80089a0 <UART_SetConfig+0x56c>)
 800886a:	61fb      	str	r3, [r7, #28]
        break;
 800886c:	e00d      	b.n	800888a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800886e:	f7fe faeb 	bl	8006e48 <HAL_RCC_GetSysClockFreq>
 8008872:	61f8      	str	r0, [r7, #28]
        break;
 8008874:	e009      	b.n	800888a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008876:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800887a:	61fb      	str	r3, [r7, #28]
        break;
 800887c:	e005      	b.n	800888a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800887e:	2300      	movs	r3, #0
 8008880:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008888:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d077      	beq.n	8008980 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	005a      	lsls	r2, r3, #1
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	085b      	lsrs	r3, r3, #1
 800889a:	441a      	add	r2, r3
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	2b0f      	cmp	r3, #15
 80088aa:	d916      	bls.n	80088da <UART_SetConfig+0x4a6>
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088b2:	d212      	bcs.n	80088da <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	f023 030f 	bic.w	r3, r3, #15
 80088bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	085b      	lsrs	r3, r3, #1
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	f003 0307 	and.w	r3, r3, #7
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	8afb      	ldrh	r3, [r7, #22]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	8afa      	ldrh	r2, [r7, #22]
 80088d6:	60da      	str	r2, [r3, #12]
 80088d8:	e052      	b.n	8008980 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80088e0:	e04e      	b.n	8008980 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80088e6:	2b08      	cmp	r3, #8
 80088e8:	d827      	bhi.n	800893a <UART_SetConfig+0x506>
 80088ea:	a201      	add	r2, pc, #4	@ (adr r2, 80088f0 <UART_SetConfig+0x4bc>)
 80088ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f0:	08008915 	.word	0x08008915
 80088f4:	0800891d 	.word	0x0800891d
 80088f8:	08008925 	.word	0x08008925
 80088fc:	0800893b 	.word	0x0800893b
 8008900:	0800892b 	.word	0x0800892b
 8008904:	0800893b 	.word	0x0800893b
 8008908:	0800893b 	.word	0x0800893b
 800890c:	0800893b 	.word	0x0800893b
 8008910:	08008933 	.word	0x08008933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008914:	f7fe fb30 	bl	8006f78 <HAL_RCC_GetPCLK1Freq>
 8008918:	61f8      	str	r0, [r7, #28]
        break;
 800891a:	e014      	b.n	8008946 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800891c:	f7fe fb42 	bl	8006fa4 <HAL_RCC_GetPCLK2Freq>
 8008920:	61f8      	str	r0, [r7, #28]
        break;
 8008922:	e010      	b.n	8008946 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008924:	4b1e      	ldr	r3, [pc, #120]	@ (80089a0 <UART_SetConfig+0x56c>)
 8008926:	61fb      	str	r3, [r7, #28]
        break;
 8008928:	e00d      	b.n	8008946 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800892a:	f7fe fa8d 	bl	8006e48 <HAL_RCC_GetSysClockFreq>
 800892e:	61f8      	str	r0, [r7, #28]
        break;
 8008930:	e009      	b.n	8008946 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008936:	61fb      	str	r3, [r7, #28]
        break;
 8008938:	e005      	b.n	8008946 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800893a:	2300      	movs	r3, #0
 800893c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008944:	bf00      	nop
    }

    if (pclk != 0U)
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d019      	beq.n	8008980 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	085a      	lsrs	r2, r3, #1
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	441a      	add	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	fbb2 f3f3 	udiv	r3, r2, r3
 800895e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	2b0f      	cmp	r3, #15
 8008964:	d909      	bls.n	800897a <UART_SetConfig+0x546>
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800896c:	d205      	bcs.n	800897a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	b29a      	uxth	r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	60da      	str	r2, [r3, #12]
 8008978:	e002      	b.n	8008980 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800898c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008990:	4618      	mov	r0, r3
 8008992:	3728      	adds	r7, #40	@ 0x28
 8008994:	46bd      	mov	sp, r7
 8008996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800899a:	bf00      	nop
 800899c:	40008000 	.word	0x40008000
 80089a0:	00f42400 	.word	0x00f42400

080089a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b0:	f003 0308 	and.w	r3, r3, #8
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00a      	beq.n	80089ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	430a      	orrs	r2, r1
 80089cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00a      	beq.n	80089f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	430a      	orrs	r2, r1
 80089ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f4:	f003 0302 	and.w	r3, r3, #2
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00a      	beq.n	8008a12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a16:	f003 0304 	and.w	r3, r3, #4
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00a      	beq.n	8008a34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a38:	f003 0310 	and.w	r3, r3, #16
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00a      	beq.n	8008a56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	430a      	orrs	r2, r1
 8008a54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a5a:	f003 0320 	and.w	r3, r3, #32
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00a      	beq.n	8008a78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	430a      	orrs	r2, r1
 8008a76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d01a      	beq.n	8008aba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	430a      	orrs	r2, r1
 8008a98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008aa2:	d10a      	bne.n	8008aba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00a      	beq.n	8008adc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	430a      	orrs	r2, r1
 8008ada:	605a      	str	r2, [r3, #4]
  }
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b098      	sub	sp, #96	@ 0x60
 8008aec:	af02      	add	r7, sp, #8
 8008aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008af8:	f7fa fb72 	bl	80031e0 <HAL_GetTick>
 8008afc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 0308 	and.w	r3, r3, #8
 8008b08:	2b08      	cmp	r3, #8
 8008b0a:	d12e      	bne.n	8008b6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b14:	2200      	movs	r2, #0
 8008b16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f88c 	bl	8008c38 <UART_WaitOnFlagUntilTimeout>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d021      	beq.n	8008b6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2e:	e853 3f00 	ldrex	r3, [r3]
 8008b32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	461a      	mov	r2, r3
 8008b42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b4c:	e841 2300 	strex	r3, r2, [r1]
 8008b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1e6      	bne.n	8008b26 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e062      	b.n	8008c30 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 0304 	and.w	r3, r3, #4
 8008b74:	2b04      	cmp	r3, #4
 8008b76:	d149      	bne.n	8008c0c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b80:	2200      	movs	r2, #0
 8008b82:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f856 	bl	8008c38 <UART_WaitOnFlagUntilTimeout>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d03c      	beq.n	8008c0c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9a:	e853 3f00 	ldrex	r3, [r3]
 8008b9e:	623b      	str	r3, [r7, #32]
   return(result);
 8008ba0:	6a3b      	ldr	r3, [r7, #32]
 8008ba2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	461a      	mov	r2, r3
 8008bae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bb8:	e841 2300 	strex	r3, r2, [r1]
 8008bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1e6      	bne.n	8008b92 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3308      	adds	r3, #8
 8008bca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	e853 3f00 	ldrex	r3, [r3]
 8008bd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f023 0301 	bic.w	r3, r3, #1
 8008bda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3308      	adds	r3, #8
 8008be2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008be4:	61fa      	str	r2, [r7, #28]
 8008be6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be8:	69b9      	ldr	r1, [r7, #24]
 8008bea:	69fa      	ldr	r2, [r7, #28]
 8008bec:	e841 2300 	strex	r3, r2, [r1]
 8008bf0:	617b      	str	r3, [r7, #20]
   return(result);
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1e5      	bne.n	8008bc4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2220      	movs	r2, #32
 8008bfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e011      	b.n	8008c30 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2220      	movs	r2, #32
 8008c16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3758      	adds	r7, #88	@ 0x58
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	603b      	str	r3, [r7, #0]
 8008c44:	4613      	mov	r3, r2
 8008c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c48:	e04f      	b.n	8008cea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c50:	d04b      	beq.n	8008cea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c52:	f7fa fac5 	bl	80031e0 <HAL_GetTick>
 8008c56:	4602      	mov	r2, r0
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	69ba      	ldr	r2, [r7, #24]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d302      	bcc.n	8008c68 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d101      	bne.n	8008c6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e04e      	b.n	8008d0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 0304 	and.w	r3, r3, #4
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d037      	beq.n	8008cea <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	2b80      	cmp	r3, #128	@ 0x80
 8008c7e:	d034      	beq.n	8008cea <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	2b40      	cmp	r3, #64	@ 0x40
 8008c84:	d031      	beq.n	8008cea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	69db      	ldr	r3, [r3, #28]
 8008c8c:	f003 0308 	and.w	r3, r3, #8
 8008c90:	2b08      	cmp	r3, #8
 8008c92:	d110      	bne.n	8008cb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2208      	movs	r2, #8
 8008c9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f000 f838 	bl	8008d12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2208      	movs	r2, #8
 8008ca6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e029      	b.n	8008d0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	69db      	ldr	r3, [r3, #28]
 8008cbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cc4:	d111      	bne.n	8008cea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008cce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f000 f81e 	bl	8008d12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2220      	movs	r2, #32
 8008cda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e00f      	b.n	8008d0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	69da      	ldr	r2, [r3, #28]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	bf0c      	ite	eq
 8008cfa:	2301      	moveq	r3, #1
 8008cfc:	2300      	movne	r3, #0
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	461a      	mov	r2, r3
 8008d02:	79fb      	ldrb	r3, [r7, #7]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d0a0      	beq.n	8008c4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b095      	sub	sp, #84	@ 0x54
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d22:	e853 3f00 	ldrex	r3, [r3]
 8008d26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	461a      	mov	r2, r3
 8008d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d40:	e841 2300 	strex	r3, r2, [r1]
 8008d44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1e6      	bne.n	8008d1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3308      	adds	r3, #8
 8008d52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	e853 3f00 	ldrex	r3, [r3]
 8008d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	f023 0301 	bic.w	r3, r3, #1
 8008d62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3308      	adds	r3, #8
 8008d6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d74:	e841 2300 	strex	r3, r2, [r1]
 8008d78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e5      	bne.n	8008d4c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d118      	bne.n	8008dba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	e853 3f00 	ldrex	r3, [r3]
 8008d94:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	f023 0310 	bic.w	r3, r3, #16
 8008d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	461a      	mov	r2, r3
 8008da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008da6:	61bb      	str	r3, [r7, #24]
 8008da8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008daa:	6979      	ldr	r1, [r7, #20]
 8008dac:	69ba      	ldr	r2, [r7, #24]
 8008dae:	e841 2300 	strex	r3, r2, [r1]
 8008db2:	613b      	str	r3, [r7, #16]
   return(result);
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1e6      	bne.n	8008d88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008dce:	bf00      	nop
 8008dd0:	3754      	adds	r7, #84	@ 0x54
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr

08008dda <__cvt>:
 8008dda:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dde:	ec57 6b10 	vmov	r6, r7, d0
 8008de2:	2f00      	cmp	r7, #0
 8008de4:	460c      	mov	r4, r1
 8008de6:	4619      	mov	r1, r3
 8008de8:	463b      	mov	r3, r7
 8008dea:	bfbb      	ittet	lt
 8008dec:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008df0:	461f      	movlt	r7, r3
 8008df2:	2300      	movge	r3, #0
 8008df4:	232d      	movlt	r3, #45	@ 0x2d
 8008df6:	700b      	strb	r3, [r1, #0]
 8008df8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008dfa:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008dfe:	4691      	mov	r9, r2
 8008e00:	f023 0820 	bic.w	r8, r3, #32
 8008e04:	bfbc      	itt	lt
 8008e06:	4632      	movlt	r2, r6
 8008e08:	4616      	movlt	r6, r2
 8008e0a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e0e:	d005      	beq.n	8008e1c <__cvt+0x42>
 8008e10:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008e14:	d100      	bne.n	8008e18 <__cvt+0x3e>
 8008e16:	3401      	adds	r4, #1
 8008e18:	2102      	movs	r1, #2
 8008e1a:	e000      	b.n	8008e1e <__cvt+0x44>
 8008e1c:	2103      	movs	r1, #3
 8008e1e:	ab03      	add	r3, sp, #12
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	ab02      	add	r3, sp, #8
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	ec47 6b10 	vmov	d0, r6, r7
 8008e2a:	4653      	mov	r3, sl
 8008e2c:	4622      	mov	r2, r4
 8008e2e:	f001 ff3f 	bl	800acb0 <_dtoa_r>
 8008e32:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008e36:	4605      	mov	r5, r0
 8008e38:	d119      	bne.n	8008e6e <__cvt+0x94>
 8008e3a:	f019 0f01 	tst.w	r9, #1
 8008e3e:	d00e      	beq.n	8008e5e <__cvt+0x84>
 8008e40:	eb00 0904 	add.w	r9, r0, r4
 8008e44:	2200      	movs	r2, #0
 8008e46:	2300      	movs	r3, #0
 8008e48:	4630      	mov	r0, r6
 8008e4a:	4639      	mov	r1, r7
 8008e4c:	f7f7 fe3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e50:	b108      	cbz	r0, 8008e56 <__cvt+0x7c>
 8008e52:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e56:	2230      	movs	r2, #48	@ 0x30
 8008e58:	9b03      	ldr	r3, [sp, #12]
 8008e5a:	454b      	cmp	r3, r9
 8008e5c:	d31e      	bcc.n	8008e9c <__cvt+0xc2>
 8008e5e:	9b03      	ldr	r3, [sp, #12]
 8008e60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e62:	1b5b      	subs	r3, r3, r5
 8008e64:	4628      	mov	r0, r5
 8008e66:	6013      	str	r3, [r2, #0]
 8008e68:	b004      	add	sp, #16
 8008e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e6e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e72:	eb00 0904 	add.w	r9, r0, r4
 8008e76:	d1e5      	bne.n	8008e44 <__cvt+0x6a>
 8008e78:	7803      	ldrb	r3, [r0, #0]
 8008e7a:	2b30      	cmp	r3, #48	@ 0x30
 8008e7c:	d10a      	bne.n	8008e94 <__cvt+0xba>
 8008e7e:	2200      	movs	r2, #0
 8008e80:	2300      	movs	r3, #0
 8008e82:	4630      	mov	r0, r6
 8008e84:	4639      	mov	r1, r7
 8008e86:	f7f7 fe1f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e8a:	b918      	cbnz	r0, 8008e94 <__cvt+0xba>
 8008e8c:	f1c4 0401 	rsb	r4, r4, #1
 8008e90:	f8ca 4000 	str.w	r4, [sl]
 8008e94:	f8da 3000 	ldr.w	r3, [sl]
 8008e98:	4499      	add	r9, r3
 8008e9a:	e7d3      	b.n	8008e44 <__cvt+0x6a>
 8008e9c:	1c59      	adds	r1, r3, #1
 8008e9e:	9103      	str	r1, [sp, #12]
 8008ea0:	701a      	strb	r2, [r3, #0]
 8008ea2:	e7d9      	b.n	8008e58 <__cvt+0x7e>

08008ea4 <__exponent>:
 8008ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ea6:	2900      	cmp	r1, #0
 8008ea8:	bfba      	itte	lt
 8008eaa:	4249      	neglt	r1, r1
 8008eac:	232d      	movlt	r3, #45	@ 0x2d
 8008eae:	232b      	movge	r3, #43	@ 0x2b
 8008eb0:	2909      	cmp	r1, #9
 8008eb2:	7002      	strb	r2, [r0, #0]
 8008eb4:	7043      	strb	r3, [r0, #1]
 8008eb6:	dd29      	ble.n	8008f0c <__exponent+0x68>
 8008eb8:	f10d 0307 	add.w	r3, sp, #7
 8008ebc:	461d      	mov	r5, r3
 8008ebe:	270a      	movs	r7, #10
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	fbb1 f6f7 	udiv	r6, r1, r7
 8008ec6:	fb07 1416 	mls	r4, r7, r6, r1
 8008eca:	3430      	adds	r4, #48	@ 0x30
 8008ecc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008ed0:	460c      	mov	r4, r1
 8008ed2:	2c63      	cmp	r4, #99	@ 0x63
 8008ed4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008ed8:	4631      	mov	r1, r6
 8008eda:	dcf1      	bgt.n	8008ec0 <__exponent+0x1c>
 8008edc:	3130      	adds	r1, #48	@ 0x30
 8008ede:	1e94      	subs	r4, r2, #2
 8008ee0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008ee4:	1c41      	adds	r1, r0, #1
 8008ee6:	4623      	mov	r3, r4
 8008ee8:	42ab      	cmp	r3, r5
 8008eea:	d30a      	bcc.n	8008f02 <__exponent+0x5e>
 8008eec:	f10d 0309 	add.w	r3, sp, #9
 8008ef0:	1a9b      	subs	r3, r3, r2
 8008ef2:	42ac      	cmp	r4, r5
 8008ef4:	bf88      	it	hi
 8008ef6:	2300      	movhi	r3, #0
 8008ef8:	3302      	adds	r3, #2
 8008efa:	4403      	add	r3, r0
 8008efc:	1a18      	subs	r0, r3, r0
 8008efe:	b003      	add	sp, #12
 8008f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f02:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008f06:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008f0a:	e7ed      	b.n	8008ee8 <__exponent+0x44>
 8008f0c:	2330      	movs	r3, #48	@ 0x30
 8008f0e:	3130      	adds	r1, #48	@ 0x30
 8008f10:	7083      	strb	r3, [r0, #2]
 8008f12:	70c1      	strb	r1, [r0, #3]
 8008f14:	1d03      	adds	r3, r0, #4
 8008f16:	e7f1      	b.n	8008efc <__exponent+0x58>

08008f18 <_printf_float>:
 8008f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	b08d      	sub	sp, #52	@ 0x34
 8008f1e:	460c      	mov	r4, r1
 8008f20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008f24:	4616      	mov	r6, r2
 8008f26:	461f      	mov	r7, r3
 8008f28:	4605      	mov	r5, r0
 8008f2a:	f001 fde7 	bl	800aafc <_localeconv_r>
 8008f2e:	6803      	ldr	r3, [r0, #0]
 8008f30:	9304      	str	r3, [sp, #16]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7f7 f99c 	bl	8000270 <strlen>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8008f40:	9005      	str	r0, [sp, #20]
 8008f42:	3307      	adds	r3, #7
 8008f44:	f023 0307 	bic.w	r3, r3, #7
 8008f48:	f103 0208 	add.w	r2, r3, #8
 8008f4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008f50:	f8d4 b000 	ldr.w	fp, [r4]
 8008f54:	f8c8 2000 	str.w	r2, [r8]
 8008f58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f5c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008f60:	9307      	str	r3, [sp, #28]
 8008f62:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008f6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f6e:	4b9c      	ldr	r3, [pc, #624]	@ (80091e0 <_printf_float+0x2c8>)
 8008f70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f74:	f7f7 fdda 	bl	8000b2c <__aeabi_dcmpun>
 8008f78:	bb70      	cbnz	r0, 8008fd8 <_printf_float+0xc0>
 8008f7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f7e:	4b98      	ldr	r3, [pc, #608]	@ (80091e0 <_printf_float+0x2c8>)
 8008f80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f84:	f7f7 fdb4 	bl	8000af0 <__aeabi_dcmple>
 8008f88:	bb30      	cbnz	r0, 8008fd8 <_printf_float+0xc0>
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	4640      	mov	r0, r8
 8008f90:	4649      	mov	r1, r9
 8008f92:	f7f7 fda3 	bl	8000adc <__aeabi_dcmplt>
 8008f96:	b110      	cbz	r0, 8008f9e <_printf_float+0x86>
 8008f98:	232d      	movs	r3, #45	@ 0x2d
 8008f9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f9e:	4a91      	ldr	r2, [pc, #580]	@ (80091e4 <_printf_float+0x2cc>)
 8008fa0:	4b91      	ldr	r3, [pc, #580]	@ (80091e8 <_printf_float+0x2d0>)
 8008fa2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008fa6:	bf94      	ite	ls
 8008fa8:	4690      	movls	r8, r2
 8008faa:	4698      	movhi	r8, r3
 8008fac:	2303      	movs	r3, #3
 8008fae:	6123      	str	r3, [r4, #16]
 8008fb0:	f02b 0304 	bic.w	r3, fp, #4
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	f04f 0900 	mov.w	r9, #0
 8008fba:	9700      	str	r7, [sp, #0]
 8008fbc:	4633      	mov	r3, r6
 8008fbe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f000 f9d2 	bl	800936c <_printf_common>
 8008fc8:	3001      	adds	r0, #1
 8008fca:	f040 808d 	bne.w	80090e8 <_printf_float+0x1d0>
 8008fce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fd2:	b00d      	add	sp, #52	@ 0x34
 8008fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd8:	4642      	mov	r2, r8
 8008fda:	464b      	mov	r3, r9
 8008fdc:	4640      	mov	r0, r8
 8008fde:	4649      	mov	r1, r9
 8008fe0:	f7f7 fda4 	bl	8000b2c <__aeabi_dcmpun>
 8008fe4:	b140      	cbz	r0, 8008ff8 <_printf_float+0xe0>
 8008fe6:	464b      	mov	r3, r9
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	bfbc      	itt	lt
 8008fec:	232d      	movlt	r3, #45	@ 0x2d
 8008fee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008ff2:	4a7e      	ldr	r2, [pc, #504]	@ (80091ec <_printf_float+0x2d4>)
 8008ff4:	4b7e      	ldr	r3, [pc, #504]	@ (80091f0 <_printf_float+0x2d8>)
 8008ff6:	e7d4      	b.n	8008fa2 <_printf_float+0x8a>
 8008ff8:	6863      	ldr	r3, [r4, #4]
 8008ffa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008ffe:	9206      	str	r2, [sp, #24]
 8009000:	1c5a      	adds	r2, r3, #1
 8009002:	d13b      	bne.n	800907c <_printf_float+0x164>
 8009004:	2306      	movs	r3, #6
 8009006:	6063      	str	r3, [r4, #4]
 8009008:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800900c:	2300      	movs	r3, #0
 800900e:	6022      	str	r2, [r4, #0]
 8009010:	9303      	str	r3, [sp, #12]
 8009012:	ab0a      	add	r3, sp, #40	@ 0x28
 8009014:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009018:	ab09      	add	r3, sp, #36	@ 0x24
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	6861      	ldr	r1, [r4, #4]
 800901e:	ec49 8b10 	vmov	d0, r8, r9
 8009022:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009026:	4628      	mov	r0, r5
 8009028:	f7ff fed7 	bl	8008dda <__cvt>
 800902c:	9b06      	ldr	r3, [sp, #24]
 800902e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009030:	2b47      	cmp	r3, #71	@ 0x47
 8009032:	4680      	mov	r8, r0
 8009034:	d129      	bne.n	800908a <_printf_float+0x172>
 8009036:	1cc8      	adds	r0, r1, #3
 8009038:	db02      	blt.n	8009040 <_printf_float+0x128>
 800903a:	6863      	ldr	r3, [r4, #4]
 800903c:	4299      	cmp	r1, r3
 800903e:	dd41      	ble.n	80090c4 <_printf_float+0x1ac>
 8009040:	f1aa 0a02 	sub.w	sl, sl, #2
 8009044:	fa5f fa8a 	uxtb.w	sl, sl
 8009048:	3901      	subs	r1, #1
 800904a:	4652      	mov	r2, sl
 800904c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009050:	9109      	str	r1, [sp, #36]	@ 0x24
 8009052:	f7ff ff27 	bl	8008ea4 <__exponent>
 8009056:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009058:	1813      	adds	r3, r2, r0
 800905a:	2a01      	cmp	r2, #1
 800905c:	4681      	mov	r9, r0
 800905e:	6123      	str	r3, [r4, #16]
 8009060:	dc02      	bgt.n	8009068 <_printf_float+0x150>
 8009062:	6822      	ldr	r2, [r4, #0]
 8009064:	07d2      	lsls	r2, r2, #31
 8009066:	d501      	bpl.n	800906c <_printf_float+0x154>
 8009068:	3301      	adds	r3, #1
 800906a:	6123      	str	r3, [r4, #16]
 800906c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009070:	2b00      	cmp	r3, #0
 8009072:	d0a2      	beq.n	8008fba <_printf_float+0xa2>
 8009074:	232d      	movs	r3, #45	@ 0x2d
 8009076:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800907a:	e79e      	b.n	8008fba <_printf_float+0xa2>
 800907c:	9a06      	ldr	r2, [sp, #24]
 800907e:	2a47      	cmp	r2, #71	@ 0x47
 8009080:	d1c2      	bne.n	8009008 <_printf_float+0xf0>
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1c0      	bne.n	8009008 <_printf_float+0xf0>
 8009086:	2301      	movs	r3, #1
 8009088:	e7bd      	b.n	8009006 <_printf_float+0xee>
 800908a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800908e:	d9db      	bls.n	8009048 <_printf_float+0x130>
 8009090:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009094:	d118      	bne.n	80090c8 <_printf_float+0x1b0>
 8009096:	2900      	cmp	r1, #0
 8009098:	6863      	ldr	r3, [r4, #4]
 800909a:	dd0b      	ble.n	80090b4 <_printf_float+0x19c>
 800909c:	6121      	str	r1, [r4, #16]
 800909e:	b913      	cbnz	r3, 80090a6 <_printf_float+0x18e>
 80090a0:	6822      	ldr	r2, [r4, #0]
 80090a2:	07d0      	lsls	r0, r2, #31
 80090a4:	d502      	bpl.n	80090ac <_printf_float+0x194>
 80090a6:	3301      	adds	r3, #1
 80090a8:	440b      	add	r3, r1
 80090aa:	6123      	str	r3, [r4, #16]
 80090ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 80090ae:	f04f 0900 	mov.w	r9, #0
 80090b2:	e7db      	b.n	800906c <_printf_float+0x154>
 80090b4:	b913      	cbnz	r3, 80090bc <_printf_float+0x1a4>
 80090b6:	6822      	ldr	r2, [r4, #0]
 80090b8:	07d2      	lsls	r2, r2, #31
 80090ba:	d501      	bpl.n	80090c0 <_printf_float+0x1a8>
 80090bc:	3302      	adds	r3, #2
 80090be:	e7f4      	b.n	80090aa <_printf_float+0x192>
 80090c0:	2301      	movs	r3, #1
 80090c2:	e7f2      	b.n	80090aa <_printf_float+0x192>
 80090c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80090c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090ca:	4299      	cmp	r1, r3
 80090cc:	db05      	blt.n	80090da <_printf_float+0x1c2>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	6121      	str	r1, [r4, #16]
 80090d2:	07d8      	lsls	r0, r3, #31
 80090d4:	d5ea      	bpl.n	80090ac <_printf_float+0x194>
 80090d6:	1c4b      	adds	r3, r1, #1
 80090d8:	e7e7      	b.n	80090aa <_printf_float+0x192>
 80090da:	2900      	cmp	r1, #0
 80090dc:	bfd4      	ite	le
 80090de:	f1c1 0202 	rsble	r2, r1, #2
 80090e2:	2201      	movgt	r2, #1
 80090e4:	4413      	add	r3, r2
 80090e6:	e7e0      	b.n	80090aa <_printf_float+0x192>
 80090e8:	6823      	ldr	r3, [r4, #0]
 80090ea:	055a      	lsls	r2, r3, #21
 80090ec:	d407      	bmi.n	80090fe <_printf_float+0x1e6>
 80090ee:	6923      	ldr	r3, [r4, #16]
 80090f0:	4642      	mov	r2, r8
 80090f2:	4631      	mov	r1, r6
 80090f4:	4628      	mov	r0, r5
 80090f6:	47b8      	blx	r7
 80090f8:	3001      	adds	r0, #1
 80090fa:	d12b      	bne.n	8009154 <_printf_float+0x23c>
 80090fc:	e767      	b.n	8008fce <_printf_float+0xb6>
 80090fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009102:	f240 80dd 	bls.w	80092c0 <_printf_float+0x3a8>
 8009106:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800910a:	2200      	movs	r2, #0
 800910c:	2300      	movs	r3, #0
 800910e:	f7f7 fcdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009112:	2800      	cmp	r0, #0
 8009114:	d033      	beq.n	800917e <_printf_float+0x266>
 8009116:	4a37      	ldr	r2, [pc, #220]	@ (80091f4 <_printf_float+0x2dc>)
 8009118:	2301      	movs	r3, #1
 800911a:	4631      	mov	r1, r6
 800911c:	4628      	mov	r0, r5
 800911e:	47b8      	blx	r7
 8009120:	3001      	adds	r0, #1
 8009122:	f43f af54 	beq.w	8008fce <_printf_float+0xb6>
 8009126:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800912a:	4543      	cmp	r3, r8
 800912c:	db02      	blt.n	8009134 <_printf_float+0x21c>
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	07d8      	lsls	r0, r3, #31
 8009132:	d50f      	bpl.n	8009154 <_printf_float+0x23c>
 8009134:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009138:	4631      	mov	r1, r6
 800913a:	4628      	mov	r0, r5
 800913c:	47b8      	blx	r7
 800913e:	3001      	adds	r0, #1
 8009140:	f43f af45 	beq.w	8008fce <_printf_float+0xb6>
 8009144:	f04f 0900 	mov.w	r9, #0
 8009148:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800914c:	f104 0a1a 	add.w	sl, r4, #26
 8009150:	45c8      	cmp	r8, r9
 8009152:	dc09      	bgt.n	8009168 <_printf_float+0x250>
 8009154:	6823      	ldr	r3, [r4, #0]
 8009156:	079b      	lsls	r3, r3, #30
 8009158:	f100 8103 	bmi.w	8009362 <_printf_float+0x44a>
 800915c:	68e0      	ldr	r0, [r4, #12]
 800915e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009160:	4298      	cmp	r0, r3
 8009162:	bfb8      	it	lt
 8009164:	4618      	movlt	r0, r3
 8009166:	e734      	b.n	8008fd2 <_printf_float+0xba>
 8009168:	2301      	movs	r3, #1
 800916a:	4652      	mov	r2, sl
 800916c:	4631      	mov	r1, r6
 800916e:	4628      	mov	r0, r5
 8009170:	47b8      	blx	r7
 8009172:	3001      	adds	r0, #1
 8009174:	f43f af2b 	beq.w	8008fce <_printf_float+0xb6>
 8009178:	f109 0901 	add.w	r9, r9, #1
 800917c:	e7e8      	b.n	8009150 <_printf_float+0x238>
 800917e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009180:	2b00      	cmp	r3, #0
 8009182:	dc39      	bgt.n	80091f8 <_printf_float+0x2e0>
 8009184:	4a1b      	ldr	r2, [pc, #108]	@ (80091f4 <_printf_float+0x2dc>)
 8009186:	2301      	movs	r3, #1
 8009188:	4631      	mov	r1, r6
 800918a:	4628      	mov	r0, r5
 800918c:	47b8      	blx	r7
 800918e:	3001      	adds	r0, #1
 8009190:	f43f af1d 	beq.w	8008fce <_printf_float+0xb6>
 8009194:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009198:	ea59 0303 	orrs.w	r3, r9, r3
 800919c:	d102      	bne.n	80091a4 <_printf_float+0x28c>
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	07d9      	lsls	r1, r3, #31
 80091a2:	d5d7      	bpl.n	8009154 <_printf_float+0x23c>
 80091a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091a8:	4631      	mov	r1, r6
 80091aa:	4628      	mov	r0, r5
 80091ac:	47b8      	blx	r7
 80091ae:	3001      	adds	r0, #1
 80091b0:	f43f af0d 	beq.w	8008fce <_printf_float+0xb6>
 80091b4:	f04f 0a00 	mov.w	sl, #0
 80091b8:	f104 0b1a 	add.w	fp, r4, #26
 80091bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091be:	425b      	negs	r3, r3
 80091c0:	4553      	cmp	r3, sl
 80091c2:	dc01      	bgt.n	80091c8 <_printf_float+0x2b0>
 80091c4:	464b      	mov	r3, r9
 80091c6:	e793      	b.n	80090f0 <_printf_float+0x1d8>
 80091c8:	2301      	movs	r3, #1
 80091ca:	465a      	mov	r2, fp
 80091cc:	4631      	mov	r1, r6
 80091ce:	4628      	mov	r0, r5
 80091d0:	47b8      	blx	r7
 80091d2:	3001      	adds	r0, #1
 80091d4:	f43f aefb 	beq.w	8008fce <_printf_float+0xb6>
 80091d8:	f10a 0a01 	add.w	sl, sl, #1
 80091dc:	e7ee      	b.n	80091bc <_printf_float+0x2a4>
 80091de:	bf00      	nop
 80091e0:	7fefffff 	.word	0x7fefffff
 80091e4:	0800d840 	.word	0x0800d840
 80091e8:	0800d844 	.word	0x0800d844
 80091ec:	0800d848 	.word	0x0800d848
 80091f0:	0800d84c 	.word	0x0800d84c
 80091f4:	0800d850 	.word	0x0800d850
 80091f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80091fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80091fe:	4553      	cmp	r3, sl
 8009200:	bfa8      	it	ge
 8009202:	4653      	movge	r3, sl
 8009204:	2b00      	cmp	r3, #0
 8009206:	4699      	mov	r9, r3
 8009208:	dc36      	bgt.n	8009278 <_printf_float+0x360>
 800920a:	f04f 0b00 	mov.w	fp, #0
 800920e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009212:	f104 021a 	add.w	r2, r4, #26
 8009216:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009218:	9306      	str	r3, [sp, #24]
 800921a:	eba3 0309 	sub.w	r3, r3, r9
 800921e:	455b      	cmp	r3, fp
 8009220:	dc31      	bgt.n	8009286 <_printf_float+0x36e>
 8009222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009224:	459a      	cmp	sl, r3
 8009226:	dc3a      	bgt.n	800929e <_printf_float+0x386>
 8009228:	6823      	ldr	r3, [r4, #0]
 800922a:	07da      	lsls	r2, r3, #31
 800922c:	d437      	bmi.n	800929e <_printf_float+0x386>
 800922e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009230:	ebaa 0903 	sub.w	r9, sl, r3
 8009234:	9b06      	ldr	r3, [sp, #24]
 8009236:	ebaa 0303 	sub.w	r3, sl, r3
 800923a:	4599      	cmp	r9, r3
 800923c:	bfa8      	it	ge
 800923e:	4699      	movge	r9, r3
 8009240:	f1b9 0f00 	cmp.w	r9, #0
 8009244:	dc33      	bgt.n	80092ae <_printf_float+0x396>
 8009246:	f04f 0800 	mov.w	r8, #0
 800924a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800924e:	f104 0b1a 	add.w	fp, r4, #26
 8009252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009254:	ebaa 0303 	sub.w	r3, sl, r3
 8009258:	eba3 0309 	sub.w	r3, r3, r9
 800925c:	4543      	cmp	r3, r8
 800925e:	f77f af79 	ble.w	8009154 <_printf_float+0x23c>
 8009262:	2301      	movs	r3, #1
 8009264:	465a      	mov	r2, fp
 8009266:	4631      	mov	r1, r6
 8009268:	4628      	mov	r0, r5
 800926a:	47b8      	blx	r7
 800926c:	3001      	adds	r0, #1
 800926e:	f43f aeae 	beq.w	8008fce <_printf_float+0xb6>
 8009272:	f108 0801 	add.w	r8, r8, #1
 8009276:	e7ec      	b.n	8009252 <_printf_float+0x33a>
 8009278:	4642      	mov	r2, r8
 800927a:	4631      	mov	r1, r6
 800927c:	4628      	mov	r0, r5
 800927e:	47b8      	blx	r7
 8009280:	3001      	adds	r0, #1
 8009282:	d1c2      	bne.n	800920a <_printf_float+0x2f2>
 8009284:	e6a3      	b.n	8008fce <_printf_float+0xb6>
 8009286:	2301      	movs	r3, #1
 8009288:	4631      	mov	r1, r6
 800928a:	4628      	mov	r0, r5
 800928c:	9206      	str	r2, [sp, #24]
 800928e:	47b8      	blx	r7
 8009290:	3001      	adds	r0, #1
 8009292:	f43f ae9c 	beq.w	8008fce <_printf_float+0xb6>
 8009296:	9a06      	ldr	r2, [sp, #24]
 8009298:	f10b 0b01 	add.w	fp, fp, #1
 800929c:	e7bb      	b.n	8009216 <_printf_float+0x2fe>
 800929e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092a2:	4631      	mov	r1, r6
 80092a4:	4628      	mov	r0, r5
 80092a6:	47b8      	blx	r7
 80092a8:	3001      	adds	r0, #1
 80092aa:	d1c0      	bne.n	800922e <_printf_float+0x316>
 80092ac:	e68f      	b.n	8008fce <_printf_float+0xb6>
 80092ae:	9a06      	ldr	r2, [sp, #24]
 80092b0:	464b      	mov	r3, r9
 80092b2:	4442      	add	r2, r8
 80092b4:	4631      	mov	r1, r6
 80092b6:	4628      	mov	r0, r5
 80092b8:	47b8      	blx	r7
 80092ba:	3001      	adds	r0, #1
 80092bc:	d1c3      	bne.n	8009246 <_printf_float+0x32e>
 80092be:	e686      	b.n	8008fce <_printf_float+0xb6>
 80092c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80092c4:	f1ba 0f01 	cmp.w	sl, #1
 80092c8:	dc01      	bgt.n	80092ce <_printf_float+0x3b6>
 80092ca:	07db      	lsls	r3, r3, #31
 80092cc:	d536      	bpl.n	800933c <_printf_float+0x424>
 80092ce:	2301      	movs	r3, #1
 80092d0:	4642      	mov	r2, r8
 80092d2:	4631      	mov	r1, r6
 80092d4:	4628      	mov	r0, r5
 80092d6:	47b8      	blx	r7
 80092d8:	3001      	adds	r0, #1
 80092da:	f43f ae78 	beq.w	8008fce <_printf_float+0xb6>
 80092de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092e2:	4631      	mov	r1, r6
 80092e4:	4628      	mov	r0, r5
 80092e6:	47b8      	blx	r7
 80092e8:	3001      	adds	r0, #1
 80092ea:	f43f ae70 	beq.w	8008fce <_printf_float+0xb6>
 80092ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80092f2:	2200      	movs	r2, #0
 80092f4:	2300      	movs	r3, #0
 80092f6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80092fa:	f7f7 fbe5 	bl	8000ac8 <__aeabi_dcmpeq>
 80092fe:	b9c0      	cbnz	r0, 8009332 <_printf_float+0x41a>
 8009300:	4653      	mov	r3, sl
 8009302:	f108 0201 	add.w	r2, r8, #1
 8009306:	4631      	mov	r1, r6
 8009308:	4628      	mov	r0, r5
 800930a:	47b8      	blx	r7
 800930c:	3001      	adds	r0, #1
 800930e:	d10c      	bne.n	800932a <_printf_float+0x412>
 8009310:	e65d      	b.n	8008fce <_printf_float+0xb6>
 8009312:	2301      	movs	r3, #1
 8009314:	465a      	mov	r2, fp
 8009316:	4631      	mov	r1, r6
 8009318:	4628      	mov	r0, r5
 800931a:	47b8      	blx	r7
 800931c:	3001      	adds	r0, #1
 800931e:	f43f ae56 	beq.w	8008fce <_printf_float+0xb6>
 8009322:	f108 0801 	add.w	r8, r8, #1
 8009326:	45d0      	cmp	r8, sl
 8009328:	dbf3      	blt.n	8009312 <_printf_float+0x3fa>
 800932a:	464b      	mov	r3, r9
 800932c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009330:	e6df      	b.n	80090f2 <_printf_float+0x1da>
 8009332:	f04f 0800 	mov.w	r8, #0
 8009336:	f104 0b1a 	add.w	fp, r4, #26
 800933a:	e7f4      	b.n	8009326 <_printf_float+0x40e>
 800933c:	2301      	movs	r3, #1
 800933e:	4642      	mov	r2, r8
 8009340:	e7e1      	b.n	8009306 <_printf_float+0x3ee>
 8009342:	2301      	movs	r3, #1
 8009344:	464a      	mov	r2, r9
 8009346:	4631      	mov	r1, r6
 8009348:	4628      	mov	r0, r5
 800934a:	47b8      	blx	r7
 800934c:	3001      	adds	r0, #1
 800934e:	f43f ae3e 	beq.w	8008fce <_printf_float+0xb6>
 8009352:	f108 0801 	add.w	r8, r8, #1
 8009356:	68e3      	ldr	r3, [r4, #12]
 8009358:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800935a:	1a5b      	subs	r3, r3, r1
 800935c:	4543      	cmp	r3, r8
 800935e:	dcf0      	bgt.n	8009342 <_printf_float+0x42a>
 8009360:	e6fc      	b.n	800915c <_printf_float+0x244>
 8009362:	f04f 0800 	mov.w	r8, #0
 8009366:	f104 0919 	add.w	r9, r4, #25
 800936a:	e7f4      	b.n	8009356 <_printf_float+0x43e>

0800936c <_printf_common>:
 800936c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009370:	4616      	mov	r6, r2
 8009372:	4698      	mov	r8, r3
 8009374:	688a      	ldr	r2, [r1, #8]
 8009376:	690b      	ldr	r3, [r1, #16]
 8009378:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800937c:	4293      	cmp	r3, r2
 800937e:	bfb8      	it	lt
 8009380:	4613      	movlt	r3, r2
 8009382:	6033      	str	r3, [r6, #0]
 8009384:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009388:	4607      	mov	r7, r0
 800938a:	460c      	mov	r4, r1
 800938c:	b10a      	cbz	r2, 8009392 <_printf_common+0x26>
 800938e:	3301      	adds	r3, #1
 8009390:	6033      	str	r3, [r6, #0]
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	0699      	lsls	r1, r3, #26
 8009396:	bf42      	ittt	mi
 8009398:	6833      	ldrmi	r3, [r6, #0]
 800939a:	3302      	addmi	r3, #2
 800939c:	6033      	strmi	r3, [r6, #0]
 800939e:	6825      	ldr	r5, [r4, #0]
 80093a0:	f015 0506 	ands.w	r5, r5, #6
 80093a4:	d106      	bne.n	80093b4 <_printf_common+0x48>
 80093a6:	f104 0a19 	add.w	sl, r4, #25
 80093aa:	68e3      	ldr	r3, [r4, #12]
 80093ac:	6832      	ldr	r2, [r6, #0]
 80093ae:	1a9b      	subs	r3, r3, r2
 80093b0:	42ab      	cmp	r3, r5
 80093b2:	dc26      	bgt.n	8009402 <_printf_common+0x96>
 80093b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80093b8:	6822      	ldr	r2, [r4, #0]
 80093ba:	3b00      	subs	r3, #0
 80093bc:	bf18      	it	ne
 80093be:	2301      	movne	r3, #1
 80093c0:	0692      	lsls	r2, r2, #26
 80093c2:	d42b      	bmi.n	800941c <_printf_common+0xb0>
 80093c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80093c8:	4641      	mov	r1, r8
 80093ca:	4638      	mov	r0, r7
 80093cc:	47c8      	blx	r9
 80093ce:	3001      	adds	r0, #1
 80093d0:	d01e      	beq.n	8009410 <_printf_common+0xa4>
 80093d2:	6823      	ldr	r3, [r4, #0]
 80093d4:	6922      	ldr	r2, [r4, #16]
 80093d6:	f003 0306 	and.w	r3, r3, #6
 80093da:	2b04      	cmp	r3, #4
 80093dc:	bf02      	ittt	eq
 80093de:	68e5      	ldreq	r5, [r4, #12]
 80093e0:	6833      	ldreq	r3, [r6, #0]
 80093e2:	1aed      	subeq	r5, r5, r3
 80093e4:	68a3      	ldr	r3, [r4, #8]
 80093e6:	bf0c      	ite	eq
 80093e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093ec:	2500      	movne	r5, #0
 80093ee:	4293      	cmp	r3, r2
 80093f0:	bfc4      	itt	gt
 80093f2:	1a9b      	subgt	r3, r3, r2
 80093f4:	18ed      	addgt	r5, r5, r3
 80093f6:	2600      	movs	r6, #0
 80093f8:	341a      	adds	r4, #26
 80093fa:	42b5      	cmp	r5, r6
 80093fc:	d11a      	bne.n	8009434 <_printf_common+0xc8>
 80093fe:	2000      	movs	r0, #0
 8009400:	e008      	b.n	8009414 <_printf_common+0xa8>
 8009402:	2301      	movs	r3, #1
 8009404:	4652      	mov	r2, sl
 8009406:	4641      	mov	r1, r8
 8009408:	4638      	mov	r0, r7
 800940a:	47c8      	blx	r9
 800940c:	3001      	adds	r0, #1
 800940e:	d103      	bne.n	8009418 <_printf_common+0xac>
 8009410:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009418:	3501      	adds	r5, #1
 800941a:	e7c6      	b.n	80093aa <_printf_common+0x3e>
 800941c:	18e1      	adds	r1, r4, r3
 800941e:	1c5a      	adds	r2, r3, #1
 8009420:	2030      	movs	r0, #48	@ 0x30
 8009422:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009426:	4422      	add	r2, r4
 8009428:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800942c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009430:	3302      	adds	r3, #2
 8009432:	e7c7      	b.n	80093c4 <_printf_common+0x58>
 8009434:	2301      	movs	r3, #1
 8009436:	4622      	mov	r2, r4
 8009438:	4641      	mov	r1, r8
 800943a:	4638      	mov	r0, r7
 800943c:	47c8      	blx	r9
 800943e:	3001      	adds	r0, #1
 8009440:	d0e6      	beq.n	8009410 <_printf_common+0xa4>
 8009442:	3601      	adds	r6, #1
 8009444:	e7d9      	b.n	80093fa <_printf_common+0x8e>
	...

08009448 <_printf_i>:
 8009448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800944c:	7e0f      	ldrb	r7, [r1, #24]
 800944e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009450:	2f78      	cmp	r7, #120	@ 0x78
 8009452:	4691      	mov	r9, r2
 8009454:	4680      	mov	r8, r0
 8009456:	460c      	mov	r4, r1
 8009458:	469a      	mov	sl, r3
 800945a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800945e:	d807      	bhi.n	8009470 <_printf_i+0x28>
 8009460:	2f62      	cmp	r7, #98	@ 0x62
 8009462:	d80a      	bhi.n	800947a <_printf_i+0x32>
 8009464:	2f00      	cmp	r7, #0
 8009466:	f000 80d2 	beq.w	800960e <_printf_i+0x1c6>
 800946a:	2f58      	cmp	r7, #88	@ 0x58
 800946c:	f000 80b9 	beq.w	80095e2 <_printf_i+0x19a>
 8009470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009474:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009478:	e03a      	b.n	80094f0 <_printf_i+0xa8>
 800947a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800947e:	2b15      	cmp	r3, #21
 8009480:	d8f6      	bhi.n	8009470 <_printf_i+0x28>
 8009482:	a101      	add	r1, pc, #4	@ (adr r1, 8009488 <_printf_i+0x40>)
 8009484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009488:	080094e1 	.word	0x080094e1
 800948c:	080094f5 	.word	0x080094f5
 8009490:	08009471 	.word	0x08009471
 8009494:	08009471 	.word	0x08009471
 8009498:	08009471 	.word	0x08009471
 800949c:	08009471 	.word	0x08009471
 80094a0:	080094f5 	.word	0x080094f5
 80094a4:	08009471 	.word	0x08009471
 80094a8:	08009471 	.word	0x08009471
 80094ac:	08009471 	.word	0x08009471
 80094b0:	08009471 	.word	0x08009471
 80094b4:	080095f5 	.word	0x080095f5
 80094b8:	0800951f 	.word	0x0800951f
 80094bc:	080095af 	.word	0x080095af
 80094c0:	08009471 	.word	0x08009471
 80094c4:	08009471 	.word	0x08009471
 80094c8:	08009617 	.word	0x08009617
 80094cc:	08009471 	.word	0x08009471
 80094d0:	0800951f 	.word	0x0800951f
 80094d4:	08009471 	.word	0x08009471
 80094d8:	08009471 	.word	0x08009471
 80094dc:	080095b7 	.word	0x080095b7
 80094e0:	6833      	ldr	r3, [r6, #0]
 80094e2:	1d1a      	adds	r2, r3, #4
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6032      	str	r2, [r6, #0]
 80094e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80094f0:	2301      	movs	r3, #1
 80094f2:	e09d      	b.n	8009630 <_printf_i+0x1e8>
 80094f4:	6833      	ldr	r3, [r6, #0]
 80094f6:	6820      	ldr	r0, [r4, #0]
 80094f8:	1d19      	adds	r1, r3, #4
 80094fa:	6031      	str	r1, [r6, #0]
 80094fc:	0606      	lsls	r6, r0, #24
 80094fe:	d501      	bpl.n	8009504 <_printf_i+0xbc>
 8009500:	681d      	ldr	r5, [r3, #0]
 8009502:	e003      	b.n	800950c <_printf_i+0xc4>
 8009504:	0645      	lsls	r5, r0, #25
 8009506:	d5fb      	bpl.n	8009500 <_printf_i+0xb8>
 8009508:	f9b3 5000 	ldrsh.w	r5, [r3]
 800950c:	2d00      	cmp	r5, #0
 800950e:	da03      	bge.n	8009518 <_printf_i+0xd0>
 8009510:	232d      	movs	r3, #45	@ 0x2d
 8009512:	426d      	negs	r5, r5
 8009514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009518:	4859      	ldr	r0, [pc, #356]	@ (8009680 <_printf_i+0x238>)
 800951a:	230a      	movs	r3, #10
 800951c:	e011      	b.n	8009542 <_printf_i+0xfa>
 800951e:	6821      	ldr	r1, [r4, #0]
 8009520:	6833      	ldr	r3, [r6, #0]
 8009522:	0608      	lsls	r0, r1, #24
 8009524:	f853 5b04 	ldr.w	r5, [r3], #4
 8009528:	d402      	bmi.n	8009530 <_printf_i+0xe8>
 800952a:	0649      	lsls	r1, r1, #25
 800952c:	bf48      	it	mi
 800952e:	b2ad      	uxthmi	r5, r5
 8009530:	2f6f      	cmp	r7, #111	@ 0x6f
 8009532:	4853      	ldr	r0, [pc, #332]	@ (8009680 <_printf_i+0x238>)
 8009534:	6033      	str	r3, [r6, #0]
 8009536:	bf14      	ite	ne
 8009538:	230a      	movne	r3, #10
 800953a:	2308      	moveq	r3, #8
 800953c:	2100      	movs	r1, #0
 800953e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009542:	6866      	ldr	r6, [r4, #4]
 8009544:	60a6      	str	r6, [r4, #8]
 8009546:	2e00      	cmp	r6, #0
 8009548:	bfa2      	ittt	ge
 800954a:	6821      	ldrge	r1, [r4, #0]
 800954c:	f021 0104 	bicge.w	r1, r1, #4
 8009550:	6021      	strge	r1, [r4, #0]
 8009552:	b90d      	cbnz	r5, 8009558 <_printf_i+0x110>
 8009554:	2e00      	cmp	r6, #0
 8009556:	d04b      	beq.n	80095f0 <_printf_i+0x1a8>
 8009558:	4616      	mov	r6, r2
 800955a:	fbb5 f1f3 	udiv	r1, r5, r3
 800955e:	fb03 5711 	mls	r7, r3, r1, r5
 8009562:	5dc7      	ldrb	r7, [r0, r7]
 8009564:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009568:	462f      	mov	r7, r5
 800956a:	42bb      	cmp	r3, r7
 800956c:	460d      	mov	r5, r1
 800956e:	d9f4      	bls.n	800955a <_printf_i+0x112>
 8009570:	2b08      	cmp	r3, #8
 8009572:	d10b      	bne.n	800958c <_printf_i+0x144>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	07df      	lsls	r7, r3, #31
 8009578:	d508      	bpl.n	800958c <_printf_i+0x144>
 800957a:	6923      	ldr	r3, [r4, #16]
 800957c:	6861      	ldr	r1, [r4, #4]
 800957e:	4299      	cmp	r1, r3
 8009580:	bfde      	ittt	le
 8009582:	2330      	movle	r3, #48	@ 0x30
 8009584:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009588:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800958c:	1b92      	subs	r2, r2, r6
 800958e:	6122      	str	r2, [r4, #16]
 8009590:	f8cd a000 	str.w	sl, [sp]
 8009594:	464b      	mov	r3, r9
 8009596:	aa03      	add	r2, sp, #12
 8009598:	4621      	mov	r1, r4
 800959a:	4640      	mov	r0, r8
 800959c:	f7ff fee6 	bl	800936c <_printf_common>
 80095a0:	3001      	adds	r0, #1
 80095a2:	d14a      	bne.n	800963a <_printf_i+0x1f2>
 80095a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095a8:	b004      	add	sp, #16
 80095aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ae:	6823      	ldr	r3, [r4, #0]
 80095b0:	f043 0320 	orr.w	r3, r3, #32
 80095b4:	6023      	str	r3, [r4, #0]
 80095b6:	4833      	ldr	r0, [pc, #204]	@ (8009684 <_printf_i+0x23c>)
 80095b8:	2778      	movs	r7, #120	@ 0x78
 80095ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	6831      	ldr	r1, [r6, #0]
 80095c2:	061f      	lsls	r7, r3, #24
 80095c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80095c8:	d402      	bmi.n	80095d0 <_printf_i+0x188>
 80095ca:	065f      	lsls	r7, r3, #25
 80095cc:	bf48      	it	mi
 80095ce:	b2ad      	uxthmi	r5, r5
 80095d0:	6031      	str	r1, [r6, #0]
 80095d2:	07d9      	lsls	r1, r3, #31
 80095d4:	bf44      	itt	mi
 80095d6:	f043 0320 	orrmi.w	r3, r3, #32
 80095da:	6023      	strmi	r3, [r4, #0]
 80095dc:	b11d      	cbz	r5, 80095e6 <_printf_i+0x19e>
 80095de:	2310      	movs	r3, #16
 80095e0:	e7ac      	b.n	800953c <_printf_i+0xf4>
 80095e2:	4827      	ldr	r0, [pc, #156]	@ (8009680 <_printf_i+0x238>)
 80095e4:	e7e9      	b.n	80095ba <_printf_i+0x172>
 80095e6:	6823      	ldr	r3, [r4, #0]
 80095e8:	f023 0320 	bic.w	r3, r3, #32
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	e7f6      	b.n	80095de <_printf_i+0x196>
 80095f0:	4616      	mov	r6, r2
 80095f2:	e7bd      	b.n	8009570 <_printf_i+0x128>
 80095f4:	6833      	ldr	r3, [r6, #0]
 80095f6:	6825      	ldr	r5, [r4, #0]
 80095f8:	6961      	ldr	r1, [r4, #20]
 80095fa:	1d18      	adds	r0, r3, #4
 80095fc:	6030      	str	r0, [r6, #0]
 80095fe:	062e      	lsls	r6, r5, #24
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	d501      	bpl.n	8009608 <_printf_i+0x1c0>
 8009604:	6019      	str	r1, [r3, #0]
 8009606:	e002      	b.n	800960e <_printf_i+0x1c6>
 8009608:	0668      	lsls	r0, r5, #25
 800960a:	d5fb      	bpl.n	8009604 <_printf_i+0x1bc>
 800960c:	8019      	strh	r1, [r3, #0]
 800960e:	2300      	movs	r3, #0
 8009610:	6123      	str	r3, [r4, #16]
 8009612:	4616      	mov	r6, r2
 8009614:	e7bc      	b.n	8009590 <_printf_i+0x148>
 8009616:	6833      	ldr	r3, [r6, #0]
 8009618:	1d1a      	adds	r2, r3, #4
 800961a:	6032      	str	r2, [r6, #0]
 800961c:	681e      	ldr	r6, [r3, #0]
 800961e:	6862      	ldr	r2, [r4, #4]
 8009620:	2100      	movs	r1, #0
 8009622:	4630      	mov	r0, r6
 8009624:	f7f6 fdd4 	bl	80001d0 <memchr>
 8009628:	b108      	cbz	r0, 800962e <_printf_i+0x1e6>
 800962a:	1b80      	subs	r0, r0, r6
 800962c:	6060      	str	r0, [r4, #4]
 800962e:	6863      	ldr	r3, [r4, #4]
 8009630:	6123      	str	r3, [r4, #16]
 8009632:	2300      	movs	r3, #0
 8009634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009638:	e7aa      	b.n	8009590 <_printf_i+0x148>
 800963a:	6923      	ldr	r3, [r4, #16]
 800963c:	4632      	mov	r2, r6
 800963e:	4649      	mov	r1, r9
 8009640:	4640      	mov	r0, r8
 8009642:	47d0      	blx	sl
 8009644:	3001      	adds	r0, #1
 8009646:	d0ad      	beq.n	80095a4 <_printf_i+0x15c>
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	079b      	lsls	r3, r3, #30
 800964c:	d413      	bmi.n	8009676 <_printf_i+0x22e>
 800964e:	68e0      	ldr	r0, [r4, #12]
 8009650:	9b03      	ldr	r3, [sp, #12]
 8009652:	4298      	cmp	r0, r3
 8009654:	bfb8      	it	lt
 8009656:	4618      	movlt	r0, r3
 8009658:	e7a6      	b.n	80095a8 <_printf_i+0x160>
 800965a:	2301      	movs	r3, #1
 800965c:	4632      	mov	r2, r6
 800965e:	4649      	mov	r1, r9
 8009660:	4640      	mov	r0, r8
 8009662:	47d0      	blx	sl
 8009664:	3001      	adds	r0, #1
 8009666:	d09d      	beq.n	80095a4 <_printf_i+0x15c>
 8009668:	3501      	adds	r5, #1
 800966a:	68e3      	ldr	r3, [r4, #12]
 800966c:	9903      	ldr	r1, [sp, #12]
 800966e:	1a5b      	subs	r3, r3, r1
 8009670:	42ab      	cmp	r3, r5
 8009672:	dcf2      	bgt.n	800965a <_printf_i+0x212>
 8009674:	e7eb      	b.n	800964e <_printf_i+0x206>
 8009676:	2500      	movs	r5, #0
 8009678:	f104 0619 	add.w	r6, r4, #25
 800967c:	e7f5      	b.n	800966a <_printf_i+0x222>
 800967e:	bf00      	nop
 8009680:	0800d852 	.word	0x0800d852
 8009684:	0800d863 	.word	0x0800d863

08009688 <_scanf_float>:
 8009688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800968c:	b087      	sub	sp, #28
 800968e:	4617      	mov	r7, r2
 8009690:	9303      	str	r3, [sp, #12]
 8009692:	688b      	ldr	r3, [r1, #8]
 8009694:	1e5a      	subs	r2, r3, #1
 8009696:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800969a:	bf81      	itttt	hi
 800969c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80096a0:	eb03 0b05 	addhi.w	fp, r3, r5
 80096a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80096a8:	608b      	strhi	r3, [r1, #8]
 80096aa:	680b      	ldr	r3, [r1, #0]
 80096ac:	460a      	mov	r2, r1
 80096ae:	f04f 0500 	mov.w	r5, #0
 80096b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80096b6:	f842 3b1c 	str.w	r3, [r2], #28
 80096ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80096be:	4680      	mov	r8, r0
 80096c0:	460c      	mov	r4, r1
 80096c2:	bf98      	it	ls
 80096c4:	f04f 0b00 	movls.w	fp, #0
 80096c8:	9201      	str	r2, [sp, #4]
 80096ca:	4616      	mov	r6, r2
 80096cc:	46aa      	mov	sl, r5
 80096ce:	46a9      	mov	r9, r5
 80096d0:	9502      	str	r5, [sp, #8]
 80096d2:	68a2      	ldr	r2, [r4, #8]
 80096d4:	b152      	cbz	r2, 80096ec <_scanf_float+0x64>
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	2b4e      	cmp	r3, #78	@ 0x4e
 80096dc:	d864      	bhi.n	80097a8 <_scanf_float+0x120>
 80096de:	2b40      	cmp	r3, #64	@ 0x40
 80096e0:	d83c      	bhi.n	800975c <_scanf_float+0xd4>
 80096e2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80096e6:	b2c8      	uxtb	r0, r1
 80096e8:	280e      	cmp	r0, #14
 80096ea:	d93a      	bls.n	8009762 <_scanf_float+0xda>
 80096ec:	f1b9 0f00 	cmp.w	r9, #0
 80096f0:	d003      	beq.n	80096fa <_scanf_float+0x72>
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096f8:	6023      	str	r3, [r4, #0]
 80096fa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80096fe:	f1ba 0f01 	cmp.w	sl, #1
 8009702:	f200 8117 	bhi.w	8009934 <_scanf_float+0x2ac>
 8009706:	9b01      	ldr	r3, [sp, #4]
 8009708:	429e      	cmp	r6, r3
 800970a:	f200 8108 	bhi.w	800991e <_scanf_float+0x296>
 800970e:	2001      	movs	r0, #1
 8009710:	b007      	add	sp, #28
 8009712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009716:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800971a:	2a0d      	cmp	r2, #13
 800971c:	d8e6      	bhi.n	80096ec <_scanf_float+0x64>
 800971e:	a101      	add	r1, pc, #4	@ (adr r1, 8009724 <_scanf_float+0x9c>)
 8009720:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009724:	0800986b 	.word	0x0800986b
 8009728:	080096ed 	.word	0x080096ed
 800972c:	080096ed 	.word	0x080096ed
 8009730:	080096ed 	.word	0x080096ed
 8009734:	080098cb 	.word	0x080098cb
 8009738:	080098a3 	.word	0x080098a3
 800973c:	080096ed 	.word	0x080096ed
 8009740:	080096ed 	.word	0x080096ed
 8009744:	08009879 	.word	0x08009879
 8009748:	080096ed 	.word	0x080096ed
 800974c:	080096ed 	.word	0x080096ed
 8009750:	080096ed 	.word	0x080096ed
 8009754:	080096ed 	.word	0x080096ed
 8009758:	08009831 	.word	0x08009831
 800975c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009760:	e7db      	b.n	800971a <_scanf_float+0x92>
 8009762:	290e      	cmp	r1, #14
 8009764:	d8c2      	bhi.n	80096ec <_scanf_float+0x64>
 8009766:	a001      	add	r0, pc, #4	@ (adr r0, 800976c <_scanf_float+0xe4>)
 8009768:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800976c:	08009821 	.word	0x08009821
 8009770:	080096ed 	.word	0x080096ed
 8009774:	08009821 	.word	0x08009821
 8009778:	080098b7 	.word	0x080098b7
 800977c:	080096ed 	.word	0x080096ed
 8009780:	080097c9 	.word	0x080097c9
 8009784:	08009807 	.word	0x08009807
 8009788:	08009807 	.word	0x08009807
 800978c:	08009807 	.word	0x08009807
 8009790:	08009807 	.word	0x08009807
 8009794:	08009807 	.word	0x08009807
 8009798:	08009807 	.word	0x08009807
 800979c:	08009807 	.word	0x08009807
 80097a0:	08009807 	.word	0x08009807
 80097a4:	08009807 	.word	0x08009807
 80097a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80097aa:	d809      	bhi.n	80097c0 <_scanf_float+0x138>
 80097ac:	2b60      	cmp	r3, #96	@ 0x60
 80097ae:	d8b2      	bhi.n	8009716 <_scanf_float+0x8e>
 80097b0:	2b54      	cmp	r3, #84	@ 0x54
 80097b2:	d07b      	beq.n	80098ac <_scanf_float+0x224>
 80097b4:	2b59      	cmp	r3, #89	@ 0x59
 80097b6:	d199      	bne.n	80096ec <_scanf_float+0x64>
 80097b8:	2d07      	cmp	r5, #7
 80097ba:	d197      	bne.n	80096ec <_scanf_float+0x64>
 80097bc:	2508      	movs	r5, #8
 80097be:	e02c      	b.n	800981a <_scanf_float+0x192>
 80097c0:	2b74      	cmp	r3, #116	@ 0x74
 80097c2:	d073      	beq.n	80098ac <_scanf_float+0x224>
 80097c4:	2b79      	cmp	r3, #121	@ 0x79
 80097c6:	e7f6      	b.n	80097b6 <_scanf_float+0x12e>
 80097c8:	6821      	ldr	r1, [r4, #0]
 80097ca:	05c8      	lsls	r0, r1, #23
 80097cc:	d51b      	bpl.n	8009806 <_scanf_float+0x17e>
 80097ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80097d2:	6021      	str	r1, [r4, #0]
 80097d4:	f109 0901 	add.w	r9, r9, #1
 80097d8:	f1bb 0f00 	cmp.w	fp, #0
 80097dc:	d003      	beq.n	80097e6 <_scanf_float+0x15e>
 80097de:	3201      	adds	r2, #1
 80097e0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80097e4:	60a2      	str	r2, [r4, #8]
 80097e6:	68a3      	ldr	r3, [r4, #8]
 80097e8:	3b01      	subs	r3, #1
 80097ea:	60a3      	str	r3, [r4, #8]
 80097ec:	6923      	ldr	r3, [r4, #16]
 80097ee:	3301      	adds	r3, #1
 80097f0:	6123      	str	r3, [r4, #16]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	3b01      	subs	r3, #1
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	607b      	str	r3, [r7, #4]
 80097fa:	f340 8087 	ble.w	800990c <_scanf_float+0x284>
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	3301      	adds	r3, #1
 8009802:	603b      	str	r3, [r7, #0]
 8009804:	e765      	b.n	80096d2 <_scanf_float+0x4a>
 8009806:	eb1a 0105 	adds.w	r1, sl, r5
 800980a:	f47f af6f 	bne.w	80096ec <_scanf_float+0x64>
 800980e:	6822      	ldr	r2, [r4, #0]
 8009810:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009814:	6022      	str	r2, [r4, #0]
 8009816:	460d      	mov	r5, r1
 8009818:	468a      	mov	sl, r1
 800981a:	f806 3b01 	strb.w	r3, [r6], #1
 800981e:	e7e2      	b.n	80097e6 <_scanf_float+0x15e>
 8009820:	6822      	ldr	r2, [r4, #0]
 8009822:	0610      	lsls	r0, r2, #24
 8009824:	f57f af62 	bpl.w	80096ec <_scanf_float+0x64>
 8009828:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800982c:	6022      	str	r2, [r4, #0]
 800982e:	e7f4      	b.n	800981a <_scanf_float+0x192>
 8009830:	f1ba 0f00 	cmp.w	sl, #0
 8009834:	d10e      	bne.n	8009854 <_scanf_float+0x1cc>
 8009836:	f1b9 0f00 	cmp.w	r9, #0
 800983a:	d10e      	bne.n	800985a <_scanf_float+0x1d2>
 800983c:	6822      	ldr	r2, [r4, #0]
 800983e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009842:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009846:	d108      	bne.n	800985a <_scanf_float+0x1d2>
 8009848:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800984c:	6022      	str	r2, [r4, #0]
 800984e:	f04f 0a01 	mov.w	sl, #1
 8009852:	e7e2      	b.n	800981a <_scanf_float+0x192>
 8009854:	f1ba 0f02 	cmp.w	sl, #2
 8009858:	d055      	beq.n	8009906 <_scanf_float+0x27e>
 800985a:	2d01      	cmp	r5, #1
 800985c:	d002      	beq.n	8009864 <_scanf_float+0x1dc>
 800985e:	2d04      	cmp	r5, #4
 8009860:	f47f af44 	bne.w	80096ec <_scanf_float+0x64>
 8009864:	3501      	adds	r5, #1
 8009866:	b2ed      	uxtb	r5, r5
 8009868:	e7d7      	b.n	800981a <_scanf_float+0x192>
 800986a:	f1ba 0f01 	cmp.w	sl, #1
 800986e:	f47f af3d 	bne.w	80096ec <_scanf_float+0x64>
 8009872:	f04f 0a02 	mov.w	sl, #2
 8009876:	e7d0      	b.n	800981a <_scanf_float+0x192>
 8009878:	b97d      	cbnz	r5, 800989a <_scanf_float+0x212>
 800987a:	f1b9 0f00 	cmp.w	r9, #0
 800987e:	f47f af38 	bne.w	80096f2 <_scanf_float+0x6a>
 8009882:	6822      	ldr	r2, [r4, #0]
 8009884:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009888:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800988c:	f040 8108 	bne.w	8009aa0 <_scanf_float+0x418>
 8009890:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009894:	6022      	str	r2, [r4, #0]
 8009896:	2501      	movs	r5, #1
 8009898:	e7bf      	b.n	800981a <_scanf_float+0x192>
 800989a:	2d03      	cmp	r5, #3
 800989c:	d0e2      	beq.n	8009864 <_scanf_float+0x1dc>
 800989e:	2d05      	cmp	r5, #5
 80098a0:	e7de      	b.n	8009860 <_scanf_float+0x1d8>
 80098a2:	2d02      	cmp	r5, #2
 80098a4:	f47f af22 	bne.w	80096ec <_scanf_float+0x64>
 80098a8:	2503      	movs	r5, #3
 80098aa:	e7b6      	b.n	800981a <_scanf_float+0x192>
 80098ac:	2d06      	cmp	r5, #6
 80098ae:	f47f af1d 	bne.w	80096ec <_scanf_float+0x64>
 80098b2:	2507      	movs	r5, #7
 80098b4:	e7b1      	b.n	800981a <_scanf_float+0x192>
 80098b6:	6822      	ldr	r2, [r4, #0]
 80098b8:	0591      	lsls	r1, r2, #22
 80098ba:	f57f af17 	bpl.w	80096ec <_scanf_float+0x64>
 80098be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80098c2:	6022      	str	r2, [r4, #0]
 80098c4:	f8cd 9008 	str.w	r9, [sp, #8]
 80098c8:	e7a7      	b.n	800981a <_scanf_float+0x192>
 80098ca:	6822      	ldr	r2, [r4, #0]
 80098cc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80098d0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80098d4:	d006      	beq.n	80098e4 <_scanf_float+0x25c>
 80098d6:	0550      	lsls	r0, r2, #21
 80098d8:	f57f af08 	bpl.w	80096ec <_scanf_float+0x64>
 80098dc:	f1b9 0f00 	cmp.w	r9, #0
 80098e0:	f000 80de 	beq.w	8009aa0 <_scanf_float+0x418>
 80098e4:	0591      	lsls	r1, r2, #22
 80098e6:	bf58      	it	pl
 80098e8:	9902      	ldrpl	r1, [sp, #8]
 80098ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80098ee:	bf58      	it	pl
 80098f0:	eba9 0101 	subpl.w	r1, r9, r1
 80098f4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80098f8:	bf58      	it	pl
 80098fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80098fe:	6022      	str	r2, [r4, #0]
 8009900:	f04f 0900 	mov.w	r9, #0
 8009904:	e789      	b.n	800981a <_scanf_float+0x192>
 8009906:	f04f 0a03 	mov.w	sl, #3
 800990a:	e786      	b.n	800981a <_scanf_float+0x192>
 800990c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009910:	4639      	mov	r1, r7
 8009912:	4640      	mov	r0, r8
 8009914:	4798      	blx	r3
 8009916:	2800      	cmp	r0, #0
 8009918:	f43f aedb 	beq.w	80096d2 <_scanf_float+0x4a>
 800991c:	e6e6      	b.n	80096ec <_scanf_float+0x64>
 800991e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009922:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009926:	463a      	mov	r2, r7
 8009928:	4640      	mov	r0, r8
 800992a:	4798      	blx	r3
 800992c:	6923      	ldr	r3, [r4, #16]
 800992e:	3b01      	subs	r3, #1
 8009930:	6123      	str	r3, [r4, #16]
 8009932:	e6e8      	b.n	8009706 <_scanf_float+0x7e>
 8009934:	1e6b      	subs	r3, r5, #1
 8009936:	2b06      	cmp	r3, #6
 8009938:	d824      	bhi.n	8009984 <_scanf_float+0x2fc>
 800993a:	2d02      	cmp	r5, #2
 800993c:	d836      	bhi.n	80099ac <_scanf_float+0x324>
 800993e:	9b01      	ldr	r3, [sp, #4]
 8009940:	429e      	cmp	r6, r3
 8009942:	f67f aee4 	bls.w	800970e <_scanf_float+0x86>
 8009946:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800994a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800994e:	463a      	mov	r2, r7
 8009950:	4640      	mov	r0, r8
 8009952:	4798      	blx	r3
 8009954:	6923      	ldr	r3, [r4, #16]
 8009956:	3b01      	subs	r3, #1
 8009958:	6123      	str	r3, [r4, #16]
 800995a:	e7f0      	b.n	800993e <_scanf_float+0x2b6>
 800995c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009960:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009964:	463a      	mov	r2, r7
 8009966:	4640      	mov	r0, r8
 8009968:	4798      	blx	r3
 800996a:	6923      	ldr	r3, [r4, #16]
 800996c:	3b01      	subs	r3, #1
 800996e:	6123      	str	r3, [r4, #16]
 8009970:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009974:	fa5f fa8a 	uxtb.w	sl, sl
 8009978:	f1ba 0f02 	cmp.w	sl, #2
 800997c:	d1ee      	bne.n	800995c <_scanf_float+0x2d4>
 800997e:	3d03      	subs	r5, #3
 8009980:	b2ed      	uxtb	r5, r5
 8009982:	1b76      	subs	r6, r6, r5
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	05da      	lsls	r2, r3, #23
 8009988:	d530      	bpl.n	80099ec <_scanf_float+0x364>
 800998a:	055b      	lsls	r3, r3, #21
 800998c:	d511      	bpl.n	80099b2 <_scanf_float+0x32a>
 800998e:	9b01      	ldr	r3, [sp, #4]
 8009990:	429e      	cmp	r6, r3
 8009992:	f67f aebc 	bls.w	800970e <_scanf_float+0x86>
 8009996:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800999a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800999e:	463a      	mov	r2, r7
 80099a0:	4640      	mov	r0, r8
 80099a2:	4798      	blx	r3
 80099a4:	6923      	ldr	r3, [r4, #16]
 80099a6:	3b01      	subs	r3, #1
 80099a8:	6123      	str	r3, [r4, #16]
 80099aa:	e7f0      	b.n	800998e <_scanf_float+0x306>
 80099ac:	46aa      	mov	sl, r5
 80099ae:	46b3      	mov	fp, r6
 80099b0:	e7de      	b.n	8009970 <_scanf_float+0x2e8>
 80099b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80099b6:	6923      	ldr	r3, [r4, #16]
 80099b8:	2965      	cmp	r1, #101	@ 0x65
 80099ba:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80099be:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80099c2:	6123      	str	r3, [r4, #16]
 80099c4:	d00c      	beq.n	80099e0 <_scanf_float+0x358>
 80099c6:	2945      	cmp	r1, #69	@ 0x45
 80099c8:	d00a      	beq.n	80099e0 <_scanf_float+0x358>
 80099ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099ce:	463a      	mov	r2, r7
 80099d0:	4640      	mov	r0, r8
 80099d2:	4798      	blx	r3
 80099d4:	6923      	ldr	r3, [r4, #16]
 80099d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80099da:	3b01      	subs	r3, #1
 80099dc:	1eb5      	subs	r5, r6, #2
 80099de:	6123      	str	r3, [r4, #16]
 80099e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099e4:	463a      	mov	r2, r7
 80099e6:	4640      	mov	r0, r8
 80099e8:	4798      	blx	r3
 80099ea:	462e      	mov	r6, r5
 80099ec:	6822      	ldr	r2, [r4, #0]
 80099ee:	f012 0210 	ands.w	r2, r2, #16
 80099f2:	d001      	beq.n	80099f8 <_scanf_float+0x370>
 80099f4:	2000      	movs	r0, #0
 80099f6:	e68b      	b.n	8009710 <_scanf_float+0x88>
 80099f8:	7032      	strb	r2, [r6, #0]
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009a00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a04:	d11c      	bne.n	8009a40 <_scanf_float+0x3b8>
 8009a06:	9b02      	ldr	r3, [sp, #8]
 8009a08:	454b      	cmp	r3, r9
 8009a0a:	eba3 0209 	sub.w	r2, r3, r9
 8009a0e:	d123      	bne.n	8009a58 <_scanf_float+0x3d0>
 8009a10:	9901      	ldr	r1, [sp, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	4640      	mov	r0, r8
 8009a16:	f000 ff47 	bl	800a8a8 <_strtod_r>
 8009a1a:	9b03      	ldr	r3, [sp, #12]
 8009a1c:	6821      	ldr	r1, [r4, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f011 0f02 	tst.w	r1, #2
 8009a24:	ec57 6b10 	vmov	r6, r7, d0
 8009a28:	f103 0204 	add.w	r2, r3, #4
 8009a2c:	d01f      	beq.n	8009a6e <_scanf_float+0x3e6>
 8009a2e:	9903      	ldr	r1, [sp, #12]
 8009a30:	600a      	str	r2, [r1, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	e9c3 6700 	strd	r6, r7, [r3]
 8009a38:	68e3      	ldr	r3, [r4, #12]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	60e3      	str	r3, [r4, #12]
 8009a3e:	e7d9      	b.n	80099f4 <_scanf_float+0x36c>
 8009a40:	9b04      	ldr	r3, [sp, #16]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d0e4      	beq.n	8009a10 <_scanf_float+0x388>
 8009a46:	9905      	ldr	r1, [sp, #20]
 8009a48:	230a      	movs	r3, #10
 8009a4a:	3101      	adds	r1, #1
 8009a4c:	4640      	mov	r0, r8
 8009a4e:	f000 ffab 	bl	800a9a8 <_strtol_r>
 8009a52:	9b04      	ldr	r3, [sp, #16]
 8009a54:	9e05      	ldr	r6, [sp, #20]
 8009a56:	1ac2      	subs	r2, r0, r3
 8009a58:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009a5c:	429e      	cmp	r6, r3
 8009a5e:	bf28      	it	cs
 8009a60:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009a64:	4910      	ldr	r1, [pc, #64]	@ (8009aa8 <_scanf_float+0x420>)
 8009a66:	4630      	mov	r0, r6
 8009a68:	f000 f856 	bl	8009b18 <siprintf>
 8009a6c:	e7d0      	b.n	8009a10 <_scanf_float+0x388>
 8009a6e:	f011 0f04 	tst.w	r1, #4
 8009a72:	9903      	ldr	r1, [sp, #12]
 8009a74:	600a      	str	r2, [r1, #0]
 8009a76:	d1dc      	bne.n	8009a32 <_scanf_float+0x3aa>
 8009a78:	681d      	ldr	r5, [r3, #0]
 8009a7a:	4632      	mov	r2, r6
 8009a7c:	463b      	mov	r3, r7
 8009a7e:	4630      	mov	r0, r6
 8009a80:	4639      	mov	r1, r7
 8009a82:	f7f7 f853 	bl	8000b2c <__aeabi_dcmpun>
 8009a86:	b128      	cbz	r0, 8009a94 <_scanf_float+0x40c>
 8009a88:	4808      	ldr	r0, [pc, #32]	@ (8009aac <_scanf_float+0x424>)
 8009a8a:	f001 f881 	bl	800ab90 <nanf>
 8009a8e:	ed85 0a00 	vstr	s0, [r5]
 8009a92:	e7d1      	b.n	8009a38 <_scanf_float+0x3b0>
 8009a94:	4630      	mov	r0, r6
 8009a96:	4639      	mov	r1, r7
 8009a98:	f7f7 f8a6 	bl	8000be8 <__aeabi_d2f>
 8009a9c:	6028      	str	r0, [r5, #0]
 8009a9e:	e7cb      	b.n	8009a38 <_scanf_float+0x3b0>
 8009aa0:	f04f 0900 	mov.w	r9, #0
 8009aa4:	e629      	b.n	80096fa <_scanf_float+0x72>
 8009aa6:	bf00      	nop
 8009aa8:	0800d874 	.word	0x0800d874
 8009aac:	0800dc6b 	.word	0x0800dc6b

08009ab0 <sniprintf>:
 8009ab0:	b40c      	push	{r2, r3}
 8009ab2:	b530      	push	{r4, r5, lr}
 8009ab4:	4b17      	ldr	r3, [pc, #92]	@ (8009b14 <sniprintf+0x64>)
 8009ab6:	1e0c      	subs	r4, r1, #0
 8009ab8:	681d      	ldr	r5, [r3, #0]
 8009aba:	b09d      	sub	sp, #116	@ 0x74
 8009abc:	da08      	bge.n	8009ad0 <sniprintf+0x20>
 8009abe:	238b      	movs	r3, #139	@ 0x8b
 8009ac0:	602b      	str	r3, [r5, #0]
 8009ac2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ac6:	b01d      	add	sp, #116	@ 0x74
 8009ac8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009acc:	b002      	add	sp, #8
 8009ace:	4770      	bx	lr
 8009ad0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009ad4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009ad8:	bf14      	ite	ne
 8009ada:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009ade:	4623      	moveq	r3, r4
 8009ae0:	9304      	str	r3, [sp, #16]
 8009ae2:	9307      	str	r3, [sp, #28]
 8009ae4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009ae8:	9002      	str	r0, [sp, #8]
 8009aea:	9006      	str	r0, [sp, #24]
 8009aec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009af0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009af2:	ab21      	add	r3, sp, #132	@ 0x84
 8009af4:	a902      	add	r1, sp, #8
 8009af6:	4628      	mov	r0, r5
 8009af8:	9301      	str	r3, [sp, #4]
 8009afa:	f002 fa31 	bl	800bf60 <_svfiprintf_r>
 8009afe:	1c43      	adds	r3, r0, #1
 8009b00:	bfbc      	itt	lt
 8009b02:	238b      	movlt	r3, #139	@ 0x8b
 8009b04:	602b      	strlt	r3, [r5, #0]
 8009b06:	2c00      	cmp	r4, #0
 8009b08:	d0dd      	beq.n	8009ac6 <sniprintf+0x16>
 8009b0a:	9b02      	ldr	r3, [sp, #8]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	701a      	strb	r2, [r3, #0]
 8009b10:	e7d9      	b.n	8009ac6 <sniprintf+0x16>
 8009b12:	bf00      	nop
 8009b14:	20000190 	.word	0x20000190

08009b18 <siprintf>:
 8009b18:	b40e      	push	{r1, r2, r3}
 8009b1a:	b500      	push	{lr}
 8009b1c:	b09c      	sub	sp, #112	@ 0x70
 8009b1e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009b20:	9002      	str	r0, [sp, #8]
 8009b22:	9006      	str	r0, [sp, #24]
 8009b24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009b28:	4809      	ldr	r0, [pc, #36]	@ (8009b50 <siprintf+0x38>)
 8009b2a:	9107      	str	r1, [sp, #28]
 8009b2c:	9104      	str	r1, [sp, #16]
 8009b2e:	4909      	ldr	r1, [pc, #36]	@ (8009b54 <siprintf+0x3c>)
 8009b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b34:	9105      	str	r1, [sp, #20]
 8009b36:	6800      	ldr	r0, [r0, #0]
 8009b38:	9301      	str	r3, [sp, #4]
 8009b3a:	a902      	add	r1, sp, #8
 8009b3c:	f002 fa10 	bl	800bf60 <_svfiprintf_r>
 8009b40:	9b02      	ldr	r3, [sp, #8]
 8009b42:	2200      	movs	r2, #0
 8009b44:	701a      	strb	r2, [r3, #0]
 8009b46:	b01c      	add	sp, #112	@ 0x70
 8009b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b4c:	b003      	add	sp, #12
 8009b4e:	4770      	bx	lr
 8009b50:	20000190 	.word	0x20000190
 8009b54:	ffff0208 	.word	0xffff0208

08009b58 <std>:
 8009b58:	2300      	movs	r3, #0
 8009b5a:	b510      	push	{r4, lr}
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b66:	6083      	str	r3, [r0, #8]
 8009b68:	8181      	strh	r1, [r0, #12]
 8009b6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009b6c:	81c2      	strh	r2, [r0, #14]
 8009b6e:	6183      	str	r3, [r0, #24]
 8009b70:	4619      	mov	r1, r3
 8009b72:	2208      	movs	r2, #8
 8009b74:	305c      	adds	r0, #92	@ 0x5c
 8009b76:	f000 ffb9 	bl	800aaec <memset>
 8009b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb0 <std+0x58>)
 8009b7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb4 <std+0x5c>)
 8009b80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009b82:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb8 <std+0x60>)
 8009b84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009b86:	4b0d      	ldr	r3, [pc, #52]	@ (8009bbc <std+0x64>)
 8009b88:	6323      	str	r3, [r4, #48]	@ 0x30
 8009b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009bc0 <std+0x68>)
 8009b8c:	6224      	str	r4, [r4, #32]
 8009b8e:	429c      	cmp	r4, r3
 8009b90:	d006      	beq.n	8009ba0 <std+0x48>
 8009b92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009b96:	4294      	cmp	r4, r2
 8009b98:	d002      	beq.n	8009ba0 <std+0x48>
 8009b9a:	33d0      	adds	r3, #208	@ 0xd0
 8009b9c:	429c      	cmp	r4, r3
 8009b9e:	d105      	bne.n	8009bac <std+0x54>
 8009ba0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ba8:	f000 bfd6 	b.w	800ab58 <__retarget_lock_init_recursive>
 8009bac:	bd10      	pop	{r4, pc}
 8009bae:	bf00      	nop
 8009bb0:	0800d029 	.word	0x0800d029
 8009bb4:	0800d04b 	.word	0x0800d04b
 8009bb8:	0800d083 	.word	0x0800d083
 8009bbc:	0800d0a7 	.word	0x0800d0a7
 8009bc0:	200003c0 	.word	0x200003c0

08009bc4 <stdio_exit_handler>:
 8009bc4:	4a02      	ldr	r2, [pc, #8]	@ (8009bd0 <stdio_exit_handler+0xc>)
 8009bc6:	4903      	ldr	r1, [pc, #12]	@ (8009bd4 <stdio_exit_handler+0x10>)
 8009bc8:	4803      	ldr	r0, [pc, #12]	@ (8009bd8 <stdio_exit_handler+0x14>)
 8009bca:	f000 beef 	b.w	800a9ac <_fwalk_sglue>
 8009bce:	bf00      	nop
 8009bd0:	20000018 	.word	0x20000018
 8009bd4:	0800c65d 	.word	0x0800c65d
 8009bd8:	20000194 	.word	0x20000194

08009bdc <cleanup_stdio>:
 8009bdc:	6841      	ldr	r1, [r0, #4]
 8009bde:	4b0c      	ldr	r3, [pc, #48]	@ (8009c10 <cleanup_stdio+0x34>)
 8009be0:	4299      	cmp	r1, r3
 8009be2:	b510      	push	{r4, lr}
 8009be4:	4604      	mov	r4, r0
 8009be6:	d001      	beq.n	8009bec <cleanup_stdio+0x10>
 8009be8:	f002 fd38 	bl	800c65c <_fflush_r>
 8009bec:	68a1      	ldr	r1, [r4, #8]
 8009bee:	4b09      	ldr	r3, [pc, #36]	@ (8009c14 <cleanup_stdio+0x38>)
 8009bf0:	4299      	cmp	r1, r3
 8009bf2:	d002      	beq.n	8009bfa <cleanup_stdio+0x1e>
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f002 fd31 	bl	800c65c <_fflush_r>
 8009bfa:	68e1      	ldr	r1, [r4, #12]
 8009bfc:	4b06      	ldr	r3, [pc, #24]	@ (8009c18 <cleanup_stdio+0x3c>)
 8009bfe:	4299      	cmp	r1, r3
 8009c00:	d004      	beq.n	8009c0c <cleanup_stdio+0x30>
 8009c02:	4620      	mov	r0, r4
 8009c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c08:	f002 bd28 	b.w	800c65c <_fflush_r>
 8009c0c:	bd10      	pop	{r4, pc}
 8009c0e:	bf00      	nop
 8009c10:	200003c0 	.word	0x200003c0
 8009c14:	20000428 	.word	0x20000428
 8009c18:	20000490 	.word	0x20000490

08009c1c <global_stdio_init.part.0>:
 8009c1c:	b510      	push	{r4, lr}
 8009c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c4c <global_stdio_init.part.0+0x30>)
 8009c20:	4c0b      	ldr	r4, [pc, #44]	@ (8009c50 <global_stdio_init.part.0+0x34>)
 8009c22:	4a0c      	ldr	r2, [pc, #48]	@ (8009c54 <global_stdio_init.part.0+0x38>)
 8009c24:	601a      	str	r2, [r3, #0]
 8009c26:	4620      	mov	r0, r4
 8009c28:	2200      	movs	r2, #0
 8009c2a:	2104      	movs	r1, #4
 8009c2c:	f7ff ff94 	bl	8009b58 <std>
 8009c30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009c34:	2201      	movs	r2, #1
 8009c36:	2109      	movs	r1, #9
 8009c38:	f7ff ff8e 	bl	8009b58 <std>
 8009c3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009c40:	2202      	movs	r2, #2
 8009c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c46:	2112      	movs	r1, #18
 8009c48:	f7ff bf86 	b.w	8009b58 <std>
 8009c4c:	200004f8 	.word	0x200004f8
 8009c50:	200003c0 	.word	0x200003c0
 8009c54:	08009bc5 	.word	0x08009bc5

08009c58 <__sfp_lock_acquire>:
 8009c58:	4801      	ldr	r0, [pc, #4]	@ (8009c60 <__sfp_lock_acquire+0x8>)
 8009c5a:	f000 bf7e 	b.w	800ab5a <__retarget_lock_acquire_recursive>
 8009c5e:	bf00      	nop
 8009c60:	200004fd 	.word	0x200004fd

08009c64 <__sfp_lock_release>:
 8009c64:	4801      	ldr	r0, [pc, #4]	@ (8009c6c <__sfp_lock_release+0x8>)
 8009c66:	f000 bf79 	b.w	800ab5c <__retarget_lock_release_recursive>
 8009c6a:	bf00      	nop
 8009c6c:	200004fd 	.word	0x200004fd

08009c70 <__sinit>:
 8009c70:	b510      	push	{r4, lr}
 8009c72:	4604      	mov	r4, r0
 8009c74:	f7ff fff0 	bl	8009c58 <__sfp_lock_acquire>
 8009c78:	6a23      	ldr	r3, [r4, #32]
 8009c7a:	b11b      	cbz	r3, 8009c84 <__sinit+0x14>
 8009c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c80:	f7ff bff0 	b.w	8009c64 <__sfp_lock_release>
 8009c84:	4b04      	ldr	r3, [pc, #16]	@ (8009c98 <__sinit+0x28>)
 8009c86:	6223      	str	r3, [r4, #32]
 8009c88:	4b04      	ldr	r3, [pc, #16]	@ (8009c9c <__sinit+0x2c>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1f5      	bne.n	8009c7c <__sinit+0xc>
 8009c90:	f7ff ffc4 	bl	8009c1c <global_stdio_init.part.0>
 8009c94:	e7f2      	b.n	8009c7c <__sinit+0xc>
 8009c96:	bf00      	nop
 8009c98:	08009bdd 	.word	0x08009bdd
 8009c9c:	200004f8 	.word	0x200004f8

08009ca0 <sulp>:
 8009ca0:	b570      	push	{r4, r5, r6, lr}
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	460d      	mov	r5, r1
 8009ca6:	ec45 4b10 	vmov	d0, r4, r5
 8009caa:	4616      	mov	r6, r2
 8009cac:	f003 f87e 	bl	800cdac <__ulp>
 8009cb0:	ec51 0b10 	vmov	r0, r1, d0
 8009cb4:	b17e      	cbz	r6, 8009cd6 <sulp+0x36>
 8009cb6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009cba:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	dd09      	ble.n	8009cd6 <sulp+0x36>
 8009cc2:	051b      	lsls	r3, r3, #20
 8009cc4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009cc8:	2400      	movs	r4, #0
 8009cca:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009cce:	4622      	mov	r2, r4
 8009cd0:	462b      	mov	r3, r5
 8009cd2:	f7f6 fc91 	bl	80005f8 <__aeabi_dmul>
 8009cd6:	ec41 0b10 	vmov	d0, r0, r1
 8009cda:	bd70      	pop	{r4, r5, r6, pc}
 8009cdc:	0000      	movs	r0, r0
	...

08009ce0 <_strtod_l>:
 8009ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce4:	b09f      	sub	sp, #124	@ 0x7c
 8009ce6:	460c      	mov	r4, r1
 8009ce8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009cea:	2200      	movs	r2, #0
 8009cec:	921a      	str	r2, [sp, #104]	@ 0x68
 8009cee:	9005      	str	r0, [sp, #20]
 8009cf0:	f04f 0a00 	mov.w	sl, #0
 8009cf4:	f04f 0b00 	mov.w	fp, #0
 8009cf8:	460a      	mov	r2, r1
 8009cfa:	9219      	str	r2, [sp, #100]	@ 0x64
 8009cfc:	7811      	ldrb	r1, [r2, #0]
 8009cfe:	292b      	cmp	r1, #43	@ 0x2b
 8009d00:	d04a      	beq.n	8009d98 <_strtod_l+0xb8>
 8009d02:	d838      	bhi.n	8009d76 <_strtod_l+0x96>
 8009d04:	290d      	cmp	r1, #13
 8009d06:	d832      	bhi.n	8009d6e <_strtod_l+0x8e>
 8009d08:	2908      	cmp	r1, #8
 8009d0a:	d832      	bhi.n	8009d72 <_strtod_l+0x92>
 8009d0c:	2900      	cmp	r1, #0
 8009d0e:	d03b      	beq.n	8009d88 <_strtod_l+0xa8>
 8009d10:	2200      	movs	r2, #0
 8009d12:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009d14:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009d16:	782a      	ldrb	r2, [r5, #0]
 8009d18:	2a30      	cmp	r2, #48	@ 0x30
 8009d1a:	f040 80b3 	bne.w	8009e84 <_strtod_l+0x1a4>
 8009d1e:	786a      	ldrb	r2, [r5, #1]
 8009d20:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d24:	2a58      	cmp	r2, #88	@ 0x58
 8009d26:	d16e      	bne.n	8009e06 <_strtod_l+0x126>
 8009d28:	9302      	str	r3, [sp, #8]
 8009d2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d2c:	9301      	str	r3, [sp, #4]
 8009d2e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	4a8e      	ldr	r2, [pc, #568]	@ (8009f6c <_strtod_l+0x28c>)
 8009d34:	9805      	ldr	r0, [sp, #20]
 8009d36:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009d38:	a919      	add	r1, sp, #100	@ 0x64
 8009d3a:	f001 fde5 	bl	800b908 <__gethex>
 8009d3e:	f010 060f 	ands.w	r6, r0, #15
 8009d42:	4604      	mov	r4, r0
 8009d44:	d005      	beq.n	8009d52 <_strtod_l+0x72>
 8009d46:	2e06      	cmp	r6, #6
 8009d48:	d128      	bne.n	8009d9c <_strtod_l+0xbc>
 8009d4a:	3501      	adds	r5, #1
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009d50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f040 858e 	bne.w	800a876 <_strtod_l+0xb96>
 8009d5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d5c:	b1cb      	cbz	r3, 8009d92 <_strtod_l+0xb2>
 8009d5e:	4652      	mov	r2, sl
 8009d60:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009d64:	ec43 2b10 	vmov	d0, r2, r3
 8009d68:	b01f      	add	sp, #124	@ 0x7c
 8009d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d6e:	2920      	cmp	r1, #32
 8009d70:	d1ce      	bne.n	8009d10 <_strtod_l+0x30>
 8009d72:	3201      	adds	r2, #1
 8009d74:	e7c1      	b.n	8009cfa <_strtod_l+0x1a>
 8009d76:	292d      	cmp	r1, #45	@ 0x2d
 8009d78:	d1ca      	bne.n	8009d10 <_strtod_l+0x30>
 8009d7a:	2101      	movs	r1, #1
 8009d7c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009d7e:	1c51      	adds	r1, r2, #1
 8009d80:	9119      	str	r1, [sp, #100]	@ 0x64
 8009d82:	7852      	ldrb	r2, [r2, #1]
 8009d84:	2a00      	cmp	r2, #0
 8009d86:	d1c5      	bne.n	8009d14 <_strtod_l+0x34>
 8009d88:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d8a:	9419      	str	r4, [sp, #100]	@ 0x64
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f040 8570 	bne.w	800a872 <_strtod_l+0xb92>
 8009d92:	4652      	mov	r2, sl
 8009d94:	465b      	mov	r3, fp
 8009d96:	e7e5      	b.n	8009d64 <_strtod_l+0x84>
 8009d98:	2100      	movs	r1, #0
 8009d9a:	e7ef      	b.n	8009d7c <_strtod_l+0x9c>
 8009d9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009d9e:	b13a      	cbz	r2, 8009db0 <_strtod_l+0xd0>
 8009da0:	2135      	movs	r1, #53	@ 0x35
 8009da2:	a81c      	add	r0, sp, #112	@ 0x70
 8009da4:	f003 f8fc 	bl	800cfa0 <__copybits>
 8009da8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009daa:	9805      	ldr	r0, [sp, #20]
 8009dac:	f002 fcca 	bl	800c744 <_Bfree>
 8009db0:	3e01      	subs	r6, #1
 8009db2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009db4:	2e04      	cmp	r6, #4
 8009db6:	d806      	bhi.n	8009dc6 <_strtod_l+0xe6>
 8009db8:	e8df f006 	tbb	[pc, r6]
 8009dbc:	201d0314 	.word	0x201d0314
 8009dc0:	14          	.byte	0x14
 8009dc1:	00          	.byte	0x00
 8009dc2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009dc6:	05e1      	lsls	r1, r4, #23
 8009dc8:	bf48      	it	mi
 8009dca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009dce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009dd2:	0d1b      	lsrs	r3, r3, #20
 8009dd4:	051b      	lsls	r3, r3, #20
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1bb      	bne.n	8009d52 <_strtod_l+0x72>
 8009dda:	f000 fe93 	bl	800ab04 <__errno>
 8009dde:	2322      	movs	r3, #34	@ 0x22
 8009de0:	6003      	str	r3, [r0, #0]
 8009de2:	e7b6      	b.n	8009d52 <_strtod_l+0x72>
 8009de4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009de8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009dec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009df0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009df4:	e7e7      	b.n	8009dc6 <_strtod_l+0xe6>
 8009df6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009f74 <_strtod_l+0x294>
 8009dfa:	e7e4      	b.n	8009dc6 <_strtod_l+0xe6>
 8009dfc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009e00:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009e04:	e7df      	b.n	8009dc6 <_strtod_l+0xe6>
 8009e06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e0c:	785b      	ldrb	r3, [r3, #1]
 8009e0e:	2b30      	cmp	r3, #48	@ 0x30
 8009e10:	d0f9      	beq.n	8009e06 <_strtod_l+0x126>
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d09d      	beq.n	8009d52 <_strtod_l+0x72>
 8009e16:	2301      	movs	r3, #1
 8009e18:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e1e:	2300      	movs	r3, #0
 8009e20:	9308      	str	r3, [sp, #32]
 8009e22:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e24:	461f      	mov	r7, r3
 8009e26:	220a      	movs	r2, #10
 8009e28:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009e2a:	7805      	ldrb	r5, [r0, #0]
 8009e2c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009e30:	b2d9      	uxtb	r1, r3
 8009e32:	2909      	cmp	r1, #9
 8009e34:	d928      	bls.n	8009e88 <_strtod_l+0x1a8>
 8009e36:	494e      	ldr	r1, [pc, #312]	@ (8009f70 <_strtod_l+0x290>)
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f000 fe45 	bl	800aac8 <strncmp>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d032      	beq.n	8009ea8 <_strtod_l+0x1c8>
 8009e42:	2000      	movs	r0, #0
 8009e44:	462a      	mov	r2, r5
 8009e46:	4681      	mov	r9, r0
 8009e48:	463d      	mov	r5, r7
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2a65      	cmp	r2, #101	@ 0x65
 8009e4e:	d001      	beq.n	8009e54 <_strtod_l+0x174>
 8009e50:	2a45      	cmp	r2, #69	@ 0x45
 8009e52:	d114      	bne.n	8009e7e <_strtod_l+0x19e>
 8009e54:	b91d      	cbnz	r5, 8009e5e <_strtod_l+0x17e>
 8009e56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e58:	4302      	orrs	r2, r0
 8009e5a:	d095      	beq.n	8009d88 <_strtod_l+0xa8>
 8009e5c:	2500      	movs	r5, #0
 8009e5e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009e60:	1c62      	adds	r2, r4, #1
 8009e62:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e64:	7862      	ldrb	r2, [r4, #1]
 8009e66:	2a2b      	cmp	r2, #43	@ 0x2b
 8009e68:	d077      	beq.n	8009f5a <_strtod_l+0x27a>
 8009e6a:	2a2d      	cmp	r2, #45	@ 0x2d
 8009e6c:	d07b      	beq.n	8009f66 <_strtod_l+0x286>
 8009e6e:	f04f 0c00 	mov.w	ip, #0
 8009e72:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009e76:	2909      	cmp	r1, #9
 8009e78:	f240 8082 	bls.w	8009f80 <_strtod_l+0x2a0>
 8009e7c:	9419      	str	r4, [sp, #100]	@ 0x64
 8009e7e:	f04f 0800 	mov.w	r8, #0
 8009e82:	e0a2      	b.n	8009fca <_strtod_l+0x2ea>
 8009e84:	2300      	movs	r3, #0
 8009e86:	e7c7      	b.n	8009e18 <_strtod_l+0x138>
 8009e88:	2f08      	cmp	r7, #8
 8009e8a:	bfd5      	itete	le
 8009e8c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009e8e:	9908      	ldrgt	r1, [sp, #32]
 8009e90:	fb02 3301 	mlale	r3, r2, r1, r3
 8009e94:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009e98:	f100 0001 	add.w	r0, r0, #1
 8009e9c:	bfd4      	ite	le
 8009e9e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009ea0:	9308      	strgt	r3, [sp, #32]
 8009ea2:	3701      	adds	r7, #1
 8009ea4:	9019      	str	r0, [sp, #100]	@ 0x64
 8009ea6:	e7bf      	b.n	8009e28 <_strtod_l+0x148>
 8009ea8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009eaa:	1c5a      	adds	r2, r3, #1
 8009eac:	9219      	str	r2, [sp, #100]	@ 0x64
 8009eae:	785a      	ldrb	r2, [r3, #1]
 8009eb0:	b37f      	cbz	r7, 8009f12 <_strtod_l+0x232>
 8009eb2:	4681      	mov	r9, r0
 8009eb4:	463d      	mov	r5, r7
 8009eb6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009eba:	2b09      	cmp	r3, #9
 8009ebc:	d912      	bls.n	8009ee4 <_strtod_l+0x204>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e7c4      	b.n	8009e4c <_strtod_l+0x16c>
 8009ec2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ec4:	1c5a      	adds	r2, r3, #1
 8009ec6:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ec8:	785a      	ldrb	r2, [r3, #1]
 8009eca:	3001      	adds	r0, #1
 8009ecc:	2a30      	cmp	r2, #48	@ 0x30
 8009ece:	d0f8      	beq.n	8009ec2 <_strtod_l+0x1e2>
 8009ed0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009ed4:	2b08      	cmp	r3, #8
 8009ed6:	f200 84d3 	bhi.w	800a880 <_strtod_l+0xba0>
 8009eda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009edc:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ede:	4681      	mov	r9, r0
 8009ee0:	2000      	movs	r0, #0
 8009ee2:	4605      	mov	r5, r0
 8009ee4:	3a30      	subs	r2, #48	@ 0x30
 8009ee6:	f100 0301 	add.w	r3, r0, #1
 8009eea:	d02a      	beq.n	8009f42 <_strtod_l+0x262>
 8009eec:	4499      	add	r9, r3
 8009eee:	eb00 0c05 	add.w	ip, r0, r5
 8009ef2:	462b      	mov	r3, r5
 8009ef4:	210a      	movs	r1, #10
 8009ef6:	4563      	cmp	r3, ip
 8009ef8:	d10d      	bne.n	8009f16 <_strtod_l+0x236>
 8009efa:	1c69      	adds	r1, r5, #1
 8009efc:	4401      	add	r1, r0
 8009efe:	4428      	add	r0, r5
 8009f00:	2808      	cmp	r0, #8
 8009f02:	dc16      	bgt.n	8009f32 <_strtod_l+0x252>
 8009f04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009f06:	230a      	movs	r3, #10
 8009f08:	fb03 2300 	mla	r3, r3, r0, r2
 8009f0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f0e:	2300      	movs	r3, #0
 8009f10:	e018      	b.n	8009f44 <_strtod_l+0x264>
 8009f12:	4638      	mov	r0, r7
 8009f14:	e7da      	b.n	8009ecc <_strtod_l+0x1ec>
 8009f16:	2b08      	cmp	r3, #8
 8009f18:	f103 0301 	add.w	r3, r3, #1
 8009f1c:	dc03      	bgt.n	8009f26 <_strtod_l+0x246>
 8009f1e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009f20:	434e      	muls	r6, r1
 8009f22:	960a      	str	r6, [sp, #40]	@ 0x28
 8009f24:	e7e7      	b.n	8009ef6 <_strtod_l+0x216>
 8009f26:	2b10      	cmp	r3, #16
 8009f28:	bfde      	ittt	le
 8009f2a:	9e08      	ldrle	r6, [sp, #32]
 8009f2c:	434e      	mulle	r6, r1
 8009f2e:	9608      	strle	r6, [sp, #32]
 8009f30:	e7e1      	b.n	8009ef6 <_strtod_l+0x216>
 8009f32:	280f      	cmp	r0, #15
 8009f34:	dceb      	bgt.n	8009f0e <_strtod_l+0x22e>
 8009f36:	9808      	ldr	r0, [sp, #32]
 8009f38:	230a      	movs	r3, #10
 8009f3a:	fb03 2300 	mla	r3, r3, r0, r2
 8009f3e:	9308      	str	r3, [sp, #32]
 8009f40:	e7e5      	b.n	8009f0e <_strtod_l+0x22e>
 8009f42:	4629      	mov	r1, r5
 8009f44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f46:	1c50      	adds	r0, r2, #1
 8009f48:	9019      	str	r0, [sp, #100]	@ 0x64
 8009f4a:	7852      	ldrb	r2, [r2, #1]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	460d      	mov	r5, r1
 8009f50:	e7b1      	b.n	8009eb6 <_strtod_l+0x1d6>
 8009f52:	f04f 0900 	mov.w	r9, #0
 8009f56:	2301      	movs	r3, #1
 8009f58:	e77d      	b.n	8009e56 <_strtod_l+0x176>
 8009f5a:	f04f 0c00 	mov.w	ip, #0
 8009f5e:	1ca2      	adds	r2, r4, #2
 8009f60:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f62:	78a2      	ldrb	r2, [r4, #2]
 8009f64:	e785      	b.n	8009e72 <_strtod_l+0x192>
 8009f66:	f04f 0c01 	mov.w	ip, #1
 8009f6a:	e7f8      	b.n	8009f5e <_strtod_l+0x27e>
 8009f6c:	0800d890 	.word	0x0800d890
 8009f70:	0800d879 	.word	0x0800d879
 8009f74:	7ff00000 	.word	0x7ff00000
 8009f78:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f7a:	1c51      	adds	r1, r2, #1
 8009f7c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009f7e:	7852      	ldrb	r2, [r2, #1]
 8009f80:	2a30      	cmp	r2, #48	@ 0x30
 8009f82:	d0f9      	beq.n	8009f78 <_strtod_l+0x298>
 8009f84:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009f88:	2908      	cmp	r1, #8
 8009f8a:	f63f af78 	bhi.w	8009e7e <_strtod_l+0x19e>
 8009f8e:	3a30      	subs	r2, #48	@ 0x30
 8009f90:	920e      	str	r2, [sp, #56]	@ 0x38
 8009f92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f94:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009f96:	f04f 080a 	mov.w	r8, #10
 8009f9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009f9c:	1c56      	adds	r6, r2, #1
 8009f9e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009fa0:	7852      	ldrb	r2, [r2, #1]
 8009fa2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009fa6:	f1be 0f09 	cmp.w	lr, #9
 8009faa:	d939      	bls.n	800a020 <_strtod_l+0x340>
 8009fac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009fae:	1a76      	subs	r6, r6, r1
 8009fb0:	2e08      	cmp	r6, #8
 8009fb2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009fb6:	dc03      	bgt.n	8009fc0 <_strtod_l+0x2e0>
 8009fb8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009fba:	4588      	cmp	r8, r1
 8009fbc:	bfa8      	it	ge
 8009fbe:	4688      	movge	r8, r1
 8009fc0:	f1bc 0f00 	cmp.w	ip, #0
 8009fc4:	d001      	beq.n	8009fca <_strtod_l+0x2ea>
 8009fc6:	f1c8 0800 	rsb	r8, r8, #0
 8009fca:	2d00      	cmp	r5, #0
 8009fcc:	d14e      	bne.n	800a06c <_strtod_l+0x38c>
 8009fce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009fd0:	4308      	orrs	r0, r1
 8009fd2:	f47f aebe 	bne.w	8009d52 <_strtod_l+0x72>
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f47f aed6 	bne.w	8009d88 <_strtod_l+0xa8>
 8009fdc:	2a69      	cmp	r2, #105	@ 0x69
 8009fde:	d028      	beq.n	800a032 <_strtod_l+0x352>
 8009fe0:	dc25      	bgt.n	800a02e <_strtod_l+0x34e>
 8009fe2:	2a49      	cmp	r2, #73	@ 0x49
 8009fe4:	d025      	beq.n	800a032 <_strtod_l+0x352>
 8009fe6:	2a4e      	cmp	r2, #78	@ 0x4e
 8009fe8:	f47f aece 	bne.w	8009d88 <_strtod_l+0xa8>
 8009fec:	499b      	ldr	r1, [pc, #620]	@ (800a25c <_strtod_l+0x57c>)
 8009fee:	a819      	add	r0, sp, #100	@ 0x64
 8009ff0:	f001 feac 	bl	800bd4c <__match>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	f43f aec7 	beq.w	8009d88 <_strtod_l+0xa8>
 8009ffa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	2b28      	cmp	r3, #40	@ 0x28
 800a000:	d12e      	bne.n	800a060 <_strtod_l+0x380>
 800a002:	4997      	ldr	r1, [pc, #604]	@ (800a260 <_strtod_l+0x580>)
 800a004:	aa1c      	add	r2, sp, #112	@ 0x70
 800a006:	a819      	add	r0, sp, #100	@ 0x64
 800a008:	f001 feb4 	bl	800bd74 <__hexnan>
 800a00c:	2805      	cmp	r0, #5
 800a00e:	d127      	bne.n	800a060 <_strtod_l+0x380>
 800a010:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a012:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a016:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a01a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a01e:	e698      	b.n	8009d52 <_strtod_l+0x72>
 800a020:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a022:	fb08 2101 	mla	r1, r8, r1, r2
 800a026:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a02a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a02c:	e7b5      	b.n	8009f9a <_strtod_l+0x2ba>
 800a02e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a030:	e7da      	b.n	8009fe8 <_strtod_l+0x308>
 800a032:	498c      	ldr	r1, [pc, #560]	@ (800a264 <_strtod_l+0x584>)
 800a034:	a819      	add	r0, sp, #100	@ 0x64
 800a036:	f001 fe89 	bl	800bd4c <__match>
 800a03a:	2800      	cmp	r0, #0
 800a03c:	f43f aea4 	beq.w	8009d88 <_strtod_l+0xa8>
 800a040:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a042:	4989      	ldr	r1, [pc, #548]	@ (800a268 <_strtod_l+0x588>)
 800a044:	3b01      	subs	r3, #1
 800a046:	a819      	add	r0, sp, #100	@ 0x64
 800a048:	9319      	str	r3, [sp, #100]	@ 0x64
 800a04a:	f001 fe7f 	bl	800bd4c <__match>
 800a04e:	b910      	cbnz	r0, 800a056 <_strtod_l+0x376>
 800a050:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a052:	3301      	adds	r3, #1
 800a054:	9319      	str	r3, [sp, #100]	@ 0x64
 800a056:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a278 <_strtod_l+0x598>
 800a05a:	f04f 0a00 	mov.w	sl, #0
 800a05e:	e678      	b.n	8009d52 <_strtod_l+0x72>
 800a060:	4882      	ldr	r0, [pc, #520]	@ (800a26c <_strtod_l+0x58c>)
 800a062:	f000 fd8d 	bl	800ab80 <nan>
 800a066:	ec5b ab10 	vmov	sl, fp, d0
 800a06a:	e672      	b.n	8009d52 <_strtod_l+0x72>
 800a06c:	eba8 0309 	sub.w	r3, r8, r9
 800a070:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a072:	9309      	str	r3, [sp, #36]	@ 0x24
 800a074:	2f00      	cmp	r7, #0
 800a076:	bf08      	it	eq
 800a078:	462f      	moveq	r7, r5
 800a07a:	2d10      	cmp	r5, #16
 800a07c:	462c      	mov	r4, r5
 800a07e:	bfa8      	it	ge
 800a080:	2410      	movge	r4, #16
 800a082:	f7f6 fa3f 	bl	8000504 <__aeabi_ui2d>
 800a086:	2d09      	cmp	r5, #9
 800a088:	4682      	mov	sl, r0
 800a08a:	468b      	mov	fp, r1
 800a08c:	dc13      	bgt.n	800a0b6 <_strtod_l+0x3d6>
 800a08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a090:	2b00      	cmp	r3, #0
 800a092:	f43f ae5e 	beq.w	8009d52 <_strtod_l+0x72>
 800a096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a098:	dd78      	ble.n	800a18c <_strtod_l+0x4ac>
 800a09a:	2b16      	cmp	r3, #22
 800a09c:	dc5f      	bgt.n	800a15e <_strtod_l+0x47e>
 800a09e:	4974      	ldr	r1, [pc, #464]	@ (800a270 <_strtod_l+0x590>)
 800a0a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a0a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0a8:	4652      	mov	r2, sl
 800a0aa:	465b      	mov	r3, fp
 800a0ac:	f7f6 faa4 	bl	80005f8 <__aeabi_dmul>
 800a0b0:	4682      	mov	sl, r0
 800a0b2:	468b      	mov	fp, r1
 800a0b4:	e64d      	b.n	8009d52 <_strtod_l+0x72>
 800a0b6:	4b6e      	ldr	r3, [pc, #440]	@ (800a270 <_strtod_l+0x590>)
 800a0b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a0bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a0c0:	f7f6 fa9a 	bl	80005f8 <__aeabi_dmul>
 800a0c4:	4682      	mov	sl, r0
 800a0c6:	9808      	ldr	r0, [sp, #32]
 800a0c8:	468b      	mov	fp, r1
 800a0ca:	f7f6 fa1b 	bl	8000504 <__aeabi_ui2d>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	4650      	mov	r0, sl
 800a0d4:	4659      	mov	r1, fp
 800a0d6:	f7f6 f8d9 	bl	800028c <__adddf3>
 800a0da:	2d0f      	cmp	r5, #15
 800a0dc:	4682      	mov	sl, r0
 800a0de:	468b      	mov	fp, r1
 800a0e0:	ddd5      	ble.n	800a08e <_strtod_l+0x3ae>
 800a0e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0e4:	1b2c      	subs	r4, r5, r4
 800a0e6:	441c      	add	r4, r3
 800a0e8:	2c00      	cmp	r4, #0
 800a0ea:	f340 8096 	ble.w	800a21a <_strtod_l+0x53a>
 800a0ee:	f014 030f 	ands.w	r3, r4, #15
 800a0f2:	d00a      	beq.n	800a10a <_strtod_l+0x42a>
 800a0f4:	495e      	ldr	r1, [pc, #376]	@ (800a270 <_strtod_l+0x590>)
 800a0f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a0fa:	4652      	mov	r2, sl
 800a0fc:	465b      	mov	r3, fp
 800a0fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a102:	f7f6 fa79 	bl	80005f8 <__aeabi_dmul>
 800a106:	4682      	mov	sl, r0
 800a108:	468b      	mov	fp, r1
 800a10a:	f034 040f 	bics.w	r4, r4, #15
 800a10e:	d073      	beq.n	800a1f8 <_strtod_l+0x518>
 800a110:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a114:	dd48      	ble.n	800a1a8 <_strtod_l+0x4c8>
 800a116:	2400      	movs	r4, #0
 800a118:	46a0      	mov	r8, r4
 800a11a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a11c:	46a1      	mov	r9, r4
 800a11e:	9a05      	ldr	r2, [sp, #20]
 800a120:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a278 <_strtod_l+0x598>
 800a124:	2322      	movs	r3, #34	@ 0x22
 800a126:	6013      	str	r3, [r2, #0]
 800a128:	f04f 0a00 	mov.w	sl, #0
 800a12c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f43f ae0f 	beq.w	8009d52 <_strtod_l+0x72>
 800a134:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a136:	9805      	ldr	r0, [sp, #20]
 800a138:	f002 fb04 	bl	800c744 <_Bfree>
 800a13c:	9805      	ldr	r0, [sp, #20]
 800a13e:	4649      	mov	r1, r9
 800a140:	f002 fb00 	bl	800c744 <_Bfree>
 800a144:	9805      	ldr	r0, [sp, #20]
 800a146:	4641      	mov	r1, r8
 800a148:	f002 fafc 	bl	800c744 <_Bfree>
 800a14c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a14e:	9805      	ldr	r0, [sp, #20]
 800a150:	f002 faf8 	bl	800c744 <_Bfree>
 800a154:	9805      	ldr	r0, [sp, #20]
 800a156:	4621      	mov	r1, r4
 800a158:	f002 faf4 	bl	800c744 <_Bfree>
 800a15c:	e5f9      	b.n	8009d52 <_strtod_l+0x72>
 800a15e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a160:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a164:	4293      	cmp	r3, r2
 800a166:	dbbc      	blt.n	800a0e2 <_strtod_l+0x402>
 800a168:	4c41      	ldr	r4, [pc, #260]	@ (800a270 <_strtod_l+0x590>)
 800a16a:	f1c5 050f 	rsb	r5, r5, #15
 800a16e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a172:	4652      	mov	r2, sl
 800a174:	465b      	mov	r3, fp
 800a176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a17a:	f7f6 fa3d 	bl	80005f8 <__aeabi_dmul>
 800a17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a180:	1b5d      	subs	r5, r3, r5
 800a182:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a186:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a18a:	e78f      	b.n	800a0ac <_strtod_l+0x3cc>
 800a18c:	3316      	adds	r3, #22
 800a18e:	dba8      	blt.n	800a0e2 <_strtod_l+0x402>
 800a190:	4b37      	ldr	r3, [pc, #220]	@ (800a270 <_strtod_l+0x590>)
 800a192:	eba9 0808 	sub.w	r8, r9, r8
 800a196:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a19a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a19e:	4650      	mov	r0, sl
 800a1a0:	4659      	mov	r1, fp
 800a1a2:	f7f6 fb53 	bl	800084c <__aeabi_ddiv>
 800a1a6:	e783      	b.n	800a0b0 <_strtod_l+0x3d0>
 800a1a8:	4b32      	ldr	r3, [pc, #200]	@ (800a274 <_strtod_l+0x594>)
 800a1aa:	9308      	str	r3, [sp, #32]
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	1124      	asrs	r4, r4, #4
 800a1b0:	4650      	mov	r0, sl
 800a1b2:	4659      	mov	r1, fp
 800a1b4:	461e      	mov	r6, r3
 800a1b6:	2c01      	cmp	r4, #1
 800a1b8:	dc21      	bgt.n	800a1fe <_strtod_l+0x51e>
 800a1ba:	b10b      	cbz	r3, 800a1c0 <_strtod_l+0x4e0>
 800a1bc:	4682      	mov	sl, r0
 800a1be:	468b      	mov	fp, r1
 800a1c0:	492c      	ldr	r1, [pc, #176]	@ (800a274 <_strtod_l+0x594>)
 800a1c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a1c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a1ca:	4652      	mov	r2, sl
 800a1cc:	465b      	mov	r3, fp
 800a1ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1d2:	f7f6 fa11 	bl	80005f8 <__aeabi_dmul>
 800a1d6:	4b28      	ldr	r3, [pc, #160]	@ (800a278 <_strtod_l+0x598>)
 800a1d8:	460a      	mov	r2, r1
 800a1da:	400b      	ands	r3, r1
 800a1dc:	4927      	ldr	r1, [pc, #156]	@ (800a27c <_strtod_l+0x59c>)
 800a1de:	428b      	cmp	r3, r1
 800a1e0:	4682      	mov	sl, r0
 800a1e2:	d898      	bhi.n	800a116 <_strtod_l+0x436>
 800a1e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a1e8:	428b      	cmp	r3, r1
 800a1ea:	bf86      	itte	hi
 800a1ec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a280 <_strtod_l+0x5a0>
 800a1f0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a1f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	9308      	str	r3, [sp, #32]
 800a1fc:	e07a      	b.n	800a2f4 <_strtod_l+0x614>
 800a1fe:	07e2      	lsls	r2, r4, #31
 800a200:	d505      	bpl.n	800a20e <_strtod_l+0x52e>
 800a202:	9b08      	ldr	r3, [sp, #32]
 800a204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a208:	f7f6 f9f6 	bl	80005f8 <__aeabi_dmul>
 800a20c:	2301      	movs	r3, #1
 800a20e:	9a08      	ldr	r2, [sp, #32]
 800a210:	3208      	adds	r2, #8
 800a212:	3601      	adds	r6, #1
 800a214:	1064      	asrs	r4, r4, #1
 800a216:	9208      	str	r2, [sp, #32]
 800a218:	e7cd      	b.n	800a1b6 <_strtod_l+0x4d6>
 800a21a:	d0ed      	beq.n	800a1f8 <_strtod_l+0x518>
 800a21c:	4264      	negs	r4, r4
 800a21e:	f014 020f 	ands.w	r2, r4, #15
 800a222:	d00a      	beq.n	800a23a <_strtod_l+0x55a>
 800a224:	4b12      	ldr	r3, [pc, #72]	@ (800a270 <_strtod_l+0x590>)
 800a226:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a22a:	4650      	mov	r0, sl
 800a22c:	4659      	mov	r1, fp
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	f7f6 fb0b 	bl	800084c <__aeabi_ddiv>
 800a236:	4682      	mov	sl, r0
 800a238:	468b      	mov	fp, r1
 800a23a:	1124      	asrs	r4, r4, #4
 800a23c:	d0dc      	beq.n	800a1f8 <_strtod_l+0x518>
 800a23e:	2c1f      	cmp	r4, #31
 800a240:	dd20      	ble.n	800a284 <_strtod_l+0x5a4>
 800a242:	2400      	movs	r4, #0
 800a244:	46a0      	mov	r8, r4
 800a246:	940a      	str	r4, [sp, #40]	@ 0x28
 800a248:	46a1      	mov	r9, r4
 800a24a:	9a05      	ldr	r2, [sp, #20]
 800a24c:	2322      	movs	r3, #34	@ 0x22
 800a24e:	f04f 0a00 	mov.w	sl, #0
 800a252:	f04f 0b00 	mov.w	fp, #0
 800a256:	6013      	str	r3, [r2, #0]
 800a258:	e768      	b.n	800a12c <_strtod_l+0x44c>
 800a25a:	bf00      	nop
 800a25c:	0800d84d 	.word	0x0800d84d
 800a260:	0800d87c 	.word	0x0800d87c
 800a264:	0800d845 	.word	0x0800d845
 800a268:	0800d9dc 	.word	0x0800d9dc
 800a26c:	0800dc6b 	.word	0x0800dc6b
 800a270:	0800db68 	.word	0x0800db68
 800a274:	0800db40 	.word	0x0800db40
 800a278:	7ff00000 	.word	0x7ff00000
 800a27c:	7ca00000 	.word	0x7ca00000
 800a280:	7fefffff 	.word	0x7fefffff
 800a284:	f014 0310 	ands.w	r3, r4, #16
 800a288:	bf18      	it	ne
 800a28a:	236a      	movne	r3, #106	@ 0x6a
 800a28c:	4ea9      	ldr	r6, [pc, #676]	@ (800a534 <_strtod_l+0x854>)
 800a28e:	9308      	str	r3, [sp, #32]
 800a290:	4650      	mov	r0, sl
 800a292:	4659      	mov	r1, fp
 800a294:	2300      	movs	r3, #0
 800a296:	07e2      	lsls	r2, r4, #31
 800a298:	d504      	bpl.n	800a2a4 <_strtod_l+0x5c4>
 800a29a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a29e:	f7f6 f9ab 	bl	80005f8 <__aeabi_dmul>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	1064      	asrs	r4, r4, #1
 800a2a6:	f106 0608 	add.w	r6, r6, #8
 800a2aa:	d1f4      	bne.n	800a296 <_strtod_l+0x5b6>
 800a2ac:	b10b      	cbz	r3, 800a2b2 <_strtod_l+0x5d2>
 800a2ae:	4682      	mov	sl, r0
 800a2b0:	468b      	mov	fp, r1
 800a2b2:	9b08      	ldr	r3, [sp, #32]
 800a2b4:	b1b3      	cbz	r3, 800a2e4 <_strtod_l+0x604>
 800a2b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a2ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	4659      	mov	r1, fp
 800a2c2:	dd0f      	ble.n	800a2e4 <_strtod_l+0x604>
 800a2c4:	2b1f      	cmp	r3, #31
 800a2c6:	dd55      	ble.n	800a374 <_strtod_l+0x694>
 800a2c8:	2b34      	cmp	r3, #52	@ 0x34
 800a2ca:	bfde      	ittt	le
 800a2cc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a2d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a2d4:	4093      	lslle	r3, r2
 800a2d6:	f04f 0a00 	mov.w	sl, #0
 800a2da:	bfcc      	ite	gt
 800a2dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a2e0:	ea03 0b01 	andle.w	fp, r3, r1
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	4650      	mov	r0, sl
 800a2ea:	4659      	mov	r1, fp
 800a2ec:	f7f6 fbec 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	d1a6      	bne.n	800a242 <_strtod_l+0x562>
 800a2f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a2fa:	9805      	ldr	r0, [sp, #20]
 800a2fc:	462b      	mov	r3, r5
 800a2fe:	463a      	mov	r2, r7
 800a300:	f002 fa88 	bl	800c814 <__s2b>
 800a304:	900a      	str	r0, [sp, #40]	@ 0x28
 800a306:	2800      	cmp	r0, #0
 800a308:	f43f af05 	beq.w	800a116 <_strtod_l+0x436>
 800a30c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a30e:	2a00      	cmp	r2, #0
 800a310:	eba9 0308 	sub.w	r3, r9, r8
 800a314:	bfa8      	it	ge
 800a316:	2300      	movge	r3, #0
 800a318:	9312      	str	r3, [sp, #72]	@ 0x48
 800a31a:	2400      	movs	r4, #0
 800a31c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a320:	9316      	str	r3, [sp, #88]	@ 0x58
 800a322:	46a0      	mov	r8, r4
 800a324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a326:	9805      	ldr	r0, [sp, #20]
 800a328:	6859      	ldr	r1, [r3, #4]
 800a32a:	f002 f9cb 	bl	800c6c4 <_Balloc>
 800a32e:	4681      	mov	r9, r0
 800a330:	2800      	cmp	r0, #0
 800a332:	f43f aef4 	beq.w	800a11e <_strtod_l+0x43e>
 800a336:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a338:	691a      	ldr	r2, [r3, #16]
 800a33a:	3202      	adds	r2, #2
 800a33c:	f103 010c 	add.w	r1, r3, #12
 800a340:	0092      	lsls	r2, r2, #2
 800a342:	300c      	adds	r0, #12
 800a344:	f000 fc0b 	bl	800ab5e <memcpy>
 800a348:	ec4b ab10 	vmov	d0, sl, fp
 800a34c:	9805      	ldr	r0, [sp, #20]
 800a34e:	aa1c      	add	r2, sp, #112	@ 0x70
 800a350:	a91b      	add	r1, sp, #108	@ 0x6c
 800a352:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a356:	f002 fd99 	bl	800ce8c <__d2b>
 800a35a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a35c:	2800      	cmp	r0, #0
 800a35e:	f43f aede 	beq.w	800a11e <_strtod_l+0x43e>
 800a362:	9805      	ldr	r0, [sp, #20]
 800a364:	2101      	movs	r1, #1
 800a366:	f002 faeb 	bl	800c940 <__i2b>
 800a36a:	4680      	mov	r8, r0
 800a36c:	b948      	cbnz	r0, 800a382 <_strtod_l+0x6a2>
 800a36e:	f04f 0800 	mov.w	r8, #0
 800a372:	e6d4      	b.n	800a11e <_strtod_l+0x43e>
 800a374:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a378:	fa02 f303 	lsl.w	r3, r2, r3
 800a37c:	ea03 0a0a 	and.w	sl, r3, sl
 800a380:	e7b0      	b.n	800a2e4 <_strtod_l+0x604>
 800a382:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a384:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a386:	2d00      	cmp	r5, #0
 800a388:	bfab      	itete	ge
 800a38a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a38c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a38e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a390:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a392:	bfac      	ite	ge
 800a394:	18ef      	addge	r7, r5, r3
 800a396:	1b5e      	sublt	r6, r3, r5
 800a398:	9b08      	ldr	r3, [sp, #32]
 800a39a:	1aed      	subs	r5, r5, r3
 800a39c:	4415      	add	r5, r2
 800a39e:	4b66      	ldr	r3, [pc, #408]	@ (800a538 <_strtod_l+0x858>)
 800a3a0:	3d01      	subs	r5, #1
 800a3a2:	429d      	cmp	r5, r3
 800a3a4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a3a8:	da50      	bge.n	800a44c <_strtod_l+0x76c>
 800a3aa:	1b5b      	subs	r3, r3, r5
 800a3ac:	2b1f      	cmp	r3, #31
 800a3ae:	eba2 0203 	sub.w	r2, r2, r3
 800a3b2:	f04f 0101 	mov.w	r1, #1
 800a3b6:	dc3d      	bgt.n	800a434 <_strtod_l+0x754>
 800a3b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a3bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a3be:	2300      	movs	r3, #0
 800a3c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a3c2:	18bd      	adds	r5, r7, r2
 800a3c4:	9b08      	ldr	r3, [sp, #32]
 800a3c6:	42af      	cmp	r7, r5
 800a3c8:	4416      	add	r6, r2
 800a3ca:	441e      	add	r6, r3
 800a3cc:	463b      	mov	r3, r7
 800a3ce:	bfa8      	it	ge
 800a3d0:	462b      	movge	r3, r5
 800a3d2:	42b3      	cmp	r3, r6
 800a3d4:	bfa8      	it	ge
 800a3d6:	4633      	movge	r3, r6
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	bfc2      	ittt	gt
 800a3dc:	1aed      	subgt	r5, r5, r3
 800a3de:	1af6      	subgt	r6, r6, r3
 800a3e0:	1aff      	subgt	r7, r7, r3
 800a3e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	dd16      	ble.n	800a416 <_strtod_l+0x736>
 800a3e8:	4641      	mov	r1, r8
 800a3ea:	9805      	ldr	r0, [sp, #20]
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	f002 fb67 	bl	800cac0 <__pow5mult>
 800a3f2:	4680      	mov	r8, r0
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	d0ba      	beq.n	800a36e <_strtod_l+0x68e>
 800a3f8:	4601      	mov	r1, r0
 800a3fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a3fc:	9805      	ldr	r0, [sp, #20]
 800a3fe:	f002 fab5 	bl	800c96c <__multiply>
 800a402:	900e      	str	r0, [sp, #56]	@ 0x38
 800a404:	2800      	cmp	r0, #0
 800a406:	f43f ae8a 	beq.w	800a11e <_strtod_l+0x43e>
 800a40a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a40c:	9805      	ldr	r0, [sp, #20]
 800a40e:	f002 f999 	bl	800c744 <_Bfree>
 800a412:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a414:	931a      	str	r3, [sp, #104]	@ 0x68
 800a416:	2d00      	cmp	r5, #0
 800a418:	dc1d      	bgt.n	800a456 <_strtod_l+0x776>
 800a41a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	dd23      	ble.n	800a468 <_strtod_l+0x788>
 800a420:	4649      	mov	r1, r9
 800a422:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a424:	9805      	ldr	r0, [sp, #20]
 800a426:	f002 fb4b 	bl	800cac0 <__pow5mult>
 800a42a:	4681      	mov	r9, r0
 800a42c:	b9e0      	cbnz	r0, 800a468 <_strtod_l+0x788>
 800a42e:	f04f 0900 	mov.w	r9, #0
 800a432:	e674      	b.n	800a11e <_strtod_l+0x43e>
 800a434:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a438:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a43c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a440:	35e2      	adds	r5, #226	@ 0xe2
 800a442:	fa01 f305 	lsl.w	r3, r1, r5
 800a446:	9310      	str	r3, [sp, #64]	@ 0x40
 800a448:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a44a:	e7ba      	b.n	800a3c2 <_strtod_l+0x6e2>
 800a44c:	2300      	movs	r3, #0
 800a44e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a450:	2301      	movs	r3, #1
 800a452:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a454:	e7b5      	b.n	800a3c2 <_strtod_l+0x6e2>
 800a456:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a458:	9805      	ldr	r0, [sp, #20]
 800a45a:	462a      	mov	r2, r5
 800a45c:	f002 fb8a 	bl	800cb74 <__lshift>
 800a460:	901a      	str	r0, [sp, #104]	@ 0x68
 800a462:	2800      	cmp	r0, #0
 800a464:	d1d9      	bne.n	800a41a <_strtod_l+0x73a>
 800a466:	e65a      	b.n	800a11e <_strtod_l+0x43e>
 800a468:	2e00      	cmp	r6, #0
 800a46a:	dd07      	ble.n	800a47c <_strtod_l+0x79c>
 800a46c:	4649      	mov	r1, r9
 800a46e:	9805      	ldr	r0, [sp, #20]
 800a470:	4632      	mov	r2, r6
 800a472:	f002 fb7f 	bl	800cb74 <__lshift>
 800a476:	4681      	mov	r9, r0
 800a478:	2800      	cmp	r0, #0
 800a47a:	d0d8      	beq.n	800a42e <_strtod_l+0x74e>
 800a47c:	2f00      	cmp	r7, #0
 800a47e:	dd08      	ble.n	800a492 <_strtod_l+0x7b2>
 800a480:	4641      	mov	r1, r8
 800a482:	9805      	ldr	r0, [sp, #20]
 800a484:	463a      	mov	r2, r7
 800a486:	f002 fb75 	bl	800cb74 <__lshift>
 800a48a:	4680      	mov	r8, r0
 800a48c:	2800      	cmp	r0, #0
 800a48e:	f43f ae46 	beq.w	800a11e <_strtod_l+0x43e>
 800a492:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a494:	9805      	ldr	r0, [sp, #20]
 800a496:	464a      	mov	r2, r9
 800a498:	f002 fbf4 	bl	800cc84 <__mdiff>
 800a49c:	4604      	mov	r4, r0
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	f43f ae3d 	beq.w	800a11e <_strtod_l+0x43e>
 800a4a4:	68c3      	ldr	r3, [r0, #12]
 800a4a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	60c3      	str	r3, [r0, #12]
 800a4ac:	4641      	mov	r1, r8
 800a4ae:	f002 fbcd 	bl	800cc4c <__mcmp>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	da46      	bge.n	800a544 <_strtod_l+0x864>
 800a4b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4b8:	ea53 030a 	orrs.w	r3, r3, sl
 800a4bc:	d16c      	bne.n	800a598 <_strtod_l+0x8b8>
 800a4be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d168      	bne.n	800a598 <_strtod_l+0x8b8>
 800a4c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4ca:	0d1b      	lsrs	r3, r3, #20
 800a4cc:	051b      	lsls	r3, r3, #20
 800a4ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a4d2:	d961      	bls.n	800a598 <_strtod_l+0x8b8>
 800a4d4:	6963      	ldr	r3, [r4, #20]
 800a4d6:	b913      	cbnz	r3, 800a4de <_strtod_l+0x7fe>
 800a4d8:	6923      	ldr	r3, [r4, #16]
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	dd5c      	ble.n	800a598 <_strtod_l+0x8b8>
 800a4de:	4621      	mov	r1, r4
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	9805      	ldr	r0, [sp, #20]
 800a4e4:	f002 fb46 	bl	800cb74 <__lshift>
 800a4e8:	4641      	mov	r1, r8
 800a4ea:	4604      	mov	r4, r0
 800a4ec:	f002 fbae 	bl	800cc4c <__mcmp>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	dd51      	ble.n	800a598 <_strtod_l+0x8b8>
 800a4f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4f8:	9a08      	ldr	r2, [sp, #32]
 800a4fa:	0d1b      	lsrs	r3, r3, #20
 800a4fc:	051b      	lsls	r3, r3, #20
 800a4fe:	2a00      	cmp	r2, #0
 800a500:	d06b      	beq.n	800a5da <_strtod_l+0x8fa>
 800a502:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a506:	d868      	bhi.n	800a5da <_strtod_l+0x8fa>
 800a508:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a50c:	f67f ae9d 	bls.w	800a24a <_strtod_l+0x56a>
 800a510:	4b0a      	ldr	r3, [pc, #40]	@ (800a53c <_strtod_l+0x85c>)
 800a512:	4650      	mov	r0, sl
 800a514:	4659      	mov	r1, fp
 800a516:	2200      	movs	r2, #0
 800a518:	f7f6 f86e 	bl	80005f8 <__aeabi_dmul>
 800a51c:	4b08      	ldr	r3, [pc, #32]	@ (800a540 <_strtod_l+0x860>)
 800a51e:	400b      	ands	r3, r1
 800a520:	4682      	mov	sl, r0
 800a522:	468b      	mov	fp, r1
 800a524:	2b00      	cmp	r3, #0
 800a526:	f47f ae05 	bne.w	800a134 <_strtod_l+0x454>
 800a52a:	9a05      	ldr	r2, [sp, #20]
 800a52c:	2322      	movs	r3, #34	@ 0x22
 800a52e:	6013      	str	r3, [r2, #0]
 800a530:	e600      	b.n	800a134 <_strtod_l+0x454>
 800a532:	bf00      	nop
 800a534:	0800d8a8 	.word	0x0800d8a8
 800a538:	fffffc02 	.word	0xfffffc02
 800a53c:	39500000 	.word	0x39500000
 800a540:	7ff00000 	.word	0x7ff00000
 800a544:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a548:	d165      	bne.n	800a616 <_strtod_l+0x936>
 800a54a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a54c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a550:	b35a      	cbz	r2, 800a5aa <_strtod_l+0x8ca>
 800a552:	4a9f      	ldr	r2, [pc, #636]	@ (800a7d0 <_strtod_l+0xaf0>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d12b      	bne.n	800a5b0 <_strtod_l+0x8d0>
 800a558:	9b08      	ldr	r3, [sp, #32]
 800a55a:	4651      	mov	r1, sl
 800a55c:	b303      	cbz	r3, 800a5a0 <_strtod_l+0x8c0>
 800a55e:	4b9d      	ldr	r3, [pc, #628]	@ (800a7d4 <_strtod_l+0xaf4>)
 800a560:	465a      	mov	r2, fp
 800a562:	4013      	ands	r3, r2
 800a564:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a568:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a56c:	d81b      	bhi.n	800a5a6 <_strtod_l+0x8c6>
 800a56e:	0d1b      	lsrs	r3, r3, #20
 800a570:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a574:	fa02 f303 	lsl.w	r3, r2, r3
 800a578:	4299      	cmp	r1, r3
 800a57a:	d119      	bne.n	800a5b0 <_strtod_l+0x8d0>
 800a57c:	4b96      	ldr	r3, [pc, #600]	@ (800a7d8 <_strtod_l+0xaf8>)
 800a57e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a580:	429a      	cmp	r2, r3
 800a582:	d102      	bne.n	800a58a <_strtod_l+0x8aa>
 800a584:	3101      	adds	r1, #1
 800a586:	f43f adca 	beq.w	800a11e <_strtod_l+0x43e>
 800a58a:	4b92      	ldr	r3, [pc, #584]	@ (800a7d4 <_strtod_l+0xaf4>)
 800a58c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a58e:	401a      	ands	r2, r3
 800a590:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a594:	f04f 0a00 	mov.w	sl, #0
 800a598:	9b08      	ldr	r3, [sp, #32]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1b8      	bne.n	800a510 <_strtod_l+0x830>
 800a59e:	e5c9      	b.n	800a134 <_strtod_l+0x454>
 800a5a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a5a4:	e7e8      	b.n	800a578 <_strtod_l+0x898>
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	e7e6      	b.n	800a578 <_strtod_l+0x898>
 800a5aa:	ea53 030a 	orrs.w	r3, r3, sl
 800a5ae:	d0a1      	beq.n	800a4f4 <_strtod_l+0x814>
 800a5b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a5b2:	b1db      	cbz	r3, 800a5ec <_strtod_l+0x90c>
 800a5b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a5b6:	4213      	tst	r3, r2
 800a5b8:	d0ee      	beq.n	800a598 <_strtod_l+0x8b8>
 800a5ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5bc:	9a08      	ldr	r2, [sp, #32]
 800a5be:	4650      	mov	r0, sl
 800a5c0:	4659      	mov	r1, fp
 800a5c2:	b1bb      	cbz	r3, 800a5f4 <_strtod_l+0x914>
 800a5c4:	f7ff fb6c 	bl	8009ca0 <sulp>
 800a5c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5cc:	ec53 2b10 	vmov	r2, r3, d0
 800a5d0:	f7f5 fe5c 	bl	800028c <__adddf3>
 800a5d4:	4682      	mov	sl, r0
 800a5d6:	468b      	mov	fp, r1
 800a5d8:	e7de      	b.n	800a598 <_strtod_l+0x8b8>
 800a5da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a5de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a5e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a5e6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a5ea:	e7d5      	b.n	800a598 <_strtod_l+0x8b8>
 800a5ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a5ee:	ea13 0f0a 	tst.w	r3, sl
 800a5f2:	e7e1      	b.n	800a5b8 <_strtod_l+0x8d8>
 800a5f4:	f7ff fb54 	bl	8009ca0 <sulp>
 800a5f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5fc:	ec53 2b10 	vmov	r2, r3, d0
 800a600:	f7f5 fe42 	bl	8000288 <__aeabi_dsub>
 800a604:	2200      	movs	r2, #0
 800a606:	2300      	movs	r3, #0
 800a608:	4682      	mov	sl, r0
 800a60a:	468b      	mov	fp, r1
 800a60c:	f7f6 fa5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a610:	2800      	cmp	r0, #0
 800a612:	d0c1      	beq.n	800a598 <_strtod_l+0x8b8>
 800a614:	e619      	b.n	800a24a <_strtod_l+0x56a>
 800a616:	4641      	mov	r1, r8
 800a618:	4620      	mov	r0, r4
 800a61a:	f002 fc8f 	bl	800cf3c <__ratio>
 800a61e:	ec57 6b10 	vmov	r6, r7, d0
 800a622:	2200      	movs	r2, #0
 800a624:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a628:	4630      	mov	r0, r6
 800a62a:	4639      	mov	r1, r7
 800a62c:	f7f6 fa60 	bl	8000af0 <__aeabi_dcmple>
 800a630:	2800      	cmp	r0, #0
 800a632:	d06f      	beq.n	800a714 <_strtod_l+0xa34>
 800a634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a636:	2b00      	cmp	r3, #0
 800a638:	d17a      	bne.n	800a730 <_strtod_l+0xa50>
 800a63a:	f1ba 0f00 	cmp.w	sl, #0
 800a63e:	d158      	bne.n	800a6f2 <_strtod_l+0xa12>
 800a640:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a642:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a646:	2b00      	cmp	r3, #0
 800a648:	d15a      	bne.n	800a700 <_strtod_l+0xa20>
 800a64a:	4b64      	ldr	r3, [pc, #400]	@ (800a7dc <_strtod_l+0xafc>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	4630      	mov	r0, r6
 800a650:	4639      	mov	r1, r7
 800a652:	f7f6 fa43 	bl	8000adc <__aeabi_dcmplt>
 800a656:	2800      	cmp	r0, #0
 800a658:	d159      	bne.n	800a70e <_strtod_l+0xa2e>
 800a65a:	4630      	mov	r0, r6
 800a65c:	4639      	mov	r1, r7
 800a65e:	4b60      	ldr	r3, [pc, #384]	@ (800a7e0 <_strtod_l+0xb00>)
 800a660:	2200      	movs	r2, #0
 800a662:	f7f5 ffc9 	bl	80005f8 <__aeabi_dmul>
 800a666:	4606      	mov	r6, r0
 800a668:	460f      	mov	r7, r1
 800a66a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a66e:	9606      	str	r6, [sp, #24]
 800a670:	9307      	str	r3, [sp, #28]
 800a672:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a676:	4d57      	ldr	r5, [pc, #348]	@ (800a7d4 <_strtod_l+0xaf4>)
 800a678:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a67c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a67e:	401d      	ands	r5, r3
 800a680:	4b58      	ldr	r3, [pc, #352]	@ (800a7e4 <_strtod_l+0xb04>)
 800a682:	429d      	cmp	r5, r3
 800a684:	f040 80b2 	bne.w	800a7ec <_strtod_l+0xb0c>
 800a688:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a68a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a68e:	ec4b ab10 	vmov	d0, sl, fp
 800a692:	f002 fb8b 	bl	800cdac <__ulp>
 800a696:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a69a:	ec51 0b10 	vmov	r0, r1, d0
 800a69e:	f7f5 ffab 	bl	80005f8 <__aeabi_dmul>
 800a6a2:	4652      	mov	r2, sl
 800a6a4:	465b      	mov	r3, fp
 800a6a6:	f7f5 fdf1 	bl	800028c <__adddf3>
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4949      	ldr	r1, [pc, #292]	@ (800a7d4 <_strtod_l+0xaf4>)
 800a6ae:	4a4e      	ldr	r2, [pc, #312]	@ (800a7e8 <_strtod_l+0xb08>)
 800a6b0:	4019      	ands	r1, r3
 800a6b2:	4291      	cmp	r1, r2
 800a6b4:	4682      	mov	sl, r0
 800a6b6:	d942      	bls.n	800a73e <_strtod_l+0xa5e>
 800a6b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a6ba:	4b47      	ldr	r3, [pc, #284]	@ (800a7d8 <_strtod_l+0xaf8>)
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d103      	bne.n	800a6c8 <_strtod_l+0x9e8>
 800a6c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	f43f ad2b 	beq.w	800a11e <_strtod_l+0x43e>
 800a6c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a7d8 <_strtod_l+0xaf8>
 800a6cc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a6d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6d2:	9805      	ldr	r0, [sp, #20]
 800a6d4:	f002 f836 	bl	800c744 <_Bfree>
 800a6d8:	9805      	ldr	r0, [sp, #20]
 800a6da:	4649      	mov	r1, r9
 800a6dc:	f002 f832 	bl	800c744 <_Bfree>
 800a6e0:	9805      	ldr	r0, [sp, #20]
 800a6e2:	4641      	mov	r1, r8
 800a6e4:	f002 f82e 	bl	800c744 <_Bfree>
 800a6e8:	9805      	ldr	r0, [sp, #20]
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	f002 f82a 	bl	800c744 <_Bfree>
 800a6f0:	e618      	b.n	800a324 <_strtod_l+0x644>
 800a6f2:	f1ba 0f01 	cmp.w	sl, #1
 800a6f6:	d103      	bne.n	800a700 <_strtod_l+0xa20>
 800a6f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f43f ada5 	beq.w	800a24a <_strtod_l+0x56a>
 800a700:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a7b0 <_strtod_l+0xad0>
 800a704:	4f35      	ldr	r7, [pc, #212]	@ (800a7dc <_strtod_l+0xafc>)
 800a706:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a70a:	2600      	movs	r6, #0
 800a70c:	e7b1      	b.n	800a672 <_strtod_l+0x992>
 800a70e:	4f34      	ldr	r7, [pc, #208]	@ (800a7e0 <_strtod_l+0xb00>)
 800a710:	2600      	movs	r6, #0
 800a712:	e7aa      	b.n	800a66a <_strtod_l+0x98a>
 800a714:	4b32      	ldr	r3, [pc, #200]	@ (800a7e0 <_strtod_l+0xb00>)
 800a716:	4630      	mov	r0, r6
 800a718:	4639      	mov	r1, r7
 800a71a:	2200      	movs	r2, #0
 800a71c:	f7f5 ff6c 	bl	80005f8 <__aeabi_dmul>
 800a720:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a722:	4606      	mov	r6, r0
 800a724:	460f      	mov	r7, r1
 800a726:	2b00      	cmp	r3, #0
 800a728:	d09f      	beq.n	800a66a <_strtod_l+0x98a>
 800a72a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a72e:	e7a0      	b.n	800a672 <_strtod_l+0x992>
 800a730:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a7b8 <_strtod_l+0xad8>
 800a734:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a738:	ec57 6b17 	vmov	r6, r7, d7
 800a73c:	e799      	b.n	800a672 <_strtod_l+0x992>
 800a73e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a742:	9b08      	ldr	r3, [sp, #32]
 800a744:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1c1      	bne.n	800a6d0 <_strtod_l+0x9f0>
 800a74c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a750:	0d1b      	lsrs	r3, r3, #20
 800a752:	051b      	lsls	r3, r3, #20
 800a754:	429d      	cmp	r5, r3
 800a756:	d1bb      	bne.n	800a6d0 <_strtod_l+0x9f0>
 800a758:	4630      	mov	r0, r6
 800a75a:	4639      	mov	r1, r7
 800a75c:	f7f6 faac 	bl	8000cb8 <__aeabi_d2lz>
 800a760:	f7f5 ff1c 	bl	800059c <__aeabi_l2d>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	4630      	mov	r0, r6
 800a76a:	4639      	mov	r1, r7
 800a76c:	f7f5 fd8c 	bl	8000288 <__aeabi_dsub>
 800a770:	460b      	mov	r3, r1
 800a772:	4602      	mov	r2, r0
 800a774:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a778:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a77e:	ea46 060a 	orr.w	r6, r6, sl
 800a782:	431e      	orrs	r6, r3
 800a784:	d06f      	beq.n	800a866 <_strtod_l+0xb86>
 800a786:	a30e      	add	r3, pc, #56	@ (adr r3, 800a7c0 <_strtod_l+0xae0>)
 800a788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78c:	f7f6 f9a6 	bl	8000adc <__aeabi_dcmplt>
 800a790:	2800      	cmp	r0, #0
 800a792:	f47f accf 	bne.w	800a134 <_strtod_l+0x454>
 800a796:	a30c      	add	r3, pc, #48	@ (adr r3, 800a7c8 <_strtod_l+0xae8>)
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7a0:	f7f6 f9ba 	bl	8000b18 <__aeabi_dcmpgt>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	d093      	beq.n	800a6d0 <_strtod_l+0x9f0>
 800a7a8:	e4c4      	b.n	800a134 <_strtod_l+0x454>
 800a7aa:	bf00      	nop
 800a7ac:	f3af 8000 	nop.w
 800a7b0:	00000000 	.word	0x00000000
 800a7b4:	bff00000 	.word	0xbff00000
 800a7b8:	00000000 	.word	0x00000000
 800a7bc:	3ff00000 	.word	0x3ff00000
 800a7c0:	94a03595 	.word	0x94a03595
 800a7c4:	3fdfffff 	.word	0x3fdfffff
 800a7c8:	35afe535 	.word	0x35afe535
 800a7cc:	3fe00000 	.word	0x3fe00000
 800a7d0:	000fffff 	.word	0x000fffff
 800a7d4:	7ff00000 	.word	0x7ff00000
 800a7d8:	7fefffff 	.word	0x7fefffff
 800a7dc:	3ff00000 	.word	0x3ff00000
 800a7e0:	3fe00000 	.word	0x3fe00000
 800a7e4:	7fe00000 	.word	0x7fe00000
 800a7e8:	7c9fffff 	.word	0x7c9fffff
 800a7ec:	9b08      	ldr	r3, [sp, #32]
 800a7ee:	b323      	cbz	r3, 800a83a <_strtod_l+0xb5a>
 800a7f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a7f4:	d821      	bhi.n	800a83a <_strtod_l+0xb5a>
 800a7f6:	a328      	add	r3, pc, #160	@ (adr r3, 800a898 <_strtod_l+0xbb8>)
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	4639      	mov	r1, r7
 800a800:	f7f6 f976 	bl	8000af0 <__aeabi_dcmple>
 800a804:	b1a0      	cbz	r0, 800a830 <_strtod_l+0xb50>
 800a806:	4639      	mov	r1, r7
 800a808:	4630      	mov	r0, r6
 800a80a:	f7f6 f9cd 	bl	8000ba8 <__aeabi_d2uiz>
 800a80e:	2801      	cmp	r0, #1
 800a810:	bf38      	it	cc
 800a812:	2001      	movcc	r0, #1
 800a814:	f7f5 fe76 	bl	8000504 <__aeabi_ui2d>
 800a818:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a81a:	4606      	mov	r6, r0
 800a81c:	460f      	mov	r7, r1
 800a81e:	b9fb      	cbnz	r3, 800a860 <_strtod_l+0xb80>
 800a820:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a824:	9014      	str	r0, [sp, #80]	@ 0x50
 800a826:	9315      	str	r3, [sp, #84]	@ 0x54
 800a828:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a82c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a830:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a832:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a836:	1b5b      	subs	r3, r3, r5
 800a838:	9311      	str	r3, [sp, #68]	@ 0x44
 800a83a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a83e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a842:	f002 fab3 	bl	800cdac <__ulp>
 800a846:	4650      	mov	r0, sl
 800a848:	ec53 2b10 	vmov	r2, r3, d0
 800a84c:	4659      	mov	r1, fp
 800a84e:	f7f5 fed3 	bl	80005f8 <__aeabi_dmul>
 800a852:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a856:	f7f5 fd19 	bl	800028c <__adddf3>
 800a85a:	4682      	mov	sl, r0
 800a85c:	468b      	mov	fp, r1
 800a85e:	e770      	b.n	800a742 <_strtod_l+0xa62>
 800a860:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a864:	e7e0      	b.n	800a828 <_strtod_l+0xb48>
 800a866:	a30e      	add	r3, pc, #56	@ (adr r3, 800a8a0 <_strtod_l+0xbc0>)
 800a868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86c:	f7f6 f936 	bl	8000adc <__aeabi_dcmplt>
 800a870:	e798      	b.n	800a7a4 <_strtod_l+0xac4>
 800a872:	2300      	movs	r3, #0
 800a874:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a876:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a878:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a87a:	6013      	str	r3, [r2, #0]
 800a87c:	f7ff ba6d 	b.w	8009d5a <_strtod_l+0x7a>
 800a880:	2a65      	cmp	r2, #101	@ 0x65
 800a882:	f43f ab66 	beq.w	8009f52 <_strtod_l+0x272>
 800a886:	2a45      	cmp	r2, #69	@ 0x45
 800a888:	f43f ab63 	beq.w	8009f52 <_strtod_l+0x272>
 800a88c:	2301      	movs	r3, #1
 800a88e:	f7ff bb9e 	b.w	8009fce <_strtod_l+0x2ee>
 800a892:	bf00      	nop
 800a894:	f3af 8000 	nop.w
 800a898:	ffc00000 	.word	0xffc00000
 800a89c:	41dfffff 	.word	0x41dfffff
 800a8a0:	94a03595 	.word	0x94a03595
 800a8a4:	3fcfffff 	.word	0x3fcfffff

0800a8a8 <_strtod_r>:
 800a8a8:	4b01      	ldr	r3, [pc, #4]	@ (800a8b0 <_strtod_r+0x8>)
 800a8aa:	f7ff ba19 	b.w	8009ce0 <_strtod_l>
 800a8ae:	bf00      	nop
 800a8b0:	20000024 	.word	0x20000024

0800a8b4 <_strtol_l.constprop.0>:
 800a8b4:	2b24      	cmp	r3, #36	@ 0x24
 800a8b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ba:	4686      	mov	lr, r0
 800a8bc:	4690      	mov	r8, r2
 800a8be:	d801      	bhi.n	800a8c4 <_strtol_l.constprop.0+0x10>
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d106      	bne.n	800a8d2 <_strtol_l.constprop.0+0x1e>
 800a8c4:	f000 f91e 	bl	800ab04 <__errno>
 800a8c8:	2316      	movs	r3, #22
 800a8ca:	6003      	str	r3, [r0, #0]
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d2:	4834      	ldr	r0, [pc, #208]	@ (800a9a4 <_strtol_l.constprop.0+0xf0>)
 800a8d4:	460d      	mov	r5, r1
 800a8d6:	462a      	mov	r2, r5
 800a8d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8dc:	5d06      	ldrb	r6, [r0, r4]
 800a8de:	f016 0608 	ands.w	r6, r6, #8
 800a8e2:	d1f8      	bne.n	800a8d6 <_strtol_l.constprop.0+0x22>
 800a8e4:	2c2d      	cmp	r4, #45	@ 0x2d
 800a8e6:	d12d      	bne.n	800a944 <_strtol_l.constprop.0+0x90>
 800a8e8:	782c      	ldrb	r4, [r5, #0]
 800a8ea:	2601      	movs	r6, #1
 800a8ec:	1c95      	adds	r5, r2, #2
 800a8ee:	f033 0210 	bics.w	r2, r3, #16
 800a8f2:	d109      	bne.n	800a908 <_strtol_l.constprop.0+0x54>
 800a8f4:	2c30      	cmp	r4, #48	@ 0x30
 800a8f6:	d12a      	bne.n	800a94e <_strtol_l.constprop.0+0x9a>
 800a8f8:	782a      	ldrb	r2, [r5, #0]
 800a8fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a8fe:	2a58      	cmp	r2, #88	@ 0x58
 800a900:	d125      	bne.n	800a94e <_strtol_l.constprop.0+0x9a>
 800a902:	786c      	ldrb	r4, [r5, #1]
 800a904:	2310      	movs	r3, #16
 800a906:	3502      	adds	r5, #2
 800a908:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a90c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a910:	2200      	movs	r2, #0
 800a912:	fbbc f9f3 	udiv	r9, ip, r3
 800a916:	4610      	mov	r0, r2
 800a918:	fb03 ca19 	mls	sl, r3, r9, ip
 800a91c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a920:	2f09      	cmp	r7, #9
 800a922:	d81b      	bhi.n	800a95c <_strtol_l.constprop.0+0xa8>
 800a924:	463c      	mov	r4, r7
 800a926:	42a3      	cmp	r3, r4
 800a928:	dd27      	ble.n	800a97a <_strtol_l.constprop.0+0xc6>
 800a92a:	1c57      	adds	r7, r2, #1
 800a92c:	d007      	beq.n	800a93e <_strtol_l.constprop.0+0x8a>
 800a92e:	4581      	cmp	r9, r0
 800a930:	d320      	bcc.n	800a974 <_strtol_l.constprop.0+0xc0>
 800a932:	d101      	bne.n	800a938 <_strtol_l.constprop.0+0x84>
 800a934:	45a2      	cmp	sl, r4
 800a936:	db1d      	blt.n	800a974 <_strtol_l.constprop.0+0xc0>
 800a938:	fb00 4003 	mla	r0, r0, r3, r4
 800a93c:	2201      	movs	r2, #1
 800a93e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a942:	e7eb      	b.n	800a91c <_strtol_l.constprop.0+0x68>
 800a944:	2c2b      	cmp	r4, #43	@ 0x2b
 800a946:	bf04      	itt	eq
 800a948:	782c      	ldrbeq	r4, [r5, #0]
 800a94a:	1c95      	addeq	r5, r2, #2
 800a94c:	e7cf      	b.n	800a8ee <_strtol_l.constprop.0+0x3a>
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1da      	bne.n	800a908 <_strtol_l.constprop.0+0x54>
 800a952:	2c30      	cmp	r4, #48	@ 0x30
 800a954:	bf0c      	ite	eq
 800a956:	2308      	moveq	r3, #8
 800a958:	230a      	movne	r3, #10
 800a95a:	e7d5      	b.n	800a908 <_strtol_l.constprop.0+0x54>
 800a95c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a960:	2f19      	cmp	r7, #25
 800a962:	d801      	bhi.n	800a968 <_strtol_l.constprop.0+0xb4>
 800a964:	3c37      	subs	r4, #55	@ 0x37
 800a966:	e7de      	b.n	800a926 <_strtol_l.constprop.0+0x72>
 800a968:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a96c:	2f19      	cmp	r7, #25
 800a96e:	d804      	bhi.n	800a97a <_strtol_l.constprop.0+0xc6>
 800a970:	3c57      	subs	r4, #87	@ 0x57
 800a972:	e7d8      	b.n	800a926 <_strtol_l.constprop.0+0x72>
 800a974:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a978:	e7e1      	b.n	800a93e <_strtol_l.constprop.0+0x8a>
 800a97a:	1c53      	adds	r3, r2, #1
 800a97c:	d108      	bne.n	800a990 <_strtol_l.constprop.0+0xdc>
 800a97e:	2322      	movs	r3, #34	@ 0x22
 800a980:	f8ce 3000 	str.w	r3, [lr]
 800a984:	4660      	mov	r0, ip
 800a986:	f1b8 0f00 	cmp.w	r8, #0
 800a98a:	d0a0      	beq.n	800a8ce <_strtol_l.constprop.0+0x1a>
 800a98c:	1e69      	subs	r1, r5, #1
 800a98e:	e006      	b.n	800a99e <_strtol_l.constprop.0+0xea>
 800a990:	b106      	cbz	r6, 800a994 <_strtol_l.constprop.0+0xe0>
 800a992:	4240      	negs	r0, r0
 800a994:	f1b8 0f00 	cmp.w	r8, #0
 800a998:	d099      	beq.n	800a8ce <_strtol_l.constprop.0+0x1a>
 800a99a:	2a00      	cmp	r2, #0
 800a99c:	d1f6      	bne.n	800a98c <_strtol_l.constprop.0+0xd8>
 800a99e:	f8c8 1000 	str.w	r1, [r8]
 800a9a2:	e794      	b.n	800a8ce <_strtol_l.constprop.0+0x1a>
 800a9a4:	0800d8d9 	.word	0x0800d8d9

0800a9a8 <_strtol_r>:
 800a9a8:	f7ff bf84 	b.w	800a8b4 <_strtol_l.constprop.0>

0800a9ac <_fwalk_sglue>:
 800a9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9b0:	4607      	mov	r7, r0
 800a9b2:	4688      	mov	r8, r1
 800a9b4:	4614      	mov	r4, r2
 800a9b6:	2600      	movs	r6, #0
 800a9b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9bc:	f1b9 0901 	subs.w	r9, r9, #1
 800a9c0:	d505      	bpl.n	800a9ce <_fwalk_sglue+0x22>
 800a9c2:	6824      	ldr	r4, [r4, #0]
 800a9c4:	2c00      	cmp	r4, #0
 800a9c6:	d1f7      	bne.n	800a9b8 <_fwalk_sglue+0xc>
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9ce:	89ab      	ldrh	r3, [r5, #12]
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d907      	bls.n	800a9e4 <_fwalk_sglue+0x38>
 800a9d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	d003      	beq.n	800a9e4 <_fwalk_sglue+0x38>
 800a9dc:	4629      	mov	r1, r5
 800a9de:	4638      	mov	r0, r7
 800a9e0:	47c0      	blx	r8
 800a9e2:	4306      	orrs	r6, r0
 800a9e4:	3568      	adds	r5, #104	@ 0x68
 800a9e6:	e7e9      	b.n	800a9bc <_fwalk_sglue+0x10>

0800a9e8 <iprintf>:
 800a9e8:	b40f      	push	{r0, r1, r2, r3}
 800a9ea:	b507      	push	{r0, r1, r2, lr}
 800a9ec:	4906      	ldr	r1, [pc, #24]	@ (800aa08 <iprintf+0x20>)
 800a9ee:	ab04      	add	r3, sp, #16
 800a9f0:	6808      	ldr	r0, [r1, #0]
 800a9f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9f6:	6881      	ldr	r1, [r0, #8]
 800a9f8:	9301      	str	r3, [sp, #4]
 800a9fa:	f001 fbd7 	bl	800c1ac <_vfiprintf_r>
 800a9fe:	b003      	add	sp, #12
 800aa00:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa04:	b004      	add	sp, #16
 800aa06:	4770      	bx	lr
 800aa08:	20000190 	.word	0x20000190

0800aa0c <_puts_r>:
 800aa0c:	6a03      	ldr	r3, [r0, #32]
 800aa0e:	b570      	push	{r4, r5, r6, lr}
 800aa10:	6884      	ldr	r4, [r0, #8]
 800aa12:	4605      	mov	r5, r0
 800aa14:	460e      	mov	r6, r1
 800aa16:	b90b      	cbnz	r3, 800aa1c <_puts_r+0x10>
 800aa18:	f7ff f92a 	bl	8009c70 <__sinit>
 800aa1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa1e:	07db      	lsls	r3, r3, #31
 800aa20:	d405      	bmi.n	800aa2e <_puts_r+0x22>
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	0598      	lsls	r0, r3, #22
 800aa26:	d402      	bmi.n	800aa2e <_puts_r+0x22>
 800aa28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa2a:	f000 f896 	bl	800ab5a <__retarget_lock_acquire_recursive>
 800aa2e:	89a3      	ldrh	r3, [r4, #12]
 800aa30:	0719      	lsls	r1, r3, #28
 800aa32:	d502      	bpl.n	800aa3a <_puts_r+0x2e>
 800aa34:	6923      	ldr	r3, [r4, #16]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d135      	bne.n	800aaa6 <_puts_r+0x9a>
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	f002 fba3 	bl	800d188 <__swsetup_r>
 800aa42:	b380      	cbz	r0, 800aaa6 <_puts_r+0x9a>
 800aa44:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800aa48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa4a:	07da      	lsls	r2, r3, #31
 800aa4c:	d405      	bmi.n	800aa5a <_puts_r+0x4e>
 800aa4e:	89a3      	ldrh	r3, [r4, #12]
 800aa50:	059b      	lsls	r3, r3, #22
 800aa52:	d402      	bmi.n	800aa5a <_puts_r+0x4e>
 800aa54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa56:	f000 f881 	bl	800ab5c <__retarget_lock_release_recursive>
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	bd70      	pop	{r4, r5, r6, pc}
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	da04      	bge.n	800aa6c <_puts_r+0x60>
 800aa62:	69a2      	ldr	r2, [r4, #24]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	dc17      	bgt.n	800aa98 <_puts_r+0x8c>
 800aa68:	290a      	cmp	r1, #10
 800aa6a:	d015      	beq.n	800aa98 <_puts_r+0x8c>
 800aa6c:	6823      	ldr	r3, [r4, #0]
 800aa6e:	1c5a      	adds	r2, r3, #1
 800aa70:	6022      	str	r2, [r4, #0]
 800aa72:	7019      	strb	r1, [r3, #0]
 800aa74:	68a3      	ldr	r3, [r4, #8]
 800aa76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	60a3      	str	r3, [r4, #8]
 800aa7e:	2900      	cmp	r1, #0
 800aa80:	d1ed      	bne.n	800aa5e <_puts_r+0x52>
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	da11      	bge.n	800aaaa <_puts_r+0x9e>
 800aa86:	4622      	mov	r2, r4
 800aa88:	210a      	movs	r1, #10
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	f002 fb3d 	bl	800d10a <__swbuf_r>
 800aa90:	3001      	adds	r0, #1
 800aa92:	d0d7      	beq.n	800aa44 <_puts_r+0x38>
 800aa94:	250a      	movs	r5, #10
 800aa96:	e7d7      	b.n	800aa48 <_puts_r+0x3c>
 800aa98:	4622      	mov	r2, r4
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	f002 fb35 	bl	800d10a <__swbuf_r>
 800aaa0:	3001      	adds	r0, #1
 800aaa2:	d1e7      	bne.n	800aa74 <_puts_r+0x68>
 800aaa4:	e7ce      	b.n	800aa44 <_puts_r+0x38>
 800aaa6:	3e01      	subs	r6, #1
 800aaa8:	e7e4      	b.n	800aa74 <_puts_r+0x68>
 800aaaa:	6823      	ldr	r3, [r4, #0]
 800aaac:	1c5a      	adds	r2, r3, #1
 800aaae:	6022      	str	r2, [r4, #0]
 800aab0:	220a      	movs	r2, #10
 800aab2:	701a      	strb	r2, [r3, #0]
 800aab4:	e7ee      	b.n	800aa94 <_puts_r+0x88>
	...

0800aab8 <puts>:
 800aab8:	4b02      	ldr	r3, [pc, #8]	@ (800aac4 <puts+0xc>)
 800aaba:	4601      	mov	r1, r0
 800aabc:	6818      	ldr	r0, [r3, #0]
 800aabe:	f7ff bfa5 	b.w	800aa0c <_puts_r>
 800aac2:	bf00      	nop
 800aac4:	20000190 	.word	0x20000190

0800aac8 <strncmp>:
 800aac8:	b510      	push	{r4, lr}
 800aaca:	b16a      	cbz	r2, 800aae8 <strncmp+0x20>
 800aacc:	3901      	subs	r1, #1
 800aace:	1884      	adds	r4, r0, r2
 800aad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aad4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aad8:	429a      	cmp	r2, r3
 800aada:	d103      	bne.n	800aae4 <strncmp+0x1c>
 800aadc:	42a0      	cmp	r0, r4
 800aade:	d001      	beq.n	800aae4 <strncmp+0x1c>
 800aae0:	2a00      	cmp	r2, #0
 800aae2:	d1f5      	bne.n	800aad0 <strncmp+0x8>
 800aae4:	1ad0      	subs	r0, r2, r3
 800aae6:	bd10      	pop	{r4, pc}
 800aae8:	4610      	mov	r0, r2
 800aaea:	e7fc      	b.n	800aae6 <strncmp+0x1e>

0800aaec <memset>:
 800aaec:	4402      	add	r2, r0
 800aaee:	4603      	mov	r3, r0
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d100      	bne.n	800aaf6 <memset+0xa>
 800aaf4:	4770      	bx	lr
 800aaf6:	f803 1b01 	strb.w	r1, [r3], #1
 800aafa:	e7f9      	b.n	800aaf0 <memset+0x4>

0800aafc <_localeconv_r>:
 800aafc:	4800      	ldr	r0, [pc, #0]	@ (800ab00 <_localeconv_r+0x4>)
 800aafe:	4770      	bx	lr
 800ab00:	20000114 	.word	0x20000114

0800ab04 <__errno>:
 800ab04:	4b01      	ldr	r3, [pc, #4]	@ (800ab0c <__errno+0x8>)
 800ab06:	6818      	ldr	r0, [r3, #0]
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	20000190 	.word	0x20000190

0800ab10 <__libc_init_array>:
 800ab10:	b570      	push	{r4, r5, r6, lr}
 800ab12:	4d0d      	ldr	r5, [pc, #52]	@ (800ab48 <__libc_init_array+0x38>)
 800ab14:	4c0d      	ldr	r4, [pc, #52]	@ (800ab4c <__libc_init_array+0x3c>)
 800ab16:	1b64      	subs	r4, r4, r5
 800ab18:	10a4      	asrs	r4, r4, #2
 800ab1a:	2600      	movs	r6, #0
 800ab1c:	42a6      	cmp	r6, r4
 800ab1e:	d109      	bne.n	800ab34 <__libc_init_array+0x24>
 800ab20:	4d0b      	ldr	r5, [pc, #44]	@ (800ab50 <__libc_init_array+0x40>)
 800ab22:	4c0c      	ldr	r4, [pc, #48]	@ (800ab54 <__libc_init_array+0x44>)
 800ab24:	f002 fd6a 	bl	800d5fc <_init>
 800ab28:	1b64      	subs	r4, r4, r5
 800ab2a:	10a4      	asrs	r4, r4, #2
 800ab2c:	2600      	movs	r6, #0
 800ab2e:	42a6      	cmp	r6, r4
 800ab30:	d105      	bne.n	800ab3e <__libc_init_array+0x2e>
 800ab32:	bd70      	pop	{r4, r5, r6, pc}
 800ab34:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab38:	4798      	blx	r3
 800ab3a:	3601      	adds	r6, #1
 800ab3c:	e7ee      	b.n	800ab1c <__libc_init_array+0xc>
 800ab3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab42:	4798      	blx	r3
 800ab44:	3601      	adds	r6, #1
 800ab46:	e7f2      	b.n	800ab2e <__libc_init_array+0x1e>
 800ab48:	0800dc74 	.word	0x0800dc74
 800ab4c:	0800dc74 	.word	0x0800dc74
 800ab50:	0800dc74 	.word	0x0800dc74
 800ab54:	0800dc78 	.word	0x0800dc78

0800ab58 <__retarget_lock_init_recursive>:
 800ab58:	4770      	bx	lr

0800ab5a <__retarget_lock_acquire_recursive>:
 800ab5a:	4770      	bx	lr

0800ab5c <__retarget_lock_release_recursive>:
 800ab5c:	4770      	bx	lr

0800ab5e <memcpy>:
 800ab5e:	440a      	add	r2, r1
 800ab60:	4291      	cmp	r1, r2
 800ab62:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ab66:	d100      	bne.n	800ab6a <memcpy+0xc>
 800ab68:	4770      	bx	lr
 800ab6a:	b510      	push	{r4, lr}
 800ab6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab70:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab74:	4291      	cmp	r1, r2
 800ab76:	d1f9      	bne.n	800ab6c <memcpy+0xe>
 800ab78:	bd10      	pop	{r4, pc}
 800ab7a:	0000      	movs	r0, r0
 800ab7c:	0000      	movs	r0, r0
	...

0800ab80 <nan>:
 800ab80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ab88 <nan+0x8>
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	00000000 	.word	0x00000000
 800ab8c:	7ff80000 	.word	0x7ff80000

0800ab90 <nanf>:
 800ab90:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ab98 <nanf+0x8>
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop
 800ab98:	7fc00000 	.word	0x7fc00000

0800ab9c <quorem>:
 800ab9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba0:	6903      	ldr	r3, [r0, #16]
 800aba2:	690c      	ldr	r4, [r1, #16]
 800aba4:	42a3      	cmp	r3, r4
 800aba6:	4607      	mov	r7, r0
 800aba8:	db7e      	blt.n	800aca8 <quorem+0x10c>
 800abaa:	3c01      	subs	r4, #1
 800abac:	f101 0814 	add.w	r8, r1, #20
 800abb0:	00a3      	lsls	r3, r4, #2
 800abb2:	f100 0514 	add.w	r5, r0, #20
 800abb6:	9300      	str	r3, [sp, #0]
 800abb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abbc:	9301      	str	r3, [sp, #4]
 800abbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800abc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abc6:	3301      	adds	r3, #1
 800abc8:	429a      	cmp	r2, r3
 800abca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800abce:	fbb2 f6f3 	udiv	r6, r2, r3
 800abd2:	d32e      	bcc.n	800ac32 <quorem+0x96>
 800abd4:	f04f 0a00 	mov.w	sl, #0
 800abd8:	46c4      	mov	ip, r8
 800abda:	46ae      	mov	lr, r5
 800abdc:	46d3      	mov	fp, sl
 800abde:	f85c 3b04 	ldr.w	r3, [ip], #4
 800abe2:	b298      	uxth	r0, r3
 800abe4:	fb06 a000 	mla	r0, r6, r0, sl
 800abe8:	0c02      	lsrs	r2, r0, #16
 800abea:	0c1b      	lsrs	r3, r3, #16
 800abec:	fb06 2303 	mla	r3, r6, r3, r2
 800abf0:	f8de 2000 	ldr.w	r2, [lr]
 800abf4:	b280      	uxth	r0, r0
 800abf6:	b292      	uxth	r2, r2
 800abf8:	1a12      	subs	r2, r2, r0
 800abfa:	445a      	add	r2, fp
 800abfc:	f8de 0000 	ldr.w	r0, [lr]
 800ac00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ac0a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ac0e:	b292      	uxth	r2, r2
 800ac10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ac14:	45e1      	cmp	r9, ip
 800ac16:	f84e 2b04 	str.w	r2, [lr], #4
 800ac1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ac1e:	d2de      	bcs.n	800abde <quorem+0x42>
 800ac20:	9b00      	ldr	r3, [sp, #0]
 800ac22:	58eb      	ldr	r3, [r5, r3]
 800ac24:	b92b      	cbnz	r3, 800ac32 <quorem+0x96>
 800ac26:	9b01      	ldr	r3, [sp, #4]
 800ac28:	3b04      	subs	r3, #4
 800ac2a:	429d      	cmp	r5, r3
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	d32f      	bcc.n	800ac90 <quorem+0xf4>
 800ac30:	613c      	str	r4, [r7, #16]
 800ac32:	4638      	mov	r0, r7
 800ac34:	f002 f80a 	bl	800cc4c <__mcmp>
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	db25      	blt.n	800ac88 <quorem+0xec>
 800ac3c:	4629      	mov	r1, r5
 800ac3e:	2000      	movs	r0, #0
 800ac40:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac44:	f8d1 c000 	ldr.w	ip, [r1]
 800ac48:	fa1f fe82 	uxth.w	lr, r2
 800ac4c:	fa1f f38c 	uxth.w	r3, ip
 800ac50:	eba3 030e 	sub.w	r3, r3, lr
 800ac54:	4403      	add	r3, r0
 800ac56:	0c12      	lsrs	r2, r2, #16
 800ac58:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ac5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac66:	45c1      	cmp	r9, r8
 800ac68:	f841 3b04 	str.w	r3, [r1], #4
 800ac6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac70:	d2e6      	bcs.n	800ac40 <quorem+0xa4>
 800ac72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac7a:	b922      	cbnz	r2, 800ac86 <quorem+0xea>
 800ac7c:	3b04      	subs	r3, #4
 800ac7e:	429d      	cmp	r5, r3
 800ac80:	461a      	mov	r2, r3
 800ac82:	d30b      	bcc.n	800ac9c <quorem+0x100>
 800ac84:	613c      	str	r4, [r7, #16]
 800ac86:	3601      	adds	r6, #1
 800ac88:	4630      	mov	r0, r6
 800ac8a:	b003      	add	sp, #12
 800ac8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac90:	6812      	ldr	r2, [r2, #0]
 800ac92:	3b04      	subs	r3, #4
 800ac94:	2a00      	cmp	r2, #0
 800ac96:	d1cb      	bne.n	800ac30 <quorem+0x94>
 800ac98:	3c01      	subs	r4, #1
 800ac9a:	e7c6      	b.n	800ac2a <quorem+0x8e>
 800ac9c:	6812      	ldr	r2, [r2, #0]
 800ac9e:	3b04      	subs	r3, #4
 800aca0:	2a00      	cmp	r2, #0
 800aca2:	d1ef      	bne.n	800ac84 <quorem+0xe8>
 800aca4:	3c01      	subs	r4, #1
 800aca6:	e7ea      	b.n	800ac7e <quorem+0xe2>
 800aca8:	2000      	movs	r0, #0
 800acaa:	e7ee      	b.n	800ac8a <quorem+0xee>
 800acac:	0000      	movs	r0, r0
	...

0800acb0 <_dtoa_r>:
 800acb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb4:	69c7      	ldr	r7, [r0, #28]
 800acb6:	b099      	sub	sp, #100	@ 0x64
 800acb8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800acbc:	ec55 4b10 	vmov	r4, r5, d0
 800acc0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800acc2:	9109      	str	r1, [sp, #36]	@ 0x24
 800acc4:	4683      	mov	fp, r0
 800acc6:	920e      	str	r2, [sp, #56]	@ 0x38
 800acc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800acca:	b97f      	cbnz	r7, 800acec <_dtoa_r+0x3c>
 800accc:	2010      	movs	r0, #16
 800acce:	f001 fb85 	bl	800c3dc <malloc>
 800acd2:	4602      	mov	r2, r0
 800acd4:	f8cb 001c 	str.w	r0, [fp, #28]
 800acd8:	b920      	cbnz	r0, 800ace4 <_dtoa_r+0x34>
 800acda:	4ba7      	ldr	r3, [pc, #668]	@ (800af78 <_dtoa_r+0x2c8>)
 800acdc:	21ef      	movs	r1, #239	@ 0xef
 800acde:	48a7      	ldr	r0, [pc, #668]	@ (800af7c <_dtoa_r+0x2cc>)
 800ace0:	f002 fbaa 	bl	800d438 <__assert_func>
 800ace4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ace8:	6007      	str	r7, [r0, #0]
 800acea:	60c7      	str	r7, [r0, #12]
 800acec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800acf0:	6819      	ldr	r1, [r3, #0]
 800acf2:	b159      	cbz	r1, 800ad0c <_dtoa_r+0x5c>
 800acf4:	685a      	ldr	r2, [r3, #4]
 800acf6:	604a      	str	r2, [r1, #4]
 800acf8:	2301      	movs	r3, #1
 800acfa:	4093      	lsls	r3, r2
 800acfc:	608b      	str	r3, [r1, #8]
 800acfe:	4658      	mov	r0, fp
 800ad00:	f001 fd20 	bl	800c744 <_Bfree>
 800ad04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	601a      	str	r2, [r3, #0]
 800ad0c:	1e2b      	subs	r3, r5, #0
 800ad0e:	bfb9      	ittee	lt
 800ad10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ad14:	9303      	strlt	r3, [sp, #12]
 800ad16:	2300      	movge	r3, #0
 800ad18:	6033      	strge	r3, [r6, #0]
 800ad1a:	9f03      	ldr	r7, [sp, #12]
 800ad1c:	4b98      	ldr	r3, [pc, #608]	@ (800af80 <_dtoa_r+0x2d0>)
 800ad1e:	bfbc      	itt	lt
 800ad20:	2201      	movlt	r2, #1
 800ad22:	6032      	strlt	r2, [r6, #0]
 800ad24:	43bb      	bics	r3, r7
 800ad26:	d112      	bne.n	800ad4e <_dtoa_r+0x9e>
 800ad28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ad2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ad2e:	6013      	str	r3, [r2, #0]
 800ad30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad34:	4323      	orrs	r3, r4
 800ad36:	f000 854d 	beq.w	800b7d4 <_dtoa_r+0xb24>
 800ad3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800af94 <_dtoa_r+0x2e4>
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f000 854f 	beq.w	800b7e4 <_dtoa_r+0xb34>
 800ad46:	f10a 0303 	add.w	r3, sl, #3
 800ad4a:	f000 bd49 	b.w	800b7e0 <_dtoa_r+0xb30>
 800ad4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad52:	2200      	movs	r2, #0
 800ad54:	ec51 0b17 	vmov	r0, r1, d7
 800ad58:	2300      	movs	r3, #0
 800ad5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ad5e:	f7f5 feb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad62:	4680      	mov	r8, r0
 800ad64:	b158      	cbz	r0, 800ad7e <_dtoa_r+0xce>
 800ad66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ad68:	2301      	movs	r3, #1
 800ad6a:	6013      	str	r3, [r2, #0]
 800ad6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad6e:	b113      	cbz	r3, 800ad76 <_dtoa_r+0xc6>
 800ad70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ad72:	4b84      	ldr	r3, [pc, #528]	@ (800af84 <_dtoa_r+0x2d4>)
 800ad74:	6013      	str	r3, [r2, #0]
 800ad76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800af98 <_dtoa_r+0x2e8>
 800ad7a:	f000 bd33 	b.w	800b7e4 <_dtoa_r+0xb34>
 800ad7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ad82:	aa16      	add	r2, sp, #88	@ 0x58
 800ad84:	a917      	add	r1, sp, #92	@ 0x5c
 800ad86:	4658      	mov	r0, fp
 800ad88:	f002 f880 	bl	800ce8c <__d2b>
 800ad8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ad90:	4681      	mov	r9, r0
 800ad92:	2e00      	cmp	r6, #0
 800ad94:	d077      	beq.n	800ae86 <_dtoa_r+0x1d6>
 800ad96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ad9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ada0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ada4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ada8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800adac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800adb0:	4619      	mov	r1, r3
 800adb2:	2200      	movs	r2, #0
 800adb4:	4b74      	ldr	r3, [pc, #464]	@ (800af88 <_dtoa_r+0x2d8>)
 800adb6:	f7f5 fa67 	bl	8000288 <__aeabi_dsub>
 800adba:	a369      	add	r3, pc, #420	@ (adr r3, 800af60 <_dtoa_r+0x2b0>)
 800adbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc0:	f7f5 fc1a 	bl	80005f8 <__aeabi_dmul>
 800adc4:	a368      	add	r3, pc, #416	@ (adr r3, 800af68 <_dtoa_r+0x2b8>)
 800adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adca:	f7f5 fa5f 	bl	800028c <__adddf3>
 800adce:	4604      	mov	r4, r0
 800add0:	4630      	mov	r0, r6
 800add2:	460d      	mov	r5, r1
 800add4:	f7f5 fba6 	bl	8000524 <__aeabi_i2d>
 800add8:	a365      	add	r3, pc, #404	@ (adr r3, 800af70 <_dtoa_r+0x2c0>)
 800adda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adde:	f7f5 fc0b 	bl	80005f8 <__aeabi_dmul>
 800ade2:	4602      	mov	r2, r0
 800ade4:	460b      	mov	r3, r1
 800ade6:	4620      	mov	r0, r4
 800ade8:	4629      	mov	r1, r5
 800adea:	f7f5 fa4f 	bl	800028c <__adddf3>
 800adee:	4604      	mov	r4, r0
 800adf0:	460d      	mov	r5, r1
 800adf2:	f7f5 feb1 	bl	8000b58 <__aeabi_d2iz>
 800adf6:	2200      	movs	r2, #0
 800adf8:	4607      	mov	r7, r0
 800adfa:	2300      	movs	r3, #0
 800adfc:	4620      	mov	r0, r4
 800adfe:	4629      	mov	r1, r5
 800ae00:	f7f5 fe6c 	bl	8000adc <__aeabi_dcmplt>
 800ae04:	b140      	cbz	r0, 800ae18 <_dtoa_r+0x168>
 800ae06:	4638      	mov	r0, r7
 800ae08:	f7f5 fb8c 	bl	8000524 <__aeabi_i2d>
 800ae0c:	4622      	mov	r2, r4
 800ae0e:	462b      	mov	r3, r5
 800ae10:	f7f5 fe5a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae14:	b900      	cbnz	r0, 800ae18 <_dtoa_r+0x168>
 800ae16:	3f01      	subs	r7, #1
 800ae18:	2f16      	cmp	r7, #22
 800ae1a:	d851      	bhi.n	800aec0 <_dtoa_r+0x210>
 800ae1c:	4b5b      	ldr	r3, [pc, #364]	@ (800af8c <_dtoa_r+0x2dc>)
 800ae1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae2a:	f7f5 fe57 	bl	8000adc <__aeabi_dcmplt>
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	d048      	beq.n	800aec4 <_dtoa_r+0x214>
 800ae32:	3f01      	subs	r7, #1
 800ae34:	2300      	movs	r3, #0
 800ae36:	9312      	str	r3, [sp, #72]	@ 0x48
 800ae38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ae3a:	1b9b      	subs	r3, r3, r6
 800ae3c:	1e5a      	subs	r2, r3, #1
 800ae3e:	bf44      	itt	mi
 800ae40:	f1c3 0801 	rsbmi	r8, r3, #1
 800ae44:	2300      	movmi	r3, #0
 800ae46:	9208      	str	r2, [sp, #32]
 800ae48:	bf54      	ite	pl
 800ae4a:	f04f 0800 	movpl.w	r8, #0
 800ae4e:	9308      	strmi	r3, [sp, #32]
 800ae50:	2f00      	cmp	r7, #0
 800ae52:	db39      	blt.n	800aec8 <_dtoa_r+0x218>
 800ae54:	9b08      	ldr	r3, [sp, #32]
 800ae56:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ae58:	443b      	add	r3, r7
 800ae5a:	9308      	str	r3, [sp, #32]
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae62:	2b09      	cmp	r3, #9
 800ae64:	d864      	bhi.n	800af30 <_dtoa_r+0x280>
 800ae66:	2b05      	cmp	r3, #5
 800ae68:	bfc4      	itt	gt
 800ae6a:	3b04      	subgt	r3, #4
 800ae6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ae6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae70:	f1a3 0302 	sub.w	r3, r3, #2
 800ae74:	bfcc      	ite	gt
 800ae76:	2400      	movgt	r4, #0
 800ae78:	2401      	movle	r4, #1
 800ae7a:	2b03      	cmp	r3, #3
 800ae7c:	d863      	bhi.n	800af46 <_dtoa_r+0x296>
 800ae7e:	e8df f003 	tbb	[pc, r3]
 800ae82:	372a      	.short	0x372a
 800ae84:	5535      	.short	0x5535
 800ae86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ae8a:	441e      	add	r6, r3
 800ae8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ae90:	2b20      	cmp	r3, #32
 800ae92:	bfc1      	itttt	gt
 800ae94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ae98:	409f      	lslgt	r7, r3
 800ae9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ae9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aea2:	bfd6      	itet	le
 800aea4:	f1c3 0320 	rsble	r3, r3, #32
 800aea8:	ea47 0003 	orrgt.w	r0, r7, r3
 800aeac:	fa04 f003 	lslle.w	r0, r4, r3
 800aeb0:	f7f5 fb28 	bl	8000504 <__aeabi_ui2d>
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aeba:	3e01      	subs	r6, #1
 800aebc:	9214      	str	r2, [sp, #80]	@ 0x50
 800aebe:	e777      	b.n	800adb0 <_dtoa_r+0x100>
 800aec0:	2301      	movs	r3, #1
 800aec2:	e7b8      	b.n	800ae36 <_dtoa_r+0x186>
 800aec4:	9012      	str	r0, [sp, #72]	@ 0x48
 800aec6:	e7b7      	b.n	800ae38 <_dtoa_r+0x188>
 800aec8:	427b      	negs	r3, r7
 800aeca:	930a      	str	r3, [sp, #40]	@ 0x28
 800aecc:	2300      	movs	r3, #0
 800aece:	eba8 0807 	sub.w	r8, r8, r7
 800aed2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aed4:	e7c4      	b.n	800ae60 <_dtoa_r+0x1b0>
 800aed6:	2300      	movs	r3, #0
 800aed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aeda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aedc:	2b00      	cmp	r3, #0
 800aede:	dc35      	bgt.n	800af4c <_dtoa_r+0x29c>
 800aee0:	2301      	movs	r3, #1
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	9307      	str	r3, [sp, #28]
 800aee6:	461a      	mov	r2, r3
 800aee8:	920e      	str	r2, [sp, #56]	@ 0x38
 800aeea:	e00b      	b.n	800af04 <_dtoa_r+0x254>
 800aeec:	2301      	movs	r3, #1
 800aeee:	e7f3      	b.n	800aed8 <_dtoa_r+0x228>
 800aef0:	2300      	movs	r3, #0
 800aef2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aef6:	18fb      	adds	r3, r7, r3
 800aef8:	9300      	str	r3, [sp, #0]
 800aefa:	3301      	adds	r3, #1
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	9307      	str	r3, [sp, #28]
 800af00:	bfb8      	it	lt
 800af02:	2301      	movlt	r3, #1
 800af04:	f8db 001c 	ldr.w	r0, [fp, #28]
 800af08:	2100      	movs	r1, #0
 800af0a:	2204      	movs	r2, #4
 800af0c:	f102 0514 	add.w	r5, r2, #20
 800af10:	429d      	cmp	r5, r3
 800af12:	d91f      	bls.n	800af54 <_dtoa_r+0x2a4>
 800af14:	6041      	str	r1, [r0, #4]
 800af16:	4658      	mov	r0, fp
 800af18:	f001 fbd4 	bl	800c6c4 <_Balloc>
 800af1c:	4682      	mov	sl, r0
 800af1e:	2800      	cmp	r0, #0
 800af20:	d13c      	bne.n	800af9c <_dtoa_r+0x2ec>
 800af22:	4b1b      	ldr	r3, [pc, #108]	@ (800af90 <_dtoa_r+0x2e0>)
 800af24:	4602      	mov	r2, r0
 800af26:	f240 11af 	movw	r1, #431	@ 0x1af
 800af2a:	e6d8      	b.n	800acde <_dtoa_r+0x2e>
 800af2c:	2301      	movs	r3, #1
 800af2e:	e7e0      	b.n	800aef2 <_dtoa_r+0x242>
 800af30:	2401      	movs	r4, #1
 800af32:	2300      	movs	r3, #0
 800af34:	9309      	str	r3, [sp, #36]	@ 0x24
 800af36:	940b      	str	r4, [sp, #44]	@ 0x2c
 800af38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	9307      	str	r3, [sp, #28]
 800af40:	2200      	movs	r2, #0
 800af42:	2312      	movs	r3, #18
 800af44:	e7d0      	b.n	800aee8 <_dtoa_r+0x238>
 800af46:	2301      	movs	r3, #1
 800af48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af4a:	e7f5      	b.n	800af38 <_dtoa_r+0x288>
 800af4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af4e:	9300      	str	r3, [sp, #0]
 800af50:	9307      	str	r3, [sp, #28]
 800af52:	e7d7      	b.n	800af04 <_dtoa_r+0x254>
 800af54:	3101      	adds	r1, #1
 800af56:	0052      	lsls	r2, r2, #1
 800af58:	e7d8      	b.n	800af0c <_dtoa_r+0x25c>
 800af5a:	bf00      	nop
 800af5c:	f3af 8000 	nop.w
 800af60:	636f4361 	.word	0x636f4361
 800af64:	3fd287a7 	.word	0x3fd287a7
 800af68:	8b60c8b3 	.word	0x8b60c8b3
 800af6c:	3fc68a28 	.word	0x3fc68a28
 800af70:	509f79fb 	.word	0x509f79fb
 800af74:	3fd34413 	.word	0x3fd34413
 800af78:	0800d9e6 	.word	0x0800d9e6
 800af7c:	0800d9fd 	.word	0x0800d9fd
 800af80:	7ff00000 	.word	0x7ff00000
 800af84:	0800d851 	.word	0x0800d851
 800af88:	3ff80000 	.word	0x3ff80000
 800af8c:	0800db68 	.word	0x0800db68
 800af90:	0800da55 	.word	0x0800da55
 800af94:	0800d9e2 	.word	0x0800d9e2
 800af98:	0800d850 	.word	0x0800d850
 800af9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800afa0:	6018      	str	r0, [r3, #0]
 800afa2:	9b07      	ldr	r3, [sp, #28]
 800afa4:	2b0e      	cmp	r3, #14
 800afa6:	f200 80a4 	bhi.w	800b0f2 <_dtoa_r+0x442>
 800afaa:	2c00      	cmp	r4, #0
 800afac:	f000 80a1 	beq.w	800b0f2 <_dtoa_r+0x442>
 800afb0:	2f00      	cmp	r7, #0
 800afb2:	dd33      	ble.n	800b01c <_dtoa_r+0x36c>
 800afb4:	4bad      	ldr	r3, [pc, #692]	@ (800b26c <_dtoa_r+0x5bc>)
 800afb6:	f007 020f 	and.w	r2, r7, #15
 800afba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afbe:	ed93 7b00 	vldr	d7, [r3]
 800afc2:	05f8      	lsls	r0, r7, #23
 800afc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800afc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800afcc:	d516      	bpl.n	800affc <_dtoa_r+0x34c>
 800afce:	4ba8      	ldr	r3, [pc, #672]	@ (800b270 <_dtoa_r+0x5c0>)
 800afd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800afd8:	f7f5 fc38 	bl	800084c <__aeabi_ddiv>
 800afdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afe0:	f004 040f 	and.w	r4, r4, #15
 800afe4:	2603      	movs	r6, #3
 800afe6:	4da2      	ldr	r5, [pc, #648]	@ (800b270 <_dtoa_r+0x5c0>)
 800afe8:	b954      	cbnz	r4, 800b000 <_dtoa_r+0x350>
 800afea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aff2:	f7f5 fc2b 	bl	800084c <__aeabi_ddiv>
 800aff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800affa:	e028      	b.n	800b04e <_dtoa_r+0x39e>
 800affc:	2602      	movs	r6, #2
 800affe:	e7f2      	b.n	800afe6 <_dtoa_r+0x336>
 800b000:	07e1      	lsls	r1, r4, #31
 800b002:	d508      	bpl.n	800b016 <_dtoa_r+0x366>
 800b004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b008:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b00c:	f7f5 faf4 	bl	80005f8 <__aeabi_dmul>
 800b010:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b014:	3601      	adds	r6, #1
 800b016:	1064      	asrs	r4, r4, #1
 800b018:	3508      	adds	r5, #8
 800b01a:	e7e5      	b.n	800afe8 <_dtoa_r+0x338>
 800b01c:	f000 80d2 	beq.w	800b1c4 <_dtoa_r+0x514>
 800b020:	427c      	negs	r4, r7
 800b022:	4b92      	ldr	r3, [pc, #584]	@ (800b26c <_dtoa_r+0x5bc>)
 800b024:	4d92      	ldr	r5, [pc, #584]	@ (800b270 <_dtoa_r+0x5c0>)
 800b026:	f004 020f 	and.w	r2, r4, #15
 800b02a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b032:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b036:	f7f5 fadf 	bl	80005f8 <__aeabi_dmul>
 800b03a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b03e:	1124      	asrs	r4, r4, #4
 800b040:	2300      	movs	r3, #0
 800b042:	2602      	movs	r6, #2
 800b044:	2c00      	cmp	r4, #0
 800b046:	f040 80b2 	bne.w	800b1ae <_dtoa_r+0x4fe>
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d1d3      	bne.n	800aff6 <_dtoa_r+0x346>
 800b04e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b050:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b054:	2b00      	cmp	r3, #0
 800b056:	f000 80b7 	beq.w	800b1c8 <_dtoa_r+0x518>
 800b05a:	4b86      	ldr	r3, [pc, #536]	@ (800b274 <_dtoa_r+0x5c4>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	4620      	mov	r0, r4
 800b060:	4629      	mov	r1, r5
 800b062:	f7f5 fd3b 	bl	8000adc <__aeabi_dcmplt>
 800b066:	2800      	cmp	r0, #0
 800b068:	f000 80ae 	beq.w	800b1c8 <_dtoa_r+0x518>
 800b06c:	9b07      	ldr	r3, [sp, #28]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f000 80aa 	beq.w	800b1c8 <_dtoa_r+0x518>
 800b074:	9b00      	ldr	r3, [sp, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	dd37      	ble.n	800b0ea <_dtoa_r+0x43a>
 800b07a:	1e7b      	subs	r3, r7, #1
 800b07c:	9304      	str	r3, [sp, #16]
 800b07e:	4620      	mov	r0, r4
 800b080:	4b7d      	ldr	r3, [pc, #500]	@ (800b278 <_dtoa_r+0x5c8>)
 800b082:	2200      	movs	r2, #0
 800b084:	4629      	mov	r1, r5
 800b086:	f7f5 fab7 	bl	80005f8 <__aeabi_dmul>
 800b08a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b08e:	9c00      	ldr	r4, [sp, #0]
 800b090:	3601      	adds	r6, #1
 800b092:	4630      	mov	r0, r6
 800b094:	f7f5 fa46 	bl	8000524 <__aeabi_i2d>
 800b098:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b09c:	f7f5 faac 	bl	80005f8 <__aeabi_dmul>
 800b0a0:	4b76      	ldr	r3, [pc, #472]	@ (800b27c <_dtoa_r+0x5cc>)
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f7f5 f8f2 	bl	800028c <__adddf3>
 800b0a8:	4605      	mov	r5, r0
 800b0aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b0ae:	2c00      	cmp	r4, #0
 800b0b0:	f040 808d 	bne.w	800b1ce <_dtoa_r+0x51e>
 800b0b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0b8:	4b71      	ldr	r3, [pc, #452]	@ (800b280 <_dtoa_r+0x5d0>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f7f5 f8e4 	bl	8000288 <__aeabi_dsub>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b0c8:	462a      	mov	r2, r5
 800b0ca:	4633      	mov	r3, r6
 800b0cc:	f7f5 fd24 	bl	8000b18 <__aeabi_dcmpgt>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	f040 828b 	bne.w	800b5ec <_dtoa_r+0x93c>
 800b0d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0da:	462a      	mov	r2, r5
 800b0dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b0e0:	f7f5 fcfc 	bl	8000adc <__aeabi_dcmplt>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	f040 8128 	bne.w	800b33a <_dtoa_r+0x68a>
 800b0ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b0ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b0f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f2c0 815a 	blt.w	800b3ae <_dtoa_r+0x6fe>
 800b0fa:	2f0e      	cmp	r7, #14
 800b0fc:	f300 8157 	bgt.w	800b3ae <_dtoa_r+0x6fe>
 800b100:	4b5a      	ldr	r3, [pc, #360]	@ (800b26c <_dtoa_r+0x5bc>)
 800b102:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b106:	ed93 7b00 	vldr	d7, [r3]
 800b10a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	ed8d 7b00 	vstr	d7, [sp]
 800b112:	da03      	bge.n	800b11c <_dtoa_r+0x46c>
 800b114:	9b07      	ldr	r3, [sp, #28]
 800b116:	2b00      	cmp	r3, #0
 800b118:	f340 8101 	ble.w	800b31e <_dtoa_r+0x66e>
 800b11c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b120:	4656      	mov	r6, sl
 800b122:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b126:	4620      	mov	r0, r4
 800b128:	4629      	mov	r1, r5
 800b12a:	f7f5 fb8f 	bl	800084c <__aeabi_ddiv>
 800b12e:	f7f5 fd13 	bl	8000b58 <__aeabi_d2iz>
 800b132:	4680      	mov	r8, r0
 800b134:	f7f5 f9f6 	bl	8000524 <__aeabi_i2d>
 800b138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b13c:	f7f5 fa5c 	bl	80005f8 <__aeabi_dmul>
 800b140:	4602      	mov	r2, r0
 800b142:	460b      	mov	r3, r1
 800b144:	4620      	mov	r0, r4
 800b146:	4629      	mov	r1, r5
 800b148:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b14c:	f7f5 f89c 	bl	8000288 <__aeabi_dsub>
 800b150:	f806 4b01 	strb.w	r4, [r6], #1
 800b154:	9d07      	ldr	r5, [sp, #28]
 800b156:	eba6 040a 	sub.w	r4, r6, sl
 800b15a:	42a5      	cmp	r5, r4
 800b15c:	4602      	mov	r2, r0
 800b15e:	460b      	mov	r3, r1
 800b160:	f040 8117 	bne.w	800b392 <_dtoa_r+0x6e2>
 800b164:	f7f5 f892 	bl	800028c <__adddf3>
 800b168:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b16c:	4604      	mov	r4, r0
 800b16e:	460d      	mov	r5, r1
 800b170:	f7f5 fcd2 	bl	8000b18 <__aeabi_dcmpgt>
 800b174:	2800      	cmp	r0, #0
 800b176:	f040 80f9 	bne.w	800b36c <_dtoa_r+0x6bc>
 800b17a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b17e:	4620      	mov	r0, r4
 800b180:	4629      	mov	r1, r5
 800b182:	f7f5 fca1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b186:	b118      	cbz	r0, 800b190 <_dtoa_r+0x4e0>
 800b188:	f018 0f01 	tst.w	r8, #1
 800b18c:	f040 80ee 	bne.w	800b36c <_dtoa_r+0x6bc>
 800b190:	4649      	mov	r1, r9
 800b192:	4658      	mov	r0, fp
 800b194:	f001 fad6 	bl	800c744 <_Bfree>
 800b198:	2300      	movs	r3, #0
 800b19a:	7033      	strb	r3, [r6, #0]
 800b19c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b19e:	3701      	adds	r7, #1
 800b1a0:	601f      	str	r7, [r3, #0]
 800b1a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f000 831d 	beq.w	800b7e4 <_dtoa_r+0xb34>
 800b1aa:	601e      	str	r6, [r3, #0]
 800b1ac:	e31a      	b.n	800b7e4 <_dtoa_r+0xb34>
 800b1ae:	07e2      	lsls	r2, r4, #31
 800b1b0:	d505      	bpl.n	800b1be <_dtoa_r+0x50e>
 800b1b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b1b6:	f7f5 fa1f 	bl	80005f8 <__aeabi_dmul>
 800b1ba:	3601      	adds	r6, #1
 800b1bc:	2301      	movs	r3, #1
 800b1be:	1064      	asrs	r4, r4, #1
 800b1c0:	3508      	adds	r5, #8
 800b1c2:	e73f      	b.n	800b044 <_dtoa_r+0x394>
 800b1c4:	2602      	movs	r6, #2
 800b1c6:	e742      	b.n	800b04e <_dtoa_r+0x39e>
 800b1c8:	9c07      	ldr	r4, [sp, #28]
 800b1ca:	9704      	str	r7, [sp, #16]
 800b1cc:	e761      	b.n	800b092 <_dtoa_r+0x3e2>
 800b1ce:	4b27      	ldr	r3, [pc, #156]	@ (800b26c <_dtoa_r+0x5bc>)
 800b1d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b1d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b1d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b1da:	4454      	add	r4, sl
 800b1dc:	2900      	cmp	r1, #0
 800b1de:	d053      	beq.n	800b288 <_dtoa_r+0x5d8>
 800b1e0:	4928      	ldr	r1, [pc, #160]	@ (800b284 <_dtoa_r+0x5d4>)
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	f7f5 fb32 	bl	800084c <__aeabi_ddiv>
 800b1e8:	4633      	mov	r3, r6
 800b1ea:	462a      	mov	r2, r5
 800b1ec:	f7f5 f84c 	bl	8000288 <__aeabi_dsub>
 800b1f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b1f4:	4656      	mov	r6, sl
 800b1f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1fa:	f7f5 fcad 	bl	8000b58 <__aeabi_d2iz>
 800b1fe:	4605      	mov	r5, r0
 800b200:	f7f5 f990 	bl	8000524 <__aeabi_i2d>
 800b204:	4602      	mov	r2, r0
 800b206:	460b      	mov	r3, r1
 800b208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b20c:	f7f5 f83c 	bl	8000288 <__aeabi_dsub>
 800b210:	3530      	adds	r5, #48	@ 0x30
 800b212:	4602      	mov	r2, r0
 800b214:	460b      	mov	r3, r1
 800b216:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b21a:	f806 5b01 	strb.w	r5, [r6], #1
 800b21e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b222:	f7f5 fc5b 	bl	8000adc <__aeabi_dcmplt>
 800b226:	2800      	cmp	r0, #0
 800b228:	d171      	bne.n	800b30e <_dtoa_r+0x65e>
 800b22a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b22e:	4911      	ldr	r1, [pc, #68]	@ (800b274 <_dtoa_r+0x5c4>)
 800b230:	2000      	movs	r0, #0
 800b232:	f7f5 f829 	bl	8000288 <__aeabi_dsub>
 800b236:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b23a:	f7f5 fc4f 	bl	8000adc <__aeabi_dcmplt>
 800b23e:	2800      	cmp	r0, #0
 800b240:	f040 8095 	bne.w	800b36e <_dtoa_r+0x6be>
 800b244:	42a6      	cmp	r6, r4
 800b246:	f43f af50 	beq.w	800b0ea <_dtoa_r+0x43a>
 800b24a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b24e:	4b0a      	ldr	r3, [pc, #40]	@ (800b278 <_dtoa_r+0x5c8>)
 800b250:	2200      	movs	r2, #0
 800b252:	f7f5 f9d1 	bl	80005f8 <__aeabi_dmul>
 800b256:	4b08      	ldr	r3, [pc, #32]	@ (800b278 <_dtoa_r+0x5c8>)
 800b258:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b25c:	2200      	movs	r2, #0
 800b25e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b262:	f7f5 f9c9 	bl	80005f8 <__aeabi_dmul>
 800b266:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b26a:	e7c4      	b.n	800b1f6 <_dtoa_r+0x546>
 800b26c:	0800db68 	.word	0x0800db68
 800b270:	0800db40 	.word	0x0800db40
 800b274:	3ff00000 	.word	0x3ff00000
 800b278:	40240000 	.word	0x40240000
 800b27c:	401c0000 	.word	0x401c0000
 800b280:	40140000 	.word	0x40140000
 800b284:	3fe00000 	.word	0x3fe00000
 800b288:	4631      	mov	r1, r6
 800b28a:	4628      	mov	r0, r5
 800b28c:	f7f5 f9b4 	bl	80005f8 <__aeabi_dmul>
 800b290:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b294:	9415      	str	r4, [sp, #84]	@ 0x54
 800b296:	4656      	mov	r6, sl
 800b298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b29c:	f7f5 fc5c 	bl	8000b58 <__aeabi_d2iz>
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	f7f5 f93f 	bl	8000524 <__aeabi_i2d>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2ae:	f7f4 ffeb 	bl	8000288 <__aeabi_dsub>
 800b2b2:	3530      	adds	r5, #48	@ 0x30
 800b2b4:	f806 5b01 	strb.w	r5, [r6], #1
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	42a6      	cmp	r6, r4
 800b2be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b2c2:	f04f 0200 	mov.w	r2, #0
 800b2c6:	d124      	bne.n	800b312 <_dtoa_r+0x662>
 800b2c8:	4bac      	ldr	r3, [pc, #688]	@ (800b57c <_dtoa_r+0x8cc>)
 800b2ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b2ce:	f7f4 ffdd 	bl	800028c <__adddf3>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2da:	f7f5 fc1d 	bl	8000b18 <__aeabi_dcmpgt>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d145      	bne.n	800b36e <_dtoa_r+0x6be>
 800b2e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b2e6:	49a5      	ldr	r1, [pc, #660]	@ (800b57c <_dtoa_r+0x8cc>)
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	f7f4 ffcd 	bl	8000288 <__aeabi_dsub>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2f6:	f7f5 fbf1 	bl	8000adc <__aeabi_dcmplt>
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	f43f aef5 	beq.w	800b0ea <_dtoa_r+0x43a>
 800b300:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b302:	1e73      	subs	r3, r6, #1
 800b304:	9315      	str	r3, [sp, #84]	@ 0x54
 800b306:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b30a:	2b30      	cmp	r3, #48	@ 0x30
 800b30c:	d0f8      	beq.n	800b300 <_dtoa_r+0x650>
 800b30e:	9f04      	ldr	r7, [sp, #16]
 800b310:	e73e      	b.n	800b190 <_dtoa_r+0x4e0>
 800b312:	4b9b      	ldr	r3, [pc, #620]	@ (800b580 <_dtoa_r+0x8d0>)
 800b314:	f7f5 f970 	bl	80005f8 <__aeabi_dmul>
 800b318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b31c:	e7bc      	b.n	800b298 <_dtoa_r+0x5e8>
 800b31e:	d10c      	bne.n	800b33a <_dtoa_r+0x68a>
 800b320:	4b98      	ldr	r3, [pc, #608]	@ (800b584 <_dtoa_r+0x8d4>)
 800b322:	2200      	movs	r2, #0
 800b324:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b328:	f7f5 f966 	bl	80005f8 <__aeabi_dmul>
 800b32c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b330:	f7f5 fbe8 	bl	8000b04 <__aeabi_dcmpge>
 800b334:	2800      	cmp	r0, #0
 800b336:	f000 8157 	beq.w	800b5e8 <_dtoa_r+0x938>
 800b33a:	2400      	movs	r4, #0
 800b33c:	4625      	mov	r5, r4
 800b33e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b340:	43db      	mvns	r3, r3
 800b342:	9304      	str	r3, [sp, #16]
 800b344:	4656      	mov	r6, sl
 800b346:	2700      	movs	r7, #0
 800b348:	4621      	mov	r1, r4
 800b34a:	4658      	mov	r0, fp
 800b34c:	f001 f9fa 	bl	800c744 <_Bfree>
 800b350:	2d00      	cmp	r5, #0
 800b352:	d0dc      	beq.n	800b30e <_dtoa_r+0x65e>
 800b354:	b12f      	cbz	r7, 800b362 <_dtoa_r+0x6b2>
 800b356:	42af      	cmp	r7, r5
 800b358:	d003      	beq.n	800b362 <_dtoa_r+0x6b2>
 800b35a:	4639      	mov	r1, r7
 800b35c:	4658      	mov	r0, fp
 800b35e:	f001 f9f1 	bl	800c744 <_Bfree>
 800b362:	4629      	mov	r1, r5
 800b364:	4658      	mov	r0, fp
 800b366:	f001 f9ed 	bl	800c744 <_Bfree>
 800b36a:	e7d0      	b.n	800b30e <_dtoa_r+0x65e>
 800b36c:	9704      	str	r7, [sp, #16]
 800b36e:	4633      	mov	r3, r6
 800b370:	461e      	mov	r6, r3
 800b372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b376:	2a39      	cmp	r2, #57	@ 0x39
 800b378:	d107      	bne.n	800b38a <_dtoa_r+0x6da>
 800b37a:	459a      	cmp	sl, r3
 800b37c:	d1f8      	bne.n	800b370 <_dtoa_r+0x6c0>
 800b37e:	9a04      	ldr	r2, [sp, #16]
 800b380:	3201      	adds	r2, #1
 800b382:	9204      	str	r2, [sp, #16]
 800b384:	2230      	movs	r2, #48	@ 0x30
 800b386:	f88a 2000 	strb.w	r2, [sl]
 800b38a:	781a      	ldrb	r2, [r3, #0]
 800b38c:	3201      	adds	r2, #1
 800b38e:	701a      	strb	r2, [r3, #0]
 800b390:	e7bd      	b.n	800b30e <_dtoa_r+0x65e>
 800b392:	4b7b      	ldr	r3, [pc, #492]	@ (800b580 <_dtoa_r+0x8d0>)
 800b394:	2200      	movs	r2, #0
 800b396:	f7f5 f92f 	bl	80005f8 <__aeabi_dmul>
 800b39a:	2200      	movs	r2, #0
 800b39c:	2300      	movs	r3, #0
 800b39e:	4604      	mov	r4, r0
 800b3a0:	460d      	mov	r5, r1
 800b3a2:	f7f5 fb91 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	f43f aebb 	beq.w	800b122 <_dtoa_r+0x472>
 800b3ac:	e6f0      	b.n	800b190 <_dtoa_r+0x4e0>
 800b3ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b3b0:	2a00      	cmp	r2, #0
 800b3b2:	f000 80db 	beq.w	800b56c <_dtoa_r+0x8bc>
 800b3b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3b8:	2a01      	cmp	r2, #1
 800b3ba:	f300 80bf 	bgt.w	800b53c <_dtoa_r+0x88c>
 800b3be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b3c0:	2a00      	cmp	r2, #0
 800b3c2:	f000 80b7 	beq.w	800b534 <_dtoa_r+0x884>
 800b3c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b3ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b3cc:	4646      	mov	r6, r8
 800b3ce:	9a08      	ldr	r2, [sp, #32]
 800b3d0:	2101      	movs	r1, #1
 800b3d2:	441a      	add	r2, r3
 800b3d4:	4658      	mov	r0, fp
 800b3d6:	4498      	add	r8, r3
 800b3d8:	9208      	str	r2, [sp, #32]
 800b3da:	f001 fab1 	bl	800c940 <__i2b>
 800b3de:	4605      	mov	r5, r0
 800b3e0:	b15e      	cbz	r6, 800b3fa <_dtoa_r+0x74a>
 800b3e2:	9b08      	ldr	r3, [sp, #32]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	dd08      	ble.n	800b3fa <_dtoa_r+0x74a>
 800b3e8:	42b3      	cmp	r3, r6
 800b3ea:	9a08      	ldr	r2, [sp, #32]
 800b3ec:	bfa8      	it	ge
 800b3ee:	4633      	movge	r3, r6
 800b3f0:	eba8 0803 	sub.w	r8, r8, r3
 800b3f4:	1af6      	subs	r6, r6, r3
 800b3f6:	1ad3      	subs	r3, r2, r3
 800b3f8:	9308      	str	r3, [sp, #32]
 800b3fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3fc:	b1f3      	cbz	r3, 800b43c <_dtoa_r+0x78c>
 800b3fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b400:	2b00      	cmp	r3, #0
 800b402:	f000 80b7 	beq.w	800b574 <_dtoa_r+0x8c4>
 800b406:	b18c      	cbz	r4, 800b42c <_dtoa_r+0x77c>
 800b408:	4629      	mov	r1, r5
 800b40a:	4622      	mov	r2, r4
 800b40c:	4658      	mov	r0, fp
 800b40e:	f001 fb57 	bl	800cac0 <__pow5mult>
 800b412:	464a      	mov	r2, r9
 800b414:	4601      	mov	r1, r0
 800b416:	4605      	mov	r5, r0
 800b418:	4658      	mov	r0, fp
 800b41a:	f001 faa7 	bl	800c96c <__multiply>
 800b41e:	4649      	mov	r1, r9
 800b420:	9004      	str	r0, [sp, #16]
 800b422:	4658      	mov	r0, fp
 800b424:	f001 f98e 	bl	800c744 <_Bfree>
 800b428:	9b04      	ldr	r3, [sp, #16]
 800b42a:	4699      	mov	r9, r3
 800b42c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b42e:	1b1a      	subs	r2, r3, r4
 800b430:	d004      	beq.n	800b43c <_dtoa_r+0x78c>
 800b432:	4649      	mov	r1, r9
 800b434:	4658      	mov	r0, fp
 800b436:	f001 fb43 	bl	800cac0 <__pow5mult>
 800b43a:	4681      	mov	r9, r0
 800b43c:	2101      	movs	r1, #1
 800b43e:	4658      	mov	r0, fp
 800b440:	f001 fa7e 	bl	800c940 <__i2b>
 800b444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b446:	4604      	mov	r4, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f000 81cf 	beq.w	800b7ec <_dtoa_r+0xb3c>
 800b44e:	461a      	mov	r2, r3
 800b450:	4601      	mov	r1, r0
 800b452:	4658      	mov	r0, fp
 800b454:	f001 fb34 	bl	800cac0 <__pow5mult>
 800b458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b45a:	2b01      	cmp	r3, #1
 800b45c:	4604      	mov	r4, r0
 800b45e:	f300 8095 	bgt.w	800b58c <_dtoa_r+0x8dc>
 800b462:	9b02      	ldr	r3, [sp, #8]
 800b464:	2b00      	cmp	r3, #0
 800b466:	f040 8087 	bne.w	800b578 <_dtoa_r+0x8c8>
 800b46a:	9b03      	ldr	r3, [sp, #12]
 800b46c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b470:	2b00      	cmp	r3, #0
 800b472:	f040 8089 	bne.w	800b588 <_dtoa_r+0x8d8>
 800b476:	9b03      	ldr	r3, [sp, #12]
 800b478:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b47c:	0d1b      	lsrs	r3, r3, #20
 800b47e:	051b      	lsls	r3, r3, #20
 800b480:	b12b      	cbz	r3, 800b48e <_dtoa_r+0x7de>
 800b482:	9b08      	ldr	r3, [sp, #32]
 800b484:	3301      	adds	r3, #1
 800b486:	9308      	str	r3, [sp, #32]
 800b488:	f108 0801 	add.w	r8, r8, #1
 800b48c:	2301      	movs	r3, #1
 800b48e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b492:	2b00      	cmp	r3, #0
 800b494:	f000 81b0 	beq.w	800b7f8 <_dtoa_r+0xb48>
 800b498:	6923      	ldr	r3, [r4, #16]
 800b49a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b49e:	6918      	ldr	r0, [r3, #16]
 800b4a0:	f001 fa02 	bl	800c8a8 <__hi0bits>
 800b4a4:	f1c0 0020 	rsb	r0, r0, #32
 800b4a8:	9b08      	ldr	r3, [sp, #32]
 800b4aa:	4418      	add	r0, r3
 800b4ac:	f010 001f 	ands.w	r0, r0, #31
 800b4b0:	d077      	beq.n	800b5a2 <_dtoa_r+0x8f2>
 800b4b2:	f1c0 0320 	rsb	r3, r0, #32
 800b4b6:	2b04      	cmp	r3, #4
 800b4b8:	dd6b      	ble.n	800b592 <_dtoa_r+0x8e2>
 800b4ba:	9b08      	ldr	r3, [sp, #32]
 800b4bc:	f1c0 001c 	rsb	r0, r0, #28
 800b4c0:	4403      	add	r3, r0
 800b4c2:	4480      	add	r8, r0
 800b4c4:	4406      	add	r6, r0
 800b4c6:	9308      	str	r3, [sp, #32]
 800b4c8:	f1b8 0f00 	cmp.w	r8, #0
 800b4cc:	dd05      	ble.n	800b4da <_dtoa_r+0x82a>
 800b4ce:	4649      	mov	r1, r9
 800b4d0:	4642      	mov	r2, r8
 800b4d2:	4658      	mov	r0, fp
 800b4d4:	f001 fb4e 	bl	800cb74 <__lshift>
 800b4d8:	4681      	mov	r9, r0
 800b4da:	9b08      	ldr	r3, [sp, #32]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	dd05      	ble.n	800b4ec <_dtoa_r+0x83c>
 800b4e0:	4621      	mov	r1, r4
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	4658      	mov	r0, fp
 800b4e6:	f001 fb45 	bl	800cb74 <__lshift>
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d059      	beq.n	800b5a6 <_dtoa_r+0x8f6>
 800b4f2:	4621      	mov	r1, r4
 800b4f4:	4648      	mov	r0, r9
 800b4f6:	f001 fba9 	bl	800cc4c <__mcmp>
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	da53      	bge.n	800b5a6 <_dtoa_r+0x8f6>
 800b4fe:	1e7b      	subs	r3, r7, #1
 800b500:	9304      	str	r3, [sp, #16]
 800b502:	4649      	mov	r1, r9
 800b504:	2300      	movs	r3, #0
 800b506:	220a      	movs	r2, #10
 800b508:	4658      	mov	r0, fp
 800b50a:	f001 f93d 	bl	800c788 <__multadd>
 800b50e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b510:	4681      	mov	r9, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	f000 8172 	beq.w	800b7fc <_dtoa_r+0xb4c>
 800b518:	2300      	movs	r3, #0
 800b51a:	4629      	mov	r1, r5
 800b51c:	220a      	movs	r2, #10
 800b51e:	4658      	mov	r0, fp
 800b520:	f001 f932 	bl	800c788 <__multadd>
 800b524:	9b00      	ldr	r3, [sp, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	4605      	mov	r5, r0
 800b52a:	dc67      	bgt.n	800b5fc <_dtoa_r+0x94c>
 800b52c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b52e:	2b02      	cmp	r3, #2
 800b530:	dc41      	bgt.n	800b5b6 <_dtoa_r+0x906>
 800b532:	e063      	b.n	800b5fc <_dtoa_r+0x94c>
 800b534:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b536:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b53a:	e746      	b.n	800b3ca <_dtoa_r+0x71a>
 800b53c:	9b07      	ldr	r3, [sp, #28]
 800b53e:	1e5c      	subs	r4, r3, #1
 800b540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b542:	42a3      	cmp	r3, r4
 800b544:	bfbf      	itttt	lt
 800b546:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b548:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b54a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b54c:	1ae3      	sublt	r3, r4, r3
 800b54e:	bfb4      	ite	lt
 800b550:	18d2      	addlt	r2, r2, r3
 800b552:	1b1c      	subge	r4, r3, r4
 800b554:	9b07      	ldr	r3, [sp, #28]
 800b556:	bfbc      	itt	lt
 800b558:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b55a:	2400      	movlt	r4, #0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	bfb5      	itete	lt
 800b560:	eba8 0603 	sublt.w	r6, r8, r3
 800b564:	9b07      	ldrge	r3, [sp, #28]
 800b566:	2300      	movlt	r3, #0
 800b568:	4646      	movge	r6, r8
 800b56a:	e730      	b.n	800b3ce <_dtoa_r+0x71e>
 800b56c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b56e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b570:	4646      	mov	r6, r8
 800b572:	e735      	b.n	800b3e0 <_dtoa_r+0x730>
 800b574:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b576:	e75c      	b.n	800b432 <_dtoa_r+0x782>
 800b578:	2300      	movs	r3, #0
 800b57a:	e788      	b.n	800b48e <_dtoa_r+0x7de>
 800b57c:	3fe00000 	.word	0x3fe00000
 800b580:	40240000 	.word	0x40240000
 800b584:	40140000 	.word	0x40140000
 800b588:	9b02      	ldr	r3, [sp, #8]
 800b58a:	e780      	b.n	800b48e <_dtoa_r+0x7de>
 800b58c:	2300      	movs	r3, #0
 800b58e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b590:	e782      	b.n	800b498 <_dtoa_r+0x7e8>
 800b592:	d099      	beq.n	800b4c8 <_dtoa_r+0x818>
 800b594:	9a08      	ldr	r2, [sp, #32]
 800b596:	331c      	adds	r3, #28
 800b598:	441a      	add	r2, r3
 800b59a:	4498      	add	r8, r3
 800b59c:	441e      	add	r6, r3
 800b59e:	9208      	str	r2, [sp, #32]
 800b5a0:	e792      	b.n	800b4c8 <_dtoa_r+0x818>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	e7f6      	b.n	800b594 <_dtoa_r+0x8e4>
 800b5a6:	9b07      	ldr	r3, [sp, #28]
 800b5a8:	9704      	str	r7, [sp, #16]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	dc20      	bgt.n	800b5f0 <_dtoa_r+0x940>
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5b2:	2b02      	cmp	r3, #2
 800b5b4:	dd1e      	ble.n	800b5f4 <_dtoa_r+0x944>
 800b5b6:	9b00      	ldr	r3, [sp, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f47f aec0 	bne.w	800b33e <_dtoa_r+0x68e>
 800b5be:	4621      	mov	r1, r4
 800b5c0:	2205      	movs	r2, #5
 800b5c2:	4658      	mov	r0, fp
 800b5c4:	f001 f8e0 	bl	800c788 <__multadd>
 800b5c8:	4601      	mov	r1, r0
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	4648      	mov	r0, r9
 800b5ce:	f001 fb3d 	bl	800cc4c <__mcmp>
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	f77f aeb3 	ble.w	800b33e <_dtoa_r+0x68e>
 800b5d8:	4656      	mov	r6, sl
 800b5da:	2331      	movs	r3, #49	@ 0x31
 800b5dc:	f806 3b01 	strb.w	r3, [r6], #1
 800b5e0:	9b04      	ldr	r3, [sp, #16]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	9304      	str	r3, [sp, #16]
 800b5e6:	e6ae      	b.n	800b346 <_dtoa_r+0x696>
 800b5e8:	9c07      	ldr	r4, [sp, #28]
 800b5ea:	9704      	str	r7, [sp, #16]
 800b5ec:	4625      	mov	r5, r4
 800b5ee:	e7f3      	b.n	800b5d8 <_dtoa_r+0x928>
 800b5f0:	9b07      	ldr	r3, [sp, #28]
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f000 8104 	beq.w	800b804 <_dtoa_r+0xb54>
 800b5fc:	2e00      	cmp	r6, #0
 800b5fe:	dd05      	ble.n	800b60c <_dtoa_r+0x95c>
 800b600:	4629      	mov	r1, r5
 800b602:	4632      	mov	r2, r6
 800b604:	4658      	mov	r0, fp
 800b606:	f001 fab5 	bl	800cb74 <__lshift>
 800b60a:	4605      	mov	r5, r0
 800b60c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d05a      	beq.n	800b6c8 <_dtoa_r+0xa18>
 800b612:	6869      	ldr	r1, [r5, #4]
 800b614:	4658      	mov	r0, fp
 800b616:	f001 f855 	bl	800c6c4 <_Balloc>
 800b61a:	4606      	mov	r6, r0
 800b61c:	b928      	cbnz	r0, 800b62a <_dtoa_r+0x97a>
 800b61e:	4b84      	ldr	r3, [pc, #528]	@ (800b830 <_dtoa_r+0xb80>)
 800b620:	4602      	mov	r2, r0
 800b622:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b626:	f7ff bb5a 	b.w	800acde <_dtoa_r+0x2e>
 800b62a:	692a      	ldr	r2, [r5, #16]
 800b62c:	3202      	adds	r2, #2
 800b62e:	0092      	lsls	r2, r2, #2
 800b630:	f105 010c 	add.w	r1, r5, #12
 800b634:	300c      	adds	r0, #12
 800b636:	f7ff fa92 	bl	800ab5e <memcpy>
 800b63a:	2201      	movs	r2, #1
 800b63c:	4631      	mov	r1, r6
 800b63e:	4658      	mov	r0, fp
 800b640:	f001 fa98 	bl	800cb74 <__lshift>
 800b644:	f10a 0301 	add.w	r3, sl, #1
 800b648:	9307      	str	r3, [sp, #28]
 800b64a:	9b00      	ldr	r3, [sp, #0]
 800b64c:	4453      	add	r3, sl
 800b64e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b650:	9b02      	ldr	r3, [sp, #8]
 800b652:	f003 0301 	and.w	r3, r3, #1
 800b656:	462f      	mov	r7, r5
 800b658:	930a      	str	r3, [sp, #40]	@ 0x28
 800b65a:	4605      	mov	r5, r0
 800b65c:	9b07      	ldr	r3, [sp, #28]
 800b65e:	4621      	mov	r1, r4
 800b660:	3b01      	subs	r3, #1
 800b662:	4648      	mov	r0, r9
 800b664:	9300      	str	r3, [sp, #0]
 800b666:	f7ff fa99 	bl	800ab9c <quorem>
 800b66a:	4639      	mov	r1, r7
 800b66c:	9002      	str	r0, [sp, #8]
 800b66e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b672:	4648      	mov	r0, r9
 800b674:	f001 faea 	bl	800cc4c <__mcmp>
 800b678:	462a      	mov	r2, r5
 800b67a:	9008      	str	r0, [sp, #32]
 800b67c:	4621      	mov	r1, r4
 800b67e:	4658      	mov	r0, fp
 800b680:	f001 fb00 	bl	800cc84 <__mdiff>
 800b684:	68c2      	ldr	r2, [r0, #12]
 800b686:	4606      	mov	r6, r0
 800b688:	bb02      	cbnz	r2, 800b6cc <_dtoa_r+0xa1c>
 800b68a:	4601      	mov	r1, r0
 800b68c:	4648      	mov	r0, r9
 800b68e:	f001 fadd 	bl	800cc4c <__mcmp>
 800b692:	4602      	mov	r2, r0
 800b694:	4631      	mov	r1, r6
 800b696:	4658      	mov	r0, fp
 800b698:	920e      	str	r2, [sp, #56]	@ 0x38
 800b69a:	f001 f853 	bl	800c744 <_Bfree>
 800b69e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6a2:	9e07      	ldr	r6, [sp, #28]
 800b6a4:	ea43 0102 	orr.w	r1, r3, r2
 800b6a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6aa:	4319      	orrs	r1, r3
 800b6ac:	d110      	bne.n	800b6d0 <_dtoa_r+0xa20>
 800b6ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b6b2:	d029      	beq.n	800b708 <_dtoa_r+0xa58>
 800b6b4:	9b08      	ldr	r3, [sp, #32]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	dd02      	ble.n	800b6c0 <_dtoa_r+0xa10>
 800b6ba:	9b02      	ldr	r3, [sp, #8]
 800b6bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b6c0:	9b00      	ldr	r3, [sp, #0]
 800b6c2:	f883 8000 	strb.w	r8, [r3]
 800b6c6:	e63f      	b.n	800b348 <_dtoa_r+0x698>
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	e7bb      	b.n	800b644 <_dtoa_r+0x994>
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	e7e1      	b.n	800b694 <_dtoa_r+0x9e4>
 800b6d0:	9b08      	ldr	r3, [sp, #32]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	db04      	blt.n	800b6e0 <_dtoa_r+0xa30>
 800b6d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6d8:	430b      	orrs	r3, r1
 800b6da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b6dc:	430b      	orrs	r3, r1
 800b6de:	d120      	bne.n	800b722 <_dtoa_r+0xa72>
 800b6e0:	2a00      	cmp	r2, #0
 800b6e2:	dded      	ble.n	800b6c0 <_dtoa_r+0xa10>
 800b6e4:	4649      	mov	r1, r9
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	4658      	mov	r0, fp
 800b6ea:	f001 fa43 	bl	800cb74 <__lshift>
 800b6ee:	4621      	mov	r1, r4
 800b6f0:	4681      	mov	r9, r0
 800b6f2:	f001 faab 	bl	800cc4c <__mcmp>
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	dc03      	bgt.n	800b702 <_dtoa_r+0xa52>
 800b6fa:	d1e1      	bne.n	800b6c0 <_dtoa_r+0xa10>
 800b6fc:	f018 0f01 	tst.w	r8, #1
 800b700:	d0de      	beq.n	800b6c0 <_dtoa_r+0xa10>
 800b702:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b706:	d1d8      	bne.n	800b6ba <_dtoa_r+0xa0a>
 800b708:	9a00      	ldr	r2, [sp, #0]
 800b70a:	2339      	movs	r3, #57	@ 0x39
 800b70c:	7013      	strb	r3, [r2, #0]
 800b70e:	4633      	mov	r3, r6
 800b710:	461e      	mov	r6, r3
 800b712:	3b01      	subs	r3, #1
 800b714:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b718:	2a39      	cmp	r2, #57	@ 0x39
 800b71a:	d052      	beq.n	800b7c2 <_dtoa_r+0xb12>
 800b71c:	3201      	adds	r2, #1
 800b71e:	701a      	strb	r2, [r3, #0]
 800b720:	e612      	b.n	800b348 <_dtoa_r+0x698>
 800b722:	2a00      	cmp	r2, #0
 800b724:	dd07      	ble.n	800b736 <_dtoa_r+0xa86>
 800b726:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b72a:	d0ed      	beq.n	800b708 <_dtoa_r+0xa58>
 800b72c:	9a00      	ldr	r2, [sp, #0]
 800b72e:	f108 0301 	add.w	r3, r8, #1
 800b732:	7013      	strb	r3, [r2, #0]
 800b734:	e608      	b.n	800b348 <_dtoa_r+0x698>
 800b736:	9b07      	ldr	r3, [sp, #28]
 800b738:	9a07      	ldr	r2, [sp, #28]
 800b73a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b73e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b740:	4293      	cmp	r3, r2
 800b742:	d028      	beq.n	800b796 <_dtoa_r+0xae6>
 800b744:	4649      	mov	r1, r9
 800b746:	2300      	movs	r3, #0
 800b748:	220a      	movs	r2, #10
 800b74a:	4658      	mov	r0, fp
 800b74c:	f001 f81c 	bl	800c788 <__multadd>
 800b750:	42af      	cmp	r7, r5
 800b752:	4681      	mov	r9, r0
 800b754:	f04f 0300 	mov.w	r3, #0
 800b758:	f04f 020a 	mov.w	r2, #10
 800b75c:	4639      	mov	r1, r7
 800b75e:	4658      	mov	r0, fp
 800b760:	d107      	bne.n	800b772 <_dtoa_r+0xac2>
 800b762:	f001 f811 	bl	800c788 <__multadd>
 800b766:	4607      	mov	r7, r0
 800b768:	4605      	mov	r5, r0
 800b76a:	9b07      	ldr	r3, [sp, #28]
 800b76c:	3301      	adds	r3, #1
 800b76e:	9307      	str	r3, [sp, #28]
 800b770:	e774      	b.n	800b65c <_dtoa_r+0x9ac>
 800b772:	f001 f809 	bl	800c788 <__multadd>
 800b776:	4629      	mov	r1, r5
 800b778:	4607      	mov	r7, r0
 800b77a:	2300      	movs	r3, #0
 800b77c:	220a      	movs	r2, #10
 800b77e:	4658      	mov	r0, fp
 800b780:	f001 f802 	bl	800c788 <__multadd>
 800b784:	4605      	mov	r5, r0
 800b786:	e7f0      	b.n	800b76a <_dtoa_r+0xaba>
 800b788:	9b00      	ldr	r3, [sp, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	bfcc      	ite	gt
 800b78e:	461e      	movgt	r6, r3
 800b790:	2601      	movle	r6, #1
 800b792:	4456      	add	r6, sl
 800b794:	2700      	movs	r7, #0
 800b796:	4649      	mov	r1, r9
 800b798:	2201      	movs	r2, #1
 800b79a:	4658      	mov	r0, fp
 800b79c:	f001 f9ea 	bl	800cb74 <__lshift>
 800b7a0:	4621      	mov	r1, r4
 800b7a2:	4681      	mov	r9, r0
 800b7a4:	f001 fa52 	bl	800cc4c <__mcmp>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	dcb0      	bgt.n	800b70e <_dtoa_r+0xa5e>
 800b7ac:	d102      	bne.n	800b7b4 <_dtoa_r+0xb04>
 800b7ae:	f018 0f01 	tst.w	r8, #1
 800b7b2:	d1ac      	bne.n	800b70e <_dtoa_r+0xa5e>
 800b7b4:	4633      	mov	r3, r6
 800b7b6:	461e      	mov	r6, r3
 800b7b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7bc:	2a30      	cmp	r2, #48	@ 0x30
 800b7be:	d0fa      	beq.n	800b7b6 <_dtoa_r+0xb06>
 800b7c0:	e5c2      	b.n	800b348 <_dtoa_r+0x698>
 800b7c2:	459a      	cmp	sl, r3
 800b7c4:	d1a4      	bne.n	800b710 <_dtoa_r+0xa60>
 800b7c6:	9b04      	ldr	r3, [sp, #16]
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	9304      	str	r3, [sp, #16]
 800b7cc:	2331      	movs	r3, #49	@ 0x31
 800b7ce:	f88a 3000 	strb.w	r3, [sl]
 800b7d2:	e5b9      	b.n	800b348 <_dtoa_r+0x698>
 800b7d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b7d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b834 <_dtoa_r+0xb84>
 800b7da:	b11b      	cbz	r3, 800b7e4 <_dtoa_r+0xb34>
 800b7dc:	f10a 0308 	add.w	r3, sl, #8
 800b7e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b7e2:	6013      	str	r3, [r2, #0]
 800b7e4:	4650      	mov	r0, sl
 800b7e6:	b019      	add	sp, #100	@ 0x64
 800b7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	f77f ae37 	ble.w	800b462 <_dtoa_r+0x7b2>
 800b7f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7f8:	2001      	movs	r0, #1
 800b7fa:	e655      	b.n	800b4a8 <_dtoa_r+0x7f8>
 800b7fc:	9b00      	ldr	r3, [sp, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	f77f aed6 	ble.w	800b5b0 <_dtoa_r+0x900>
 800b804:	4656      	mov	r6, sl
 800b806:	4621      	mov	r1, r4
 800b808:	4648      	mov	r0, r9
 800b80a:	f7ff f9c7 	bl	800ab9c <quorem>
 800b80e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b812:	f806 8b01 	strb.w	r8, [r6], #1
 800b816:	9b00      	ldr	r3, [sp, #0]
 800b818:	eba6 020a 	sub.w	r2, r6, sl
 800b81c:	4293      	cmp	r3, r2
 800b81e:	ddb3      	ble.n	800b788 <_dtoa_r+0xad8>
 800b820:	4649      	mov	r1, r9
 800b822:	2300      	movs	r3, #0
 800b824:	220a      	movs	r2, #10
 800b826:	4658      	mov	r0, fp
 800b828:	f000 ffae 	bl	800c788 <__multadd>
 800b82c:	4681      	mov	r9, r0
 800b82e:	e7ea      	b.n	800b806 <_dtoa_r+0xb56>
 800b830:	0800da55 	.word	0x0800da55
 800b834:	0800d9d9 	.word	0x0800d9d9

0800b838 <rshift>:
 800b838:	6903      	ldr	r3, [r0, #16]
 800b83a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b83e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b842:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b846:	f100 0414 	add.w	r4, r0, #20
 800b84a:	dd45      	ble.n	800b8d8 <rshift+0xa0>
 800b84c:	f011 011f 	ands.w	r1, r1, #31
 800b850:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b854:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b858:	d10c      	bne.n	800b874 <rshift+0x3c>
 800b85a:	f100 0710 	add.w	r7, r0, #16
 800b85e:	4629      	mov	r1, r5
 800b860:	42b1      	cmp	r1, r6
 800b862:	d334      	bcc.n	800b8ce <rshift+0x96>
 800b864:	1a9b      	subs	r3, r3, r2
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	1eea      	subs	r2, r5, #3
 800b86a:	4296      	cmp	r6, r2
 800b86c:	bf38      	it	cc
 800b86e:	2300      	movcc	r3, #0
 800b870:	4423      	add	r3, r4
 800b872:	e015      	b.n	800b8a0 <rshift+0x68>
 800b874:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b878:	f1c1 0820 	rsb	r8, r1, #32
 800b87c:	40cf      	lsrs	r7, r1
 800b87e:	f105 0e04 	add.w	lr, r5, #4
 800b882:	46a1      	mov	r9, r4
 800b884:	4576      	cmp	r6, lr
 800b886:	46f4      	mov	ip, lr
 800b888:	d815      	bhi.n	800b8b6 <rshift+0x7e>
 800b88a:	1a9a      	subs	r2, r3, r2
 800b88c:	0092      	lsls	r2, r2, #2
 800b88e:	3a04      	subs	r2, #4
 800b890:	3501      	adds	r5, #1
 800b892:	42ae      	cmp	r6, r5
 800b894:	bf38      	it	cc
 800b896:	2200      	movcc	r2, #0
 800b898:	18a3      	adds	r3, r4, r2
 800b89a:	50a7      	str	r7, [r4, r2]
 800b89c:	b107      	cbz	r7, 800b8a0 <rshift+0x68>
 800b89e:	3304      	adds	r3, #4
 800b8a0:	1b1a      	subs	r2, r3, r4
 800b8a2:	42a3      	cmp	r3, r4
 800b8a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b8a8:	bf08      	it	eq
 800b8aa:	2300      	moveq	r3, #0
 800b8ac:	6102      	str	r2, [r0, #16]
 800b8ae:	bf08      	it	eq
 800b8b0:	6143      	streq	r3, [r0, #20]
 800b8b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8b6:	f8dc c000 	ldr.w	ip, [ip]
 800b8ba:	fa0c fc08 	lsl.w	ip, ip, r8
 800b8be:	ea4c 0707 	orr.w	r7, ip, r7
 800b8c2:	f849 7b04 	str.w	r7, [r9], #4
 800b8c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b8ca:	40cf      	lsrs	r7, r1
 800b8cc:	e7da      	b.n	800b884 <rshift+0x4c>
 800b8ce:	f851 cb04 	ldr.w	ip, [r1], #4
 800b8d2:	f847 cf04 	str.w	ip, [r7, #4]!
 800b8d6:	e7c3      	b.n	800b860 <rshift+0x28>
 800b8d8:	4623      	mov	r3, r4
 800b8da:	e7e1      	b.n	800b8a0 <rshift+0x68>

0800b8dc <__hexdig_fun>:
 800b8dc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b8e0:	2b09      	cmp	r3, #9
 800b8e2:	d802      	bhi.n	800b8ea <__hexdig_fun+0xe>
 800b8e4:	3820      	subs	r0, #32
 800b8e6:	b2c0      	uxtb	r0, r0
 800b8e8:	4770      	bx	lr
 800b8ea:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b8ee:	2b05      	cmp	r3, #5
 800b8f0:	d801      	bhi.n	800b8f6 <__hexdig_fun+0x1a>
 800b8f2:	3847      	subs	r0, #71	@ 0x47
 800b8f4:	e7f7      	b.n	800b8e6 <__hexdig_fun+0xa>
 800b8f6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b8fa:	2b05      	cmp	r3, #5
 800b8fc:	d801      	bhi.n	800b902 <__hexdig_fun+0x26>
 800b8fe:	3827      	subs	r0, #39	@ 0x27
 800b900:	e7f1      	b.n	800b8e6 <__hexdig_fun+0xa>
 800b902:	2000      	movs	r0, #0
 800b904:	4770      	bx	lr
	...

0800b908 <__gethex>:
 800b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90c:	b085      	sub	sp, #20
 800b90e:	468a      	mov	sl, r1
 800b910:	9302      	str	r3, [sp, #8]
 800b912:	680b      	ldr	r3, [r1, #0]
 800b914:	9001      	str	r0, [sp, #4]
 800b916:	4690      	mov	r8, r2
 800b918:	1c9c      	adds	r4, r3, #2
 800b91a:	46a1      	mov	r9, r4
 800b91c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b920:	2830      	cmp	r0, #48	@ 0x30
 800b922:	d0fa      	beq.n	800b91a <__gethex+0x12>
 800b924:	eba9 0303 	sub.w	r3, r9, r3
 800b928:	f1a3 0b02 	sub.w	fp, r3, #2
 800b92c:	f7ff ffd6 	bl	800b8dc <__hexdig_fun>
 800b930:	4605      	mov	r5, r0
 800b932:	2800      	cmp	r0, #0
 800b934:	d168      	bne.n	800ba08 <__gethex+0x100>
 800b936:	49a0      	ldr	r1, [pc, #640]	@ (800bbb8 <__gethex+0x2b0>)
 800b938:	2201      	movs	r2, #1
 800b93a:	4648      	mov	r0, r9
 800b93c:	f7ff f8c4 	bl	800aac8 <strncmp>
 800b940:	4607      	mov	r7, r0
 800b942:	2800      	cmp	r0, #0
 800b944:	d167      	bne.n	800ba16 <__gethex+0x10e>
 800b946:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b94a:	4626      	mov	r6, r4
 800b94c:	f7ff ffc6 	bl	800b8dc <__hexdig_fun>
 800b950:	2800      	cmp	r0, #0
 800b952:	d062      	beq.n	800ba1a <__gethex+0x112>
 800b954:	4623      	mov	r3, r4
 800b956:	7818      	ldrb	r0, [r3, #0]
 800b958:	2830      	cmp	r0, #48	@ 0x30
 800b95a:	4699      	mov	r9, r3
 800b95c:	f103 0301 	add.w	r3, r3, #1
 800b960:	d0f9      	beq.n	800b956 <__gethex+0x4e>
 800b962:	f7ff ffbb 	bl	800b8dc <__hexdig_fun>
 800b966:	fab0 f580 	clz	r5, r0
 800b96a:	096d      	lsrs	r5, r5, #5
 800b96c:	f04f 0b01 	mov.w	fp, #1
 800b970:	464a      	mov	r2, r9
 800b972:	4616      	mov	r6, r2
 800b974:	3201      	adds	r2, #1
 800b976:	7830      	ldrb	r0, [r6, #0]
 800b978:	f7ff ffb0 	bl	800b8dc <__hexdig_fun>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	d1f8      	bne.n	800b972 <__gethex+0x6a>
 800b980:	498d      	ldr	r1, [pc, #564]	@ (800bbb8 <__gethex+0x2b0>)
 800b982:	2201      	movs	r2, #1
 800b984:	4630      	mov	r0, r6
 800b986:	f7ff f89f 	bl	800aac8 <strncmp>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	d13f      	bne.n	800ba0e <__gethex+0x106>
 800b98e:	b944      	cbnz	r4, 800b9a2 <__gethex+0x9a>
 800b990:	1c74      	adds	r4, r6, #1
 800b992:	4622      	mov	r2, r4
 800b994:	4616      	mov	r6, r2
 800b996:	3201      	adds	r2, #1
 800b998:	7830      	ldrb	r0, [r6, #0]
 800b99a:	f7ff ff9f 	bl	800b8dc <__hexdig_fun>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d1f8      	bne.n	800b994 <__gethex+0x8c>
 800b9a2:	1ba4      	subs	r4, r4, r6
 800b9a4:	00a7      	lsls	r7, r4, #2
 800b9a6:	7833      	ldrb	r3, [r6, #0]
 800b9a8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b9ac:	2b50      	cmp	r3, #80	@ 0x50
 800b9ae:	d13e      	bne.n	800ba2e <__gethex+0x126>
 800b9b0:	7873      	ldrb	r3, [r6, #1]
 800b9b2:	2b2b      	cmp	r3, #43	@ 0x2b
 800b9b4:	d033      	beq.n	800ba1e <__gethex+0x116>
 800b9b6:	2b2d      	cmp	r3, #45	@ 0x2d
 800b9b8:	d034      	beq.n	800ba24 <__gethex+0x11c>
 800b9ba:	1c71      	adds	r1, r6, #1
 800b9bc:	2400      	movs	r4, #0
 800b9be:	7808      	ldrb	r0, [r1, #0]
 800b9c0:	f7ff ff8c 	bl	800b8dc <__hexdig_fun>
 800b9c4:	1e43      	subs	r3, r0, #1
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	2b18      	cmp	r3, #24
 800b9ca:	d830      	bhi.n	800ba2e <__gethex+0x126>
 800b9cc:	f1a0 0210 	sub.w	r2, r0, #16
 800b9d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b9d4:	f7ff ff82 	bl	800b8dc <__hexdig_fun>
 800b9d8:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800b9dc:	fa5f fc8c 	uxtb.w	ip, ip
 800b9e0:	f1bc 0f18 	cmp.w	ip, #24
 800b9e4:	f04f 030a 	mov.w	r3, #10
 800b9e8:	d91e      	bls.n	800ba28 <__gethex+0x120>
 800b9ea:	b104      	cbz	r4, 800b9ee <__gethex+0xe6>
 800b9ec:	4252      	negs	r2, r2
 800b9ee:	4417      	add	r7, r2
 800b9f0:	f8ca 1000 	str.w	r1, [sl]
 800b9f4:	b1ed      	cbz	r5, 800ba32 <__gethex+0x12a>
 800b9f6:	f1bb 0f00 	cmp.w	fp, #0
 800b9fa:	bf0c      	ite	eq
 800b9fc:	2506      	moveq	r5, #6
 800b9fe:	2500      	movne	r5, #0
 800ba00:	4628      	mov	r0, r5
 800ba02:	b005      	add	sp, #20
 800ba04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba08:	2500      	movs	r5, #0
 800ba0a:	462c      	mov	r4, r5
 800ba0c:	e7b0      	b.n	800b970 <__gethex+0x68>
 800ba0e:	2c00      	cmp	r4, #0
 800ba10:	d1c7      	bne.n	800b9a2 <__gethex+0x9a>
 800ba12:	4627      	mov	r7, r4
 800ba14:	e7c7      	b.n	800b9a6 <__gethex+0x9e>
 800ba16:	464e      	mov	r6, r9
 800ba18:	462f      	mov	r7, r5
 800ba1a:	2501      	movs	r5, #1
 800ba1c:	e7c3      	b.n	800b9a6 <__gethex+0x9e>
 800ba1e:	2400      	movs	r4, #0
 800ba20:	1cb1      	adds	r1, r6, #2
 800ba22:	e7cc      	b.n	800b9be <__gethex+0xb6>
 800ba24:	2401      	movs	r4, #1
 800ba26:	e7fb      	b.n	800ba20 <__gethex+0x118>
 800ba28:	fb03 0002 	mla	r0, r3, r2, r0
 800ba2c:	e7ce      	b.n	800b9cc <__gethex+0xc4>
 800ba2e:	4631      	mov	r1, r6
 800ba30:	e7de      	b.n	800b9f0 <__gethex+0xe8>
 800ba32:	eba6 0309 	sub.w	r3, r6, r9
 800ba36:	3b01      	subs	r3, #1
 800ba38:	4629      	mov	r1, r5
 800ba3a:	2b07      	cmp	r3, #7
 800ba3c:	dc0a      	bgt.n	800ba54 <__gethex+0x14c>
 800ba3e:	9801      	ldr	r0, [sp, #4]
 800ba40:	f000 fe40 	bl	800c6c4 <_Balloc>
 800ba44:	4604      	mov	r4, r0
 800ba46:	b940      	cbnz	r0, 800ba5a <__gethex+0x152>
 800ba48:	4b5c      	ldr	r3, [pc, #368]	@ (800bbbc <__gethex+0x2b4>)
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	21e4      	movs	r1, #228	@ 0xe4
 800ba4e:	485c      	ldr	r0, [pc, #368]	@ (800bbc0 <__gethex+0x2b8>)
 800ba50:	f001 fcf2 	bl	800d438 <__assert_func>
 800ba54:	3101      	adds	r1, #1
 800ba56:	105b      	asrs	r3, r3, #1
 800ba58:	e7ef      	b.n	800ba3a <__gethex+0x132>
 800ba5a:	f100 0a14 	add.w	sl, r0, #20
 800ba5e:	2300      	movs	r3, #0
 800ba60:	4655      	mov	r5, sl
 800ba62:	469b      	mov	fp, r3
 800ba64:	45b1      	cmp	r9, r6
 800ba66:	d337      	bcc.n	800bad8 <__gethex+0x1d0>
 800ba68:	f845 bb04 	str.w	fp, [r5], #4
 800ba6c:	eba5 050a 	sub.w	r5, r5, sl
 800ba70:	10ad      	asrs	r5, r5, #2
 800ba72:	6125      	str	r5, [r4, #16]
 800ba74:	4658      	mov	r0, fp
 800ba76:	f000 ff17 	bl	800c8a8 <__hi0bits>
 800ba7a:	016d      	lsls	r5, r5, #5
 800ba7c:	f8d8 6000 	ldr.w	r6, [r8]
 800ba80:	1a2d      	subs	r5, r5, r0
 800ba82:	42b5      	cmp	r5, r6
 800ba84:	dd54      	ble.n	800bb30 <__gethex+0x228>
 800ba86:	1bad      	subs	r5, r5, r6
 800ba88:	4629      	mov	r1, r5
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	f001 faab 	bl	800cfe6 <__any_on>
 800ba90:	4681      	mov	r9, r0
 800ba92:	b178      	cbz	r0, 800bab4 <__gethex+0x1ac>
 800ba94:	1e6b      	subs	r3, r5, #1
 800ba96:	1159      	asrs	r1, r3, #5
 800ba98:	f003 021f 	and.w	r2, r3, #31
 800ba9c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800baa0:	f04f 0901 	mov.w	r9, #1
 800baa4:	fa09 f202 	lsl.w	r2, r9, r2
 800baa8:	420a      	tst	r2, r1
 800baaa:	d003      	beq.n	800bab4 <__gethex+0x1ac>
 800baac:	454b      	cmp	r3, r9
 800baae:	dc36      	bgt.n	800bb1e <__gethex+0x216>
 800bab0:	f04f 0902 	mov.w	r9, #2
 800bab4:	4629      	mov	r1, r5
 800bab6:	4620      	mov	r0, r4
 800bab8:	f7ff febe 	bl	800b838 <rshift>
 800babc:	442f      	add	r7, r5
 800babe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bac2:	42bb      	cmp	r3, r7
 800bac4:	da42      	bge.n	800bb4c <__gethex+0x244>
 800bac6:	9801      	ldr	r0, [sp, #4]
 800bac8:	4621      	mov	r1, r4
 800baca:	f000 fe3b 	bl	800c744 <_Bfree>
 800bace:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bad0:	2300      	movs	r3, #0
 800bad2:	6013      	str	r3, [r2, #0]
 800bad4:	25a3      	movs	r5, #163	@ 0xa3
 800bad6:	e793      	b.n	800ba00 <__gethex+0xf8>
 800bad8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800badc:	2a2e      	cmp	r2, #46	@ 0x2e
 800bade:	d012      	beq.n	800bb06 <__gethex+0x1fe>
 800bae0:	2b20      	cmp	r3, #32
 800bae2:	d104      	bne.n	800baee <__gethex+0x1e6>
 800bae4:	f845 bb04 	str.w	fp, [r5], #4
 800bae8:	f04f 0b00 	mov.w	fp, #0
 800baec:	465b      	mov	r3, fp
 800baee:	7830      	ldrb	r0, [r6, #0]
 800baf0:	9303      	str	r3, [sp, #12]
 800baf2:	f7ff fef3 	bl	800b8dc <__hexdig_fun>
 800baf6:	9b03      	ldr	r3, [sp, #12]
 800baf8:	f000 000f 	and.w	r0, r0, #15
 800bafc:	4098      	lsls	r0, r3
 800bafe:	ea4b 0b00 	orr.w	fp, fp, r0
 800bb02:	3304      	adds	r3, #4
 800bb04:	e7ae      	b.n	800ba64 <__gethex+0x15c>
 800bb06:	45b1      	cmp	r9, r6
 800bb08:	d8ea      	bhi.n	800bae0 <__gethex+0x1d8>
 800bb0a:	492b      	ldr	r1, [pc, #172]	@ (800bbb8 <__gethex+0x2b0>)
 800bb0c:	9303      	str	r3, [sp, #12]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	4630      	mov	r0, r6
 800bb12:	f7fe ffd9 	bl	800aac8 <strncmp>
 800bb16:	9b03      	ldr	r3, [sp, #12]
 800bb18:	2800      	cmp	r0, #0
 800bb1a:	d1e1      	bne.n	800bae0 <__gethex+0x1d8>
 800bb1c:	e7a2      	b.n	800ba64 <__gethex+0x15c>
 800bb1e:	1ea9      	subs	r1, r5, #2
 800bb20:	4620      	mov	r0, r4
 800bb22:	f001 fa60 	bl	800cfe6 <__any_on>
 800bb26:	2800      	cmp	r0, #0
 800bb28:	d0c2      	beq.n	800bab0 <__gethex+0x1a8>
 800bb2a:	f04f 0903 	mov.w	r9, #3
 800bb2e:	e7c1      	b.n	800bab4 <__gethex+0x1ac>
 800bb30:	da09      	bge.n	800bb46 <__gethex+0x23e>
 800bb32:	1b75      	subs	r5, r6, r5
 800bb34:	4621      	mov	r1, r4
 800bb36:	9801      	ldr	r0, [sp, #4]
 800bb38:	462a      	mov	r2, r5
 800bb3a:	f001 f81b 	bl	800cb74 <__lshift>
 800bb3e:	1b7f      	subs	r7, r7, r5
 800bb40:	4604      	mov	r4, r0
 800bb42:	f100 0a14 	add.w	sl, r0, #20
 800bb46:	f04f 0900 	mov.w	r9, #0
 800bb4a:	e7b8      	b.n	800babe <__gethex+0x1b6>
 800bb4c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bb50:	42bd      	cmp	r5, r7
 800bb52:	dd6f      	ble.n	800bc34 <__gethex+0x32c>
 800bb54:	1bed      	subs	r5, r5, r7
 800bb56:	42ae      	cmp	r6, r5
 800bb58:	dc34      	bgt.n	800bbc4 <__gethex+0x2bc>
 800bb5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb5e:	2b02      	cmp	r3, #2
 800bb60:	d022      	beq.n	800bba8 <__gethex+0x2a0>
 800bb62:	2b03      	cmp	r3, #3
 800bb64:	d024      	beq.n	800bbb0 <__gethex+0x2a8>
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d115      	bne.n	800bb96 <__gethex+0x28e>
 800bb6a:	42ae      	cmp	r6, r5
 800bb6c:	d113      	bne.n	800bb96 <__gethex+0x28e>
 800bb6e:	2e01      	cmp	r6, #1
 800bb70:	d10b      	bne.n	800bb8a <__gethex+0x282>
 800bb72:	9a02      	ldr	r2, [sp, #8]
 800bb74:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bb78:	6013      	str	r3, [r2, #0]
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	6123      	str	r3, [r4, #16]
 800bb7e:	f8ca 3000 	str.w	r3, [sl]
 800bb82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb84:	2562      	movs	r5, #98	@ 0x62
 800bb86:	601c      	str	r4, [r3, #0]
 800bb88:	e73a      	b.n	800ba00 <__gethex+0xf8>
 800bb8a:	1e71      	subs	r1, r6, #1
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f001 fa2a 	bl	800cfe6 <__any_on>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	d1ed      	bne.n	800bb72 <__gethex+0x26a>
 800bb96:	9801      	ldr	r0, [sp, #4]
 800bb98:	4621      	mov	r1, r4
 800bb9a:	f000 fdd3 	bl	800c744 <_Bfree>
 800bb9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bba0:	2300      	movs	r3, #0
 800bba2:	6013      	str	r3, [r2, #0]
 800bba4:	2550      	movs	r5, #80	@ 0x50
 800bba6:	e72b      	b.n	800ba00 <__gethex+0xf8>
 800bba8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d1f3      	bne.n	800bb96 <__gethex+0x28e>
 800bbae:	e7e0      	b.n	800bb72 <__gethex+0x26a>
 800bbb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d1dd      	bne.n	800bb72 <__gethex+0x26a>
 800bbb6:	e7ee      	b.n	800bb96 <__gethex+0x28e>
 800bbb8:	0800d879 	.word	0x0800d879
 800bbbc:	0800da55 	.word	0x0800da55
 800bbc0:	0800da66 	.word	0x0800da66
 800bbc4:	1e6f      	subs	r7, r5, #1
 800bbc6:	f1b9 0f00 	cmp.w	r9, #0
 800bbca:	d130      	bne.n	800bc2e <__gethex+0x326>
 800bbcc:	b127      	cbz	r7, 800bbd8 <__gethex+0x2d0>
 800bbce:	4639      	mov	r1, r7
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	f001 fa08 	bl	800cfe6 <__any_on>
 800bbd6:	4681      	mov	r9, r0
 800bbd8:	117a      	asrs	r2, r7, #5
 800bbda:	2301      	movs	r3, #1
 800bbdc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bbe0:	f007 071f 	and.w	r7, r7, #31
 800bbe4:	40bb      	lsls	r3, r7
 800bbe6:	4213      	tst	r3, r2
 800bbe8:	4629      	mov	r1, r5
 800bbea:	4620      	mov	r0, r4
 800bbec:	bf18      	it	ne
 800bbee:	f049 0902 	orrne.w	r9, r9, #2
 800bbf2:	f7ff fe21 	bl	800b838 <rshift>
 800bbf6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bbfa:	1b76      	subs	r6, r6, r5
 800bbfc:	2502      	movs	r5, #2
 800bbfe:	f1b9 0f00 	cmp.w	r9, #0
 800bc02:	d047      	beq.n	800bc94 <__gethex+0x38c>
 800bc04:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d015      	beq.n	800bc38 <__gethex+0x330>
 800bc0c:	2b03      	cmp	r3, #3
 800bc0e:	d017      	beq.n	800bc40 <__gethex+0x338>
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d109      	bne.n	800bc28 <__gethex+0x320>
 800bc14:	f019 0f02 	tst.w	r9, #2
 800bc18:	d006      	beq.n	800bc28 <__gethex+0x320>
 800bc1a:	f8da 3000 	ldr.w	r3, [sl]
 800bc1e:	ea49 0903 	orr.w	r9, r9, r3
 800bc22:	f019 0f01 	tst.w	r9, #1
 800bc26:	d10e      	bne.n	800bc46 <__gethex+0x33e>
 800bc28:	f045 0510 	orr.w	r5, r5, #16
 800bc2c:	e032      	b.n	800bc94 <__gethex+0x38c>
 800bc2e:	f04f 0901 	mov.w	r9, #1
 800bc32:	e7d1      	b.n	800bbd8 <__gethex+0x2d0>
 800bc34:	2501      	movs	r5, #1
 800bc36:	e7e2      	b.n	800bbfe <__gethex+0x2f6>
 800bc38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc3a:	f1c3 0301 	rsb	r3, r3, #1
 800bc3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bc40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d0f0      	beq.n	800bc28 <__gethex+0x320>
 800bc46:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bc4a:	f104 0314 	add.w	r3, r4, #20
 800bc4e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bc52:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bc56:	f04f 0c00 	mov.w	ip, #0
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc60:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800bc64:	d01b      	beq.n	800bc9e <__gethex+0x396>
 800bc66:	3201      	adds	r2, #1
 800bc68:	6002      	str	r2, [r0, #0]
 800bc6a:	2d02      	cmp	r5, #2
 800bc6c:	f104 0314 	add.w	r3, r4, #20
 800bc70:	d13c      	bne.n	800bcec <__gethex+0x3e4>
 800bc72:	f8d8 2000 	ldr.w	r2, [r8]
 800bc76:	3a01      	subs	r2, #1
 800bc78:	42b2      	cmp	r2, r6
 800bc7a:	d109      	bne.n	800bc90 <__gethex+0x388>
 800bc7c:	1171      	asrs	r1, r6, #5
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bc84:	f006 061f 	and.w	r6, r6, #31
 800bc88:	fa02 f606 	lsl.w	r6, r2, r6
 800bc8c:	421e      	tst	r6, r3
 800bc8e:	d13a      	bne.n	800bd06 <__gethex+0x3fe>
 800bc90:	f045 0520 	orr.w	r5, r5, #32
 800bc94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc96:	601c      	str	r4, [r3, #0]
 800bc98:	9b02      	ldr	r3, [sp, #8]
 800bc9a:	601f      	str	r7, [r3, #0]
 800bc9c:	e6b0      	b.n	800ba00 <__gethex+0xf8>
 800bc9e:	4299      	cmp	r1, r3
 800bca0:	f843 cc04 	str.w	ip, [r3, #-4]
 800bca4:	d8d9      	bhi.n	800bc5a <__gethex+0x352>
 800bca6:	68a3      	ldr	r3, [r4, #8]
 800bca8:	459b      	cmp	fp, r3
 800bcaa:	db17      	blt.n	800bcdc <__gethex+0x3d4>
 800bcac:	6861      	ldr	r1, [r4, #4]
 800bcae:	9801      	ldr	r0, [sp, #4]
 800bcb0:	3101      	adds	r1, #1
 800bcb2:	f000 fd07 	bl	800c6c4 <_Balloc>
 800bcb6:	4681      	mov	r9, r0
 800bcb8:	b918      	cbnz	r0, 800bcc2 <__gethex+0x3ba>
 800bcba:	4b1a      	ldr	r3, [pc, #104]	@ (800bd24 <__gethex+0x41c>)
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	2184      	movs	r1, #132	@ 0x84
 800bcc0:	e6c5      	b.n	800ba4e <__gethex+0x146>
 800bcc2:	6922      	ldr	r2, [r4, #16]
 800bcc4:	3202      	adds	r2, #2
 800bcc6:	f104 010c 	add.w	r1, r4, #12
 800bcca:	0092      	lsls	r2, r2, #2
 800bccc:	300c      	adds	r0, #12
 800bcce:	f7fe ff46 	bl	800ab5e <memcpy>
 800bcd2:	4621      	mov	r1, r4
 800bcd4:	9801      	ldr	r0, [sp, #4]
 800bcd6:	f000 fd35 	bl	800c744 <_Bfree>
 800bcda:	464c      	mov	r4, r9
 800bcdc:	6923      	ldr	r3, [r4, #16]
 800bcde:	1c5a      	adds	r2, r3, #1
 800bce0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bce4:	6122      	str	r2, [r4, #16]
 800bce6:	2201      	movs	r2, #1
 800bce8:	615a      	str	r2, [r3, #20]
 800bcea:	e7be      	b.n	800bc6a <__gethex+0x362>
 800bcec:	6922      	ldr	r2, [r4, #16]
 800bcee:	455a      	cmp	r2, fp
 800bcf0:	dd0b      	ble.n	800bd0a <__gethex+0x402>
 800bcf2:	2101      	movs	r1, #1
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	f7ff fd9f 	bl	800b838 <rshift>
 800bcfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bcfe:	3701      	adds	r7, #1
 800bd00:	42bb      	cmp	r3, r7
 800bd02:	f6ff aee0 	blt.w	800bac6 <__gethex+0x1be>
 800bd06:	2501      	movs	r5, #1
 800bd08:	e7c2      	b.n	800bc90 <__gethex+0x388>
 800bd0a:	f016 061f 	ands.w	r6, r6, #31
 800bd0e:	d0fa      	beq.n	800bd06 <__gethex+0x3fe>
 800bd10:	4453      	add	r3, sl
 800bd12:	f1c6 0620 	rsb	r6, r6, #32
 800bd16:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bd1a:	f000 fdc5 	bl	800c8a8 <__hi0bits>
 800bd1e:	42b0      	cmp	r0, r6
 800bd20:	dbe7      	blt.n	800bcf2 <__gethex+0x3ea>
 800bd22:	e7f0      	b.n	800bd06 <__gethex+0x3fe>
 800bd24:	0800da55 	.word	0x0800da55

0800bd28 <L_shift>:
 800bd28:	f1c2 0208 	rsb	r2, r2, #8
 800bd2c:	0092      	lsls	r2, r2, #2
 800bd2e:	b570      	push	{r4, r5, r6, lr}
 800bd30:	f1c2 0620 	rsb	r6, r2, #32
 800bd34:	6843      	ldr	r3, [r0, #4]
 800bd36:	6804      	ldr	r4, [r0, #0]
 800bd38:	fa03 f506 	lsl.w	r5, r3, r6
 800bd3c:	432c      	orrs	r4, r5
 800bd3e:	40d3      	lsrs	r3, r2
 800bd40:	6004      	str	r4, [r0, #0]
 800bd42:	f840 3f04 	str.w	r3, [r0, #4]!
 800bd46:	4288      	cmp	r0, r1
 800bd48:	d3f4      	bcc.n	800bd34 <L_shift+0xc>
 800bd4a:	bd70      	pop	{r4, r5, r6, pc}

0800bd4c <__match>:
 800bd4c:	b530      	push	{r4, r5, lr}
 800bd4e:	6803      	ldr	r3, [r0, #0]
 800bd50:	3301      	adds	r3, #1
 800bd52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd56:	b914      	cbnz	r4, 800bd5e <__match+0x12>
 800bd58:	6003      	str	r3, [r0, #0]
 800bd5a:	2001      	movs	r0, #1
 800bd5c:	bd30      	pop	{r4, r5, pc}
 800bd5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd62:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bd66:	2d19      	cmp	r5, #25
 800bd68:	bf98      	it	ls
 800bd6a:	3220      	addls	r2, #32
 800bd6c:	42a2      	cmp	r2, r4
 800bd6e:	d0f0      	beq.n	800bd52 <__match+0x6>
 800bd70:	2000      	movs	r0, #0
 800bd72:	e7f3      	b.n	800bd5c <__match+0x10>

0800bd74 <__hexnan>:
 800bd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd78:	680b      	ldr	r3, [r1, #0]
 800bd7a:	6801      	ldr	r1, [r0, #0]
 800bd7c:	115e      	asrs	r6, r3, #5
 800bd7e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bd82:	f013 031f 	ands.w	r3, r3, #31
 800bd86:	b087      	sub	sp, #28
 800bd88:	bf18      	it	ne
 800bd8a:	3604      	addne	r6, #4
 800bd8c:	2500      	movs	r5, #0
 800bd8e:	1f37      	subs	r7, r6, #4
 800bd90:	4682      	mov	sl, r0
 800bd92:	4690      	mov	r8, r2
 800bd94:	9301      	str	r3, [sp, #4]
 800bd96:	f846 5c04 	str.w	r5, [r6, #-4]
 800bd9a:	46b9      	mov	r9, r7
 800bd9c:	463c      	mov	r4, r7
 800bd9e:	9502      	str	r5, [sp, #8]
 800bda0:	46ab      	mov	fp, r5
 800bda2:	784a      	ldrb	r2, [r1, #1]
 800bda4:	1c4b      	adds	r3, r1, #1
 800bda6:	9303      	str	r3, [sp, #12]
 800bda8:	b342      	cbz	r2, 800bdfc <__hexnan+0x88>
 800bdaa:	4610      	mov	r0, r2
 800bdac:	9105      	str	r1, [sp, #20]
 800bdae:	9204      	str	r2, [sp, #16]
 800bdb0:	f7ff fd94 	bl	800b8dc <__hexdig_fun>
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	d151      	bne.n	800be5c <__hexnan+0xe8>
 800bdb8:	9a04      	ldr	r2, [sp, #16]
 800bdba:	9905      	ldr	r1, [sp, #20]
 800bdbc:	2a20      	cmp	r2, #32
 800bdbe:	d818      	bhi.n	800bdf2 <__hexnan+0x7e>
 800bdc0:	9b02      	ldr	r3, [sp, #8]
 800bdc2:	459b      	cmp	fp, r3
 800bdc4:	dd13      	ble.n	800bdee <__hexnan+0x7a>
 800bdc6:	454c      	cmp	r4, r9
 800bdc8:	d206      	bcs.n	800bdd8 <__hexnan+0x64>
 800bdca:	2d07      	cmp	r5, #7
 800bdcc:	dc04      	bgt.n	800bdd8 <__hexnan+0x64>
 800bdce:	462a      	mov	r2, r5
 800bdd0:	4649      	mov	r1, r9
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f7ff ffa8 	bl	800bd28 <L_shift>
 800bdd8:	4544      	cmp	r4, r8
 800bdda:	d952      	bls.n	800be82 <__hexnan+0x10e>
 800bddc:	2300      	movs	r3, #0
 800bdde:	f1a4 0904 	sub.w	r9, r4, #4
 800bde2:	f844 3c04 	str.w	r3, [r4, #-4]
 800bde6:	f8cd b008 	str.w	fp, [sp, #8]
 800bdea:	464c      	mov	r4, r9
 800bdec:	461d      	mov	r5, r3
 800bdee:	9903      	ldr	r1, [sp, #12]
 800bdf0:	e7d7      	b.n	800bda2 <__hexnan+0x2e>
 800bdf2:	2a29      	cmp	r2, #41	@ 0x29
 800bdf4:	d157      	bne.n	800bea6 <__hexnan+0x132>
 800bdf6:	3102      	adds	r1, #2
 800bdf8:	f8ca 1000 	str.w	r1, [sl]
 800bdfc:	f1bb 0f00 	cmp.w	fp, #0
 800be00:	d051      	beq.n	800bea6 <__hexnan+0x132>
 800be02:	454c      	cmp	r4, r9
 800be04:	d206      	bcs.n	800be14 <__hexnan+0xa0>
 800be06:	2d07      	cmp	r5, #7
 800be08:	dc04      	bgt.n	800be14 <__hexnan+0xa0>
 800be0a:	462a      	mov	r2, r5
 800be0c:	4649      	mov	r1, r9
 800be0e:	4620      	mov	r0, r4
 800be10:	f7ff ff8a 	bl	800bd28 <L_shift>
 800be14:	4544      	cmp	r4, r8
 800be16:	d936      	bls.n	800be86 <__hexnan+0x112>
 800be18:	f1a8 0204 	sub.w	r2, r8, #4
 800be1c:	4623      	mov	r3, r4
 800be1e:	f853 1b04 	ldr.w	r1, [r3], #4
 800be22:	f842 1f04 	str.w	r1, [r2, #4]!
 800be26:	429f      	cmp	r7, r3
 800be28:	d2f9      	bcs.n	800be1e <__hexnan+0xaa>
 800be2a:	1b3b      	subs	r3, r7, r4
 800be2c:	f023 0303 	bic.w	r3, r3, #3
 800be30:	3304      	adds	r3, #4
 800be32:	3401      	adds	r4, #1
 800be34:	3e03      	subs	r6, #3
 800be36:	42b4      	cmp	r4, r6
 800be38:	bf88      	it	hi
 800be3a:	2304      	movhi	r3, #4
 800be3c:	4443      	add	r3, r8
 800be3e:	2200      	movs	r2, #0
 800be40:	f843 2b04 	str.w	r2, [r3], #4
 800be44:	429f      	cmp	r7, r3
 800be46:	d2fb      	bcs.n	800be40 <__hexnan+0xcc>
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	b91b      	cbnz	r3, 800be54 <__hexnan+0xe0>
 800be4c:	4547      	cmp	r7, r8
 800be4e:	d128      	bne.n	800bea2 <__hexnan+0x12e>
 800be50:	2301      	movs	r3, #1
 800be52:	603b      	str	r3, [r7, #0]
 800be54:	2005      	movs	r0, #5
 800be56:	b007      	add	sp, #28
 800be58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be5c:	3501      	adds	r5, #1
 800be5e:	2d08      	cmp	r5, #8
 800be60:	f10b 0b01 	add.w	fp, fp, #1
 800be64:	dd06      	ble.n	800be74 <__hexnan+0x100>
 800be66:	4544      	cmp	r4, r8
 800be68:	d9c1      	bls.n	800bdee <__hexnan+0x7a>
 800be6a:	2300      	movs	r3, #0
 800be6c:	f844 3c04 	str.w	r3, [r4, #-4]
 800be70:	2501      	movs	r5, #1
 800be72:	3c04      	subs	r4, #4
 800be74:	6822      	ldr	r2, [r4, #0]
 800be76:	f000 000f 	and.w	r0, r0, #15
 800be7a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800be7e:	6020      	str	r0, [r4, #0]
 800be80:	e7b5      	b.n	800bdee <__hexnan+0x7a>
 800be82:	2508      	movs	r5, #8
 800be84:	e7b3      	b.n	800bdee <__hexnan+0x7a>
 800be86:	9b01      	ldr	r3, [sp, #4]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d0dd      	beq.n	800be48 <__hexnan+0xd4>
 800be8c:	f1c3 0320 	rsb	r3, r3, #32
 800be90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be94:	40da      	lsrs	r2, r3
 800be96:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800be9a:	4013      	ands	r3, r2
 800be9c:	f846 3c04 	str.w	r3, [r6, #-4]
 800bea0:	e7d2      	b.n	800be48 <__hexnan+0xd4>
 800bea2:	3f04      	subs	r7, #4
 800bea4:	e7d0      	b.n	800be48 <__hexnan+0xd4>
 800bea6:	2004      	movs	r0, #4
 800bea8:	e7d5      	b.n	800be56 <__hexnan+0xe2>

0800beaa <__ssputs_r>:
 800beaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beae:	688e      	ldr	r6, [r1, #8]
 800beb0:	461f      	mov	r7, r3
 800beb2:	42be      	cmp	r6, r7
 800beb4:	680b      	ldr	r3, [r1, #0]
 800beb6:	4682      	mov	sl, r0
 800beb8:	460c      	mov	r4, r1
 800beba:	4690      	mov	r8, r2
 800bebc:	d82d      	bhi.n	800bf1a <__ssputs_r+0x70>
 800bebe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bec2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bec6:	d026      	beq.n	800bf16 <__ssputs_r+0x6c>
 800bec8:	6965      	ldr	r5, [r4, #20]
 800beca:	6909      	ldr	r1, [r1, #16]
 800becc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bed0:	eba3 0901 	sub.w	r9, r3, r1
 800bed4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bed8:	1c7b      	adds	r3, r7, #1
 800beda:	444b      	add	r3, r9
 800bedc:	106d      	asrs	r5, r5, #1
 800bede:	429d      	cmp	r5, r3
 800bee0:	bf38      	it	cc
 800bee2:	461d      	movcc	r5, r3
 800bee4:	0553      	lsls	r3, r2, #21
 800bee6:	d527      	bpl.n	800bf38 <__ssputs_r+0x8e>
 800bee8:	4629      	mov	r1, r5
 800beea:	f000 faa1 	bl	800c430 <_malloc_r>
 800beee:	4606      	mov	r6, r0
 800bef0:	b360      	cbz	r0, 800bf4c <__ssputs_r+0xa2>
 800bef2:	6921      	ldr	r1, [r4, #16]
 800bef4:	464a      	mov	r2, r9
 800bef6:	f7fe fe32 	bl	800ab5e <memcpy>
 800befa:	89a3      	ldrh	r3, [r4, #12]
 800befc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bf00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf04:	81a3      	strh	r3, [r4, #12]
 800bf06:	6126      	str	r6, [r4, #16]
 800bf08:	6165      	str	r5, [r4, #20]
 800bf0a:	444e      	add	r6, r9
 800bf0c:	eba5 0509 	sub.w	r5, r5, r9
 800bf10:	6026      	str	r6, [r4, #0]
 800bf12:	60a5      	str	r5, [r4, #8]
 800bf14:	463e      	mov	r6, r7
 800bf16:	42be      	cmp	r6, r7
 800bf18:	d900      	bls.n	800bf1c <__ssputs_r+0x72>
 800bf1a:	463e      	mov	r6, r7
 800bf1c:	6820      	ldr	r0, [r4, #0]
 800bf1e:	4632      	mov	r2, r6
 800bf20:	4641      	mov	r1, r8
 800bf22:	f001 f9f6 	bl	800d312 <memmove>
 800bf26:	68a3      	ldr	r3, [r4, #8]
 800bf28:	1b9b      	subs	r3, r3, r6
 800bf2a:	60a3      	str	r3, [r4, #8]
 800bf2c:	6823      	ldr	r3, [r4, #0]
 800bf2e:	4433      	add	r3, r6
 800bf30:	6023      	str	r3, [r4, #0]
 800bf32:	2000      	movs	r0, #0
 800bf34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf38:	462a      	mov	r2, r5
 800bf3a:	f001 f8b8 	bl	800d0ae <_realloc_r>
 800bf3e:	4606      	mov	r6, r0
 800bf40:	2800      	cmp	r0, #0
 800bf42:	d1e0      	bne.n	800bf06 <__ssputs_r+0x5c>
 800bf44:	6921      	ldr	r1, [r4, #16]
 800bf46:	4650      	mov	r0, sl
 800bf48:	f001 faa8 	bl	800d49c <_free_r>
 800bf4c:	230c      	movs	r3, #12
 800bf4e:	f8ca 3000 	str.w	r3, [sl]
 800bf52:	89a3      	ldrh	r3, [r4, #12]
 800bf54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf58:	81a3      	strh	r3, [r4, #12]
 800bf5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf5e:	e7e9      	b.n	800bf34 <__ssputs_r+0x8a>

0800bf60 <_svfiprintf_r>:
 800bf60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf64:	4698      	mov	r8, r3
 800bf66:	898b      	ldrh	r3, [r1, #12]
 800bf68:	061b      	lsls	r3, r3, #24
 800bf6a:	b09d      	sub	sp, #116	@ 0x74
 800bf6c:	4607      	mov	r7, r0
 800bf6e:	460d      	mov	r5, r1
 800bf70:	4614      	mov	r4, r2
 800bf72:	d510      	bpl.n	800bf96 <_svfiprintf_r+0x36>
 800bf74:	690b      	ldr	r3, [r1, #16]
 800bf76:	b973      	cbnz	r3, 800bf96 <_svfiprintf_r+0x36>
 800bf78:	2140      	movs	r1, #64	@ 0x40
 800bf7a:	f000 fa59 	bl	800c430 <_malloc_r>
 800bf7e:	6028      	str	r0, [r5, #0]
 800bf80:	6128      	str	r0, [r5, #16]
 800bf82:	b930      	cbnz	r0, 800bf92 <_svfiprintf_r+0x32>
 800bf84:	230c      	movs	r3, #12
 800bf86:	603b      	str	r3, [r7, #0]
 800bf88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf8c:	b01d      	add	sp, #116	@ 0x74
 800bf8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf92:	2340      	movs	r3, #64	@ 0x40
 800bf94:	616b      	str	r3, [r5, #20]
 800bf96:	2300      	movs	r3, #0
 800bf98:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf9a:	2320      	movs	r3, #32
 800bf9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bfa0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfa4:	2330      	movs	r3, #48	@ 0x30
 800bfa6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c144 <_svfiprintf_r+0x1e4>
 800bfaa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bfae:	f04f 0901 	mov.w	r9, #1
 800bfb2:	4623      	mov	r3, r4
 800bfb4:	469a      	mov	sl, r3
 800bfb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfba:	b10a      	cbz	r2, 800bfc0 <_svfiprintf_r+0x60>
 800bfbc:	2a25      	cmp	r2, #37	@ 0x25
 800bfbe:	d1f9      	bne.n	800bfb4 <_svfiprintf_r+0x54>
 800bfc0:	ebba 0b04 	subs.w	fp, sl, r4
 800bfc4:	d00b      	beq.n	800bfde <_svfiprintf_r+0x7e>
 800bfc6:	465b      	mov	r3, fp
 800bfc8:	4622      	mov	r2, r4
 800bfca:	4629      	mov	r1, r5
 800bfcc:	4638      	mov	r0, r7
 800bfce:	f7ff ff6c 	bl	800beaa <__ssputs_r>
 800bfd2:	3001      	adds	r0, #1
 800bfd4:	f000 80a7 	beq.w	800c126 <_svfiprintf_r+0x1c6>
 800bfd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfda:	445a      	add	r2, fp
 800bfdc:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfde:	f89a 3000 	ldrb.w	r3, [sl]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	f000 809f 	beq.w	800c126 <_svfiprintf_r+0x1c6>
 800bfe8:	2300      	movs	r3, #0
 800bfea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bfee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bff2:	f10a 0a01 	add.w	sl, sl, #1
 800bff6:	9304      	str	r3, [sp, #16]
 800bff8:	9307      	str	r3, [sp, #28]
 800bffa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bffe:	931a      	str	r3, [sp, #104]	@ 0x68
 800c000:	4654      	mov	r4, sl
 800c002:	2205      	movs	r2, #5
 800c004:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c008:	484e      	ldr	r0, [pc, #312]	@ (800c144 <_svfiprintf_r+0x1e4>)
 800c00a:	f7f4 f8e1 	bl	80001d0 <memchr>
 800c00e:	9a04      	ldr	r2, [sp, #16]
 800c010:	b9d8      	cbnz	r0, 800c04a <_svfiprintf_r+0xea>
 800c012:	06d0      	lsls	r0, r2, #27
 800c014:	bf44      	itt	mi
 800c016:	2320      	movmi	r3, #32
 800c018:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c01c:	0711      	lsls	r1, r2, #28
 800c01e:	bf44      	itt	mi
 800c020:	232b      	movmi	r3, #43	@ 0x2b
 800c022:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c026:	f89a 3000 	ldrb.w	r3, [sl]
 800c02a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c02c:	d015      	beq.n	800c05a <_svfiprintf_r+0xfa>
 800c02e:	9a07      	ldr	r2, [sp, #28]
 800c030:	4654      	mov	r4, sl
 800c032:	2000      	movs	r0, #0
 800c034:	f04f 0c0a 	mov.w	ip, #10
 800c038:	4621      	mov	r1, r4
 800c03a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c03e:	3b30      	subs	r3, #48	@ 0x30
 800c040:	2b09      	cmp	r3, #9
 800c042:	d94b      	bls.n	800c0dc <_svfiprintf_r+0x17c>
 800c044:	b1b0      	cbz	r0, 800c074 <_svfiprintf_r+0x114>
 800c046:	9207      	str	r2, [sp, #28]
 800c048:	e014      	b.n	800c074 <_svfiprintf_r+0x114>
 800c04a:	eba0 0308 	sub.w	r3, r0, r8
 800c04e:	fa09 f303 	lsl.w	r3, r9, r3
 800c052:	4313      	orrs	r3, r2
 800c054:	9304      	str	r3, [sp, #16]
 800c056:	46a2      	mov	sl, r4
 800c058:	e7d2      	b.n	800c000 <_svfiprintf_r+0xa0>
 800c05a:	9b03      	ldr	r3, [sp, #12]
 800c05c:	1d19      	adds	r1, r3, #4
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	9103      	str	r1, [sp, #12]
 800c062:	2b00      	cmp	r3, #0
 800c064:	bfbb      	ittet	lt
 800c066:	425b      	neglt	r3, r3
 800c068:	f042 0202 	orrlt.w	r2, r2, #2
 800c06c:	9307      	strge	r3, [sp, #28]
 800c06e:	9307      	strlt	r3, [sp, #28]
 800c070:	bfb8      	it	lt
 800c072:	9204      	strlt	r2, [sp, #16]
 800c074:	7823      	ldrb	r3, [r4, #0]
 800c076:	2b2e      	cmp	r3, #46	@ 0x2e
 800c078:	d10a      	bne.n	800c090 <_svfiprintf_r+0x130>
 800c07a:	7863      	ldrb	r3, [r4, #1]
 800c07c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c07e:	d132      	bne.n	800c0e6 <_svfiprintf_r+0x186>
 800c080:	9b03      	ldr	r3, [sp, #12]
 800c082:	1d1a      	adds	r2, r3, #4
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	9203      	str	r2, [sp, #12]
 800c088:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c08c:	3402      	adds	r4, #2
 800c08e:	9305      	str	r3, [sp, #20]
 800c090:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c154 <_svfiprintf_r+0x1f4>
 800c094:	7821      	ldrb	r1, [r4, #0]
 800c096:	2203      	movs	r2, #3
 800c098:	4650      	mov	r0, sl
 800c09a:	f7f4 f899 	bl	80001d0 <memchr>
 800c09e:	b138      	cbz	r0, 800c0b0 <_svfiprintf_r+0x150>
 800c0a0:	9b04      	ldr	r3, [sp, #16]
 800c0a2:	eba0 000a 	sub.w	r0, r0, sl
 800c0a6:	2240      	movs	r2, #64	@ 0x40
 800c0a8:	4082      	lsls	r2, r0
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	3401      	adds	r4, #1
 800c0ae:	9304      	str	r3, [sp, #16]
 800c0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0b4:	4824      	ldr	r0, [pc, #144]	@ (800c148 <_svfiprintf_r+0x1e8>)
 800c0b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c0ba:	2206      	movs	r2, #6
 800c0bc:	f7f4 f888 	bl	80001d0 <memchr>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	d036      	beq.n	800c132 <_svfiprintf_r+0x1d2>
 800c0c4:	4b21      	ldr	r3, [pc, #132]	@ (800c14c <_svfiprintf_r+0x1ec>)
 800c0c6:	bb1b      	cbnz	r3, 800c110 <_svfiprintf_r+0x1b0>
 800c0c8:	9b03      	ldr	r3, [sp, #12]
 800c0ca:	3307      	adds	r3, #7
 800c0cc:	f023 0307 	bic.w	r3, r3, #7
 800c0d0:	3308      	adds	r3, #8
 800c0d2:	9303      	str	r3, [sp, #12]
 800c0d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0d6:	4433      	add	r3, r6
 800c0d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0da:	e76a      	b.n	800bfb2 <_svfiprintf_r+0x52>
 800c0dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0e0:	460c      	mov	r4, r1
 800c0e2:	2001      	movs	r0, #1
 800c0e4:	e7a8      	b.n	800c038 <_svfiprintf_r+0xd8>
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	3401      	adds	r4, #1
 800c0ea:	9305      	str	r3, [sp, #20]
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	f04f 0c0a 	mov.w	ip, #10
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0f8:	3a30      	subs	r2, #48	@ 0x30
 800c0fa:	2a09      	cmp	r2, #9
 800c0fc:	d903      	bls.n	800c106 <_svfiprintf_r+0x1a6>
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d0c6      	beq.n	800c090 <_svfiprintf_r+0x130>
 800c102:	9105      	str	r1, [sp, #20]
 800c104:	e7c4      	b.n	800c090 <_svfiprintf_r+0x130>
 800c106:	fb0c 2101 	mla	r1, ip, r1, r2
 800c10a:	4604      	mov	r4, r0
 800c10c:	2301      	movs	r3, #1
 800c10e:	e7f0      	b.n	800c0f2 <_svfiprintf_r+0x192>
 800c110:	ab03      	add	r3, sp, #12
 800c112:	9300      	str	r3, [sp, #0]
 800c114:	462a      	mov	r2, r5
 800c116:	4b0e      	ldr	r3, [pc, #56]	@ (800c150 <_svfiprintf_r+0x1f0>)
 800c118:	a904      	add	r1, sp, #16
 800c11a:	4638      	mov	r0, r7
 800c11c:	f7fc fefc 	bl	8008f18 <_printf_float>
 800c120:	1c42      	adds	r2, r0, #1
 800c122:	4606      	mov	r6, r0
 800c124:	d1d6      	bne.n	800c0d4 <_svfiprintf_r+0x174>
 800c126:	89ab      	ldrh	r3, [r5, #12]
 800c128:	065b      	lsls	r3, r3, #25
 800c12a:	f53f af2d 	bmi.w	800bf88 <_svfiprintf_r+0x28>
 800c12e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c130:	e72c      	b.n	800bf8c <_svfiprintf_r+0x2c>
 800c132:	ab03      	add	r3, sp, #12
 800c134:	9300      	str	r3, [sp, #0]
 800c136:	462a      	mov	r2, r5
 800c138:	4b05      	ldr	r3, [pc, #20]	@ (800c150 <_svfiprintf_r+0x1f0>)
 800c13a:	a904      	add	r1, sp, #16
 800c13c:	4638      	mov	r0, r7
 800c13e:	f7fd f983 	bl	8009448 <_printf_i>
 800c142:	e7ed      	b.n	800c120 <_svfiprintf_r+0x1c0>
 800c144:	0800dac6 	.word	0x0800dac6
 800c148:	0800dad0 	.word	0x0800dad0
 800c14c:	08008f19 	.word	0x08008f19
 800c150:	0800beab 	.word	0x0800beab
 800c154:	0800dacc 	.word	0x0800dacc

0800c158 <__sfputc_r>:
 800c158:	6893      	ldr	r3, [r2, #8]
 800c15a:	3b01      	subs	r3, #1
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	b410      	push	{r4}
 800c160:	6093      	str	r3, [r2, #8]
 800c162:	da08      	bge.n	800c176 <__sfputc_r+0x1e>
 800c164:	6994      	ldr	r4, [r2, #24]
 800c166:	42a3      	cmp	r3, r4
 800c168:	db01      	blt.n	800c16e <__sfputc_r+0x16>
 800c16a:	290a      	cmp	r1, #10
 800c16c:	d103      	bne.n	800c176 <__sfputc_r+0x1e>
 800c16e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c172:	f000 bfca 	b.w	800d10a <__swbuf_r>
 800c176:	6813      	ldr	r3, [r2, #0]
 800c178:	1c58      	adds	r0, r3, #1
 800c17a:	6010      	str	r0, [r2, #0]
 800c17c:	7019      	strb	r1, [r3, #0]
 800c17e:	4608      	mov	r0, r1
 800c180:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c184:	4770      	bx	lr

0800c186 <__sfputs_r>:
 800c186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c188:	4606      	mov	r6, r0
 800c18a:	460f      	mov	r7, r1
 800c18c:	4614      	mov	r4, r2
 800c18e:	18d5      	adds	r5, r2, r3
 800c190:	42ac      	cmp	r4, r5
 800c192:	d101      	bne.n	800c198 <__sfputs_r+0x12>
 800c194:	2000      	movs	r0, #0
 800c196:	e007      	b.n	800c1a8 <__sfputs_r+0x22>
 800c198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c19c:	463a      	mov	r2, r7
 800c19e:	4630      	mov	r0, r6
 800c1a0:	f7ff ffda 	bl	800c158 <__sfputc_r>
 800c1a4:	1c43      	adds	r3, r0, #1
 800c1a6:	d1f3      	bne.n	800c190 <__sfputs_r+0xa>
 800c1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c1ac <_vfiprintf_r>:
 800c1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b0:	460d      	mov	r5, r1
 800c1b2:	b09d      	sub	sp, #116	@ 0x74
 800c1b4:	4614      	mov	r4, r2
 800c1b6:	4698      	mov	r8, r3
 800c1b8:	4606      	mov	r6, r0
 800c1ba:	b118      	cbz	r0, 800c1c4 <_vfiprintf_r+0x18>
 800c1bc:	6a03      	ldr	r3, [r0, #32]
 800c1be:	b90b      	cbnz	r3, 800c1c4 <_vfiprintf_r+0x18>
 800c1c0:	f7fd fd56 	bl	8009c70 <__sinit>
 800c1c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1c6:	07d9      	lsls	r1, r3, #31
 800c1c8:	d405      	bmi.n	800c1d6 <_vfiprintf_r+0x2a>
 800c1ca:	89ab      	ldrh	r3, [r5, #12]
 800c1cc:	059a      	lsls	r2, r3, #22
 800c1ce:	d402      	bmi.n	800c1d6 <_vfiprintf_r+0x2a>
 800c1d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1d2:	f7fe fcc2 	bl	800ab5a <__retarget_lock_acquire_recursive>
 800c1d6:	89ab      	ldrh	r3, [r5, #12]
 800c1d8:	071b      	lsls	r3, r3, #28
 800c1da:	d501      	bpl.n	800c1e0 <_vfiprintf_r+0x34>
 800c1dc:	692b      	ldr	r3, [r5, #16]
 800c1de:	b99b      	cbnz	r3, 800c208 <_vfiprintf_r+0x5c>
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	f000 ffd0 	bl	800d188 <__swsetup_r>
 800c1e8:	b170      	cbz	r0, 800c208 <_vfiprintf_r+0x5c>
 800c1ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1ec:	07dc      	lsls	r4, r3, #31
 800c1ee:	d504      	bpl.n	800c1fa <_vfiprintf_r+0x4e>
 800c1f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c1f4:	b01d      	add	sp, #116	@ 0x74
 800c1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1fa:	89ab      	ldrh	r3, [r5, #12]
 800c1fc:	0598      	lsls	r0, r3, #22
 800c1fe:	d4f7      	bmi.n	800c1f0 <_vfiprintf_r+0x44>
 800c200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c202:	f7fe fcab 	bl	800ab5c <__retarget_lock_release_recursive>
 800c206:	e7f3      	b.n	800c1f0 <_vfiprintf_r+0x44>
 800c208:	2300      	movs	r3, #0
 800c20a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c20c:	2320      	movs	r3, #32
 800c20e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c212:	f8cd 800c 	str.w	r8, [sp, #12]
 800c216:	2330      	movs	r3, #48	@ 0x30
 800c218:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c3c8 <_vfiprintf_r+0x21c>
 800c21c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c220:	f04f 0901 	mov.w	r9, #1
 800c224:	4623      	mov	r3, r4
 800c226:	469a      	mov	sl, r3
 800c228:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c22c:	b10a      	cbz	r2, 800c232 <_vfiprintf_r+0x86>
 800c22e:	2a25      	cmp	r2, #37	@ 0x25
 800c230:	d1f9      	bne.n	800c226 <_vfiprintf_r+0x7a>
 800c232:	ebba 0b04 	subs.w	fp, sl, r4
 800c236:	d00b      	beq.n	800c250 <_vfiprintf_r+0xa4>
 800c238:	465b      	mov	r3, fp
 800c23a:	4622      	mov	r2, r4
 800c23c:	4629      	mov	r1, r5
 800c23e:	4630      	mov	r0, r6
 800c240:	f7ff ffa1 	bl	800c186 <__sfputs_r>
 800c244:	3001      	adds	r0, #1
 800c246:	f000 80a7 	beq.w	800c398 <_vfiprintf_r+0x1ec>
 800c24a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c24c:	445a      	add	r2, fp
 800c24e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c250:	f89a 3000 	ldrb.w	r3, [sl]
 800c254:	2b00      	cmp	r3, #0
 800c256:	f000 809f 	beq.w	800c398 <_vfiprintf_r+0x1ec>
 800c25a:	2300      	movs	r3, #0
 800c25c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c264:	f10a 0a01 	add.w	sl, sl, #1
 800c268:	9304      	str	r3, [sp, #16]
 800c26a:	9307      	str	r3, [sp, #28]
 800c26c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c270:	931a      	str	r3, [sp, #104]	@ 0x68
 800c272:	4654      	mov	r4, sl
 800c274:	2205      	movs	r2, #5
 800c276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c27a:	4853      	ldr	r0, [pc, #332]	@ (800c3c8 <_vfiprintf_r+0x21c>)
 800c27c:	f7f3 ffa8 	bl	80001d0 <memchr>
 800c280:	9a04      	ldr	r2, [sp, #16]
 800c282:	b9d8      	cbnz	r0, 800c2bc <_vfiprintf_r+0x110>
 800c284:	06d1      	lsls	r1, r2, #27
 800c286:	bf44      	itt	mi
 800c288:	2320      	movmi	r3, #32
 800c28a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c28e:	0713      	lsls	r3, r2, #28
 800c290:	bf44      	itt	mi
 800c292:	232b      	movmi	r3, #43	@ 0x2b
 800c294:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c298:	f89a 3000 	ldrb.w	r3, [sl]
 800c29c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c29e:	d015      	beq.n	800c2cc <_vfiprintf_r+0x120>
 800c2a0:	9a07      	ldr	r2, [sp, #28]
 800c2a2:	4654      	mov	r4, sl
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	f04f 0c0a 	mov.w	ip, #10
 800c2aa:	4621      	mov	r1, r4
 800c2ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2b0:	3b30      	subs	r3, #48	@ 0x30
 800c2b2:	2b09      	cmp	r3, #9
 800c2b4:	d94b      	bls.n	800c34e <_vfiprintf_r+0x1a2>
 800c2b6:	b1b0      	cbz	r0, 800c2e6 <_vfiprintf_r+0x13a>
 800c2b8:	9207      	str	r2, [sp, #28]
 800c2ba:	e014      	b.n	800c2e6 <_vfiprintf_r+0x13a>
 800c2bc:	eba0 0308 	sub.w	r3, r0, r8
 800c2c0:	fa09 f303 	lsl.w	r3, r9, r3
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	9304      	str	r3, [sp, #16]
 800c2c8:	46a2      	mov	sl, r4
 800c2ca:	e7d2      	b.n	800c272 <_vfiprintf_r+0xc6>
 800c2cc:	9b03      	ldr	r3, [sp, #12]
 800c2ce:	1d19      	adds	r1, r3, #4
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	9103      	str	r1, [sp, #12]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	bfbb      	ittet	lt
 800c2d8:	425b      	neglt	r3, r3
 800c2da:	f042 0202 	orrlt.w	r2, r2, #2
 800c2de:	9307      	strge	r3, [sp, #28]
 800c2e0:	9307      	strlt	r3, [sp, #28]
 800c2e2:	bfb8      	it	lt
 800c2e4:	9204      	strlt	r2, [sp, #16]
 800c2e6:	7823      	ldrb	r3, [r4, #0]
 800c2e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2ea:	d10a      	bne.n	800c302 <_vfiprintf_r+0x156>
 800c2ec:	7863      	ldrb	r3, [r4, #1]
 800c2ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2f0:	d132      	bne.n	800c358 <_vfiprintf_r+0x1ac>
 800c2f2:	9b03      	ldr	r3, [sp, #12]
 800c2f4:	1d1a      	adds	r2, r3, #4
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	9203      	str	r2, [sp, #12]
 800c2fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c2fe:	3402      	adds	r4, #2
 800c300:	9305      	str	r3, [sp, #20]
 800c302:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c3d8 <_vfiprintf_r+0x22c>
 800c306:	7821      	ldrb	r1, [r4, #0]
 800c308:	2203      	movs	r2, #3
 800c30a:	4650      	mov	r0, sl
 800c30c:	f7f3 ff60 	bl	80001d0 <memchr>
 800c310:	b138      	cbz	r0, 800c322 <_vfiprintf_r+0x176>
 800c312:	9b04      	ldr	r3, [sp, #16]
 800c314:	eba0 000a 	sub.w	r0, r0, sl
 800c318:	2240      	movs	r2, #64	@ 0x40
 800c31a:	4082      	lsls	r2, r0
 800c31c:	4313      	orrs	r3, r2
 800c31e:	3401      	adds	r4, #1
 800c320:	9304      	str	r3, [sp, #16]
 800c322:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c326:	4829      	ldr	r0, [pc, #164]	@ (800c3cc <_vfiprintf_r+0x220>)
 800c328:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c32c:	2206      	movs	r2, #6
 800c32e:	f7f3 ff4f 	bl	80001d0 <memchr>
 800c332:	2800      	cmp	r0, #0
 800c334:	d03f      	beq.n	800c3b6 <_vfiprintf_r+0x20a>
 800c336:	4b26      	ldr	r3, [pc, #152]	@ (800c3d0 <_vfiprintf_r+0x224>)
 800c338:	bb1b      	cbnz	r3, 800c382 <_vfiprintf_r+0x1d6>
 800c33a:	9b03      	ldr	r3, [sp, #12]
 800c33c:	3307      	adds	r3, #7
 800c33e:	f023 0307 	bic.w	r3, r3, #7
 800c342:	3308      	adds	r3, #8
 800c344:	9303      	str	r3, [sp, #12]
 800c346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c348:	443b      	add	r3, r7
 800c34a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c34c:	e76a      	b.n	800c224 <_vfiprintf_r+0x78>
 800c34e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c352:	460c      	mov	r4, r1
 800c354:	2001      	movs	r0, #1
 800c356:	e7a8      	b.n	800c2aa <_vfiprintf_r+0xfe>
 800c358:	2300      	movs	r3, #0
 800c35a:	3401      	adds	r4, #1
 800c35c:	9305      	str	r3, [sp, #20]
 800c35e:	4619      	mov	r1, r3
 800c360:	f04f 0c0a 	mov.w	ip, #10
 800c364:	4620      	mov	r0, r4
 800c366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c36a:	3a30      	subs	r2, #48	@ 0x30
 800c36c:	2a09      	cmp	r2, #9
 800c36e:	d903      	bls.n	800c378 <_vfiprintf_r+0x1cc>
 800c370:	2b00      	cmp	r3, #0
 800c372:	d0c6      	beq.n	800c302 <_vfiprintf_r+0x156>
 800c374:	9105      	str	r1, [sp, #20]
 800c376:	e7c4      	b.n	800c302 <_vfiprintf_r+0x156>
 800c378:	fb0c 2101 	mla	r1, ip, r1, r2
 800c37c:	4604      	mov	r4, r0
 800c37e:	2301      	movs	r3, #1
 800c380:	e7f0      	b.n	800c364 <_vfiprintf_r+0x1b8>
 800c382:	ab03      	add	r3, sp, #12
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	462a      	mov	r2, r5
 800c388:	4b12      	ldr	r3, [pc, #72]	@ (800c3d4 <_vfiprintf_r+0x228>)
 800c38a:	a904      	add	r1, sp, #16
 800c38c:	4630      	mov	r0, r6
 800c38e:	f7fc fdc3 	bl	8008f18 <_printf_float>
 800c392:	4607      	mov	r7, r0
 800c394:	1c78      	adds	r0, r7, #1
 800c396:	d1d6      	bne.n	800c346 <_vfiprintf_r+0x19a>
 800c398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c39a:	07d9      	lsls	r1, r3, #31
 800c39c:	d405      	bmi.n	800c3aa <_vfiprintf_r+0x1fe>
 800c39e:	89ab      	ldrh	r3, [r5, #12]
 800c3a0:	059a      	lsls	r2, r3, #22
 800c3a2:	d402      	bmi.n	800c3aa <_vfiprintf_r+0x1fe>
 800c3a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3a6:	f7fe fbd9 	bl	800ab5c <__retarget_lock_release_recursive>
 800c3aa:	89ab      	ldrh	r3, [r5, #12]
 800c3ac:	065b      	lsls	r3, r3, #25
 800c3ae:	f53f af1f 	bmi.w	800c1f0 <_vfiprintf_r+0x44>
 800c3b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3b4:	e71e      	b.n	800c1f4 <_vfiprintf_r+0x48>
 800c3b6:	ab03      	add	r3, sp, #12
 800c3b8:	9300      	str	r3, [sp, #0]
 800c3ba:	462a      	mov	r2, r5
 800c3bc:	4b05      	ldr	r3, [pc, #20]	@ (800c3d4 <_vfiprintf_r+0x228>)
 800c3be:	a904      	add	r1, sp, #16
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	f7fd f841 	bl	8009448 <_printf_i>
 800c3c6:	e7e4      	b.n	800c392 <_vfiprintf_r+0x1e6>
 800c3c8:	0800dac6 	.word	0x0800dac6
 800c3cc:	0800dad0 	.word	0x0800dad0
 800c3d0:	08008f19 	.word	0x08008f19
 800c3d4:	0800c187 	.word	0x0800c187
 800c3d8:	0800dacc 	.word	0x0800dacc

0800c3dc <malloc>:
 800c3dc:	4b02      	ldr	r3, [pc, #8]	@ (800c3e8 <malloc+0xc>)
 800c3de:	4601      	mov	r1, r0
 800c3e0:	6818      	ldr	r0, [r3, #0]
 800c3e2:	f000 b825 	b.w	800c430 <_malloc_r>
 800c3e6:	bf00      	nop
 800c3e8:	20000190 	.word	0x20000190

0800c3ec <sbrk_aligned>:
 800c3ec:	b570      	push	{r4, r5, r6, lr}
 800c3ee:	4e0f      	ldr	r6, [pc, #60]	@ (800c42c <sbrk_aligned+0x40>)
 800c3f0:	460c      	mov	r4, r1
 800c3f2:	6831      	ldr	r1, [r6, #0]
 800c3f4:	4605      	mov	r5, r0
 800c3f6:	b911      	cbnz	r1, 800c3fe <sbrk_aligned+0x12>
 800c3f8:	f000 fffc 	bl	800d3f4 <_sbrk_r>
 800c3fc:	6030      	str	r0, [r6, #0]
 800c3fe:	4621      	mov	r1, r4
 800c400:	4628      	mov	r0, r5
 800c402:	f000 fff7 	bl	800d3f4 <_sbrk_r>
 800c406:	1c43      	adds	r3, r0, #1
 800c408:	d103      	bne.n	800c412 <sbrk_aligned+0x26>
 800c40a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c40e:	4620      	mov	r0, r4
 800c410:	bd70      	pop	{r4, r5, r6, pc}
 800c412:	1cc4      	adds	r4, r0, #3
 800c414:	f024 0403 	bic.w	r4, r4, #3
 800c418:	42a0      	cmp	r0, r4
 800c41a:	d0f8      	beq.n	800c40e <sbrk_aligned+0x22>
 800c41c:	1a21      	subs	r1, r4, r0
 800c41e:	4628      	mov	r0, r5
 800c420:	f000 ffe8 	bl	800d3f4 <_sbrk_r>
 800c424:	3001      	adds	r0, #1
 800c426:	d1f2      	bne.n	800c40e <sbrk_aligned+0x22>
 800c428:	e7ef      	b.n	800c40a <sbrk_aligned+0x1e>
 800c42a:	bf00      	nop
 800c42c:	20000500 	.word	0x20000500

0800c430 <_malloc_r>:
 800c430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c434:	1ccd      	adds	r5, r1, #3
 800c436:	f025 0503 	bic.w	r5, r5, #3
 800c43a:	3508      	adds	r5, #8
 800c43c:	2d0c      	cmp	r5, #12
 800c43e:	bf38      	it	cc
 800c440:	250c      	movcc	r5, #12
 800c442:	2d00      	cmp	r5, #0
 800c444:	4606      	mov	r6, r0
 800c446:	db01      	blt.n	800c44c <_malloc_r+0x1c>
 800c448:	42a9      	cmp	r1, r5
 800c44a:	d904      	bls.n	800c456 <_malloc_r+0x26>
 800c44c:	230c      	movs	r3, #12
 800c44e:	6033      	str	r3, [r6, #0]
 800c450:	2000      	movs	r0, #0
 800c452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c456:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c52c <_malloc_r+0xfc>
 800c45a:	f000 f927 	bl	800c6ac <__malloc_lock>
 800c45e:	f8d8 3000 	ldr.w	r3, [r8]
 800c462:	461c      	mov	r4, r3
 800c464:	bb44      	cbnz	r4, 800c4b8 <_malloc_r+0x88>
 800c466:	4629      	mov	r1, r5
 800c468:	4630      	mov	r0, r6
 800c46a:	f7ff ffbf 	bl	800c3ec <sbrk_aligned>
 800c46e:	1c43      	adds	r3, r0, #1
 800c470:	4604      	mov	r4, r0
 800c472:	d158      	bne.n	800c526 <_malloc_r+0xf6>
 800c474:	f8d8 4000 	ldr.w	r4, [r8]
 800c478:	4627      	mov	r7, r4
 800c47a:	2f00      	cmp	r7, #0
 800c47c:	d143      	bne.n	800c506 <_malloc_r+0xd6>
 800c47e:	2c00      	cmp	r4, #0
 800c480:	d04b      	beq.n	800c51a <_malloc_r+0xea>
 800c482:	6823      	ldr	r3, [r4, #0]
 800c484:	4639      	mov	r1, r7
 800c486:	4630      	mov	r0, r6
 800c488:	eb04 0903 	add.w	r9, r4, r3
 800c48c:	f000 ffb2 	bl	800d3f4 <_sbrk_r>
 800c490:	4581      	cmp	r9, r0
 800c492:	d142      	bne.n	800c51a <_malloc_r+0xea>
 800c494:	6821      	ldr	r1, [r4, #0]
 800c496:	1a6d      	subs	r5, r5, r1
 800c498:	4629      	mov	r1, r5
 800c49a:	4630      	mov	r0, r6
 800c49c:	f7ff ffa6 	bl	800c3ec <sbrk_aligned>
 800c4a0:	3001      	adds	r0, #1
 800c4a2:	d03a      	beq.n	800c51a <_malloc_r+0xea>
 800c4a4:	6823      	ldr	r3, [r4, #0]
 800c4a6:	442b      	add	r3, r5
 800c4a8:	6023      	str	r3, [r4, #0]
 800c4aa:	f8d8 3000 	ldr.w	r3, [r8]
 800c4ae:	685a      	ldr	r2, [r3, #4]
 800c4b0:	bb62      	cbnz	r2, 800c50c <_malloc_r+0xdc>
 800c4b2:	f8c8 7000 	str.w	r7, [r8]
 800c4b6:	e00f      	b.n	800c4d8 <_malloc_r+0xa8>
 800c4b8:	6822      	ldr	r2, [r4, #0]
 800c4ba:	1b52      	subs	r2, r2, r5
 800c4bc:	d420      	bmi.n	800c500 <_malloc_r+0xd0>
 800c4be:	2a0b      	cmp	r2, #11
 800c4c0:	d917      	bls.n	800c4f2 <_malloc_r+0xc2>
 800c4c2:	1961      	adds	r1, r4, r5
 800c4c4:	42a3      	cmp	r3, r4
 800c4c6:	6025      	str	r5, [r4, #0]
 800c4c8:	bf18      	it	ne
 800c4ca:	6059      	strne	r1, [r3, #4]
 800c4cc:	6863      	ldr	r3, [r4, #4]
 800c4ce:	bf08      	it	eq
 800c4d0:	f8c8 1000 	streq.w	r1, [r8]
 800c4d4:	5162      	str	r2, [r4, r5]
 800c4d6:	604b      	str	r3, [r1, #4]
 800c4d8:	4630      	mov	r0, r6
 800c4da:	f000 f8ed 	bl	800c6b8 <__malloc_unlock>
 800c4de:	f104 000b 	add.w	r0, r4, #11
 800c4e2:	1d23      	adds	r3, r4, #4
 800c4e4:	f020 0007 	bic.w	r0, r0, #7
 800c4e8:	1ac2      	subs	r2, r0, r3
 800c4ea:	bf1c      	itt	ne
 800c4ec:	1a1b      	subne	r3, r3, r0
 800c4ee:	50a3      	strne	r3, [r4, r2]
 800c4f0:	e7af      	b.n	800c452 <_malloc_r+0x22>
 800c4f2:	6862      	ldr	r2, [r4, #4]
 800c4f4:	42a3      	cmp	r3, r4
 800c4f6:	bf0c      	ite	eq
 800c4f8:	f8c8 2000 	streq.w	r2, [r8]
 800c4fc:	605a      	strne	r2, [r3, #4]
 800c4fe:	e7eb      	b.n	800c4d8 <_malloc_r+0xa8>
 800c500:	4623      	mov	r3, r4
 800c502:	6864      	ldr	r4, [r4, #4]
 800c504:	e7ae      	b.n	800c464 <_malloc_r+0x34>
 800c506:	463c      	mov	r4, r7
 800c508:	687f      	ldr	r7, [r7, #4]
 800c50a:	e7b6      	b.n	800c47a <_malloc_r+0x4a>
 800c50c:	461a      	mov	r2, r3
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	42a3      	cmp	r3, r4
 800c512:	d1fb      	bne.n	800c50c <_malloc_r+0xdc>
 800c514:	2300      	movs	r3, #0
 800c516:	6053      	str	r3, [r2, #4]
 800c518:	e7de      	b.n	800c4d8 <_malloc_r+0xa8>
 800c51a:	230c      	movs	r3, #12
 800c51c:	6033      	str	r3, [r6, #0]
 800c51e:	4630      	mov	r0, r6
 800c520:	f000 f8ca 	bl	800c6b8 <__malloc_unlock>
 800c524:	e794      	b.n	800c450 <_malloc_r+0x20>
 800c526:	6005      	str	r5, [r0, #0]
 800c528:	e7d6      	b.n	800c4d8 <_malloc_r+0xa8>
 800c52a:	bf00      	nop
 800c52c:	20000504 	.word	0x20000504

0800c530 <__ascii_mbtowc>:
 800c530:	b082      	sub	sp, #8
 800c532:	b901      	cbnz	r1, 800c536 <__ascii_mbtowc+0x6>
 800c534:	a901      	add	r1, sp, #4
 800c536:	b142      	cbz	r2, 800c54a <__ascii_mbtowc+0x1a>
 800c538:	b14b      	cbz	r3, 800c54e <__ascii_mbtowc+0x1e>
 800c53a:	7813      	ldrb	r3, [r2, #0]
 800c53c:	600b      	str	r3, [r1, #0]
 800c53e:	7812      	ldrb	r2, [r2, #0]
 800c540:	1e10      	subs	r0, r2, #0
 800c542:	bf18      	it	ne
 800c544:	2001      	movne	r0, #1
 800c546:	b002      	add	sp, #8
 800c548:	4770      	bx	lr
 800c54a:	4610      	mov	r0, r2
 800c54c:	e7fb      	b.n	800c546 <__ascii_mbtowc+0x16>
 800c54e:	f06f 0001 	mvn.w	r0, #1
 800c552:	e7f8      	b.n	800c546 <__ascii_mbtowc+0x16>

0800c554 <__sflush_r>:
 800c554:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c55c:	0716      	lsls	r6, r2, #28
 800c55e:	4605      	mov	r5, r0
 800c560:	460c      	mov	r4, r1
 800c562:	d454      	bmi.n	800c60e <__sflush_r+0xba>
 800c564:	684b      	ldr	r3, [r1, #4]
 800c566:	2b00      	cmp	r3, #0
 800c568:	dc02      	bgt.n	800c570 <__sflush_r+0x1c>
 800c56a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	dd48      	ble.n	800c602 <__sflush_r+0xae>
 800c570:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c572:	2e00      	cmp	r6, #0
 800c574:	d045      	beq.n	800c602 <__sflush_r+0xae>
 800c576:	2300      	movs	r3, #0
 800c578:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c57c:	682f      	ldr	r7, [r5, #0]
 800c57e:	6a21      	ldr	r1, [r4, #32]
 800c580:	602b      	str	r3, [r5, #0]
 800c582:	d030      	beq.n	800c5e6 <__sflush_r+0x92>
 800c584:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c586:	89a3      	ldrh	r3, [r4, #12]
 800c588:	0759      	lsls	r1, r3, #29
 800c58a:	d505      	bpl.n	800c598 <__sflush_r+0x44>
 800c58c:	6863      	ldr	r3, [r4, #4]
 800c58e:	1ad2      	subs	r2, r2, r3
 800c590:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c592:	b10b      	cbz	r3, 800c598 <__sflush_r+0x44>
 800c594:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c596:	1ad2      	subs	r2, r2, r3
 800c598:	2300      	movs	r3, #0
 800c59a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c59c:	6a21      	ldr	r1, [r4, #32]
 800c59e:	4628      	mov	r0, r5
 800c5a0:	47b0      	blx	r6
 800c5a2:	1c43      	adds	r3, r0, #1
 800c5a4:	89a3      	ldrh	r3, [r4, #12]
 800c5a6:	d106      	bne.n	800c5b6 <__sflush_r+0x62>
 800c5a8:	6829      	ldr	r1, [r5, #0]
 800c5aa:	291d      	cmp	r1, #29
 800c5ac:	d82b      	bhi.n	800c606 <__sflush_r+0xb2>
 800c5ae:	4a2a      	ldr	r2, [pc, #168]	@ (800c658 <__sflush_r+0x104>)
 800c5b0:	410a      	asrs	r2, r1
 800c5b2:	07d6      	lsls	r6, r2, #31
 800c5b4:	d427      	bmi.n	800c606 <__sflush_r+0xb2>
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	6062      	str	r2, [r4, #4]
 800c5ba:	04d9      	lsls	r1, r3, #19
 800c5bc:	6922      	ldr	r2, [r4, #16]
 800c5be:	6022      	str	r2, [r4, #0]
 800c5c0:	d504      	bpl.n	800c5cc <__sflush_r+0x78>
 800c5c2:	1c42      	adds	r2, r0, #1
 800c5c4:	d101      	bne.n	800c5ca <__sflush_r+0x76>
 800c5c6:	682b      	ldr	r3, [r5, #0]
 800c5c8:	b903      	cbnz	r3, 800c5cc <__sflush_r+0x78>
 800c5ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800c5cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5ce:	602f      	str	r7, [r5, #0]
 800c5d0:	b1b9      	cbz	r1, 800c602 <__sflush_r+0xae>
 800c5d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5d6:	4299      	cmp	r1, r3
 800c5d8:	d002      	beq.n	800c5e0 <__sflush_r+0x8c>
 800c5da:	4628      	mov	r0, r5
 800c5dc:	f000 ff5e 	bl	800d49c <_free_r>
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c5e4:	e00d      	b.n	800c602 <__sflush_r+0xae>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	4628      	mov	r0, r5
 800c5ea:	47b0      	blx	r6
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	1c50      	adds	r0, r2, #1
 800c5f0:	d1c9      	bne.n	800c586 <__sflush_r+0x32>
 800c5f2:	682b      	ldr	r3, [r5, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d0c6      	beq.n	800c586 <__sflush_r+0x32>
 800c5f8:	2b1d      	cmp	r3, #29
 800c5fa:	d001      	beq.n	800c600 <__sflush_r+0xac>
 800c5fc:	2b16      	cmp	r3, #22
 800c5fe:	d11e      	bne.n	800c63e <__sflush_r+0xea>
 800c600:	602f      	str	r7, [r5, #0]
 800c602:	2000      	movs	r0, #0
 800c604:	e022      	b.n	800c64c <__sflush_r+0xf8>
 800c606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c60a:	b21b      	sxth	r3, r3
 800c60c:	e01b      	b.n	800c646 <__sflush_r+0xf2>
 800c60e:	690f      	ldr	r7, [r1, #16]
 800c610:	2f00      	cmp	r7, #0
 800c612:	d0f6      	beq.n	800c602 <__sflush_r+0xae>
 800c614:	0793      	lsls	r3, r2, #30
 800c616:	680e      	ldr	r6, [r1, #0]
 800c618:	bf08      	it	eq
 800c61a:	694b      	ldreq	r3, [r1, #20]
 800c61c:	600f      	str	r7, [r1, #0]
 800c61e:	bf18      	it	ne
 800c620:	2300      	movne	r3, #0
 800c622:	eba6 0807 	sub.w	r8, r6, r7
 800c626:	608b      	str	r3, [r1, #8]
 800c628:	f1b8 0f00 	cmp.w	r8, #0
 800c62c:	dde9      	ble.n	800c602 <__sflush_r+0xae>
 800c62e:	6a21      	ldr	r1, [r4, #32]
 800c630:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c632:	4643      	mov	r3, r8
 800c634:	463a      	mov	r2, r7
 800c636:	4628      	mov	r0, r5
 800c638:	47b0      	blx	r6
 800c63a:	2800      	cmp	r0, #0
 800c63c:	dc08      	bgt.n	800c650 <__sflush_r+0xfc>
 800c63e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c646:	81a3      	strh	r3, [r4, #12]
 800c648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c650:	4407      	add	r7, r0
 800c652:	eba8 0800 	sub.w	r8, r8, r0
 800c656:	e7e7      	b.n	800c628 <__sflush_r+0xd4>
 800c658:	dfbffffe 	.word	0xdfbffffe

0800c65c <_fflush_r>:
 800c65c:	b538      	push	{r3, r4, r5, lr}
 800c65e:	690b      	ldr	r3, [r1, #16]
 800c660:	4605      	mov	r5, r0
 800c662:	460c      	mov	r4, r1
 800c664:	b913      	cbnz	r3, 800c66c <_fflush_r+0x10>
 800c666:	2500      	movs	r5, #0
 800c668:	4628      	mov	r0, r5
 800c66a:	bd38      	pop	{r3, r4, r5, pc}
 800c66c:	b118      	cbz	r0, 800c676 <_fflush_r+0x1a>
 800c66e:	6a03      	ldr	r3, [r0, #32]
 800c670:	b90b      	cbnz	r3, 800c676 <_fflush_r+0x1a>
 800c672:	f7fd fafd 	bl	8009c70 <__sinit>
 800c676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d0f3      	beq.n	800c666 <_fflush_r+0xa>
 800c67e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c680:	07d0      	lsls	r0, r2, #31
 800c682:	d404      	bmi.n	800c68e <_fflush_r+0x32>
 800c684:	0599      	lsls	r1, r3, #22
 800c686:	d402      	bmi.n	800c68e <_fflush_r+0x32>
 800c688:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c68a:	f7fe fa66 	bl	800ab5a <__retarget_lock_acquire_recursive>
 800c68e:	4628      	mov	r0, r5
 800c690:	4621      	mov	r1, r4
 800c692:	f7ff ff5f 	bl	800c554 <__sflush_r>
 800c696:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c698:	07da      	lsls	r2, r3, #31
 800c69a:	4605      	mov	r5, r0
 800c69c:	d4e4      	bmi.n	800c668 <_fflush_r+0xc>
 800c69e:	89a3      	ldrh	r3, [r4, #12]
 800c6a0:	059b      	lsls	r3, r3, #22
 800c6a2:	d4e1      	bmi.n	800c668 <_fflush_r+0xc>
 800c6a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c6a6:	f7fe fa59 	bl	800ab5c <__retarget_lock_release_recursive>
 800c6aa:	e7dd      	b.n	800c668 <_fflush_r+0xc>

0800c6ac <__malloc_lock>:
 800c6ac:	4801      	ldr	r0, [pc, #4]	@ (800c6b4 <__malloc_lock+0x8>)
 800c6ae:	f7fe ba54 	b.w	800ab5a <__retarget_lock_acquire_recursive>
 800c6b2:	bf00      	nop
 800c6b4:	200004fc 	.word	0x200004fc

0800c6b8 <__malloc_unlock>:
 800c6b8:	4801      	ldr	r0, [pc, #4]	@ (800c6c0 <__malloc_unlock+0x8>)
 800c6ba:	f7fe ba4f 	b.w	800ab5c <__retarget_lock_release_recursive>
 800c6be:	bf00      	nop
 800c6c0:	200004fc 	.word	0x200004fc

0800c6c4 <_Balloc>:
 800c6c4:	b570      	push	{r4, r5, r6, lr}
 800c6c6:	69c6      	ldr	r6, [r0, #28]
 800c6c8:	4604      	mov	r4, r0
 800c6ca:	460d      	mov	r5, r1
 800c6cc:	b976      	cbnz	r6, 800c6ec <_Balloc+0x28>
 800c6ce:	2010      	movs	r0, #16
 800c6d0:	f7ff fe84 	bl	800c3dc <malloc>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	61e0      	str	r0, [r4, #28]
 800c6d8:	b920      	cbnz	r0, 800c6e4 <_Balloc+0x20>
 800c6da:	4b18      	ldr	r3, [pc, #96]	@ (800c73c <_Balloc+0x78>)
 800c6dc:	4818      	ldr	r0, [pc, #96]	@ (800c740 <_Balloc+0x7c>)
 800c6de:	216b      	movs	r1, #107	@ 0x6b
 800c6e0:	f000 feaa 	bl	800d438 <__assert_func>
 800c6e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6e8:	6006      	str	r6, [r0, #0]
 800c6ea:	60c6      	str	r6, [r0, #12]
 800c6ec:	69e6      	ldr	r6, [r4, #28]
 800c6ee:	68f3      	ldr	r3, [r6, #12]
 800c6f0:	b183      	cbz	r3, 800c714 <_Balloc+0x50>
 800c6f2:	69e3      	ldr	r3, [r4, #28]
 800c6f4:	68db      	ldr	r3, [r3, #12]
 800c6f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c6fa:	b9b8      	cbnz	r0, 800c72c <_Balloc+0x68>
 800c6fc:	2101      	movs	r1, #1
 800c6fe:	fa01 f605 	lsl.w	r6, r1, r5
 800c702:	1d72      	adds	r2, r6, #5
 800c704:	0092      	lsls	r2, r2, #2
 800c706:	4620      	mov	r0, r4
 800c708:	f000 feb4 	bl	800d474 <_calloc_r>
 800c70c:	b160      	cbz	r0, 800c728 <_Balloc+0x64>
 800c70e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c712:	e00e      	b.n	800c732 <_Balloc+0x6e>
 800c714:	2221      	movs	r2, #33	@ 0x21
 800c716:	2104      	movs	r1, #4
 800c718:	4620      	mov	r0, r4
 800c71a:	f000 feab 	bl	800d474 <_calloc_r>
 800c71e:	69e3      	ldr	r3, [r4, #28]
 800c720:	60f0      	str	r0, [r6, #12]
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d1e4      	bne.n	800c6f2 <_Balloc+0x2e>
 800c728:	2000      	movs	r0, #0
 800c72a:	bd70      	pop	{r4, r5, r6, pc}
 800c72c:	6802      	ldr	r2, [r0, #0]
 800c72e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c732:	2300      	movs	r3, #0
 800c734:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c738:	e7f7      	b.n	800c72a <_Balloc+0x66>
 800c73a:	bf00      	nop
 800c73c:	0800d9e6 	.word	0x0800d9e6
 800c740:	0800dad7 	.word	0x0800dad7

0800c744 <_Bfree>:
 800c744:	b570      	push	{r4, r5, r6, lr}
 800c746:	69c6      	ldr	r6, [r0, #28]
 800c748:	4605      	mov	r5, r0
 800c74a:	460c      	mov	r4, r1
 800c74c:	b976      	cbnz	r6, 800c76c <_Bfree+0x28>
 800c74e:	2010      	movs	r0, #16
 800c750:	f7ff fe44 	bl	800c3dc <malloc>
 800c754:	4602      	mov	r2, r0
 800c756:	61e8      	str	r0, [r5, #28]
 800c758:	b920      	cbnz	r0, 800c764 <_Bfree+0x20>
 800c75a:	4b09      	ldr	r3, [pc, #36]	@ (800c780 <_Bfree+0x3c>)
 800c75c:	4809      	ldr	r0, [pc, #36]	@ (800c784 <_Bfree+0x40>)
 800c75e:	218f      	movs	r1, #143	@ 0x8f
 800c760:	f000 fe6a 	bl	800d438 <__assert_func>
 800c764:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c768:	6006      	str	r6, [r0, #0]
 800c76a:	60c6      	str	r6, [r0, #12]
 800c76c:	b13c      	cbz	r4, 800c77e <_Bfree+0x3a>
 800c76e:	69eb      	ldr	r3, [r5, #28]
 800c770:	6862      	ldr	r2, [r4, #4]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c778:	6021      	str	r1, [r4, #0]
 800c77a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c77e:	bd70      	pop	{r4, r5, r6, pc}
 800c780:	0800d9e6 	.word	0x0800d9e6
 800c784:	0800dad7 	.word	0x0800dad7

0800c788 <__multadd>:
 800c788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c78c:	690d      	ldr	r5, [r1, #16]
 800c78e:	4607      	mov	r7, r0
 800c790:	460c      	mov	r4, r1
 800c792:	461e      	mov	r6, r3
 800c794:	f101 0c14 	add.w	ip, r1, #20
 800c798:	2000      	movs	r0, #0
 800c79a:	f8dc 3000 	ldr.w	r3, [ip]
 800c79e:	b299      	uxth	r1, r3
 800c7a0:	fb02 6101 	mla	r1, r2, r1, r6
 800c7a4:	0c1e      	lsrs	r6, r3, #16
 800c7a6:	0c0b      	lsrs	r3, r1, #16
 800c7a8:	fb02 3306 	mla	r3, r2, r6, r3
 800c7ac:	b289      	uxth	r1, r1
 800c7ae:	3001      	adds	r0, #1
 800c7b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c7b4:	4285      	cmp	r5, r0
 800c7b6:	f84c 1b04 	str.w	r1, [ip], #4
 800c7ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c7be:	dcec      	bgt.n	800c79a <__multadd+0x12>
 800c7c0:	b30e      	cbz	r6, 800c806 <__multadd+0x7e>
 800c7c2:	68a3      	ldr	r3, [r4, #8]
 800c7c4:	42ab      	cmp	r3, r5
 800c7c6:	dc19      	bgt.n	800c7fc <__multadd+0x74>
 800c7c8:	6861      	ldr	r1, [r4, #4]
 800c7ca:	4638      	mov	r0, r7
 800c7cc:	3101      	adds	r1, #1
 800c7ce:	f7ff ff79 	bl	800c6c4 <_Balloc>
 800c7d2:	4680      	mov	r8, r0
 800c7d4:	b928      	cbnz	r0, 800c7e2 <__multadd+0x5a>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	4b0c      	ldr	r3, [pc, #48]	@ (800c80c <__multadd+0x84>)
 800c7da:	480d      	ldr	r0, [pc, #52]	@ (800c810 <__multadd+0x88>)
 800c7dc:	21ba      	movs	r1, #186	@ 0xba
 800c7de:	f000 fe2b 	bl	800d438 <__assert_func>
 800c7e2:	6922      	ldr	r2, [r4, #16]
 800c7e4:	3202      	adds	r2, #2
 800c7e6:	f104 010c 	add.w	r1, r4, #12
 800c7ea:	0092      	lsls	r2, r2, #2
 800c7ec:	300c      	adds	r0, #12
 800c7ee:	f7fe f9b6 	bl	800ab5e <memcpy>
 800c7f2:	4621      	mov	r1, r4
 800c7f4:	4638      	mov	r0, r7
 800c7f6:	f7ff ffa5 	bl	800c744 <_Bfree>
 800c7fa:	4644      	mov	r4, r8
 800c7fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c800:	3501      	adds	r5, #1
 800c802:	615e      	str	r6, [r3, #20]
 800c804:	6125      	str	r5, [r4, #16]
 800c806:	4620      	mov	r0, r4
 800c808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c80c:	0800da55 	.word	0x0800da55
 800c810:	0800dad7 	.word	0x0800dad7

0800c814 <__s2b>:
 800c814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c818:	460c      	mov	r4, r1
 800c81a:	4615      	mov	r5, r2
 800c81c:	461f      	mov	r7, r3
 800c81e:	2209      	movs	r2, #9
 800c820:	3308      	adds	r3, #8
 800c822:	4606      	mov	r6, r0
 800c824:	fb93 f3f2 	sdiv	r3, r3, r2
 800c828:	2100      	movs	r1, #0
 800c82a:	2201      	movs	r2, #1
 800c82c:	429a      	cmp	r2, r3
 800c82e:	db09      	blt.n	800c844 <__s2b+0x30>
 800c830:	4630      	mov	r0, r6
 800c832:	f7ff ff47 	bl	800c6c4 <_Balloc>
 800c836:	b940      	cbnz	r0, 800c84a <__s2b+0x36>
 800c838:	4602      	mov	r2, r0
 800c83a:	4b19      	ldr	r3, [pc, #100]	@ (800c8a0 <__s2b+0x8c>)
 800c83c:	4819      	ldr	r0, [pc, #100]	@ (800c8a4 <__s2b+0x90>)
 800c83e:	21d3      	movs	r1, #211	@ 0xd3
 800c840:	f000 fdfa 	bl	800d438 <__assert_func>
 800c844:	0052      	lsls	r2, r2, #1
 800c846:	3101      	adds	r1, #1
 800c848:	e7f0      	b.n	800c82c <__s2b+0x18>
 800c84a:	9b08      	ldr	r3, [sp, #32]
 800c84c:	6143      	str	r3, [r0, #20]
 800c84e:	2d09      	cmp	r5, #9
 800c850:	f04f 0301 	mov.w	r3, #1
 800c854:	6103      	str	r3, [r0, #16]
 800c856:	dd16      	ble.n	800c886 <__s2b+0x72>
 800c858:	f104 0909 	add.w	r9, r4, #9
 800c85c:	46c8      	mov	r8, r9
 800c85e:	442c      	add	r4, r5
 800c860:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c864:	4601      	mov	r1, r0
 800c866:	3b30      	subs	r3, #48	@ 0x30
 800c868:	220a      	movs	r2, #10
 800c86a:	4630      	mov	r0, r6
 800c86c:	f7ff ff8c 	bl	800c788 <__multadd>
 800c870:	45a0      	cmp	r8, r4
 800c872:	d1f5      	bne.n	800c860 <__s2b+0x4c>
 800c874:	f1a5 0408 	sub.w	r4, r5, #8
 800c878:	444c      	add	r4, r9
 800c87a:	1b2d      	subs	r5, r5, r4
 800c87c:	1963      	adds	r3, r4, r5
 800c87e:	42bb      	cmp	r3, r7
 800c880:	db04      	blt.n	800c88c <__s2b+0x78>
 800c882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c886:	340a      	adds	r4, #10
 800c888:	2509      	movs	r5, #9
 800c88a:	e7f6      	b.n	800c87a <__s2b+0x66>
 800c88c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c890:	4601      	mov	r1, r0
 800c892:	3b30      	subs	r3, #48	@ 0x30
 800c894:	220a      	movs	r2, #10
 800c896:	4630      	mov	r0, r6
 800c898:	f7ff ff76 	bl	800c788 <__multadd>
 800c89c:	e7ee      	b.n	800c87c <__s2b+0x68>
 800c89e:	bf00      	nop
 800c8a0:	0800da55 	.word	0x0800da55
 800c8a4:	0800dad7 	.word	0x0800dad7

0800c8a8 <__hi0bits>:
 800c8a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	bf36      	itet	cc
 800c8b0:	0403      	lslcc	r3, r0, #16
 800c8b2:	2000      	movcs	r0, #0
 800c8b4:	2010      	movcc	r0, #16
 800c8b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c8ba:	bf3c      	itt	cc
 800c8bc:	021b      	lslcc	r3, r3, #8
 800c8be:	3008      	addcc	r0, #8
 800c8c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c8c4:	bf3c      	itt	cc
 800c8c6:	011b      	lslcc	r3, r3, #4
 800c8c8:	3004      	addcc	r0, #4
 800c8ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8ce:	bf3c      	itt	cc
 800c8d0:	009b      	lslcc	r3, r3, #2
 800c8d2:	3002      	addcc	r0, #2
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	db05      	blt.n	800c8e4 <__hi0bits+0x3c>
 800c8d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c8dc:	f100 0001 	add.w	r0, r0, #1
 800c8e0:	bf08      	it	eq
 800c8e2:	2020      	moveq	r0, #32
 800c8e4:	4770      	bx	lr

0800c8e6 <__lo0bits>:
 800c8e6:	6803      	ldr	r3, [r0, #0]
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	f013 0007 	ands.w	r0, r3, #7
 800c8ee:	d00b      	beq.n	800c908 <__lo0bits+0x22>
 800c8f0:	07d9      	lsls	r1, r3, #31
 800c8f2:	d421      	bmi.n	800c938 <__lo0bits+0x52>
 800c8f4:	0798      	lsls	r0, r3, #30
 800c8f6:	bf49      	itett	mi
 800c8f8:	085b      	lsrmi	r3, r3, #1
 800c8fa:	089b      	lsrpl	r3, r3, #2
 800c8fc:	2001      	movmi	r0, #1
 800c8fe:	6013      	strmi	r3, [r2, #0]
 800c900:	bf5c      	itt	pl
 800c902:	6013      	strpl	r3, [r2, #0]
 800c904:	2002      	movpl	r0, #2
 800c906:	4770      	bx	lr
 800c908:	b299      	uxth	r1, r3
 800c90a:	b909      	cbnz	r1, 800c910 <__lo0bits+0x2a>
 800c90c:	0c1b      	lsrs	r3, r3, #16
 800c90e:	2010      	movs	r0, #16
 800c910:	b2d9      	uxtb	r1, r3
 800c912:	b909      	cbnz	r1, 800c918 <__lo0bits+0x32>
 800c914:	3008      	adds	r0, #8
 800c916:	0a1b      	lsrs	r3, r3, #8
 800c918:	0719      	lsls	r1, r3, #28
 800c91a:	bf04      	itt	eq
 800c91c:	091b      	lsreq	r3, r3, #4
 800c91e:	3004      	addeq	r0, #4
 800c920:	0799      	lsls	r1, r3, #30
 800c922:	bf04      	itt	eq
 800c924:	089b      	lsreq	r3, r3, #2
 800c926:	3002      	addeq	r0, #2
 800c928:	07d9      	lsls	r1, r3, #31
 800c92a:	d403      	bmi.n	800c934 <__lo0bits+0x4e>
 800c92c:	085b      	lsrs	r3, r3, #1
 800c92e:	f100 0001 	add.w	r0, r0, #1
 800c932:	d003      	beq.n	800c93c <__lo0bits+0x56>
 800c934:	6013      	str	r3, [r2, #0]
 800c936:	4770      	bx	lr
 800c938:	2000      	movs	r0, #0
 800c93a:	4770      	bx	lr
 800c93c:	2020      	movs	r0, #32
 800c93e:	4770      	bx	lr

0800c940 <__i2b>:
 800c940:	b510      	push	{r4, lr}
 800c942:	460c      	mov	r4, r1
 800c944:	2101      	movs	r1, #1
 800c946:	f7ff febd 	bl	800c6c4 <_Balloc>
 800c94a:	4602      	mov	r2, r0
 800c94c:	b928      	cbnz	r0, 800c95a <__i2b+0x1a>
 800c94e:	4b05      	ldr	r3, [pc, #20]	@ (800c964 <__i2b+0x24>)
 800c950:	4805      	ldr	r0, [pc, #20]	@ (800c968 <__i2b+0x28>)
 800c952:	f240 1145 	movw	r1, #325	@ 0x145
 800c956:	f000 fd6f 	bl	800d438 <__assert_func>
 800c95a:	2301      	movs	r3, #1
 800c95c:	6144      	str	r4, [r0, #20]
 800c95e:	6103      	str	r3, [r0, #16]
 800c960:	bd10      	pop	{r4, pc}
 800c962:	bf00      	nop
 800c964:	0800da55 	.word	0x0800da55
 800c968:	0800dad7 	.word	0x0800dad7

0800c96c <__multiply>:
 800c96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c970:	4614      	mov	r4, r2
 800c972:	690a      	ldr	r2, [r1, #16]
 800c974:	6923      	ldr	r3, [r4, #16]
 800c976:	429a      	cmp	r2, r3
 800c978:	bfa8      	it	ge
 800c97a:	4623      	movge	r3, r4
 800c97c:	460f      	mov	r7, r1
 800c97e:	bfa4      	itt	ge
 800c980:	460c      	movge	r4, r1
 800c982:	461f      	movge	r7, r3
 800c984:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c988:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c98c:	68a3      	ldr	r3, [r4, #8]
 800c98e:	6861      	ldr	r1, [r4, #4]
 800c990:	eb0a 0609 	add.w	r6, sl, r9
 800c994:	42b3      	cmp	r3, r6
 800c996:	b085      	sub	sp, #20
 800c998:	bfb8      	it	lt
 800c99a:	3101      	addlt	r1, #1
 800c99c:	f7ff fe92 	bl	800c6c4 <_Balloc>
 800c9a0:	b930      	cbnz	r0, 800c9b0 <__multiply+0x44>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	4b44      	ldr	r3, [pc, #272]	@ (800cab8 <__multiply+0x14c>)
 800c9a6:	4845      	ldr	r0, [pc, #276]	@ (800cabc <__multiply+0x150>)
 800c9a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c9ac:	f000 fd44 	bl	800d438 <__assert_func>
 800c9b0:	f100 0514 	add.w	r5, r0, #20
 800c9b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c9b8:	462b      	mov	r3, r5
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	4543      	cmp	r3, r8
 800c9be:	d321      	bcc.n	800ca04 <__multiply+0x98>
 800c9c0:	f107 0114 	add.w	r1, r7, #20
 800c9c4:	f104 0214 	add.w	r2, r4, #20
 800c9c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c9cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c9d0:	9302      	str	r3, [sp, #8]
 800c9d2:	1b13      	subs	r3, r2, r4
 800c9d4:	3b15      	subs	r3, #21
 800c9d6:	f023 0303 	bic.w	r3, r3, #3
 800c9da:	3304      	adds	r3, #4
 800c9dc:	f104 0715 	add.w	r7, r4, #21
 800c9e0:	42ba      	cmp	r2, r7
 800c9e2:	bf38      	it	cc
 800c9e4:	2304      	movcc	r3, #4
 800c9e6:	9301      	str	r3, [sp, #4]
 800c9e8:	9b02      	ldr	r3, [sp, #8]
 800c9ea:	9103      	str	r1, [sp, #12]
 800c9ec:	428b      	cmp	r3, r1
 800c9ee:	d80c      	bhi.n	800ca0a <__multiply+0x9e>
 800c9f0:	2e00      	cmp	r6, #0
 800c9f2:	dd03      	ble.n	800c9fc <__multiply+0x90>
 800c9f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d05b      	beq.n	800cab4 <__multiply+0x148>
 800c9fc:	6106      	str	r6, [r0, #16]
 800c9fe:	b005      	add	sp, #20
 800ca00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca04:	f843 2b04 	str.w	r2, [r3], #4
 800ca08:	e7d8      	b.n	800c9bc <__multiply+0x50>
 800ca0a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ca0e:	f1ba 0f00 	cmp.w	sl, #0
 800ca12:	d024      	beq.n	800ca5e <__multiply+0xf2>
 800ca14:	f104 0e14 	add.w	lr, r4, #20
 800ca18:	46a9      	mov	r9, r5
 800ca1a:	f04f 0c00 	mov.w	ip, #0
 800ca1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ca22:	f8d9 3000 	ldr.w	r3, [r9]
 800ca26:	fa1f fb87 	uxth.w	fp, r7
 800ca2a:	b29b      	uxth	r3, r3
 800ca2c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ca30:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ca34:	f8d9 7000 	ldr.w	r7, [r9]
 800ca38:	4463      	add	r3, ip
 800ca3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ca3e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ca42:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ca4c:	4572      	cmp	r2, lr
 800ca4e:	f849 3b04 	str.w	r3, [r9], #4
 800ca52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ca56:	d8e2      	bhi.n	800ca1e <__multiply+0xb2>
 800ca58:	9b01      	ldr	r3, [sp, #4]
 800ca5a:	f845 c003 	str.w	ip, [r5, r3]
 800ca5e:	9b03      	ldr	r3, [sp, #12]
 800ca60:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ca64:	3104      	adds	r1, #4
 800ca66:	f1b9 0f00 	cmp.w	r9, #0
 800ca6a:	d021      	beq.n	800cab0 <__multiply+0x144>
 800ca6c:	682b      	ldr	r3, [r5, #0]
 800ca6e:	f104 0c14 	add.w	ip, r4, #20
 800ca72:	46ae      	mov	lr, r5
 800ca74:	f04f 0a00 	mov.w	sl, #0
 800ca78:	f8bc b000 	ldrh.w	fp, [ip]
 800ca7c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ca80:	fb09 770b 	mla	r7, r9, fp, r7
 800ca84:	4457      	add	r7, sl
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ca8c:	f84e 3b04 	str.w	r3, [lr], #4
 800ca90:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ca94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca98:	f8be 3000 	ldrh.w	r3, [lr]
 800ca9c:	fb09 330a 	mla	r3, r9, sl, r3
 800caa0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800caa4:	4562      	cmp	r2, ip
 800caa6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800caaa:	d8e5      	bhi.n	800ca78 <__multiply+0x10c>
 800caac:	9f01      	ldr	r7, [sp, #4]
 800caae:	51eb      	str	r3, [r5, r7]
 800cab0:	3504      	adds	r5, #4
 800cab2:	e799      	b.n	800c9e8 <__multiply+0x7c>
 800cab4:	3e01      	subs	r6, #1
 800cab6:	e79b      	b.n	800c9f0 <__multiply+0x84>
 800cab8:	0800da55 	.word	0x0800da55
 800cabc:	0800dad7 	.word	0x0800dad7

0800cac0 <__pow5mult>:
 800cac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cac4:	4615      	mov	r5, r2
 800cac6:	f012 0203 	ands.w	r2, r2, #3
 800caca:	4607      	mov	r7, r0
 800cacc:	460e      	mov	r6, r1
 800cace:	d007      	beq.n	800cae0 <__pow5mult+0x20>
 800cad0:	4c25      	ldr	r4, [pc, #148]	@ (800cb68 <__pow5mult+0xa8>)
 800cad2:	3a01      	subs	r2, #1
 800cad4:	2300      	movs	r3, #0
 800cad6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cada:	f7ff fe55 	bl	800c788 <__multadd>
 800cade:	4606      	mov	r6, r0
 800cae0:	10ad      	asrs	r5, r5, #2
 800cae2:	d03d      	beq.n	800cb60 <__pow5mult+0xa0>
 800cae4:	69fc      	ldr	r4, [r7, #28]
 800cae6:	b97c      	cbnz	r4, 800cb08 <__pow5mult+0x48>
 800cae8:	2010      	movs	r0, #16
 800caea:	f7ff fc77 	bl	800c3dc <malloc>
 800caee:	4602      	mov	r2, r0
 800caf0:	61f8      	str	r0, [r7, #28]
 800caf2:	b928      	cbnz	r0, 800cb00 <__pow5mult+0x40>
 800caf4:	4b1d      	ldr	r3, [pc, #116]	@ (800cb6c <__pow5mult+0xac>)
 800caf6:	481e      	ldr	r0, [pc, #120]	@ (800cb70 <__pow5mult+0xb0>)
 800caf8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cafc:	f000 fc9c 	bl	800d438 <__assert_func>
 800cb00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb04:	6004      	str	r4, [r0, #0]
 800cb06:	60c4      	str	r4, [r0, #12]
 800cb08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cb0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb10:	b94c      	cbnz	r4, 800cb26 <__pow5mult+0x66>
 800cb12:	f240 2171 	movw	r1, #625	@ 0x271
 800cb16:	4638      	mov	r0, r7
 800cb18:	f7ff ff12 	bl	800c940 <__i2b>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb22:	4604      	mov	r4, r0
 800cb24:	6003      	str	r3, [r0, #0]
 800cb26:	f04f 0900 	mov.w	r9, #0
 800cb2a:	07eb      	lsls	r3, r5, #31
 800cb2c:	d50a      	bpl.n	800cb44 <__pow5mult+0x84>
 800cb2e:	4631      	mov	r1, r6
 800cb30:	4622      	mov	r2, r4
 800cb32:	4638      	mov	r0, r7
 800cb34:	f7ff ff1a 	bl	800c96c <__multiply>
 800cb38:	4631      	mov	r1, r6
 800cb3a:	4680      	mov	r8, r0
 800cb3c:	4638      	mov	r0, r7
 800cb3e:	f7ff fe01 	bl	800c744 <_Bfree>
 800cb42:	4646      	mov	r6, r8
 800cb44:	106d      	asrs	r5, r5, #1
 800cb46:	d00b      	beq.n	800cb60 <__pow5mult+0xa0>
 800cb48:	6820      	ldr	r0, [r4, #0]
 800cb4a:	b938      	cbnz	r0, 800cb5c <__pow5mult+0x9c>
 800cb4c:	4622      	mov	r2, r4
 800cb4e:	4621      	mov	r1, r4
 800cb50:	4638      	mov	r0, r7
 800cb52:	f7ff ff0b 	bl	800c96c <__multiply>
 800cb56:	6020      	str	r0, [r4, #0]
 800cb58:	f8c0 9000 	str.w	r9, [r0]
 800cb5c:	4604      	mov	r4, r0
 800cb5e:	e7e4      	b.n	800cb2a <__pow5mult+0x6a>
 800cb60:	4630      	mov	r0, r6
 800cb62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb66:	bf00      	nop
 800cb68:	0800db30 	.word	0x0800db30
 800cb6c:	0800d9e6 	.word	0x0800d9e6
 800cb70:	0800dad7 	.word	0x0800dad7

0800cb74 <__lshift>:
 800cb74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb78:	460c      	mov	r4, r1
 800cb7a:	6849      	ldr	r1, [r1, #4]
 800cb7c:	6923      	ldr	r3, [r4, #16]
 800cb7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb82:	68a3      	ldr	r3, [r4, #8]
 800cb84:	4607      	mov	r7, r0
 800cb86:	4691      	mov	r9, r2
 800cb88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb8c:	f108 0601 	add.w	r6, r8, #1
 800cb90:	42b3      	cmp	r3, r6
 800cb92:	db0b      	blt.n	800cbac <__lshift+0x38>
 800cb94:	4638      	mov	r0, r7
 800cb96:	f7ff fd95 	bl	800c6c4 <_Balloc>
 800cb9a:	4605      	mov	r5, r0
 800cb9c:	b948      	cbnz	r0, 800cbb2 <__lshift+0x3e>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	4b28      	ldr	r3, [pc, #160]	@ (800cc44 <__lshift+0xd0>)
 800cba2:	4829      	ldr	r0, [pc, #164]	@ (800cc48 <__lshift+0xd4>)
 800cba4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cba8:	f000 fc46 	bl	800d438 <__assert_func>
 800cbac:	3101      	adds	r1, #1
 800cbae:	005b      	lsls	r3, r3, #1
 800cbb0:	e7ee      	b.n	800cb90 <__lshift+0x1c>
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	f100 0114 	add.w	r1, r0, #20
 800cbb8:	f100 0210 	add.w	r2, r0, #16
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	4553      	cmp	r3, sl
 800cbc0:	db33      	blt.n	800cc2a <__lshift+0xb6>
 800cbc2:	6920      	ldr	r0, [r4, #16]
 800cbc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbc8:	f104 0314 	add.w	r3, r4, #20
 800cbcc:	f019 091f 	ands.w	r9, r9, #31
 800cbd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cbd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cbd8:	d02b      	beq.n	800cc32 <__lshift+0xbe>
 800cbda:	f1c9 0e20 	rsb	lr, r9, #32
 800cbde:	468a      	mov	sl, r1
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	6818      	ldr	r0, [r3, #0]
 800cbe4:	fa00 f009 	lsl.w	r0, r0, r9
 800cbe8:	4310      	orrs	r0, r2
 800cbea:	f84a 0b04 	str.w	r0, [sl], #4
 800cbee:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbf2:	459c      	cmp	ip, r3
 800cbf4:	fa22 f20e 	lsr.w	r2, r2, lr
 800cbf8:	d8f3      	bhi.n	800cbe2 <__lshift+0x6e>
 800cbfa:	ebac 0304 	sub.w	r3, ip, r4
 800cbfe:	3b15      	subs	r3, #21
 800cc00:	f023 0303 	bic.w	r3, r3, #3
 800cc04:	3304      	adds	r3, #4
 800cc06:	f104 0015 	add.w	r0, r4, #21
 800cc0a:	4584      	cmp	ip, r0
 800cc0c:	bf38      	it	cc
 800cc0e:	2304      	movcc	r3, #4
 800cc10:	50ca      	str	r2, [r1, r3]
 800cc12:	b10a      	cbz	r2, 800cc18 <__lshift+0xa4>
 800cc14:	f108 0602 	add.w	r6, r8, #2
 800cc18:	3e01      	subs	r6, #1
 800cc1a:	4638      	mov	r0, r7
 800cc1c:	612e      	str	r6, [r5, #16]
 800cc1e:	4621      	mov	r1, r4
 800cc20:	f7ff fd90 	bl	800c744 <_Bfree>
 800cc24:	4628      	mov	r0, r5
 800cc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc2e:	3301      	adds	r3, #1
 800cc30:	e7c5      	b.n	800cbbe <__lshift+0x4a>
 800cc32:	3904      	subs	r1, #4
 800cc34:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc38:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc3c:	459c      	cmp	ip, r3
 800cc3e:	d8f9      	bhi.n	800cc34 <__lshift+0xc0>
 800cc40:	e7ea      	b.n	800cc18 <__lshift+0xa4>
 800cc42:	bf00      	nop
 800cc44:	0800da55 	.word	0x0800da55
 800cc48:	0800dad7 	.word	0x0800dad7

0800cc4c <__mcmp>:
 800cc4c:	690a      	ldr	r2, [r1, #16]
 800cc4e:	4603      	mov	r3, r0
 800cc50:	6900      	ldr	r0, [r0, #16]
 800cc52:	1a80      	subs	r0, r0, r2
 800cc54:	b530      	push	{r4, r5, lr}
 800cc56:	d10e      	bne.n	800cc76 <__mcmp+0x2a>
 800cc58:	3314      	adds	r3, #20
 800cc5a:	3114      	adds	r1, #20
 800cc5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cc60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cc64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cc68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cc6c:	4295      	cmp	r5, r2
 800cc6e:	d003      	beq.n	800cc78 <__mcmp+0x2c>
 800cc70:	d205      	bcs.n	800cc7e <__mcmp+0x32>
 800cc72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc76:	bd30      	pop	{r4, r5, pc}
 800cc78:	42a3      	cmp	r3, r4
 800cc7a:	d3f3      	bcc.n	800cc64 <__mcmp+0x18>
 800cc7c:	e7fb      	b.n	800cc76 <__mcmp+0x2a>
 800cc7e:	2001      	movs	r0, #1
 800cc80:	e7f9      	b.n	800cc76 <__mcmp+0x2a>
	...

0800cc84 <__mdiff>:
 800cc84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc88:	4689      	mov	r9, r1
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	4611      	mov	r1, r2
 800cc8e:	4648      	mov	r0, r9
 800cc90:	4614      	mov	r4, r2
 800cc92:	f7ff ffdb 	bl	800cc4c <__mcmp>
 800cc96:	1e05      	subs	r5, r0, #0
 800cc98:	d112      	bne.n	800ccc0 <__mdiff+0x3c>
 800cc9a:	4629      	mov	r1, r5
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	f7ff fd11 	bl	800c6c4 <_Balloc>
 800cca2:	4602      	mov	r2, r0
 800cca4:	b928      	cbnz	r0, 800ccb2 <__mdiff+0x2e>
 800cca6:	4b3f      	ldr	r3, [pc, #252]	@ (800cda4 <__mdiff+0x120>)
 800cca8:	f240 2137 	movw	r1, #567	@ 0x237
 800ccac:	483e      	ldr	r0, [pc, #248]	@ (800cda8 <__mdiff+0x124>)
 800ccae:	f000 fbc3 	bl	800d438 <__assert_func>
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ccb8:	4610      	mov	r0, r2
 800ccba:	b003      	add	sp, #12
 800ccbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccc0:	bfbc      	itt	lt
 800ccc2:	464b      	movlt	r3, r9
 800ccc4:	46a1      	movlt	r9, r4
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cccc:	bfba      	itte	lt
 800ccce:	461c      	movlt	r4, r3
 800ccd0:	2501      	movlt	r5, #1
 800ccd2:	2500      	movge	r5, #0
 800ccd4:	f7ff fcf6 	bl	800c6c4 <_Balloc>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	b918      	cbnz	r0, 800cce4 <__mdiff+0x60>
 800ccdc:	4b31      	ldr	r3, [pc, #196]	@ (800cda4 <__mdiff+0x120>)
 800ccde:	f240 2145 	movw	r1, #581	@ 0x245
 800cce2:	e7e3      	b.n	800ccac <__mdiff+0x28>
 800cce4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cce8:	6926      	ldr	r6, [r4, #16]
 800ccea:	60c5      	str	r5, [r0, #12]
 800ccec:	f109 0310 	add.w	r3, r9, #16
 800ccf0:	f109 0514 	add.w	r5, r9, #20
 800ccf4:	f104 0e14 	add.w	lr, r4, #20
 800ccf8:	f100 0b14 	add.w	fp, r0, #20
 800ccfc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cd00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cd04:	9301      	str	r3, [sp, #4]
 800cd06:	46d9      	mov	r9, fp
 800cd08:	f04f 0c00 	mov.w	ip, #0
 800cd0c:	9b01      	ldr	r3, [sp, #4]
 800cd0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cd12:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cd16:	9301      	str	r3, [sp, #4]
 800cd18:	fa1f f38a 	uxth.w	r3, sl
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	b283      	uxth	r3, r0
 800cd20:	1acb      	subs	r3, r1, r3
 800cd22:	0c00      	lsrs	r0, r0, #16
 800cd24:	4463      	add	r3, ip
 800cd26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cd2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cd34:	4576      	cmp	r6, lr
 800cd36:	f849 3b04 	str.w	r3, [r9], #4
 800cd3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd3e:	d8e5      	bhi.n	800cd0c <__mdiff+0x88>
 800cd40:	1b33      	subs	r3, r6, r4
 800cd42:	3b15      	subs	r3, #21
 800cd44:	f023 0303 	bic.w	r3, r3, #3
 800cd48:	3415      	adds	r4, #21
 800cd4a:	3304      	adds	r3, #4
 800cd4c:	42a6      	cmp	r6, r4
 800cd4e:	bf38      	it	cc
 800cd50:	2304      	movcc	r3, #4
 800cd52:	441d      	add	r5, r3
 800cd54:	445b      	add	r3, fp
 800cd56:	461e      	mov	r6, r3
 800cd58:	462c      	mov	r4, r5
 800cd5a:	4544      	cmp	r4, r8
 800cd5c:	d30e      	bcc.n	800cd7c <__mdiff+0xf8>
 800cd5e:	f108 0103 	add.w	r1, r8, #3
 800cd62:	1b49      	subs	r1, r1, r5
 800cd64:	f021 0103 	bic.w	r1, r1, #3
 800cd68:	3d03      	subs	r5, #3
 800cd6a:	45a8      	cmp	r8, r5
 800cd6c:	bf38      	it	cc
 800cd6e:	2100      	movcc	r1, #0
 800cd70:	440b      	add	r3, r1
 800cd72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd76:	b191      	cbz	r1, 800cd9e <__mdiff+0x11a>
 800cd78:	6117      	str	r7, [r2, #16]
 800cd7a:	e79d      	b.n	800ccb8 <__mdiff+0x34>
 800cd7c:	f854 1b04 	ldr.w	r1, [r4], #4
 800cd80:	46e6      	mov	lr, ip
 800cd82:	0c08      	lsrs	r0, r1, #16
 800cd84:	fa1c fc81 	uxtah	ip, ip, r1
 800cd88:	4471      	add	r1, lr
 800cd8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cd8e:	b289      	uxth	r1, r1
 800cd90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cd94:	f846 1b04 	str.w	r1, [r6], #4
 800cd98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd9c:	e7dd      	b.n	800cd5a <__mdiff+0xd6>
 800cd9e:	3f01      	subs	r7, #1
 800cda0:	e7e7      	b.n	800cd72 <__mdiff+0xee>
 800cda2:	bf00      	nop
 800cda4:	0800da55 	.word	0x0800da55
 800cda8:	0800dad7 	.word	0x0800dad7

0800cdac <__ulp>:
 800cdac:	b082      	sub	sp, #8
 800cdae:	ed8d 0b00 	vstr	d0, [sp]
 800cdb2:	9a01      	ldr	r2, [sp, #4]
 800cdb4:	4b0f      	ldr	r3, [pc, #60]	@ (800cdf4 <__ulp+0x48>)
 800cdb6:	4013      	ands	r3, r2
 800cdb8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	dc08      	bgt.n	800cdd2 <__ulp+0x26>
 800cdc0:	425b      	negs	r3, r3
 800cdc2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cdc6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cdca:	da04      	bge.n	800cdd6 <__ulp+0x2a>
 800cdcc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cdd0:	4113      	asrs	r3, r2
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	e008      	b.n	800cde8 <__ulp+0x3c>
 800cdd6:	f1a2 0314 	sub.w	r3, r2, #20
 800cdda:	2b1e      	cmp	r3, #30
 800cddc:	bfda      	itte	le
 800cdde:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cde2:	40da      	lsrle	r2, r3
 800cde4:	2201      	movgt	r2, #1
 800cde6:	2300      	movs	r3, #0
 800cde8:	4619      	mov	r1, r3
 800cdea:	4610      	mov	r0, r2
 800cdec:	ec41 0b10 	vmov	d0, r0, r1
 800cdf0:	b002      	add	sp, #8
 800cdf2:	4770      	bx	lr
 800cdf4:	7ff00000 	.word	0x7ff00000

0800cdf8 <__b2d>:
 800cdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdfc:	6906      	ldr	r6, [r0, #16]
 800cdfe:	f100 0814 	add.w	r8, r0, #20
 800ce02:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ce06:	1f37      	subs	r7, r6, #4
 800ce08:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ce0c:	4610      	mov	r0, r2
 800ce0e:	f7ff fd4b 	bl	800c8a8 <__hi0bits>
 800ce12:	f1c0 0320 	rsb	r3, r0, #32
 800ce16:	280a      	cmp	r0, #10
 800ce18:	600b      	str	r3, [r1, #0]
 800ce1a:	491b      	ldr	r1, [pc, #108]	@ (800ce88 <__b2d+0x90>)
 800ce1c:	dc15      	bgt.n	800ce4a <__b2d+0x52>
 800ce1e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ce22:	fa22 f30c 	lsr.w	r3, r2, ip
 800ce26:	45b8      	cmp	r8, r7
 800ce28:	ea43 0501 	orr.w	r5, r3, r1
 800ce2c:	bf34      	ite	cc
 800ce2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ce32:	2300      	movcs	r3, #0
 800ce34:	3015      	adds	r0, #21
 800ce36:	fa02 f000 	lsl.w	r0, r2, r0
 800ce3a:	fa23 f30c 	lsr.w	r3, r3, ip
 800ce3e:	4303      	orrs	r3, r0
 800ce40:	461c      	mov	r4, r3
 800ce42:	ec45 4b10 	vmov	d0, r4, r5
 800ce46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce4a:	45b8      	cmp	r8, r7
 800ce4c:	bf3a      	itte	cc
 800ce4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ce52:	f1a6 0708 	subcc.w	r7, r6, #8
 800ce56:	2300      	movcs	r3, #0
 800ce58:	380b      	subs	r0, #11
 800ce5a:	d012      	beq.n	800ce82 <__b2d+0x8a>
 800ce5c:	f1c0 0120 	rsb	r1, r0, #32
 800ce60:	fa23 f401 	lsr.w	r4, r3, r1
 800ce64:	4082      	lsls	r2, r0
 800ce66:	4322      	orrs	r2, r4
 800ce68:	4547      	cmp	r7, r8
 800ce6a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ce6e:	bf8c      	ite	hi
 800ce70:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ce74:	2200      	movls	r2, #0
 800ce76:	4083      	lsls	r3, r0
 800ce78:	40ca      	lsrs	r2, r1
 800ce7a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	e7de      	b.n	800ce40 <__b2d+0x48>
 800ce82:	ea42 0501 	orr.w	r5, r2, r1
 800ce86:	e7db      	b.n	800ce40 <__b2d+0x48>
 800ce88:	3ff00000 	.word	0x3ff00000

0800ce8c <__d2b>:
 800ce8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce90:	460f      	mov	r7, r1
 800ce92:	2101      	movs	r1, #1
 800ce94:	ec59 8b10 	vmov	r8, r9, d0
 800ce98:	4616      	mov	r6, r2
 800ce9a:	f7ff fc13 	bl	800c6c4 <_Balloc>
 800ce9e:	4604      	mov	r4, r0
 800cea0:	b930      	cbnz	r0, 800ceb0 <__d2b+0x24>
 800cea2:	4602      	mov	r2, r0
 800cea4:	4b23      	ldr	r3, [pc, #140]	@ (800cf34 <__d2b+0xa8>)
 800cea6:	4824      	ldr	r0, [pc, #144]	@ (800cf38 <__d2b+0xac>)
 800cea8:	f240 310f 	movw	r1, #783	@ 0x30f
 800ceac:	f000 fac4 	bl	800d438 <__assert_func>
 800ceb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ceb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ceb8:	b10d      	cbz	r5, 800cebe <__d2b+0x32>
 800ceba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cebe:	9301      	str	r3, [sp, #4]
 800cec0:	f1b8 0300 	subs.w	r3, r8, #0
 800cec4:	d023      	beq.n	800cf0e <__d2b+0x82>
 800cec6:	4668      	mov	r0, sp
 800cec8:	9300      	str	r3, [sp, #0]
 800ceca:	f7ff fd0c 	bl	800c8e6 <__lo0bits>
 800cece:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ced2:	b1d0      	cbz	r0, 800cf0a <__d2b+0x7e>
 800ced4:	f1c0 0320 	rsb	r3, r0, #32
 800ced8:	fa02 f303 	lsl.w	r3, r2, r3
 800cedc:	430b      	orrs	r3, r1
 800cede:	40c2      	lsrs	r2, r0
 800cee0:	6163      	str	r3, [r4, #20]
 800cee2:	9201      	str	r2, [sp, #4]
 800cee4:	9b01      	ldr	r3, [sp, #4]
 800cee6:	61a3      	str	r3, [r4, #24]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	bf0c      	ite	eq
 800ceec:	2201      	moveq	r2, #1
 800ceee:	2202      	movne	r2, #2
 800cef0:	6122      	str	r2, [r4, #16]
 800cef2:	b1a5      	cbz	r5, 800cf1e <__d2b+0x92>
 800cef4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cef8:	4405      	add	r5, r0
 800cefa:	603d      	str	r5, [r7, #0]
 800cefc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cf00:	6030      	str	r0, [r6, #0]
 800cf02:	4620      	mov	r0, r4
 800cf04:	b003      	add	sp, #12
 800cf06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf0a:	6161      	str	r1, [r4, #20]
 800cf0c:	e7ea      	b.n	800cee4 <__d2b+0x58>
 800cf0e:	a801      	add	r0, sp, #4
 800cf10:	f7ff fce9 	bl	800c8e6 <__lo0bits>
 800cf14:	9b01      	ldr	r3, [sp, #4]
 800cf16:	6163      	str	r3, [r4, #20]
 800cf18:	3020      	adds	r0, #32
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	e7e8      	b.n	800cef0 <__d2b+0x64>
 800cf1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cf22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cf26:	6038      	str	r0, [r7, #0]
 800cf28:	6918      	ldr	r0, [r3, #16]
 800cf2a:	f7ff fcbd 	bl	800c8a8 <__hi0bits>
 800cf2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf32:	e7e5      	b.n	800cf00 <__d2b+0x74>
 800cf34:	0800da55 	.word	0x0800da55
 800cf38:	0800dad7 	.word	0x0800dad7

0800cf3c <__ratio>:
 800cf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf40:	b085      	sub	sp, #20
 800cf42:	e9cd 1000 	strd	r1, r0, [sp]
 800cf46:	a902      	add	r1, sp, #8
 800cf48:	f7ff ff56 	bl	800cdf8 <__b2d>
 800cf4c:	9800      	ldr	r0, [sp, #0]
 800cf4e:	a903      	add	r1, sp, #12
 800cf50:	ec55 4b10 	vmov	r4, r5, d0
 800cf54:	f7ff ff50 	bl	800cdf8 <__b2d>
 800cf58:	9b01      	ldr	r3, [sp, #4]
 800cf5a:	6919      	ldr	r1, [r3, #16]
 800cf5c:	9b00      	ldr	r3, [sp, #0]
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	1ac9      	subs	r1, r1, r3
 800cf62:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cf66:	1a9b      	subs	r3, r3, r2
 800cf68:	ec5b ab10 	vmov	sl, fp, d0
 800cf6c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	bfce      	itee	gt
 800cf74:	462a      	movgt	r2, r5
 800cf76:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cf7a:	465a      	movle	r2, fp
 800cf7c:	462f      	mov	r7, r5
 800cf7e:	46d9      	mov	r9, fp
 800cf80:	bfcc      	ite	gt
 800cf82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cf86:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800cf8a:	464b      	mov	r3, r9
 800cf8c:	4652      	mov	r2, sl
 800cf8e:	4620      	mov	r0, r4
 800cf90:	4639      	mov	r1, r7
 800cf92:	f7f3 fc5b 	bl	800084c <__aeabi_ddiv>
 800cf96:	ec41 0b10 	vmov	d0, r0, r1
 800cf9a:	b005      	add	sp, #20
 800cf9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cfa0 <__copybits>:
 800cfa0:	3901      	subs	r1, #1
 800cfa2:	b570      	push	{r4, r5, r6, lr}
 800cfa4:	1149      	asrs	r1, r1, #5
 800cfa6:	6914      	ldr	r4, [r2, #16]
 800cfa8:	3101      	adds	r1, #1
 800cfaa:	f102 0314 	add.w	r3, r2, #20
 800cfae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cfb2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cfb6:	1f05      	subs	r5, r0, #4
 800cfb8:	42a3      	cmp	r3, r4
 800cfba:	d30c      	bcc.n	800cfd6 <__copybits+0x36>
 800cfbc:	1aa3      	subs	r3, r4, r2
 800cfbe:	3b11      	subs	r3, #17
 800cfc0:	f023 0303 	bic.w	r3, r3, #3
 800cfc4:	3211      	adds	r2, #17
 800cfc6:	42a2      	cmp	r2, r4
 800cfc8:	bf88      	it	hi
 800cfca:	2300      	movhi	r3, #0
 800cfcc:	4418      	add	r0, r3
 800cfce:	2300      	movs	r3, #0
 800cfd0:	4288      	cmp	r0, r1
 800cfd2:	d305      	bcc.n	800cfe0 <__copybits+0x40>
 800cfd4:	bd70      	pop	{r4, r5, r6, pc}
 800cfd6:	f853 6b04 	ldr.w	r6, [r3], #4
 800cfda:	f845 6f04 	str.w	r6, [r5, #4]!
 800cfde:	e7eb      	b.n	800cfb8 <__copybits+0x18>
 800cfe0:	f840 3b04 	str.w	r3, [r0], #4
 800cfe4:	e7f4      	b.n	800cfd0 <__copybits+0x30>

0800cfe6 <__any_on>:
 800cfe6:	f100 0214 	add.w	r2, r0, #20
 800cfea:	6900      	ldr	r0, [r0, #16]
 800cfec:	114b      	asrs	r3, r1, #5
 800cfee:	4298      	cmp	r0, r3
 800cff0:	b510      	push	{r4, lr}
 800cff2:	db11      	blt.n	800d018 <__any_on+0x32>
 800cff4:	dd0a      	ble.n	800d00c <__any_on+0x26>
 800cff6:	f011 011f 	ands.w	r1, r1, #31
 800cffa:	d007      	beq.n	800d00c <__any_on+0x26>
 800cffc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d000:	fa24 f001 	lsr.w	r0, r4, r1
 800d004:	fa00 f101 	lsl.w	r1, r0, r1
 800d008:	428c      	cmp	r4, r1
 800d00a:	d10b      	bne.n	800d024 <__any_on+0x3e>
 800d00c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d010:	4293      	cmp	r3, r2
 800d012:	d803      	bhi.n	800d01c <__any_on+0x36>
 800d014:	2000      	movs	r0, #0
 800d016:	bd10      	pop	{r4, pc}
 800d018:	4603      	mov	r3, r0
 800d01a:	e7f7      	b.n	800d00c <__any_on+0x26>
 800d01c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d020:	2900      	cmp	r1, #0
 800d022:	d0f5      	beq.n	800d010 <__any_on+0x2a>
 800d024:	2001      	movs	r0, #1
 800d026:	e7f6      	b.n	800d016 <__any_on+0x30>

0800d028 <__sread>:
 800d028:	b510      	push	{r4, lr}
 800d02a:	460c      	mov	r4, r1
 800d02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d030:	f000 f9ce 	bl	800d3d0 <_read_r>
 800d034:	2800      	cmp	r0, #0
 800d036:	bfab      	itete	ge
 800d038:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d03a:	89a3      	ldrhlt	r3, [r4, #12]
 800d03c:	181b      	addge	r3, r3, r0
 800d03e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d042:	bfac      	ite	ge
 800d044:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d046:	81a3      	strhlt	r3, [r4, #12]
 800d048:	bd10      	pop	{r4, pc}

0800d04a <__swrite>:
 800d04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d04e:	461f      	mov	r7, r3
 800d050:	898b      	ldrh	r3, [r1, #12]
 800d052:	05db      	lsls	r3, r3, #23
 800d054:	4605      	mov	r5, r0
 800d056:	460c      	mov	r4, r1
 800d058:	4616      	mov	r6, r2
 800d05a:	d505      	bpl.n	800d068 <__swrite+0x1e>
 800d05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d060:	2302      	movs	r3, #2
 800d062:	2200      	movs	r2, #0
 800d064:	f000 f9a2 	bl	800d3ac <_lseek_r>
 800d068:	89a3      	ldrh	r3, [r4, #12]
 800d06a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d06e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d072:	81a3      	strh	r3, [r4, #12]
 800d074:	4632      	mov	r2, r6
 800d076:	463b      	mov	r3, r7
 800d078:	4628      	mov	r0, r5
 800d07a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d07e:	f000 b9c9 	b.w	800d414 <_write_r>

0800d082 <__sseek>:
 800d082:	b510      	push	{r4, lr}
 800d084:	460c      	mov	r4, r1
 800d086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d08a:	f000 f98f 	bl	800d3ac <_lseek_r>
 800d08e:	1c43      	adds	r3, r0, #1
 800d090:	89a3      	ldrh	r3, [r4, #12]
 800d092:	bf15      	itete	ne
 800d094:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d096:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d09a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d09e:	81a3      	strheq	r3, [r4, #12]
 800d0a0:	bf18      	it	ne
 800d0a2:	81a3      	strhne	r3, [r4, #12]
 800d0a4:	bd10      	pop	{r4, pc}

0800d0a6 <__sclose>:
 800d0a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0aa:	f000 b94d 	b.w	800d348 <_close_r>

0800d0ae <_realloc_r>:
 800d0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b2:	4680      	mov	r8, r0
 800d0b4:	4615      	mov	r5, r2
 800d0b6:	460c      	mov	r4, r1
 800d0b8:	b921      	cbnz	r1, 800d0c4 <_realloc_r+0x16>
 800d0ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0be:	4611      	mov	r1, r2
 800d0c0:	f7ff b9b6 	b.w	800c430 <_malloc_r>
 800d0c4:	b92a      	cbnz	r2, 800d0d2 <_realloc_r+0x24>
 800d0c6:	f000 f9e9 	bl	800d49c <_free_r>
 800d0ca:	2400      	movs	r4, #0
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0d2:	f000 fa2d 	bl	800d530 <_malloc_usable_size_r>
 800d0d6:	4285      	cmp	r5, r0
 800d0d8:	4606      	mov	r6, r0
 800d0da:	d802      	bhi.n	800d0e2 <_realloc_r+0x34>
 800d0dc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d0e0:	d8f4      	bhi.n	800d0cc <_realloc_r+0x1e>
 800d0e2:	4629      	mov	r1, r5
 800d0e4:	4640      	mov	r0, r8
 800d0e6:	f7ff f9a3 	bl	800c430 <_malloc_r>
 800d0ea:	4607      	mov	r7, r0
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	d0ec      	beq.n	800d0ca <_realloc_r+0x1c>
 800d0f0:	42b5      	cmp	r5, r6
 800d0f2:	462a      	mov	r2, r5
 800d0f4:	4621      	mov	r1, r4
 800d0f6:	bf28      	it	cs
 800d0f8:	4632      	movcs	r2, r6
 800d0fa:	f7fd fd30 	bl	800ab5e <memcpy>
 800d0fe:	4621      	mov	r1, r4
 800d100:	4640      	mov	r0, r8
 800d102:	f000 f9cb 	bl	800d49c <_free_r>
 800d106:	463c      	mov	r4, r7
 800d108:	e7e0      	b.n	800d0cc <_realloc_r+0x1e>

0800d10a <__swbuf_r>:
 800d10a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d10c:	460e      	mov	r6, r1
 800d10e:	4614      	mov	r4, r2
 800d110:	4605      	mov	r5, r0
 800d112:	b118      	cbz	r0, 800d11c <__swbuf_r+0x12>
 800d114:	6a03      	ldr	r3, [r0, #32]
 800d116:	b90b      	cbnz	r3, 800d11c <__swbuf_r+0x12>
 800d118:	f7fc fdaa 	bl	8009c70 <__sinit>
 800d11c:	69a3      	ldr	r3, [r4, #24]
 800d11e:	60a3      	str	r3, [r4, #8]
 800d120:	89a3      	ldrh	r3, [r4, #12]
 800d122:	071a      	lsls	r2, r3, #28
 800d124:	d501      	bpl.n	800d12a <__swbuf_r+0x20>
 800d126:	6923      	ldr	r3, [r4, #16]
 800d128:	b943      	cbnz	r3, 800d13c <__swbuf_r+0x32>
 800d12a:	4621      	mov	r1, r4
 800d12c:	4628      	mov	r0, r5
 800d12e:	f000 f82b 	bl	800d188 <__swsetup_r>
 800d132:	b118      	cbz	r0, 800d13c <__swbuf_r+0x32>
 800d134:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d138:	4638      	mov	r0, r7
 800d13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d13c:	6823      	ldr	r3, [r4, #0]
 800d13e:	6922      	ldr	r2, [r4, #16]
 800d140:	1a98      	subs	r0, r3, r2
 800d142:	6963      	ldr	r3, [r4, #20]
 800d144:	b2f6      	uxtb	r6, r6
 800d146:	4283      	cmp	r3, r0
 800d148:	4637      	mov	r7, r6
 800d14a:	dc05      	bgt.n	800d158 <__swbuf_r+0x4e>
 800d14c:	4621      	mov	r1, r4
 800d14e:	4628      	mov	r0, r5
 800d150:	f7ff fa84 	bl	800c65c <_fflush_r>
 800d154:	2800      	cmp	r0, #0
 800d156:	d1ed      	bne.n	800d134 <__swbuf_r+0x2a>
 800d158:	68a3      	ldr	r3, [r4, #8]
 800d15a:	3b01      	subs	r3, #1
 800d15c:	60a3      	str	r3, [r4, #8]
 800d15e:	6823      	ldr	r3, [r4, #0]
 800d160:	1c5a      	adds	r2, r3, #1
 800d162:	6022      	str	r2, [r4, #0]
 800d164:	701e      	strb	r6, [r3, #0]
 800d166:	6962      	ldr	r2, [r4, #20]
 800d168:	1c43      	adds	r3, r0, #1
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d004      	beq.n	800d178 <__swbuf_r+0x6e>
 800d16e:	89a3      	ldrh	r3, [r4, #12]
 800d170:	07db      	lsls	r3, r3, #31
 800d172:	d5e1      	bpl.n	800d138 <__swbuf_r+0x2e>
 800d174:	2e0a      	cmp	r6, #10
 800d176:	d1df      	bne.n	800d138 <__swbuf_r+0x2e>
 800d178:	4621      	mov	r1, r4
 800d17a:	4628      	mov	r0, r5
 800d17c:	f7ff fa6e 	bl	800c65c <_fflush_r>
 800d180:	2800      	cmp	r0, #0
 800d182:	d0d9      	beq.n	800d138 <__swbuf_r+0x2e>
 800d184:	e7d6      	b.n	800d134 <__swbuf_r+0x2a>
	...

0800d188 <__swsetup_r>:
 800d188:	b538      	push	{r3, r4, r5, lr}
 800d18a:	4b29      	ldr	r3, [pc, #164]	@ (800d230 <__swsetup_r+0xa8>)
 800d18c:	4605      	mov	r5, r0
 800d18e:	6818      	ldr	r0, [r3, #0]
 800d190:	460c      	mov	r4, r1
 800d192:	b118      	cbz	r0, 800d19c <__swsetup_r+0x14>
 800d194:	6a03      	ldr	r3, [r0, #32]
 800d196:	b90b      	cbnz	r3, 800d19c <__swsetup_r+0x14>
 800d198:	f7fc fd6a 	bl	8009c70 <__sinit>
 800d19c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1a0:	0719      	lsls	r1, r3, #28
 800d1a2:	d422      	bmi.n	800d1ea <__swsetup_r+0x62>
 800d1a4:	06da      	lsls	r2, r3, #27
 800d1a6:	d407      	bmi.n	800d1b8 <__swsetup_r+0x30>
 800d1a8:	2209      	movs	r2, #9
 800d1aa:	602a      	str	r2, [r5, #0]
 800d1ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1b0:	81a3      	strh	r3, [r4, #12]
 800d1b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d1b6:	e033      	b.n	800d220 <__swsetup_r+0x98>
 800d1b8:	0758      	lsls	r0, r3, #29
 800d1ba:	d512      	bpl.n	800d1e2 <__swsetup_r+0x5a>
 800d1bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1be:	b141      	cbz	r1, 800d1d2 <__swsetup_r+0x4a>
 800d1c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1c4:	4299      	cmp	r1, r3
 800d1c6:	d002      	beq.n	800d1ce <__swsetup_r+0x46>
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	f000 f967 	bl	800d49c <_free_r>
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1d2:	89a3      	ldrh	r3, [r4, #12]
 800d1d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d1d8:	81a3      	strh	r3, [r4, #12]
 800d1da:	2300      	movs	r3, #0
 800d1dc:	6063      	str	r3, [r4, #4]
 800d1de:	6923      	ldr	r3, [r4, #16]
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	89a3      	ldrh	r3, [r4, #12]
 800d1e4:	f043 0308 	orr.w	r3, r3, #8
 800d1e8:	81a3      	strh	r3, [r4, #12]
 800d1ea:	6923      	ldr	r3, [r4, #16]
 800d1ec:	b94b      	cbnz	r3, 800d202 <__swsetup_r+0x7a>
 800d1ee:	89a3      	ldrh	r3, [r4, #12]
 800d1f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d1f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1f8:	d003      	beq.n	800d202 <__swsetup_r+0x7a>
 800d1fa:	4621      	mov	r1, r4
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	f000 f84c 	bl	800d29a <__smakebuf_r>
 800d202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d206:	f013 0201 	ands.w	r2, r3, #1
 800d20a:	d00a      	beq.n	800d222 <__swsetup_r+0x9a>
 800d20c:	2200      	movs	r2, #0
 800d20e:	60a2      	str	r2, [r4, #8]
 800d210:	6962      	ldr	r2, [r4, #20]
 800d212:	4252      	negs	r2, r2
 800d214:	61a2      	str	r2, [r4, #24]
 800d216:	6922      	ldr	r2, [r4, #16]
 800d218:	b942      	cbnz	r2, 800d22c <__swsetup_r+0xa4>
 800d21a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d21e:	d1c5      	bne.n	800d1ac <__swsetup_r+0x24>
 800d220:	bd38      	pop	{r3, r4, r5, pc}
 800d222:	0799      	lsls	r1, r3, #30
 800d224:	bf58      	it	pl
 800d226:	6962      	ldrpl	r2, [r4, #20]
 800d228:	60a2      	str	r2, [r4, #8]
 800d22a:	e7f4      	b.n	800d216 <__swsetup_r+0x8e>
 800d22c:	2000      	movs	r0, #0
 800d22e:	e7f7      	b.n	800d220 <__swsetup_r+0x98>
 800d230:	20000190 	.word	0x20000190

0800d234 <__ascii_wctomb>:
 800d234:	4603      	mov	r3, r0
 800d236:	4608      	mov	r0, r1
 800d238:	b141      	cbz	r1, 800d24c <__ascii_wctomb+0x18>
 800d23a:	2aff      	cmp	r2, #255	@ 0xff
 800d23c:	d904      	bls.n	800d248 <__ascii_wctomb+0x14>
 800d23e:	228a      	movs	r2, #138	@ 0x8a
 800d240:	601a      	str	r2, [r3, #0]
 800d242:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d246:	4770      	bx	lr
 800d248:	700a      	strb	r2, [r1, #0]
 800d24a:	2001      	movs	r0, #1
 800d24c:	4770      	bx	lr

0800d24e <__swhatbuf_r>:
 800d24e:	b570      	push	{r4, r5, r6, lr}
 800d250:	460c      	mov	r4, r1
 800d252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d256:	2900      	cmp	r1, #0
 800d258:	b096      	sub	sp, #88	@ 0x58
 800d25a:	4615      	mov	r5, r2
 800d25c:	461e      	mov	r6, r3
 800d25e:	da0d      	bge.n	800d27c <__swhatbuf_r+0x2e>
 800d260:	89a3      	ldrh	r3, [r4, #12]
 800d262:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d266:	f04f 0100 	mov.w	r1, #0
 800d26a:	bf14      	ite	ne
 800d26c:	2340      	movne	r3, #64	@ 0x40
 800d26e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d272:	2000      	movs	r0, #0
 800d274:	6031      	str	r1, [r6, #0]
 800d276:	602b      	str	r3, [r5, #0]
 800d278:	b016      	add	sp, #88	@ 0x58
 800d27a:	bd70      	pop	{r4, r5, r6, pc}
 800d27c:	466a      	mov	r2, sp
 800d27e:	f000 f873 	bl	800d368 <_fstat_r>
 800d282:	2800      	cmp	r0, #0
 800d284:	dbec      	blt.n	800d260 <__swhatbuf_r+0x12>
 800d286:	9901      	ldr	r1, [sp, #4]
 800d288:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d28c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d290:	4259      	negs	r1, r3
 800d292:	4159      	adcs	r1, r3
 800d294:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d298:	e7eb      	b.n	800d272 <__swhatbuf_r+0x24>

0800d29a <__smakebuf_r>:
 800d29a:	898b      	ldrh	r3, [r1, #12]
 800d29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d29e:	079d      	lsls	r5, r3, #30
 800d2a0:	4606      	mov	r6, r0
 800d2a2:	460c      	mov	r4, r1
 800d2a4:	d507      	bpl.n	800d2b6 <__smakebuf_r+0x1c>
 800d2a6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d2aa:	6023      	str	r3, [r4, #0]
 800d2ac:	6123      	str	r3, [r4, #16]
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	6163      	str	r3, [r4, #20]
 800d2b2:	b003      	add	sp, #12
 800d2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2b6:	ab01      	add	r3, sp, #4
 800d2b8:	466a      	mov	r2, sp
 800d2ba:	f7ff ffc8 	bl	800d24e <__swhatbuf_r>
 800d2be:	9f00      	ldr	r7, [sp, #0]
 800d2c0:	4605      	mov	r5, r0
 800d2c2:	4639      	mov	r1, r7
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	f7ff f8b3 	bl	800c430 <_malloc_r>
 800d2ca:	b948      	cbnz	r0, 800d2e0 <__smakebuf_r+0x46>
 800d2cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2d0:	059a      	lsls	r2, r3, #22
 800d2d2:	d4ee      	bmi.n	800d2b2 <__smakebuf_r+0x18>
 800d2d4:	f023 0303 	bic.w	r3, r3, #3
 800d2d8:	f043 0302 	orr.w	r3, r3, #2
 800d2dc:	81a3      	strh	r3, [r4, #12]
 800d2de:	e7e2      	b.n	800d2a6 <__smakebuf_r+0xc>
 800d2e0:	89a3      	ldrh	r3, [r4, #12]
 800d2e2:	6020      	str	r0, [r4, #0]
 800d2e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2e8:	81a3      	strh	r3, [r4, #12]
 800d2ea:	9b01      	ldr	r3, [sp, #4]
 800d2ec:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d2f0:	b15b      	cbz	r3, 800d30a <__smakebuf_r+0x70>
 800d2f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	f000 f848 	bl	800d38c <_isatty_r>
 800d2fc:	b128      	cbz	r0, 800d30a <__smakebuf_r+0x70>
 800d2fe:	89a3      	ldrh	r3, [r4, #12]
 800d300:	f023 0303 	bic.w	r3, r3, #3
 800d304:	f043 0301 	orr.w	r3, r3, #1
 800d308:	81a3      	strh	r3, [r4, #12]
 800d30a:	89a3      	ldrh	r3, [r4, #12]
 800d30c:	431d      	orrs	r5, r3
 800d30e:	81a5      	strh	r5, [r4, #12]
 800d310:	e7cf      	b.n	800d2b2 <__smakebuf_r+0x18>

0800d312 <memmove>:
 800d312:	4288      	cmp	r0, r1
 800d314:	b510      	push	{r4, lr}
 800d316:	eb01 0402 	add.w	r4, r1, r2
 800d31a:	d902      	bls.n	800d322 <memmove+0x10>
 800d31c:	4284      	cmp	r4, r0
 800d31e:	4623      	mov	r3, r4
 800d320:	d807      	bhi.n	800d332 <memmove+0x20>
 800d322:	1e43      	subs	r3, r0, #1
 800d324:	42a1      	cmp	r1, r4
 800d326:	d008      	beq.n	800d33a <memmove+0x28>
 800d328:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d32c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d330:	e7f8      	b.n	800d324 <memmove+0x12>
 800d332:	4402      	add	r2, r0
 800d334:	4601      	mov	r1, r0
 800d336:	428a      	cmp	r2, r1
 800d338:	d100      	bne.n	800d33c <memmove+0x2a>
 800d33a:	bd10      	pop	{r4, pc}
 800d33c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d340:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d344:	e7f7      	b.n	800d336 <memmove+0x24>
	...

0800d348 <_close_r>:
 800d348:	b538      	push	{r3, r4, r5, lr}
 800d34a:	4d06      	ldr	r5, [pc, #24]	@ (800d364 <_close_r+0x1c>)
 800d34c:	2300      	movs	r3, #0
 800d34e:	4604      	mov	r4, r0
 800d350:	4608      	mov	r0, r1
 800d352:	602b      	str	r3, [r5, #0]
 800d354:	f7f5 fe2e 	bl	8002fb4 <_close>
 800d358:	1c43      	adds	r3, r0, #1
 800d35a:	d102      	bne.n	800d362 <_close_r+0x1a>
 800d35c:	682b      	ldr	r3, [r5, #0]
 800d35e:	b103      	cbz	r3, 800d362 <_close_r+0x1a>
 800d360:	6023      	str	r3, [r4, #0]
 800d362:	bd38      	pop	{r3, r4, r5, pc}
 800d364:	20000508 	.word	0x20000508

0800d368 <_fstat_r>:
 800d368:	b538      	push	{r3, r4, r5, lr}
 800d36a:	4d07      	ldr	r5, [pc, #28]	@ (800d388 <_fstat_r+0x20>)
 800d36c:	2300      	movs	r3, #0
 800d36e:	4604      	mov	r4, r0
 800d370:	4608      	mov	r0, r1
 800d372:	4611      	mov	r1, r2
 800d374:	602b      	str	r3, [r5, #0]
 800d376:	f7f5 fe29 	bl	8002fcc <_fstat>
 800d37a:	1c43      	adds	r3, r0, #1
 800d37c:	d102      	bne.n	800d384 <_fstat_r+0x1c>
 800d37e:	682b      	ldr	r3, [r5, #0]
 800d380:	b103      	cbz	r3, 800d384 <_fstat_r+0x1c>
 800d382:	6023      	str	r3, [r4, #0]
 800d384:	bd38      	pop	{r3, r4, r5, pc}
 800d386:	bf00      	nop
 800d388:	20000508 	.word	0x20000508

0800d38c <_isatty_r>:
 800d38c:	b538      	push	{r3, r4, r5, lr}
 800d38e:	4d06      	ldr	r5, [pc, #24]	@ (800d3a8 <_isatty_r+0x1c>)
 800d390:	2300      	movs	r3, #0
 800d392:	4604      	mov	r4, r0
 800d394:	4608      	mov	r0, r1
 800d396:	602b      	str	r3, [r5, #0]
 800d398:	f7f5 fe28 	bl	8002fec <_isatty>
 800d39c:	1c43      	adds	r3, r0, #1
 800d39e:	d102      	bne.n	800d3a6 <_isatty_r+0x1a>
 800d3a0:	682b      	ldr	r3, [r5, #0]
 800d3a2:	b103      	cbz	r3, 800d3a6 <_isatty_r+0x1a>
 800d3a4:	6023      	str	r3, [r4, #0]
 800d3a6:	bd38      	pop	{r3, r4, r5, pc}
 800d3a8:	20000508 	.word	0x20000508

0800d3ac <_lseek_r>:
 800d3ac:	b538      	push	{r3, r4, r5, lr}
 800d3ae:	4d07      	ldr	r5, [pc, #28]	@ (800d3cc <_lseek_r+0x20>)
 800d3b0:	4604      	mov	r4, r0
 800d3b2:	4608      	mov	r0, r1
 800d3b4:	4611      	mov	r1, r2
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	602a      	str	r2, [r5, #0]
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	f7f5 fe21 	bl	8003002 <_lseek>
 800d3c0:	1c43      	adds	r3, r0, #1
 800d3c2:	d102      	bne.n	800d3ca <_lseek_r+0x1e>
 800d3c4:	682b      	ldr	r3, [r5, #0]
 800d3c6:	b103      	cbz	r3, 800d3ca <_lseek_r+0x1e>
 800d3c8:	6023      	str	r3, [r4, #0]
 800d3ca:	bd38      	pop	{r3, r4, r5, pc}
 800d3cc:	20000508 	.word	0x20000508

0800d3d0 <_read_r>:
 800d3d0:	b538      	push	{r3, r4, r5, lr}
 800d3d2:	4d07      	ldr	r5, [pc, #28]	@ (800d3f0 <_read_r+0x20>)
 800d3d4:	4604      	mov	r4, r0
 800d3d6:	4608      	mov	r0, r1
 800d3d8:	4611      	mov	r1, r2
 800d3da:	2200      	movs	r2, #0
 800d3dc:	602a      	str	r2, [r5, #0]
 800d3de:	461a      	mov	r2, r3
 800d3e0:	f7f5 fdcb 	bl	8002f7a <_read>
 800d3e4:	1c43      	adds	r3, r0, #1
 800d3e6:	d102      	bne.n	800d3ee <_read_r+0x1e>
 800d3e8:	682b      	ldr	r3, [r5, #0]
 800d3ea:	b103      	cbz	r3, 800d3ee <_read_r+0x1e>
 800d3ec:	6023      	str	r3, [r4, #0]
 800d3ee:	bd38      	pop	{r3, r4, r5, pc}
 800d3f0:	20000508 	.word	0x20000508

0800d3f4 <_sbrk_r>:
 800d3f4:	b538      	push	{r3, r4, r5, lr}
 800d3f6:	4d06      	ldr	r5, [pc, #24]	@ (800d410 <_sbrk_r+0x1c>)
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	4604      	mov	r4, r0
 800d3fc:	4608      	mov	r0, r1
 800d3fe:	602b      	str	r3, [r5, #0]
 800d400:	f7f5 fe0c 	bl	800301c <_sbrk>
 800d404:	1c43      	adds	r3, r0, #1
 800d406:	d102      	bne.n	800d40e <_sbrk_r+0x1a>
 800d408:	682b      	ldr	r3, [r5, #0]
 800d40a:	b103      	cbz	r3, 800d40e <_sbrk_r+0x1a>
 800d40c:	6023      	str	r3, [r4, #0]
 800d40e:	bd38      	pop	{r3, r4, r5, pc}
 800d410:	20000508 	.word	0x20000508

0800d414 <_write_r>:
 800d414:	b538      	push	{r3, r4, r5, lr}
 800d416:	4d07      	ldr	r5, [pc, #28]	@ (800d434 <_write_r+0x20>)
 800d418:	4604      	mov	r4, r0
 800d41a:	4608      	mov	r0, r1
 800d41c:	4611      	mov	r1, r2
 800d41e:	2200      	movs	r2, #0
 800d420:	602a      	str	r2, [r5, #0]
 800d422:	461a      	mov	r2, r3
 800d424:	f7f4 f9e0 	bl	80017e8 <_write>
 800d428:	1c43      	adds	r3, r0, #1
 800d42a:	d102      	bne.n	800d432 <_write_r+0x1e>
 800d42c:	682b      	ldr	r3, [r5, #0]
 800d42e:	b103      	cbz	r3, 800d432 <_write_r+0x1e>
 800d430:	6023      	str	r3, [r4, #0]
 800d432:	bd38      	pop	{r3, r4, r5, pc}
 800d434:	20000508 	.word	0x20000508

0800d438 <__assert_func>:
 800d438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d43a:	4614      	mov	r4, r2
 800d43c:	461a      	mov	r2, r3
 800d43e:	4b09      	ldr	r3, [pc, #36]	@ (800d464 <__assert_func+0x2c>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	4605      	mov	r5, r0
 800d444:	68d8      	ldr	r0, [r3, #12]
 800d446:	b954      	cbnz	r4, 800d45e <__assert_func+0x26>
 800d448:	4b07      	ldr	r3, [pc, #28]	@ (800d468 <__assert_func+0x30>)
 800d44a:	461c      	mov	r4, r3
 800d44c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d450:	9100      	str	r1, [sp, #0]
 800d452:	462b      	mov	r3, r5
 800d454:	4905      	ldr	r1, [pc, #20]	@ (800d46c <__assert_func+0x34>)
 800d456:	f000 f873 	bl	800d540 <fiprintf>
 800d45a:	f000 f883 	bl	800d564 <abort>
 800d45e:	4b04      	ldr	r3, [pc, #16]	@ (800d470 <__assert_func+0x38>)
 800d460:	e7f4      	b.n	800d44c <__assert_func+0x14>
 800d462:	bf00      	nop
 800d464:	20000190 	.word	0x20000190
 800d468:	0800dc6b 	.word	0x0800dc6b
 800d46c:	0800dc3d 	.word	0x0800dc3d
 800d470:	0800dc30 	.word	0x0800dc30

0800d474 <_calloc_r>:
 800d474:	b570      	push	{r4, r5, r6, lr}
 800d476:	fba1 5402 	umull	r5, r4, r1, r2
 800d47a:	b93c      	cbnz	r4, 800d48c <_calloc_r+0x18>
 800d47c:	4629      	mov	r1, r5
 800d47e:	f7fe ffd7 	bl	800c430 <_malloc_r>
 800d482:	4606      	mov	r6, r0
 800d484:	b928      	cbnz	r0, 800d492 <_calloc_r+0x1e>
 800d486:	2600      	movs	r6, #0
 800d488:	4630      	mov	r0, r6
 800d48a:	bd70      	pop	{r4, r5, r6, pc}
 800d48c:	220c      	movs	r2, #12
 800d48e:	6002      	str	r2, [r0, #0]
 800d490:	e7f9      	b.n	800d486 <_calloc_r+0x12>
 800d492:	462a      	mov	r2, r5
 800d494:	4621      	mov	r1, r4
 800d496:	f7fd fb29 	bl	800aaec <memset>
 800d49a:	e7f5      	b.n	800d488 <_calloc_r+0x14>

0800d49c <_free_r>:
 800d49c:	b538      	push	{r3, r4, r5, lr}
 800d49e:	4605      	mov	r5, r0
 800d4a0:	2900      	cmp	r1, #0
 800d4a2:	d041      	beq.n	800d528 <_free_r+0x8c>
 800d4a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4a8:	1f0c      	subs	r4, r1, #4
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	bfb8      	it	lt
 800d4ae:	18e4      	addlt	r4, r4, r3
 800d4b0:	f7ff f8fc 	bl	800c6ac <__malloc_lock>
 800d4b4:	4a1d      	ldr	r2, [pc, #116]	@ (800d52c <_free_r+0x90>)
 800d4b6:	6813      	ldr	r3, [r2, #0]
 800d4b8:	b933      	cbnz	r3, 800d4c8 <_free_r+0x2c>
 800d4ba:	6063      	str	r3, [r4, #4]
 800d4bc:	6014      	str	r4, [r2, #0]
 800d4be:	4628      	mov	r0, r5
 800d4c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4c4:	f7ff b8f8 	b.w	800c6b8 <__malloc_unlock>
 800d4c8:	42a3      	cmp	r3, r4
 800d4ca:	d908      	bls.n	800d4de <_free_r+0x42>
 800d4cc:	6820      	ldr	r0, [r4, #0]
 800d4ce:	1821      	adds	r1, r4, r0
 800d4d0:	428b      	cmp	r3, r1
 800d4d2:	bf01      	itttt	eq
 800d4d4:	6819      	ldreq	r1, [r3, #0]
 800d4d6:	685b      	ldreq	r3, [r3, #4]
 800d4d8:	1809      	addeq	r1, r1, r0
 800d4da:	6021      	streq	r1, [r4, #0]
 800d4dc:	e7ed      	b.n	800d4ba <_free_r+0x1e>
 800d4de:	461a      	mov	r2, r3
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	b10b      	cbz	r3, 800d4e8 <_free_r+0x4c>
 800d4e4:	42a3      	cmp	r3, r4
 800d4e6:	d9fa      	bls.n	800d4de <_free_r+0x42>
 800d4e8:	6811      	ldr	r1, [r2, #0]
 800d4ea:	1850      	adds	r0, r2, r1
 800d4ec:	42a0      	cmp	r0, r4
 800d4ee:	d10b      	bne.n	800d508 <_free_r+0x6c>
 800d4f0:	6820      	ldr	r0, [r4, #0]
 800d4f2:	4401      	add	r1, r0
 800d4f4:	1850      	adds	r0, r2, r1
 800d4f6:	4283      	cmp	r3, r0
 800d4f8:	6011      	str	r1, [r2, #0]
 800d4fa:	d1e0      	bne.n	800d4be <_free_r+0x22>
 800d4fc:	6818      	ldr	r0, [r3, #0]
 800d4fe:	685b      	ldr	r3, [r3, #4]
 800d500:	6053      	str	r3, [r2, #4]
 800d502:	4408      	add	r0, r1
 800d504:	6010      	str	r0, [r2, #0]
 800d506:	e7da      	b.n	800d4be <_free_r+0x22>
 800d508:	d902      	bls.n	800d510 <_free_r+0x74>
 800d50a:	230c      	movs	r3, #12
 800d50c:	602b      	str	r3, [r5, #0]
 800d50e:	e7d6      	b.n	800d4be <_free_r+0x22>
 800d510:	6820      	ldr	r0, [r4, #0]
 800d512:	1821      	adds	r1, r4, r0
 800d514:	428b      	cmp	r3, r1
 800d516:	bf04      	itt	eq
 800d518:	6819      	ldreq	r1, [r3, #0]
 800d51a:	685b      	ldreq	r3, [r3, #4]
 800d51c:	6063      	str	r3, [r4, #4]
 800d51e:	bf04      	itt	eq
 800d520:	1809      	addeq	r1, r1, r0
 800d522:	6021      	streq	r1, [r4, #0]
 800d524:	6054      	str	r4, [r2, #4]
 800d526:	e7ca      	b.n	800d4be <_free_r+0x22>
 800d528:	bd38      	pop	{r3, r4, r5, pc}
 800d52a:	bf00      	nop
 800d52c:	20000504 	.word	0x20000504

0800d530 <_malloc_usable_size_r>:
 800d530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d534:	1f18      	subs	r0, r3, #4
 800d536:	2b00      	cmp	r3, #0
 800d538:	bfbc      	itt	lt
 800d53a:	580b      	ldrlt	r3, [r1, r0]
 800d53c:	18c0      	addlt	r0, r0, r3
 800d53e:	4770      	bx	lr

0800d540 <fiprintf>:
 800d540:	b40e      	push	{r1, r2, r3}
 800d542:	b503      	push	{r0, r1, lr}
 800d544:	4601      	mov	r1, r0
 800d546:	ab03      	add	r3, sp, #12
 800d548:	4805      	ldr	r0, [pc, #20]	@ (800d560 <fiprintf+0x20>)
 800d54a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d54e:	6800      	ldr	r0, [r0, #0]
 800d550:	9301      	str	r3, [sp, #4]
 800d552:	f7fe fe2b 	bl	800c1ac <_vfiprintf_r>
 800d556:	b002      	add	sp, #8
 800d558:	f85d eb04 	ldr.w	lr, [sp], #4
 800d55c:	b003      	add	sp, #12
 800d55e:	4770      	bx	lr
 800d560:	20000190 	.word	0x20000190

0800d564 <abort>:
 800d564:	b508      	push	{r3, lr}
 800d566:	2006      	movs	r0, #6
 800d568:	f000 f82c 	bl	800d5c4 <raise>
 800d56c:	2001      	movs	r0, #1
 800d56e:	f7f5 fcf9 	bl	8002f64 <_exit>

0800d572 <_raise_r>:
 800d572:	291f      	cmp	r1, #31
 800d574:	b538      	push	{r3, r4, r5, lr}
 800d576:	4605      	mov	r5, r0
 800d578:	460c      	mov	r4, r1
 800d57a:	d904      	bls.n	800d586 <_raise_r+0x14>
 800d57c:	2316      	movs	r3, #22
 800d57e:	6003      	str	r3, [r0, #0]
 800d580:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d584:	bd38      	pop	{r3, r4, r5, pc}
 800d586:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d588:	b112      	cbz	r2, 800d590 <_raise_r+0x1e>
 800d58a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d58e:	b94b      	cbnz	r3, 800d5a4 <_raise_r+0x32>
 800d590:	4628      	mov	r0, r5
 800d592:	f000 f831 	bl	800d5f8 <_getpid_r>
 800d596:	4622      	mov	r2, r4
 800d598:	4601      	mov	r1, r0
 800d59a:	4628      	mov	r0, r5
 800d59c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5a0:	f000 b818 	b.w	800d5d4 <_kill_r>
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d00a      	beq.n	800d5be <_raise_r+0x4c>
 800d5a8:	1c59      	adds	r1, r3, #1
 800d5aa:	d103      	bne.n	800d5b4 <_raise_r+0x42>
 800d5ac:	2316      	movs	r3, #22
 800d5ae:	6003      	str	r3, [r0, #0]
 800d5b0:	2001      	movs	r0, #1
 800d5b2:	e7e7      	b.n	800d584 <_raise_r+0x12>
 800d5b4:	2100      	movs	r1, #0
 800d5b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	4798      	blx	r3
 800d5be:	2000      	movs	r0, #0
 800d5c0:	e7e0      	b.n	800d584 <_raise_r+0x12>
	...

0800d5c4 <raise>:
 800d5c4:	4b02      	ldr	r3, [pc, #8]	@ (800d5d0 <raise+0xc>)
 800d5c6:	4601      	mov	r1, r0
 800d5c8:	6818      	ldr	r0, [r3, #0]
 800d5ca:	f7ff bfd2 	b.w	800d572 <_raise_r>
 800d5ce:	bf00      	nop
 800d5d0:	20000190 	.word	0x20000190

0800d5d4 <_kill_r>:
 800d5d4:	b538      	push	{r3, r4, r5, lr}
 800d5d6:	4d07      	ldr	r5, [pc, #28]	@ (800d5f4 <_kill_r+0x20>)
 800d5d8:	2300      	movs	r3, #0
 800d5da:	4604      	mov	r4, r0
 800d5dc:	4608      	mov	r0, r1
 800d5de:	4611      	mov	r1, r2
 800d5e0:	602b      	str	r3, [r5, #0]
 800d5e2:	f7f5 fcaf 	bl	8002f44 <_kill>
 800d5e6:	1c43      	adds	r3, r0, #1
 800d5e8:	d102      	bne.n	800d5f0 <_kill_r+0x1c>
 800d5ea:	682b      	ldr	r3, [r5, #0]
 800d5ec:	b103      	cbz	r3, 800d5f0 <_kill_r+0x1c>
 800d5ee:	6023      	str	r3, [r4, #0]
 800d5f0:	bd38      	pop	{r3, r4, r5, pc}
 800d5f2:	bf00      	nop
 800d5f4:	20000508 	.word	0x20000508

0800d5f8 <_getpid_r>:
 800d5f8:	f7f5 bc9c 	b.w	8002f34 <_getpid>

0800d5fc <_init>:
 800d5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5fe:	bf00      	nop
 800d600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d602:	bc08      	pop	{r3}
 800d604:	469e      	mov	lr, r3
 800d606:	4770      	bx	lr

0800d608 <_fini>:
 800d608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60a:	bf00      	nop
 800d60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d60e:	bc08      	pop	{r3}
 800d610:	469e      	mov	lr, r3
 800d612:	4770      	bx	lr
